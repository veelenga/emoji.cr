# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT !

require "../spec_helper"

it "`1F600` (fully-qualified) should match `grinning face` (😀)" do
  "😀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😀"
end
it "`1F603` (fully-qualified) should match `grinning face with big eyes` (😃)" do
  "😃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😃"
end
it "`1F604` (fully-qualified) should match `grinning face with smiling eyes` (😄)" do
  "😄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😄"
end
it "`1F601` (fully-qualified) should match `beaming face with smiling eyes` (😁)" do
  "😁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😁"
end
it "`1F606` (fully-qualified) should match `grinning squinting face` (😆)" do
  "😆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😆"
end
it "`1F605` (fully-qualified) should match `grinning face with sweat` (😅)" do
  "😅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😅"
end
it "`1F923` (fully-qualified) should match `rolling on the floor laughing` (🤣)" do
  "🤣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤣"
end
it "`1F602` (fully-qualified) should match `face with tears of joy` (😂)" do
  "😂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😂"
end
it "`1F642` (fully-qualified) should match `slightly smiling face` (🙂)" do
  "🙂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙂"
end
it "`1F643` (fully-qualified) should match `upside-down face` (🙃)" do
  "🙃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙃"
end
it "`1F609` (fully-qualified) should match `winking face` (😉)" do
  "😉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😉"
end
it "`1F60A` (fully-qualified) should match `smiling face with smiling eyes` (😊)" do
  "😊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😊"
end
it "`1F607` (fully-qualified) should match `smiling face with halo` (😇)" do
  "😇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😇"
end
it "`1F970` (fully-qualified) should match `smiling face with hearts` (🥰)" do
  "🥰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥰"
end
it "`1F60D` (fully-qualified) should match `smiling face with heart-eyes` (😍)" do
  "😍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😍"
end
it "`1F929` (fully-qualified) should match `star-struck` (🤩)" do
  "🤩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤩"
end
it "`1F618` (fully-qualified) should match `face blowing a kiss` (😘)" do
  "😘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😘"
end
it "`1F617` (fully-qualified) should match `kissing face` (😗)" do
  "😗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😗"
end
it "`263A FE0F` (fully-qualified) should match `smiling face` (☺️)" do
  "☺️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☺️"
end
it "`263A` (unqualified) should match `smiling face` (☺)" do
  "☺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☺"
end
it "`1F61A` (fully-qualified) should match `kissing face with closed eyes` (😚)" do
  "😚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😚"
end
it "`1F619` (fully-qualified) should match `kissing face with smiling eyes` (😙)" do
  "😙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😙"
end
it "`1F60B` (fully-qualified) should match `face savoring food` (😋)" do
  "😋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😋"
end
it "`1F61B` (fully-qualified) should match `face with tongue` (😛)" do
  "😛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😛"
end
it "`1F61C` (fully-qualified) should match `winking face with tongue` (😜)" do
  "😜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😜"
end
it "`1F92A` (fully-qualified) should match `zany face` (🤪)" do
  "🤪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤪"
end
it "`1F61D` (fully-qualified) should match `squinting face with tongue` (😝)" do
  "😝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😝"
end
it "`1F911` (fully-qualified) should match `money-mouth face` (🤑)" do
  "🤑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤑"
end
it "`1F917` (fully-qualified) should match `hugging face` (🤗)" do
  "🤗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤗"
end
it "`1F92D` (fully-qualified) should match `face with hand over mouth` (🤭)" do
  "🤭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤭"
end
it "`1F92B` (fully-qualified) should match `shushing face` (🤫)" do
  "🤫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤫"
end
it "`1F914` (fully-qualified) should match `thinking face` (🤔)" do
  "🤔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤔"
end
it "`1F910` (fully-qualified) should match `zipper-mouth face` (🤐)" do
  "🤐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤐"
end
it "`1F928` (fully-qualified) should match `face with raised eyebrow` (🤨)" do
  "🤨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤨"
end
it "`1F610` (fully-qualified) should match `neutral face` (😐)" do
  "😐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😐"
end
it "`1F611` (fully-qualified) should match `expressionless face` (😑)" do
  "😑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😑"
end
it "`1F636` (fully-qualified) should match `face without mouth` (😶)" do
  "😶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😶"
end
it "`1F60F` (fully-qualified) should match `smirking face` (😏)" do
  "😏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😏"
end
it "`1F612` (fully-qualified) should match `unamused face` (😒)" do
  "😒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😒"
end
it "`1F644` (fully-qualified) should match `face with rolling eyes` (🙄)" do
  "🙄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙄"
end
it "`1F62C` (fully-qualified) should match `grimacing face` (😬)" do
  "😬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😬"
end
it "`1F925` (fully-qualified) should match `lying face` (🤥)" do
  "🤥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤥"
end
it "`1F60C` (fully-qualified) should match `relieved face` (😌)" do
  "😌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😌"
end
it "`1F614` (fully-qualified) should match `pensive face` (😔)" do
  "😔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😔"
end
it "`1F62A` (fully-qualified) should match `sleepy face` (😪)" do
  "😪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😪"
end
it "`1F924` (fully-qualified) should match `drooling face` (🤤)" do
  "🤤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤤"
end
it "`1F634` (fully-qualified) should match `sleeping face` (😴)" do
  "😴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😴"
end
it "`1F637` (fully-qualified) should match `face with medical mask` (😷)" do
  "😷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😷"
end
it "`1F912` (fully-qualified) should match `face with thermometer` (🤒)" do
  "🤒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤒"
end
it "`1F915` (fully-qualified) should match `face with head-bandage` (🤕)" do
  "🤕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤕"
end
it "`1F922` (fully-qualified) should match `nauseated face` (🤢)" do
  "🤢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤢"
end
it "`1F92E` (fully-qualified) should match `face vomiting` (🤮)" do
  "🤮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤮"
end
it "`1F927` (fully-qualified) should match `sneezing face` (🤧)" do
  "🤧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤧"
end
it "`1F975` (fully-qualified) should match `hot face` (🥵)" do
  "🥵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥵"
end
it "`1F976` (fully-qualified) should match `cold face` (🥶)" do
  "🥶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥶"
end
it "`1F974` (fully-qualified) should match `woozy face` (🥴)" do
  "🥴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥴"
end
it "`1F635` (fully-qualified) should match `dizzy face` (😵)" do
  "😵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😵"
end
it "`1F92F` (fully-qualified) should match `exploding head` (🤯)" do
  "🤯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤯"
end
it "`1F920` (fully-qualified) should match `cowboy hat face` (🤠)" do
  "🤠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤠"
end
it "`1F973` (fully-qualified) should match `partying face` (🥳)" do
  "🥳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥳"
end
it "`1F60E` (fully-qualified) should match `smiling face with sunglasses` (😎)" do
  "😎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😎"
end
it "`1F913` (fully-qualified) should match `nerd face` (🤓)" do
  "🤓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤓"
end
it "`1F9D0` (fully-qualified) should match `face with monocle` (🧐)" do
  "🧐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧐"
end
it "`1F615` (fully-qualified) should match `confused face` (😕)" do
  "😕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😕"
end
it "`1F61F` (fully-qualified) should match `worried face` (😟)" do
  "😟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😟"
end
it "`1F641` (fully-qualified) should match `slightly frowning face` (🙁)" do
  "🙁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙁"
end
it "`2639 FE0F` (fully-qualified) should match `frowning face` (☹️)" do
  "☹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☹️"
end
it "`2639` (unqualified) should match `frowning face` (☹)" do
  "☹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☹"
end
it "`1F62E` (fully-qualified) should match `face with open mouth` (😮)" do
  "😮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😮"
end
it "`1F62F` (fully-qualified) should match `hushed face` (😯)" do
  "😯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😯"
end
it "`1F632` (fully-qualified) should match `astonished face` (😲)" do
  "😲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😲"
end
it "`1F633` (fully-qualified) should match `flushed face` (😳)" do
  "😳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😳"
end
it "`1F97A` (fully-qualified) should match `pleading face` (🥺)" do
  "🥺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥺"
end
it "`1F626` (fully-qualified) should match `frowning face with open mouth` (😦)" do
  "😦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😦"
end
it "`1F627` (fully-qualified) should match `anguished face` (😧)" do
  "😧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😧"
end
it "`1F628` (fully-qualified) should match `fearful face` (😨)" do
  "😨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😨"
end
it "`1F630` (fully-qualified) should match `anxious face with sweat` (😰)" do
  "😰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😰"
end
it "`1F625` (fully-qualified) should match `sad but relieved face` (😥)" do
  "😥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😥"
end
it "`1F622` (fully-qualified) should match `crying face` (😢)" do
  "😢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😢"
end
it "`1F62D` (fully-qualified) should match `loudly crying face` (😭)" do
  "😭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😭"
end
it "`1F631` (fully-qualified) should match `face screaming in fear` (😱)" do
  "😱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😱"
end
it "`1F616` (fully-qualified) should match `confounded face` (😖)" do
  "😖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😖"
end
it "`1F623` (fully-qualified) should match `persevering face` (😣)" do
  "😣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😣"
end
it "`1F61E` (fully-qualified) should match `disappointed face` (😞)" do
  "😞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😞"
end
it "`1F613` (fully-qualified) should match `downcast face with sweat` (😓)" do
  "😓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😓"
end
it "`1F629` (fully-qualified) should match `weary face` (😩)" do
  "😩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😩"
end
it "`1F62B` (fully-qualified) should match `tired face` (😫)" do
  "😫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😫"
end
it "`1F971` (fully-qualified) should match `yawning face` (🥱)" do
  "🥱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥱"
end
it "`1F624` (fully-qualified) should match `face with steam from nose` (😤)" do
  "😤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😤"
end
it "`1F621` (fully-qualified) should match `pouting face` (😡)" do
  "😡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😡"
end
it "`1F620` (fully-qualified) should match `angry face` (😠)" do
  "😠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😠"
end
it "`1F92C` (fully-qualified) should match `face with symbols on mouth` (🤬)" do
  "🤬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤬"
end
it "`1F608` (fully-qualified) should match `smiling face with horns` (😈)" do
  "😈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😈"
end
it "`1F47F` (fully-qualified) should match `angry face with horns` (👿)" do
  "👿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👿"
end
it "`1F480` (fully-qualified) should match `skull` (💀)" do
  "💀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💀"
end
it "`2620 FE0F` (fully-qualified) should match `skull and crossbones` (☠️)" do
  "☠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☠️"
end
it "`2620` (unqualified) should match `skull and crossbones` (☠)" do
  "☠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☠"
end
it "`1F4A9` (fully-qualified) should match `pile of poo` (💩)" do
  "💩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💩"
end
it "`1F921` (fully-qualified) should match `clown face` (🤡)" do
  "🤡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤡"
end
it "`1F479` (fully-qualified) should match `ogre` (👹)" do
  "👹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👹"
end
it "`1F47A` (fully-qualified) should match `goblin` (👺)" do
  "👺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👺"
end
it "`1F47B` (fully-qualified) should match `ghost` (👻)" do
  "👻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👻"
end
it "`1F47D` (fully-qualified) should match `alien` (👽)" do
  "👽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👽"
end
it "`1F47E` (fully-qualified) should match `alien monster` (👾)" do
  "👾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👾"
end
it "`1F916` (fully-qualified) should match `robot` (🤖)" do
  "🤖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤖"
end
it "`1F63A` (fully-qualified) should match `grinning cat` (😺)" do
  "😺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😺"
end
it "`1F638` (fully-qualified) should match `grinning cat with smiling eyes` (😸)" do
  "😸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😸"
end
it "`1F639` (fully-qualified) should match `cat with tears of joy` (😹)" do
  "😹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😹"
end
it "`1F63B` (fully-qualified) should match `smiling cat with heart-eyes` (😻)" do
  "😻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😻"
end
it "`1F63C` (fully-qualified) should match `cat with wry smile` (😼)" do
  "😼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😼"
end
it "`1F63D` (fully-qualified) should match `kissing cat` (😽)" do
  "😽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😽"
end
it "`1F640` (fully-qualified) should match `weary cat` (🙀)" do
  "🙀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙀"
end
it "`1F63F` (fully-qualified) should match `crying cat` (😿)" do
  "😿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😿"
end
it "`1F63E` (fully-qualified) should match `pouting cat` (😾)" do
  "😾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😾"
end
it "`1F648` (fully-qualified) should match `see-no-evil monkey` (🙈)" do
  "🙈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙈"
end
it "`1F649` (fully-qualified) should match `hear-no-evil monkey` (🙉)" do
  "🙉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙉"
end
it "`1F64A` (fully-qualified) should match `speak-no-evil monkey` (🙊)" do
  "🙊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙊"
end
it "`1F48B` (fully-qualified) should match `kiss mark` (💋)" do
  "💋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💋"
end
it "`1F48C` (fully-qualified) should match `love letter` (💌)" do
  "💌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💌"
end
it "`1F498` (fully-qualified) should match `heart with arrow` (💘)" do
  "💘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💘"
end
it "`1F49D` (fully-qualified) should match `heart with ribbon` (💝)" do
  "💝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💝"
end
it "`1F496` (fully-qualified) should match `sparkling heart` (💖)" do
  "💖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💖"
end
it "`1F497` (fully-qualified) should match `growing heart` (💗)" do
  "💗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💗"
end
it "`1F493` (fully-qualified) should match `beating heart` (💓)" do
  "💓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💓"
end
it "`1F49E` (fully-qualified) should match `revolving hearts` (💞)" do
  "💞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💞"
end
it "`1F495` (fully-qualified) should match `two hearts` (💕)" do
  "💕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💕"
end
it "`1F49F` (fully-qualified) should match `heart decoration` (💟)" do
  "💟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💟"
end
it "`2763 FE0F` (fully-qualified) should match `heart exclamation` (❣️)" do
  "❣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❣️"
end
it "`2763` (unqualified) should match `heart exclamation` (❣)" do
  "❣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❣"
end
it "`1F494` (fully-qualified) should match `broken heart` (💔)" do
  "💔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💔"
end
it "`2764 FE0F` (fully-qualified) should match `red heart` (❤️)" do
  "❤️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❤️"
end
it "`2764` (unqualified) should match `red heart` (❤)" do
  "❤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❤"
end
it "`1F9E1` (fully-qualified) should match `orange heart` (🧡)" do
  "🧡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧡"
end
it "`1F49B` (fully-qualified) should match `yellow heart` (💛)" do
  "💛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💛"
end
it "`1F49A` (fully-qualified) should match `green heart` (💚)" do
  "💚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💚"
end
it "`1F499` (fully-qualified) should match `blue heart` (💙)" do
  "💙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💙"
end
it "`1F49C` (fully-qualified) should match `purple heart` (💜)" do
  "💜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💜"
end
it "`1F90E` (fully-qualified) should match `brown heart` (🤎)" do
  "🤎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤎"
end
it "`1F5A4` (fully-qualified) should match `black heart` (🖤)" do
  "🖤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖤"
end
it "`1F90D` (fully-qualified) should match `white heart` (🤍)" do
  "🤍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤍"
end
it "`1F4AF` (fully-qualified) should match `hundred points` (💯)" do
  "💯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💯"
end
it "`1F4A2` (fully-qualified) should match `anger symbol` (💢)" do
  "💢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💢"
end
it "`1F4A5` (fully-qualified) should match `collision` (💥)" do
  "💥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💥"
end
it "`1F4AB` (fully-qualified) should match `dizzy` (💫)" do
  "💫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💫"
end
it "`1F4A6` (fully-qualified) should match `sweat droplets` (💦)" do
  "💦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💦"
end
it "`1F4A8` (fully-qualified) should match `dashing away` (💨)" do
  "💨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💨"
end
it "`1F573 FE0F` (fully-qualified) should match `hole` (🕳️)" do
  "🕳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕳️"
end
it "`1F573` (unqualified) should match `hole` (🕳)" do
  "🕳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕳"
end
it "`1F4A3` (fully-qualified) should match `bomb` (💣)" do
  "💣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💣"
end
it "`1F4AC` (fully-qualified) should match `speech balloon` (💬)" do
  "💬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💬"
end
it "`1F441 FE0F 200D 1F5E8 FE0F` (fully-qualified) should match `eye in speech bubble` (👁️‍🗨️)" do
  "👁️‍🗨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁️‍🗨️"
end
it "`1F441 200D 1F5E8 FE0F` (unqualified) should match `eye in speech bubble` (👁‍🗨️)" do
  "👁‍🗨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁‍🗨️"
end
it "`1F441 FE0F 200D 1F5E8` (unqualified) should match `eye in speech bubble` (👁️‍🗨)" do
  "👁️‍🗨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁️‍🗨"
end
it "`1F441 200D 1F5E8` (unqualified) should match `eye in speech bubble` (👁‍🗨)" do
  "👁‍🗨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁‍🗨"
end
it "`1F5E8 FE0F` (fully-qualified) should match `left speech bubble` (🗨️)" do
  "🗨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗨️"
end
it "`1F5E8` (unqualified) should match `left speech bubble` (🗨)" do
  "🗨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗨"
end
it "`1F5EF FE0F` (fully-qualified) should match `right anger bubble` (🗯️)" do
  "🗯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗯️"
end
it "`1F5EF` (unqualified) should match `right anger bubble` (🗯)" do
  "🗯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗯"
end
it "`1F4AD` (fully-qualified) should match `thought balloon` (💭)" do
  "💭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💭"
end
it "`1F4A4` (fully-qualified) should match `zzz` (💤)" do
  "💤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💤"
end
it "`1F44B` (fully-qualified) should match `waving hand` (👋)" do
  "👋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋"
end
it "`1F44B 1F3FB` (fully-qualified) should match `waving hand: light skin tone` (👋🏻)" do
  "👋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏻"
end
it "`1F44B 1F3FC` (fully-qualified) should match `waving hand: medium-light skin tone` (👋🏼)" do
  "👋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏼"
end
it "`1F44B 1F3FD` (fully-qualified) should match `waving hand: medium skin tone` (👋🏽)" do
  "👋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏽"
end
it "`1F44B 1F3FE` (fully-qualified) should match `waving hand: medium-dark skin tone` (👋🏾)" do
  "👋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏾"
end
it "`1F44B 1F3FF` (fully-qualified) should match `waving hand: dark skin tone` (👋🏿)" do
  "👋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏿"
end
it "`1F91A` (fully-qualified) should match `raised back of hand` (🤚)" do
  "🤚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚"
end
it "`1F91A 1F3FB` (fully-qualified) should match `raised back of hand: light skin tone` (🤚🏻)" do
  "🤚🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏻"
end
it "`1F91A 1F3FC` (fully-qualified) should match `raised back of hand: medium-light skin tone` (🤚🏼)" do
  "🤚🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏼"
end
it "`1F91A 1F3FD` (fully-qualified) should match `raised back of hand: medium skin tone` (🤚🏽)" do
  "🤚🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏽"
end
it "`1F91A 1F3FE` (fully-qualified) should match `raised back of hand: medium-dark skin tone` (🤚🏾)" do
  "🤚🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏾"
end
it "`1F91A 1F3FF` (fully-qualified) should match `raised back of hand: dark skin tone` (🤚🏿)" do
  "🤚🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏿"
end
it "`1F590 FE0F` (fully-qualified) should match `hand with fingers splayed` (🖐️)" do
  "🖐️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐️"
end
it "`1F590` (unqualified) should match `hand with fingers splayed` (🖐)" do
  "🖐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐"
end
it "`1F590 1F3FB` (fully-qualified) should match `hand with fingers splayed: light skin tone` (🖐🏻)" do
  "🖐🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏻"
end
it "`1F590 1F3FC` (fully-qualified) should match `hand with fingers splayed: medium-light skin tone` (🖐🏼)" do
  "🖐🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏼"
end
it "`1F590 1F3FD` (fully-qualified) should match `hand with fingers splayed: medium skin tone` (🖐🏽)" do
  "🖐🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏽"
end
it "`1F590 1F3FE` (fully-qualified) should match `hand with fingers splayed: medium-dark skin tone` (🖐🏾)" do
  "🖐🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏾"
end
it "`1F590 1F3FF` (fully-qualified) should match `hand with fingers splayed: dark skin tone` (🖐🏿)" do
  "🖐🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏿"
end
it "`270B` (fully-qualified) should match `raised hand` (✋)" do
  "✋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋"
end
it "`270B 1F3FB` (fully-qualified) should match `raised hand: light skin tone` (✋🏻)" do
  "✋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏻"
end
it "`270B 1F3FC` (fully-qualified) should match `raised hand: medium-light skin tone` (✋🏼)" do
  "✋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏼"
end
it "`270B 1F3FD` (fully-qualified) should match `raised hand: medium skin tone` (✋🏽)" do
  "✋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏽"
end
it "`270B 1F3FE` (fully-qualified) should match `raised hand: medium-dark skin tone` (✋🏾)" do
  "✋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏾"
end
it "`270B 1F3FF` (fully-qualified) should match `raised hand: dark skin tone` (✋🏿)" do
  "✋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏿"
end
it "`1F596` (fully-qualified) should match `vulcan salute` (🖖)" do
  "🖖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖"
end
it "`1F596 1F3FB` (fully-qualified) should match `vulcan salute: light skin tone` (🖖🏻)" do
  "🖖🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏻"
end
it "`1F596 1F3FC` (fully-qualified) should match `vulcan salute: medium-light skin tone` (🖖🏼)" do
  "🖖🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏼"
end
it "`1F596 1F3FD` (fully-qualified) should match `vulcan salute: medium skin tone` (🖖🏽)" do
  "🖖🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏽"
end
it "`1F596 1F3FE` (fully-qualified) should match `vulcan salute: medium-dark skin tone` (🖖🏾)" do
  "🖖🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏾"
end
it "`1F596 1F3FF` (fully-qualified) should match `vulcan salute: dark skin tone` (🖖🏿)" do
  "🖖🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏿"
end
it "`1F44C` (fully-qualified) should match `OK hand` (👌)" do
  "👌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌"
end
it "`1F44C 1F3FB` (fully-qualified) should match `OK hand: light skin tone` (👌🏻)" do
  "👌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏻"
end
it "`1F44C 1F3FC` (fully-qualified) should match `OK hand: medium-light skin tone` (👌🏼)" do
  "👌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏼"
end
it "`1F44C 1F3FD` (fully-qualified) should match `OK hand: medium skin tone` (👌🏽)" do
  "👌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏽"
end
it "`1F44C 1F3FE` (fully-qualified) should match `OK hand: medium-dark skin tone` (👌🏾)" do
  "👌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏾"
end
it "`1F44C 1F3FF` (fully-qualified) should match `OK hand: dark skin tone` (👌🏿)" do
  "👌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏿"
end
it "`1F90F` (fully-qualified) should match `pinching hand` (🤏)" do
  "🤏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏"
end
it "`1F90F 1F3FB` (fully-qualified) should match `pinching hand: light skin tone` (🤏🏻)" do
  "🤏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏻"
end
it "`1F90F 1F3FC` (fully-qualified) should match `pinching hand: medium-light skin tone` (🤏🏼)" do
  "🤏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏼"
end
it "`1F90F 1F3FD` (fully-qualified) should match `pinching hand: medium skin tone` (🤏🏽)" do
  "🤏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏽"
end
it "`1F90F 1F3FE` (fully-qualified) should match `pinching hand: medium-dark skin tone` (🤏🏾)" do
  "🤏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏾"
end
it "`1F90F 1F3FF` (fully-qualified) should match `pinching hand: dark skin tone` (🤏🏿)" do
  "🤏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏿"
end
it "`270C FE0F` (fully-qualified) should match `victory hand` (✌️)" do
  "✌️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌️"
end
it "`270C` (unqualified) should match `victory hand` (✌)" do
  "✌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌"
end
it "`270C 1F3FB` (fully-qualified) should match `victory hand: light skin tone` (✌🏻)" do
  "✌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏻"
end
it "`270C 1F3FC` (fully-qualified) should match `victory hand: medium-light skin tone` (✌🏼)" do
  "✌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏼"
end
it "`270C 1F3FD` (fully-qualified) should match `victory hand: medium skin tone` (✌🏽)" do
  "✌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏽"
end
it "`270C 1F3FE` (fully-qualified) should match `victory hand: medium-dark skin tone` (✌🏾)" do
  "✌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏾"
end
it "`270C 1F3FF` (fully-qualified) should match `victory hand: dark skin tone` (✌🏿)" do
  "✌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏿"
end
it "`1F91E` (fully-qualified) should match `crossed fingers` (🤞)" do
  "🤞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞"
end
it "`1F91E 1F3FB` (fully-qualified) should match `crossed fingers: light skin tone` (🤞🏻)" do
  "🤞🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏻"
end
it "`1F91E 1F3FC` (fully-qualified) should match `crossed fingers: medium-light skin tone` (🤞🏼)" do
  "🤞🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏼"
end
it "`1F91E 1F3FD` (fully-qualified) should match `crossed fingers: medium skin tone` (🤞🏽)" do
  "🤞🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏽"
end
it "`1F91E 1F3FE` (fully-qualified) should match `crossed fingers: medium-dark skin tone` (🤞🏾)" do
  "🤞🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏾"
end
it "`1F91E 1F3FF` (fully-qualified) should match `crossed fingers: dark skin tone` (🤞🏿)" do
  "🤞🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏿"
end
it "`1F91F` (fully-qualified) should match `love-you gesture` (🤟)" do
  "🤟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟"
end
it "`1F91F 1F3FB` (fully-qualified) should match `love-you gesture: light skin tone` (🤟🏻)" do
  "🤟🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏻"
end
it "`1F91F 1F3FC` (fully-qualified) should match `love-you gesture: medium-light skin tone` (🤟🏼)" do
  "🤟🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏼"
end
it "`1F91F 1F3FD` (fully-qualified) should match `love-you gesture: medium skin tone` (🤟🏽)" do
  "🤟🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏽"
end
it "`1F91F 1F3FE` (fully-qualified) should match `love-you gesture: medium-dark skin tone` (🤟🏾)" do
  "🤟🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏾"
end
it "`1F91F 1F3FF` (fully-qualified) should match `love-you gesture: dark skin tone` (🤟🏿)" do
  "🤟🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏿"
end
it "`1F918` (fully-qualified) should match `sign of the horns` (🤘)" do
  "🤘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘"
end
it "`1F918 1F3FB` (fully-qualified) should match `sign of the horns: light skin tone` (🤘🏻)" do
  "🤘🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏻"
end
it "`1F918 1F3FC` (fully-qualified) should match `sign of the horns: medium-light skin tone` (🤘🏼)" do
  "🤘🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏼"
end
it "`1F918 1F3FD` (fully-qualified) should match `sign of the horns: medium skin tone` (🤘🏽)" do
  "🤘🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏽"
end
it "`1F918 1F3FE` (fully-qualified) should match `sign of the horns: medium-dark skin tone` (🤘🏾)" do
  "🤘🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏾"
end
it "`1F918 1F3FF` (fully-qualified) should match `sign of the horns: dark skin tone` (🤘🏿)" do
  "🤘🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏿"
end
it "`1F919` (fully-qualified) should match `call me hand` (🤙)" do
  "🤙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙"
end
it "`1F919 1F3FB` (fully-qualified) should match `call me hand: light skin tone` (🤙🏻)" do
  "🤙🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏻"
end
it "`1F919 1F3FC` (fully-qualified) should match `call me hand: medium-light skin tone` (🤙🏼)" do
  "🤙🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏼"
end
it "`1F919 1F3FD` (fully-qualified) should match `call me hand: medium skin tone` (🤙🏽)" do
  "🤙🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏽"
end
it "`1F919 1F3FE` (fully-qualified) should match `call me hand: medium-dark skin tone` (🤙🏾)" do
  "🤙🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏾"
end
it "`1F919 1F3FF` (fully-qualified) should match `call me hand: dark skin tone` (🤙🏿)" do
  "🤙🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏿"
end
it "`1F448` (fully-qualified) should match `backhand index pointing left` (👈)" do
  "👈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈"
end
it "`1F448 1F3FB` (fully-qualified) should match `backhand index pointing left: light skin tone` (👈🏻)" do
  "👈🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏻"
end
it "`1F448 1F3FC` (fully-qualified) should match `backhand index pointing left: medium-light skin tone` (👈🏼)" do
  "👈🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏼"
end
it "`1F448 1F3FD` (fully-qualified) should match `backhand index pointing left: medium skin tone` (👈🏽)" do
  "👈🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏽"
end
it "`1F448 1F3FE` (fully-qualified) should match `backhand index pointing left: medium-dark skin tone` (👈🏾)" do
  "👈🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏾"
end
it "`1F448 1F3FF` (fully-qualified) should match `backhand index pointing left: dark skin tone` (👈🏿)" do
  "👈🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏿"
end
it "`1F449` (fully-qualified) should match `backhand index pointing right` (👉)" do
  "👉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉"
end
it "`1F449 1F3FB` (fully-qualified) should match `backhand index pointing right: light skin tone` (👉🏻)" do
  "👉🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏻"
end
it "`1F449 1F3FC` (fully-qualified) should match `backhand index pointing right: medium-light skin tone` (👉🏼)" do
  "👉🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏼"
end
it "`1F449 1F3FD` (fully-qualified) should match `backhand index pointing right: medium skin tone` (👉🏽)" do
  "👉🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏽"
end
it "`1F449 1F3FE` (fully-qualified) should match `backhand index pointing right: medium-dark skin tone` (👉🏾)" do
  "👉🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏾"
end
it "`1F449 1F3FF` (fully-qualified) should match `backhand index pointing right: dark skin tone` (👉🏿)" do
  "👉🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏿"
end
it "`1F446` (fully-qualified) should match `backhand index pointing up` (👆)" do
  "👆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆"
end
it "`1F446 1F3FB` (fully-qualified) should match `backhand index pointing up: light skin tone` (👆🏻)" do
  "👆🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏻"
end
it "`1F446 1F3FC` (fully-qualified) should match `backhand index pointing up: medium-light skin tone` (👆🏼)" do
  "👆🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏼"
end
it "`1F446 1F3FD` (fully-qualified) should match `backhand index pointing up: medium skin tone` (👆🏽)" do
  "👆🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏽"
end
it "`1F446 1F3FE` (fully-qualified) should match `backhand index pointing up: medium-dark skin tone` (👆🏾)" do
  "👆🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏾"
end
it "`1F446 1F3FF` (fully-qualified) should match `backhand index pointing up: dark skin tone` (👆🏿)" do
  "👆🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏿"
end
it "`1F595` (fully-qualified) should match `middle finger` (🖕)" do
  "🖕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕"
end
it "`1F595 1F3FB` (fully-qualified) should match `middle finger: light skin tone` (🖕🏻)" do
  "🖕🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏻"
end
it "`1F595 1F3FC` (fully-qualified) should match `middle finger: medium-light skin tone` (🖕🏼)" do
  "🖕🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏼"
end
it "`1F595 1F3FD` (fully-qualified) should match `middle finger: medium skin tone` (🖕🏽)" do
  "🖕🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏽"
end
it "`1F595 1F3FE` (fully-qualified) should match `middle finger: medium-dark skin tone` (🖕🏾)" do
  "🖕🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏾"
end
it "`1F595 1F3FF` (fully-qualified) should match `middle finger: dark skin tone` (🖕🏿)" do
  "🖕🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏿"
end
it "`1F447` (fully-qualified) should match `backhand index pointing down` (👇)" do
  "👇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇"
end
it "`1F447 1F3FB` (fully-qualified) should match `backhand index pointing down: light skin tone` (👇🏻)" do
  "👇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏻"
end
it "`1F447 1F3FC` (fully-qualified) should match `backhand index pointing down: medium-light skin tone` (👇🏼)" do
  "👇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏼"
end
it "`1F447 1F3FD` (fully-qualified) should match `backhand index pointing down: medium skin tone` (👇🏽)" do
  "👇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏽"
end
it "`1F447 1F3FE` (fully-qualified) should match `backhand index pointing down: medium-dark skin tone` (👇🏾)" do
  "👇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏾"
end
it "`1F447 1F3FF` (fully-qualified) should match `backhand index pointing down: dark skin tone` (👇🏿)" do
  "👇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏿"
end
it "`261D FE0F` (fully-qualified) should match `index pointing up` (☝️)" do
  "☝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝️"
end
it "`261D` (unqualified) should match `index pointing up` (☝)" do
  "☝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝"
end
it "`261D 1F3FB` (fully-qualified) should match `index pointing up: light skin tone` (☝🏻)" do
  "☝🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏻"
end
it "`261D 1F3FC` (fully-qualified) should match `index pointing up: medium-light skin tone` (☝🏼)" do
  "☝🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏼"
end
it "`261D 1F3FD` (fully-qualified) should match `index pointing up: medium skin tone` (☝🏽)" do
  "☝🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏽"
end
it "`261D 1F3FE` (fully-qualified) should match `index pointing up: medium-dark skin tone` (☝🏾)" do
  "☝🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏾"
end
it "`261D 1F3FF` (fully-qualified) should match `index pointing up: dark skin tone` (☝🏿)" do
  "☝🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏿"
end
it "`1F44D` (fully-qualified) should match `thumbs up` (👍)" do
  "👍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍"
end
it "`1F44D 1F3FB` (fully-qualified) should match `thumbs up: light skin tone` (👍🏻)" do
  "👍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏻"
end
it "`1F44D 1F3FC` (fully-qualified) should match `thumbs up: medium-light skin tone` (👍🏼)" do
  "👍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏼"
end
it "`1F44D 1F3FD` (fully-qualified) should match `thumbs up: medium skin tone` (👍🏽)" do
  "👍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏽"
end
it "`1F44D 1F3FE` (fully-qualified) should match `thumbs up: medium-dark skin tone` (👍🏾)" do
  "👍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏾"
end
it "`1F44D 1F3FF` (fully-qualified) should match `thumbs up: dark skin tone` (👍🏿)" do
  "👍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏿"
end
it "`1F44E` (fully-qualified) should match `thumbs down` (👎)" do
  "👎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎"
end
it "`1F44E 1F3FB` (fully-qualified) should match `thumbs down: light skin tone` (👎🏻)" do
  "👎🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏻"
end
it "`1F44E 1F3FC` (fully-qualified) should match `thumbs down: medium-light skin tone` (👎🏼)" do
  "👎🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏼"
end
it "`1F44E 1F3FD` (fully-qualified) should match `thumbs down: medium skin tone` (👎🏽)" do
  "👎🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏽"
end
it "`1F44E 1F3FE` (fully-qualified) should match `thumbs down: medium-dark skin tone` (👎🏾)" do
  "👎🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏾"
end
it "`1F44E 1F3FF` (fully-qualified) should match `thumbs down: dark skin tone` (👎🏿)" do
  "👎🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏿"
end
it "`270A` (fully-qualified) should match `raised fist` (✊)" do
  "✊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊"
end
it "`270A 1F3FB` (fully-qualified) should match `raised fist: light skin tone` (✊🏻)" do
  "✊🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏻"
end
it "`270A 1F3FC` (fully-qualified) should match `raised fist: medium-light skin tone` (✊🏼)" do
  "✊🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏼"
end
it "`270A 1F3FD` (fully-qualified) should match `raised fist: medium skin tone` (✊🏽)" do
  "✊🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏽"
end
it "`270A 1F3FE` (fully-qualified) should match `raised fist: medium-dark skin tone` (✊🏾)" do
  "✊🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏾"
end
it "`270A 1F3FF` (fully-qualified) should match `raised fist: dark skin tone` (✊🏿)" do
  "✊🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏿"
end
it "`1F44A` (fully-qualified) should match `oncoming fist` (👊)" do
  "👊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊"
end
it "`1F44A 1F3FB` (fully-qualified) should match `oncoming fist: light skin tone` (👊🏻)" do
  "👊🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏻"
end
it "`1F44A 1F3FC` (fully-qualified) should match `oncoming fist: medium-light skin tone` (👊🏼)" do
  "👊🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏼"
end
it "`1F44A 1F3FD` (fully-qualified) should match `oncoming fist: medium skin tone` (👊🏽)" do
  "👊🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏽"
end
it "`1F44A 1F3FE` (fully-qualified) should match `oncoming fist: medium-dark skin tone` (👊🏾)" do
  "👊🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏾"
end
it "`1F44A 1F3FF` (fully-qualified) should match `oncoming fist: dark skin tone` (👊🏿)" do
  "👊🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏿"
end
it "`1F91B` (fully-qualified) should match `left-facing fist` (🤛)" do
  "🤛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛"
end
it "`1F91B 1F3FB` (fully-qualified) should match `left-facing fist: light skin tone` (🤛🏻)" do
  "🤛🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏻"
end
it "`1F91B 1F3FC` (fully-qualified) should match `left-facing fist: medium-light skin tone` (🤛🏼)" do
  "🤛🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏼"
end
it "`1F91B 1F3FD` (fully-qualified) should match `left-facing fist: medium skin tone` (🤛🏽)" do
  "🤛🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏽"
end
it "`1F91B 1F3FE` (fully-qualified) should match `left-facing fist: medium-dark skin tone` (🤛🏾)" do
  "🤛🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏾"
end
it "`1F91B 1F3FF` (fully-qualified) should match `left-facing fist: dark skin tone` (🤛🏿)" do
  "🤛🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏿"
end
it "`1F91C` (fully-qualified) should match `right-facing fist` (🤜)" do
  "🤜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜"
end
it "`1F91C 1F3FB` (fully-qualified) should match `right-facing fist: light skin tone` (🤜🏻)" do
  "🤜🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏻"
end
it "`1F91C 1F3FC` (fully-qualified) should match `right-facing fist: medium-light skin tone` (🤜🏼)" do
  "🤜🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏼"
end
it "`1F91C 1F3FD` (fully-qualified) should match `right-facing fist: medium skin tone` (🤜🏽)" do
  "🤜🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏽"
end
it "`1F91C 1F3FE` (fully-qualified) should match `right-facing fist: medium-dark skin tone` (🤜🏾)" do
  "🤜🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏾"
end
it "`1F91C 1F3FF` (fully-qualified) should match `right-facing fist: dark skin tone` (🤜🏿)" do
  "🤜🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏿"
end
it "`1F44F` (fully-qualified) should match `clapping hands` (👏)" do
  "👏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏"
end
it "`1F44F 1F3FB` (fully-qualified) should match `clapping hands: light skin tone` (👏🏻)" do
  "👏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏻"
end
it "`1F44F 1F3FC` (fully-qualified) should match `clapping hands: medium-light skin tone` (👏🏼)" do
  "👏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏼"
end
it "`1F44F 1F3FD` (fully-qualified) should match `clapping hands: medium skin tone` (👏🏽)" do
  "👏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏽"
end
it "`1F44F 1F3FE` (fully-qualified) should match `clapping hands: medium-dark skin tone` (👏🏾)" do
  "👏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏾"
end
it "`1F44F 1F3FF` (fully-qualified) should match `clapping hands: dark skin tone` (👏🏿)" do
  "👏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏿"
end
it "`1F64C` (fully-qualified) should match `raising hands` (🙌)" do
  "🙌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌"
end
it "`1F64C 1F3FB` (fully-qualified) should match `raising hands: light skin tone` (🙌🏻)" do
  "🙌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏻"
end
it "`1F64C 1F3FC` (fully-qualified) should match `raising hands: medium-light skin tone` (🙌🏼)" do
  "🙌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏼"
end
it "`1F64C 1F3FD` (fully-qualified) should match `raising hands: medium skin tone` (🙌🏽)" do
  "🙌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏽"
end
it "`1F64C 1F3FE` (fully-qualified) should match `raising hands: medium-dark skin tone` (🙌🏾)" do
  "🙌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏾"
end
it "`1F64C 1F3FF` (fully-qualified) should match `raising hands: dark skin tone` (🙌🏿)" do
  "🙌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏿"
end
it "`1F450` (fully-qualified) should match `open hands` (👐)" do
  "👐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐"
end
it "`1F450 1F3FB` (fully-qualified) should match `open hands: light skin tone` (👐🏻)" do
  "👐🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏻"
end
it "`1F450 1F3FC` (fully-qualified) should match `open hands: medium-light skin tone` (👐🏼)" do
  "👐🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏼"
end
it "`1F450 1F3FD` (fully-qualified) should match `open hands: medium skin tone` (👐🏽)" do
  "👐🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏽"
end
it "`1F450 1F3FE` (fully-qualified) should match `open hands: medium-dark skin tone` (👐🏾)" do
  "👐🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏾"
end
it "`1F450 1F3FF` (fully-qualified) should match `open hands: dark skin tone` (👐🏿)" do
  "👐🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏿"
end
it "`1F932` (fully-qualified) should match `palms up together` (🤲)" do
  "🤲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲"
end
it "`1F932 1F3FB` (fully-qualified) should match `palms up together: light skin tone` (🤲🏻)" do
  "🤲🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏻"
end
it "`1F932 1F3FC` (fully-qualified) should match `palms up together: medium-light skin tone` (🤲🏼)" do
  "🤲🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏼"
end
it "`1F932 1F3FD` (fully-qualified) should match `palms up together: medium skin tone` (🤲🏽)" do
  "🤲🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏽"
end
it "`1F932 1F3FE` (fully-qualified) should match `palms up together: medium-dark skin tone` (🤲🏾)" do
  "🤲🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏾"
end
it "`1F932 1F3FF` (fully-qualified) should match `palms up together: dark skin tone` (🤲🏿)" do
  "🤲🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏿"
end
it "`1F91D` (fully-qualified) should match `handshake` (🤝)" do
  "🤝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤝"
end
it "`1F64F` (fully-qualified) should match `folded hands` (🙏)" do
  "🙏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏"
end
it "`1F64F 1F3FB` (fully-qualified) should match `folded hands: light skin tone` (🙏🏻)" do
  "🙏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏻"
end
it "`1F64F 1F3FC` (fully-qualified) should match `folded hands: medium-light skin tone` (🙏🏼)" do
  "🙏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏼"
end
it "`1F64F 1F3FD` (fully-qualified) should match `folded hands: medium skin tone` (🙏🏽)" do
  "🙏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏽"
end
it "`1F64F 1F3FE` (fully-qualified) should match `folded hands: medium-dark skin tone` (🙏🏾)" do
  "🙏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏾"
end
it "`1F64F 1F3FF` (fully-qualified) should match `folded hands: dark skin tone` (🙏🏿)" do
  "🙏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏿"
end
it "`270D FE0F` (fully-qualified) should match `writing hand` (✍️)" do
  "✍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍️"
end
it "`270D` (unqualified) should match `writing hand` (✍)" do
  "✍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍"
end
it "`270D 1F3FB` (fully-qualified) should match `writing hand: light skin tone` (✍🏻)" do
  "✍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏻"
end
it "`270D 1F3FC` (fully-qualified) should match `writing hand: medium-light skin tone` (✍🏼)" do
  "✍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏼"
end
it "`270D 1F3FD` (fully-qualified) should match `writing hand: medium skin tone` (✍🏽)" do
  "✍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏽"
end
it "`270D 1F3FE` (fully-qualified) should match `writing hand: medium-dark skin tone` (✍🏾)" do
  "✍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏾"
end
it "`270D 1F3FF` (fully-qualified) should match `writing hand: dark skin tone` (✍🏿)" do
  "✍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏿"
end
it "`1F485` (fully-qualified) should match `nail polish` (💅)" do
  "💅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅"
end
it "`1F485 1F3FB` (fully-qualified) should match `nail polish: light skin tone` (💅🏻)" do
  "💅🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏻"
end
it "`1F485 1F3FC` (fully-qualified) should match `nail polish: medium-light skin tone` (💅🏼)" do
  "💅🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏼"
end
it "`1F485 1F3FD` (fully-qualified) should match `nail polish: medium skin tone` (💅🏽)" do
  "💅🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏽"
end
it "`1F485 1F3FE` (fully-qualified) should match `nail polish: medium-dark skin tone` (💅🏾)" do
  "💅🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏾"
end
it "`1F485 1F3FF` (fully-qualified) should match `nail polish: dark skin tone` (💅🏿)" do
  "💅🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏿"
end
it "`1F933` (fully-qualified) should match `selfie` (🤳)" do
  "🤳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳"
end
it "`1F933 1F3FB` (fully-qualified) should match `selfie: light skin tone` (🤳🏻)" do
  "🤳🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏻"
end
it "`1F933 1F3FC` (fully-qualified) should match `selfie: medium-light skin tone` (🤳🏼)" do
  "🤳🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏼"
end
it "`1F933 1F3FD` (fully-qualified) should match `selfie: medium skin tone` (🤳🏽)" do
  "🤳🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏽"
end
it "`1F933 1F3FE` (fully-qualified) should match `selfie: medium-dark skin tone` (🤳🏾)" do
  "🤳🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏾"
end
it "`1F933 1F3FF` (fully-qualified) should match `selfie: dark skin tone` (🤳🏿)" do
  "🤳🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏿"
end
it "`1F4AA` (fully-qualified) should match `flexed biceps` (💪)" do
  "💪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪"
end
it "`1F4AA 1F3FB` (fully-qualified) should match `flexed biceps: light skin tone` (💪🏻)" do
  "💪🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏻"
end
it "`1F4AA 1F3FC` (fully-qualified) should match `flexed biceps: medium-light skin tone` (💪🏼)" do
  "💪🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏼"
end
it "`1F4AA 1F3FD` (fully-qualified) should match `flexed biceps: medium skin tone` (💪🏽)" do
  "💪🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏽"
end
it "`1F4AA 1F3FE` (fully-qualified) should match `flexed biceps: medium-dark skin tone` (💪🏾)" do
  "💪🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏾"
end
it "`1F4AA 1F3FF` (fully-qualified) should match `flexed biceps: dark skin tone` (💪🏿)" do
  "💪🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏿"
end
it "`1F9BE` (fully-qualified) should match `mechanical arm` (🦾)" do
  "🦾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦾"
end
it "`1F9BF` (fully-qualified) should match `mechanical leg` (🦿)" do
  "🦿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦿"
end
it "`1F9B5` (fully-qualified) should match `leg` (🦵)" do
  "🦵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵"
end
it "`1F9B5 1F3FB` (fully-qualified) should match `leg: light skin tone` (🦵🏻)" do
  "🦵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏻"
end
it "`1F9B5 1F3FC` (fully-qualified) should match `leg: medium-light skin tone` (🦵🏼)" do
  "🦵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏼"
end
it "`1F9B5 1F3FD` (fully-qualified) should match `leg: medium skin tone` (🦵🏽)" do
  "🦵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏽"
end
it "`1F9B5 1F3FE` (fully-qualified) should match `leg: medium-dark skin tone` (🦵🏾)" do
  "🦵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏾"
end
it "`1F9B5 1F3FF` (fully-qualified) should match `leg: dark skin tone` (🦵🏿)" do
  "🦵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏿"
end
it "`1F9B6` (fully-qualified) should match `foot` (🦶)" do
  "🦶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶"
end
it "`1F9B6 1F3FB` (fully-qualified) should match `foot: light skin tone` (🦶🏻)" do
  "🦶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏻"
end
it "`1F9B6 1F3FC` (fully-qualified) should match `foot: medium-light skin tone` (🦶🏼)" do
  "🦶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏼"
end
it "`1F9B6 1F3FD` (fully-qualified) should match `foot: medium skin tone` (🦶🏽)" do
  "🦶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏽"
end
it "`1F9B6 1F3FE` (fully-qualified) should match `foot: medium-dark skin tone` (🦶🏾)" do
  "🦶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏾"
end
it "`1F9B6 1F3FF` (fully-qualified) should match `foot: dark skin tone` (🦶🏿)" do
  "🦶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏿"
end
it "`1F442` (fully-qualified) should match `ear` (👂)" do
  "👂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂"
end
it "`1F442 1F3FB` (fully-qualified) should match `ear: light skin tone` (👂🏻)" do
  "👂🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏻"
end
it "`1F442 1F3FC` (fully-qualified) should match `ear: medium-light skin tone` (👂🏼)" do
  "👂🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏼"
end
it "`1F442 1F3FD` (fully-qualified) should match `ear: medium skin tone` (👂🏽)" do
  "👂🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏽"
end
it "`1F442 1F3FE` (fully-qualified) should match `ear: medium-dark skin tone` (👂🏾)" do
  "👂🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏾"
end
it "`1F442 1F3FF` (fully-qualified) should match `ear: dark skin tone` (👂🏿)" do
  "👂🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏿"
end
it "`1F9BB` (fully-qualified) should match `ear with hearing aid` (🦻)" do
  "🦻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻"
end
it "`1F9BB 1F3FB` (fully-qualified) should match `ear with hearing aid: light skin tone` (🦻🏻)" do
  "🦻🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏻"
end
it "`1F9BB 1F3FC` (fully-qualified) should match `ear with hearing aid: medium-light skin tone` (🦻🏼)" do
  "🦻🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏼"
end
it "`1F9BB 1F3FD` (fully-qualified) should match `ear with hearing aid: medium skin tone` (🦻🏽)" do
  "🦻🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏽"
end
it "`1F9BB 1F3FE` (fully-qualified) should match `ear with hearing aid: medium-dark skin tone` (🦻🏾)" do
  "🦻🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏾"
end
it "`1F9BB 1F3FF` (fully-qualified) should match `ear with hearing aid: dark skin tone` (🦻🏿)" do
  "🦻🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏿"
end
it "`1F443` (fully-qualified) should match `nose` (👃)" do
  "👃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃"
end
it "`1F443 1F3FB` (fully-qualified) should match `nose: light skin tone` (👃🏻)" do
  "👃🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏻"
end
it "`1F443 1F3FC` (fully-qualified) should match `nose: medium-light skin tone` (👃🏼)" do
  "👃🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏼"
end
it "`1F443 1F3FD` (fully-qualified) should match `nose: medium skin tone` (👃🏽)" do
  "👃🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏽"
end
it "`1F443 1F3FE` (fully-qualified) should match `nose: medium-dark skin tone` (👃🏾)" do
  "👃🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏾"
end
it "`1F443 1F3FF` (fully-qualified) should match `nose: dark skin tone` (👃🏿)" do
  "👃🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏿"
end
it "`1F9E0` (fully-qualified) should match `brain` (🧠)" do
  "🧠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧠"
end
it "`1F9B7` (fully-qualified) should match `tooth` (🦷)" do
  "🦷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦷"
end
it "`1F9B4` (fully-qualified) should match `bone` (🦴)" do
  "🦴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦴"
end
it "`1F440` (fully-qualified) should match `eyes` (👀)" do
  "👀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👀"
end
it "`1F441 FE0F` (fully-qualified) should match `eye` (👁️)" do
  "👁️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁️"
end
it "`1F441` (unqualified) should match `eye` (👁)" do
  "👁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁"
end
it "`1F445` (fully-qualified) should match `tongue` (👅)" do
  "👅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👅"
end
it "`1F444` (fully-qualified) should match `mouth` (👄)" do
  "👄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👄"
end
it "`1F476` (fully-qualified) should match `baby` (👶)" do
  "👶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶"
end
it "`1F476 1F3FB` (fully-qualified) should match `baby: light skin tone` (👶🏻)" do
  "👶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏻"
end
it "`1F476 1F3FC` (fully-qualified) should match `baby: medium-light skin tone` (👶🏼)" do
  "👶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏼"
end
it "`1F476 1F3FD` (fully-qualified) should match `baby: medium skin tone` (👶🏽)" do
  "👶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏽"
end
it "`1F476 1F3FE` (fully-qualified) should match `baby: medium-dark skin tone` (👶🏾)" do
  "👶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏾"
end
it "`1F476 1F3FF` (fully-qualified) should match `baby: dark skin tone` (👶🏿)" do
  "👶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏿"
end
it "`1F9D2` (fully-qualified) should match `child` (🧒)" do
  "🧒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒"
end
it "`1F9D2 1F3FB` (fully-qualified) should match `child: light skin tone` (🧒🏻)" do
  "🧒🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏻"
end
it "`1F9D2 1F3FC` (fully-qualified) should match `child: medium-light skin tone` (🧒🏼)" do
  "🧒🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏼"
end
it "`1F9D2 1F3FD` (fully-qualified) should match `child: medium skin tone` (🧒🏽)" do
  "🧒🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏽"
end
it "`1F9D2 1F3FE` (fully-qualified) should match `child: medium-dark skin tone` (🧒🏾)" do
  "🧒🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏾"
end
it "`1F9D2 1F3FF` (fully-qualified) should match `child: dark skin tone` (🧒🏿)" do
  "🧒🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏿"
end
it "`1F466` (fully-qualified) should match `boy` (👦)" do
  "👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦"
end
it "`1F466 1F3FB` (fully-qualified) should match `boy: light skin tone` (👦🏻)" do
  "👦🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏻"
end
it "`1F466 1F3FC` (fully-qualified) should match `boy: medium-light skin tone` (👦🏼)" do
  "👦🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏼"
end
it "`1F466 1F3FD` (fully-qualified) should match `boy: medium skin tone` (👦🏽)" do
  "👦🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏽"
end
it "`1F466 1F3FE` (fully-qualified) should match `boy: medium-dark skin tone` (👦🏾)" do
  "👦🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏾"
end
it "`1F466 1F3FF` (fully-qualified) should match `boy: dark skin tone` (👦🏿)" do
  "👦🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏿"
end
it "`1F467` (fully-qualified) should match `girl` (👧)" do
  "👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧"
end
it "`1F467 1F3FB` (fully-qualified) should match `girl: light skin tone` (👧🏻)" do
  "👧🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏻"
end
it "`1F467 1F3FC` (fully-qualified) should match `girl: medium-light skin tone` (👧🏼)" do
  "👧🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏼"
end
it "`1F467 1F3FD` (fully-qualified) should match `girl: medium skin tone` (👧🏽)" do
  "👧🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏽"
end
it "`1F467 1F3FE` (fully-qualified) should match `girl: medium-dark skin tone` (👧🏾)" do
  "👧🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏾"
end
it "`1F467 1F3FF` (fully-qualified) should match `girl: dark skin tone` (👧🏿)" do
  "👧🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏿"
end
it "`1F9D1` (fully-qualified) should match `person` (🧑)" do
  "🧑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑"
end
it "`1F9D1 1F3FB` (fully-qualified) should match `person: light skin tone` (🧑🏻)" do
  "🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏻"
end
it "`1F9D1 1F3FC` (fully-qualified) should match `person: medium-light skin tone` (🧑🏼)" do
  "🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏼"
end
it "`1F9D1 1F3FD` (fully-qualified) should match `person: medium skin tone` (🧑🏽)" do
  "🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽"
end
it "`1F9D1 1F3FE` (fully-qualified) should match `person: medium-dark skin tone` (🧑🏾)" do
  "🧑🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾"
end
it "`1F9D1 1F3FF` (fully-qualified) should match `person: dark skin tone` (🧑🏿)" do
  "🧑🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿"
end
it "`1F471` (fully-qualified) should match `person: blond hair` (👱)" do
  "👱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱"
end
it "`1F471 1F3FB` (fully-qualified) should match `person: light skin tone, blond hair` (👱🏻)" do
  "👱🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻"
end
it "`1F471 1F3FC` (fully-qualified) should match `person: medium-light skin tone, blond hair` (👱🏼)" do
  "👱🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼"
end
it "`1F471 1F3FD` (fully-qualified) should match `person: medium skin tone, blond hair` (👱🏽)" do
  "👱🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽"
end
it "`1F471 1F3FE` (fully-qualified) should match `person: medium-dark skin tone, blond hair` (👱🏾)" do
  "👱🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾"
end
it "`1F471 1F3FF` (fully-qualified) should match `person: dark skin tone, blond hair` (👱🏿)" do
  "👱🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿"
end
it "`1F468` (fully-qualified) should match `man` (👨)" do
  "👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨"
end
it "`1F468 1F3FB` (fully-qualified) should match `man: light skin tone` (👨🏻)" do
  "👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻"
end
it "`1F468 1F3FC` (fully-qualified) should match `man: medium-light skin tone` (👨🏼)" do
  "👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼"
end
it "`1F468 1F3FD` (fully-qualified) should match `man: medium skin tone` (👨🏽)" do
  "👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽"
end
it "`1F468 1F3FE` (fully-qualified) should match `man: medium-dark skin tone` (👨🏾)" do
  "👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾"
end
it "`1F468 1F3FF` (fully-qualified) should match `man: dark skin tone` (👨🏿)" do
  "👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿"
end
it "`1F9D4` (fully-qualified) should match `man: beard` (🧔)" do
  "🧔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔"
end
it "`1F9D4 1F3FB` (fully-qualified) should match `man: light skin tone, beard` (🧔🏻)" do
  "🧔🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏻"
end
it "`1F9D4 1F3FC` (fully-qualified) should match `man: medium-light skin tone, beard` (🧔🏼)" do
  "🧔🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏼"
end
it "`1F9D4 1F3FD` (fully-qualified) should match `man: medium skin tone, beard` (🧔🏽)" do
  "🧔🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏽"
end
it "`1F9D4 1F3FE` (fully-qualified) should match `man: medium-dark skin tone, beard` (🧔🏾)" do
  "🧔🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏾"
end
it "`1F9D4 1F3FF` (fully-qualified) should match `man: dark skin tone, beard` (🧔🏿)" do
  "🧔🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏿"
end
it "`1F471 200D 2642 FE0F` (fully-qualified) should match `man: blond hair` (👱‍♂️)" do
  "👱‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♂️"
end
it "`1F471 200D 2642` (minimally-qualified) should match `man: blond hair` (👱‍♂)" do
  "👱‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♂"
end
it "`1F471 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man: light skin tone, blond hair` (👱🏻‍♂️)" do
  "👱🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♂️"
end
it "`1F471 1F3FB 200D 2642` (minimally-qualified) should match `man: light skin tone, blond hair` (👱🏻‍♂)" do
  "👱🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♂"
end
it "`1F471 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man: medium-light skin tone, blond hair` (👱🏼‍♂️)" do
  "👱🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♂️"
end
it "`1F471 1F3FC 200D 2642` (minimally-qualified) should match `man: medium-light skin tone, blond hair` (👱🏼‍♂)" do
  "👱🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♂"
end
it "`1F471 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man: medium skin tone, blond hair` (👱🏽‍♂️)" do
  "👱🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♂️"
end
it "`1F471 1F3FD 200D 2642` (minimally-qualified) should match `man: medium skin tone, blond hair` (👱🏽‍♂)" do
  "👱🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♂"
end
it "`1F471 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man: medium-dark skin tone, blond hair` (👱🏾‍♂️)" do
  "👱🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♂️"
end
it "`1F471 1F3FE 200D 2642` (minimally-qualified) should match `man: medium-dark skin tone, blond hair` (👱🏾‍♂)" do
  "👱🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♂"
end
it "`1F471 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man: dark skin tone, blond hair` (👱🏿‍♂️)" do
  "👱🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♂️"
end
it "`1F471 1F3FF 200D 2642` (minimally-qualified) should match `man: dark skin tone, blond hair` (👱🏿‍♂)" do
  "👱🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♂"
end
it "`1F468 200D 1F9B0` (fully-qualified) should match `man: red hair` (👨‍🦰)" do
  "👨‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦰"
end
it "`1F468 1F3FB 200D 1F9B0` (fully-qualified) should match `man: light skin tone, red hair` (👨🏻‍🦰)" do
  "👨🏻‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦰"
end
it "`1F468 1F3FC 200D 1F9B0` (fully-qualified) should match `man: medium-light skin tone, red hair` (👨🏼‍🦰)" do
  "👨🏼‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦰"
end
it "`1F468 1F3FD 200D 1F9B0` (fully-qualified) should match `man: medium skin tone, red hair` (👨🏽‍🦰)" do
  "👨🏽‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦰"
end
it "`1F468 1F3FE 200D 1F9B0` (fully-qualified) should match `man: medium-dark skin tone, red hair` (👨🏾‍🦰)" do
  "👨🏾‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦰"
end
it "`1F468 1F3FF 200D 1F9B0` (fully-qualified) should match `man: dark skin tone, red hair` (👨🏿‍🦰)" do
  "👨🏿‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦰"
end
it "`1F468 200D 1F9B1` (fully-qualified) should match `man: curly hair` (👨‍🦱)" do
  "👨‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦱"
end
it "`1F468 1F3FB 200D 1F9B1` (fully-qualified) should match `man: light skin tone, curly hair` (👨🏻‍🦱)" do
  "👨🏻‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦱"
end
it "`1F468 1F3FC 200D 1F9B1` (fully-qualified) should match `man: medium-light skin tone, curly hair` (👨🏼‍🦱)" do
  "👨🏼‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦱"
end
it "`1F468 1F3FD 200D 1F9B1` (fully-qualified) should match `man: medium skin tone, curly hair` (👨🏽‍🦱)" do
  "👨🏽‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦱"
end
it "`1F468 1F3FE 200D 1F9B1` (fully-qualified) should match `man: medium-dark skin tone, curly hair` (👨🏾‍🦱)" do
  "👨🏾‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦱"
end
it "`1F468 1F3FF 200D 1F9B1` (fully-qualified) should match `man: dark skin tone, curly hair` (👨🏿‍🦱)" do
  "👨🏿‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦱"
end
it "`1F468 200D 1F9B3` (fully-qualified) should match `man: white hair` (👨‍🦳)" do
  "👨‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦳"
end
it "`1F468 1F3FB 200D 1F9B3` (fully-qualified) should match `man: light skin tone, white hair` (👨🏻‍🦳)" do
  "👨🏻‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦳"
end
it "`1F468 1F3FC 200D 1F9B3` (fully-qualified) should match `man: medium-light skin tone, white hair` (👨🏼‍🦳)" do
  "👨🏼‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦳"
end
it "`1F468 1F3FD 200D 1F9B3` (fully-qualified) should match `man: medium skin tone, white hair` (👨🏽‍🦳)" do
  "👨🏽‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦳"
end
it "`1F468 1F3FE 200D 1F9B3` (fully-qualified) should match `man: medium-dark skin tone, white hair` (👨🏾‍🦳)" do
  "👨🏾‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦳"
end
it "`1F468 1F3FF 200D 1F9B3` (fully-qualified) should match `man: dark skin tone, white hair` (👨🏿‍🦳)" do
  "👨🏿‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦳"
end
it "`1F468 200D 1F9B2` (fully-qualified) should match `man: bald` (👨‍🦲)" do
  "👨‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦲"
end
it "`1F468 1F3FB 200D 1F9B2` (fully-qualified) should match `man: light skin tone, bald` (👨🏻‍🦲)" do
  "👨🏻‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦲"
end
it "`1F468 1F3FC 200D 1F9B2` (fully-qualified) should match `man: medium-light skin tone, bald` (👨🏼‍🦲)" do
  "👨🏼‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦲"
end
it "`1F468 1F3FD 200D 1F9B2` (fully-qualified) should match `man: medium skin tone, bald` (👨🏽‍🦲)" do
  "👨🏽‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦲"
end
it "`1F468 1F3FE 200D 1F9B2` (fully-qualified) should match `man: medium-dark skin tone, bald` (👨🏾‍🦲)" do
  "👨🏾‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦲"
end
it "`1F468 1F3FF 200D 1F9B2` (fully-qualified) should match `man: dark skin tone, bald` (👨🏿‍🦲)" do
  "👨🏿‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦲"
end
it "`1F469` (fully-qualified) should match `woman` (👩)" do
  "👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩"
end
it "`1F469 1F3FB` (fully-qualified) should match `woman: light skin tone` (👩🏻)" do
  "👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻"
end
it "`1F469 1F3FC` (fully-qualified) should match `woman: medium-light skin tone` (👩🏼)" do
  "👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼"
end
it "`1F469 1F3FD` (fully-qualified) should match `woman: medium skin tone` (👩🏽)" do
  "👩🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽"
end
it "`1F469 1F3FE` (fully-qualified) should match `woman: medium-dark skin tone` (👩🏾)" do
  "👩🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾"
end
it "`1F469 1F3FF` (fully-qualified) should match `woman: dark skin tone` (👩🏿)" do
  "👩🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿"
end
it "`1F471 200D 2640 FE0F` (fully-qualified) should match `woman: blond hair` (👱‍♀️)" do
  "👱‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♀️"
end
it "`1F471 200D 2640` (minimally-qualified) should match `woman: blond hair` (👱‍♀)" do
  "👱‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♀"
end
it "`1F471 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman: light skin tone, blond hair` (👱🏻‍♀️)" do
  "👱🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♀️"
end
it "`1F471 1F3FB 200D 2640` (minimally-qualified) should match `woman: light skin tone, blond hair` (👱🏻‍♀)" do
  "👱🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♀"
end
it "`1F471 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman: medium-light skin tone, blond hair` (👱🏼‍♀️)" do
  "👱🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♀️"
end
it "`1F471 1F3FC 200D 2640` (minimally-qualified) should match `woman: medium-light skin tone, blond hair` (👱🏼‍♀)" do
  "👱🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♀"
end
it "`1F471 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman: medium skin tone, blond hair` (👱🏽‍♀️)" do
  "👱🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♀️"
end
it "`1F471 1F3FD 200D 2640` (minimally-qualified) should match `woman: medium skin tone, blond hair` (👱🏽‍♀)" do
  "👱🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♀"
end
it "`1F471 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman: medium-dark skin tone, blond hair` (👱🏾‍♀️)" do
  "👱🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♀️"
end
it "`1F471 1F3FE 200D 2640` (minimally-qualified) should match `woman: medium-dark skin tone, blond hair` (👱🏾‍♀)" do
  "👱🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♀"
end
it "`1F471 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman: dark skin tone, blond hair` (👱🏿‍♀️)" do
  "👱🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♀️"
end
it "`1F471 1F3FF 200D 2640` (minimally-qualified) should match `woman: dark skin tone, blond hair` (👱🏿‍♀)" do
  "👱🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♀"
end
it "`1F469 200D 1F9B0` (fully-qualified) should match `woman: red hair` (👩‍🦰)" do
  "👩‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦰"
end
it "`1F469 1F3FB 200D 1F9B0` (fully-qualified) should match `woman: light skin tone, red hair` (👩🏻‍🦰)" do
  "👩🏻‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦰"
end
it "`1F469 1F3FC 200D 1F9B0` (fully-qualified) should match `woman: medium-light skin tone, red hair` (👩🏼‍🦰)" do
  "👩🏼‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦰"
end
it "`1F469 1F3FD 200D 1F9B0` (fully-qualified) should match `woman: medium skin tone, red hair` (👩🏽‍🦰)" do
  "👩🏽‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦰"
end
it "`1F469 1F3FE 200D 1F9B0` (fully-qualified) should match `woman: medium-dark skin tone, red hair` (👩🏾‍🦰)" do
  "👩🏾‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦰"
end
it "`1F469 1F3FF 200D 1F9B0` (fully-qualified) should match `woman: dark skin tone, red hair` (👩🏿‍🦰)" do
  "👩🏿‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦰"
end
it "`1F469 200D 1F9B1` (fully-qualified) should match `woman: curly hair` (👩‍🦱)" do
  "👩‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦱"
end
it "`1F469 1F3FB 200D 1F9B1` (fully-qualified) should match `woman: light skin tone, curly hair` (👩🏻‍🦱)" do
  "👩🏻‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦱"
end
it "`1F469 1F3FC 200D 1F9B1` (fully-qualified) should match `woman: medium-light skin tone, curly hair` (👩🏼‍🦱)" do
  "👩🏼‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦱"
end
it "`1F469 1F3FD 200D 1F9B1` (fully-qualified) should match `woman: medium skin tone, curly hair` (👩🏽‍🦱)" do
  "👩🏽‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦱"
end
it "`1F469 1F3FE 200D 1F9B1` (fully-qualified) should match `woman: medium-dark skin tone, curly hair` (👩🏾‍🦱)" do
  "👩🏾‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦱"
end
it "`1F469 1F3FF 200D 1F9B1` (fully-qualified) should match `woman: dark skin tone, curly hair` (👩🏿‍🦱)" do
  "👩🏿‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦱"
end
it "`1F469 200D 1F9B3` (fully-qualified) should match `woman: white hair` (👩‍🦳)" do
  "👩‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦳"
end
it "`1F469 1F3FB 200D 1F9B3` (fully-qualified) should match `woman: light skin tone, white hair` (👩🏻‍🦳)" do
  "👩🏻‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦳"
end
it "`1F469 1F3FC 200D 1F9B3` (fully-qualified) should match `woman: medium-light skin tone, white hair` (👩🏼‍🦳)" do
  "👩🏼‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦳"
end
it "`1F469 1F3FD 200D 1F9B3` (fully-qualified) should match `woman: medium skin tone, white hair` (👩🏽‍🦳)" do
  "👩🏽‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦳"
end
it "`1F469 1F3FE 200D 1F9B3` (fully-qualified) should match `woman: medium-dark skin tone, white hair` (👩🏾‍🦳)" do
  "👩🏾‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦳"
end
it "`1F469 1F3FF 200D 1F9B3` (fully-qualified) should match `woman: dark skin tone, white hair` (👩🏿‍🦳)" do
  "👩🏿‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦳"
end
it "`1F469 200D 1F9B2` (fully-qualified) should match `woman: bald` (👩‍🦲)" do
  "👩‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦲"
end
it "`1F469 1F3FB 200D 1F9B2` (fully-qualified) should match `woman: light skin tone, bald` (👩🏻‍🦲)" do
  "👩🏻‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦲"
end
it "`1F469 1F3FC 200D 1F9B2` (fully-qualified) should match `woman: medium-light skin tone, bald` (👩🏼‍🦲)" do
  "👩🏼‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦲"
end
it "`1F469 1F3FD 200D 1F9B2` (fully-qualified) should match `woman: medium skin tone, bald` (👩🏽‍🦲)" do
  "👩🏽‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦲"
end
it "`1F469 1F3FE 200D 1F9B2` (fully-qualified) should match `woman: medium-dark skin tone, bald` (👩🏾‍🦲)" do
  "👩🏾‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦲"
end
it "`1F469 1F3FF 200D 1F9B2` (fully-qualified) should match `woman: dark skin tone, bald` (👩🏿‍🦲)" do
  "👩🏿‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦲"
end
it "`1F9D3` (fully-qualified) should match `older person` (🧓)" do
  "🧓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓"
end
it "`1F9D3 1F3FB` (fully-qualified) should match `older person: light skin tone` (🧓🏻)" do
  "🧓🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏻"
end
it "`1F9D3 1F3FC` (fully-qualified) should match `older person: medium-light skin tone` (🧓🏼)" do
  "🧓🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏼"
end
it "`1F9D3 1F3FD` (fully-qualified) should match `older person: medium skin tone` (🧓🏽)" do
  "🧓🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏽"
end
it "`1F9D3 1F3FE` (fully-qualified) should match `older person: medium-dark skin tone` (🧓🏾)" do
  "🧓🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏾"
end
it "`1F9D3 1F3FF` (fully-qualified) should match `older person: dark skin tone` (🧓🏿)" do
  "🧓🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏿"
end
it "`1F474` (fully-qualified) should match `old man` (👴)" do
  "👴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴"
end
it "`1F474 1F3FB` (fully-qualified) should match `old man: light skin tone` (👴🏻)" do
  "👴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏻"
end
it "`1F474 1F3FC` (fully-qualified) should match `old man: medium-light skin tone` (👴🏼)" do
  "👴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏼"
end
it "`1F474 1F3FD` (fully-qualified) should match `old man: medium skin tone` (👴🏽)" do
  "👴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏽"
end
it "`1F474 1F3FE` (fully-qualified) should match `old man: medium-dark skin tone` (👴🏾)" do
  "👴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏾"
end
it "`1F474 1F3FF` (fully-qualified) should match `old man: dark skin tone` (👴🏿)" do
  "👴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏿"
end
it "`1F475` (fully-qualified) should match `old woman` (👵)" do
  "👵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵"
end
it "`1F475 1F3FB` (fully-qualified) should match `old woman: light skin tone` (👵🏻)" do
  "👵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏻"
end
it "`1F475 1F3FC` (fully-qualified) should match `old woman: medium-light skin tone` (👵🏼)" do
  "👵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏼"
end
it "`1F475 1F3FD` (fully-qualified) should match `old woman: medium skin tone` (👵🏽)" do
  "👵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏽"
end
it "`1F475 1F3FE` (fully-qualified) should match `old woman: medium-dark skin tone` (👵🏾)" do
  "👵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏾"
end
it "`1F475 1F3FF` (fully-qualified) should match `old woman: dark skin tone` (👵🏿)" do
  "👵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏿"
end
it "`1F64D` (fully-qualified) should match `person frowning` (🙍)" do
  "🙍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍"
end
it "`1F64D 1F3FB` (fully-qualified) should match `person frowning: light skin tone` (🙍🏻)" do
  "🙍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻"
end
it "`1F64D 1F3FC` (fully-qualified) should match `person frowning: medium-light skin tone` (🙍🏼)" do
  "🙍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼"
end
it "`1F64D 1F3FD` (fully-qualified) should match `person frowning: medium skin tone` (🙍🏽)" do
  "🙍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽"
end
it "`1F64D 1F3FE` (fully-qualified) should match `person frowning: medium-dark skin tone` (🙍🏾)" do
  "🙍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾"
end
it "`1F64D 1F3FF` (fully-qualified) should match `person frowning: dark skin tone` (🙍🏿)" do
  "🙍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿"
end
it "`1F64D 200D 2642 FE0F` (fully-qualified) should match `man frowning` (🙍‍♂️)" do
  "🙍‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♂️"
end
it "`1F64D 200D 2642` (minimally-qualified) should match `man frowning` (🙍‍♂)" do
  "🙍‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♂"
end
it "`1F64D 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man frowning: light skin tone` (🙍🏻‍♂️)" do
  "🙍🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♂️"
end
it "`1F64D 1F3FB 200D 2642` (minimally-qualified) should match `man frowning: light skin tone` (🙍🏻‍♂)" do
  "🙍🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♂"
end
it "`1F64D 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man frowning: medium-light skin tone` (🙍🏼‍♂️)" do
  "🙍🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♂️"
end
it "`1F64D 1F3FC 200D 2642` (minimally-qualified) should match `man frowning: medium-light skin tone` (🙍🏼‍♂)" do
  "🙍🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♂"
end
it "`1F64D 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man frowning: medium skin tone` (🙍🏽‍♂️)" do
  "🙍🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♂️"
end
it "`1F64D 1F3FD 200D 2642` (minimally-qualified) should match `man frowning: medium skin tone` (🙍🏽‍♂)" do
  "🙍🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♂"
end
it "`1F64D 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man frowning: medium-dark skin tone` (🙍🏾‍♂️)" do
  "🙍🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♂️"
end
it "`1F64D 1F3FE 200D 2642` (minimally-qualified) should match `man frowning: medium-dark skin tone` (🙍🏾‍♂)" do
  "🙍🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♂"
end
it "`1F64D 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man frowning: dark skin tone` (🙍🏿‍♂️)" do
  "🙍🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♂️"
end
it "`1F64D 1F3FF 200D 2642` (minimally-qualified) should match `man frowning: dark skin tone` (🙍🏿‍♂)" do
  "🙍🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♂"
end
it "`1F64D 200D 2640 FE0F` (fully-qualified) should match `woman frowning` (🙍‍♀️)" do
  "🙍‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♀️"
end
it "`1F64D 200D 2640` (minimally-qualified) should match `woman frowning` (🙍‍♀)" do
  "🙍‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♀"
end
it "`1F64D 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman frowning: light skin tone` (🙍🏻‍♀️)" do
  "🙍🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♀️"
end
it "`1F64D 1F3FB 200D 2640` (minimally-qualified) should match `woman frowning: light skin tone` (🙍🏻‍♀)" do
  "🙍🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♀"
end
it "`1F64D 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman frowning: medium-light skin tone` (🙍🏼‍♀️)" do
  "🙍🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♀️"
end
it "`1F64D 1F3FC 200D 2640` (minimally-qualified) should match `woman frowning: medium-light skin tone` (🙍🏼‍♀)" do
  "🙍🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♀"
end
it "`1F64D 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman frowning: medium skin tone` (🙍🏽‍♀️)" do
  "🙍🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♀️"
end
it "`1F64D 1F3FD 200D 2640` (minimally-qualified) should match `woman frowning: medium skin tone` (🙍🏽‍♀)" do
  "🙍🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♀"
end
it "`1F64D 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman frowning: medium-dark skin tone` (🙍🏾‍♀️)" do
  "🙍🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♀️"
end
it "`1F64D 1F3FE 200D 2640` (minimally-qualified) should match `woman frowning: medium-dark skin tone` (🙍🏾‍♀)" do
  "🙍🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♀"
end
it "`1F64D 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman frowning: dark skin tone` (🙍🏿‍♀️)" do
  "🙍🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♀️"
end
it "`1F64D 1F3FF 200D 2640` (minimally-qualified) should match `woman frowning: dark skin tone` (🙍🏿‍♀)" do
  "🙍🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♀"
end
it "`1F64E` (fully-qualified) should match `person pouting` (🙎)" do
  "🙎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎"
end
it "`1F64E 1F3FB` (fully-qualified) should match `person pouting: light skin tone` (🙎🏻)" do
  "🙎🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻"
end
it "`1F64E 1F3FC` (fully-qualified) should match `person pouting: medium-light skin tone` (🙎🏼)" do
  "🙎🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼"
end
it "`1F64E 1F3FD` (fully-qualified) should match `person pouting: medium skin tone` (🙎🏽)" do
  "🙎🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽"
end
it "`1F64E 1F3FE` (fully-qualified) should match `person pouting: medium-dark skin tone` (🙎🏾)" do
  "🙎🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾"
end
it "`1F64E 1F3FF` (fully-qualified) should match `person pouting: dark skin tone` (🙎🏿)" do
  "🙎🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿"
end
it "`1F64E 200D 2642 FE0F` (fully-qualified) should match `man pouting` (🙎‍♂️)" do
  "🙎‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♂️"
end
it "`1F64E 200D 2642` (minimally-qualified) should match `man pouting` (🙎‍♂)" do
  "🙎‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♂"
end
it "`1F64E 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man pouting: light skin tone` (🙎🏻‍♂️)" do
  "🙎🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♂️"
end
it "`1F64E 1F3FB 200D 2642` (minimally-qualified) should match `man pouting: light skin tone` (🙎🏻‍♂)" do
  "🙎🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♂"
end
it "`1F64E 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man pouting: medium-light skin tone` (🙎🏼‍♂️)" do
  "🙎🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♂️"
end
it "`1F64E 1F3FC 200D 2642` (minimally-qualified) should match `man pouting: medium-light skin tone` (🙎🏼‍♂)" do
  "🙎🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♂"
end
it "`1F64E 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man pouting: medium skin tone` (🙎🏽‍♂️)" do
  "🙎🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♂️"
end
it "`1F64E 1F3FD 200D 2642` (minimally-qualified) should match `man pouting: medium skin tone` (🙎🏽‍♂)" do
  "🙎🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♂"
end
it "`1F64E 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man pouting: medium-dark skin tone` (🙎🏾‍♂️)" do
  "🙎🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♂️"
end
it "`1F64E 1F3FE 200D 2642` (minimally-qualified) should match `man pouting: medium-dark skin tone` (🙎🏾‍♂)" do
  "🙎🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♂"
end
it "`1F64E 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man pouting: dark skin tone` (🙎🏿‍♂️)" do
  "🙎🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♂️"
end
it "`1F64E 1F3FF 200D 2642` (minimally-qualified) should match `man pouting: dark skin tone` (🙎🏿‍♂)" do
  "🙎🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♂"
end
it "`1F64E 200D 2640 FE0F` (fully-qualified) should match `woman pouting` (🙎‍♀️)" do
  "🙎‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♀️"
end
it "`1F64E 200D 2640` (minimally-qualified) should match `woman pouting` (🙎‍♀)" do
  "🙎‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♀"
end
it "`1F64E 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman pouting: light skin tone` (🙎🏻‍♀️)" do
  "🙎🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♀️"
end
it "`1F64E 1F3FB 200D 2640` (minimally-qualified) should match `woman pouting: light skin tone` (🙎🏻‍♀)" do
  "🙎🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♀"
end
it "`1F64E 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman pouting: medium-light skin tone` (🙎🏼‍♀️)" do
  "🙎🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♀️"
end
it "`1F64E 1F3FC 200D 2640` (minimally-qualified) should match `woman pouting: medium-light skin tone` (🙎🏼‍♀)" do
  "🙎🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♀"
end
it "`1F64E 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman pouting: medium skin tone` (🙎🏽‍♀️)" do
  "🙎🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♀️"
end
it "`1F64E 1F3FD 200D 2640` (minimally-qualified) should match `woman pouting: medium skin tone` (🙎🏽‍♀)" do
  "🙎🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♀"
end
it "`1F64E 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman pouting: medium-dark skin tone` (🙎🏾‍♀️)" do
  "🙎🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♀️"
end
it "`1F64E 1F3FE 200D 2640` (minimally-qualified) should match `woman pouting: medium-dark skin tone` (🙎🏾‍♀)" do
  "🙎🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♀"
end
it "`1F64E 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman pouting: dark skin tone` (🙎🏿‍♀️)" do
  "🙎🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♀️"
end
it "`1F64E 1F3FF 200D 2640` (minimally-qualified) should match `woman pouting: dark skin tone` (🙎🏿‍♀)" do
  "🙎🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♀"
end
it "`1F645` (fully-qualified) should match `person gesturing NO` (🙅)" do
  "🙅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅"
end
it "`1F645 1F3FB` (fully-qualified) should match `person gesturing NO: light skin tone` (🙅🏻)" do
  "🙅🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻"
end
it "`1F645 1F3FC` (fully-qualified) should match `person gesturing NO: medium-light skin tone` (🙅🏼)" do
  "🙅🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼"
end
it "`1F645 1F3FD` (fully-qualified) should match `person gesturing NO: medium skin tone` (🙅🏽)" do
  "🙅🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽"
end
it "`1F645 1F3FE` (fully-qualified) should match `person gesturing NO: medium-dark skin tone` (🙅🏾)" do
  "🙅🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾"
end
it "`1F645 1F3FF` (fully-qualified) should match `person gesturing NO: dark skin tone` (🙅🏿)" do
  "🙅🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿"
end
it "`1F645 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO` (🙅‍♂️)" do
  "🙅‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♂️"
end
it "`1F645 200D 2642` (minimally-qualified) should match `man gesturing NO` (🙅‍♂)" do
  "🙅‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♂"
end
it "`1F645 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: light skin tone` (🙅🏻‍♂️)" do
  "🙅🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♂️"
end
it "`1F645 1F3FB 200D 2642` (minimally-qualified) should match `man gesturing NO: light skin tone` (🙅🏻‍♂)" do
  "🙅🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♂"
end
it "`1F645 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: medium-light skin tone` (🙅🏼‍♂️)" do
  "🙅🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♂️"
end
it "`1F645 1F3FC 200D 2642` (minimally-qualified) should match `man gesturing NO: medium-light skin tone` (🙅🏼‍♂)" do
  "🙅🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♂"
end
it "`1F645 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: medium skin tone` (🙅🏽‍♂️)" do
  "🙅🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♂️"
end
it "`1F645 1F3FD 200D 2642` (minimally-qualified) should match `man gesturing NO: medium skin tone` (🙅🏽‍♂)" do
  "🙅🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♂"
end
it "`1F645 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: medium-dark skin tone` (🙅🏾‍♂️)" do
  "🙅🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♂️"
end
it "`1F645 1F3FE 200D 2642` (minimally-qualified) should match `man gesturing NO: medium-dark skin tone` (🙅🏾‍♂)" do
  "🙅🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♂"
end
it "`1F645 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: dark skin tone` (🙅🏿‍♂️)" do
  "🙅🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♂️"
end
it "`1F645 1F3FF 200D 2642` (minimally-qualified) should match `man gesturing NO: dark skin tone` (🙅🏿‍♂)" do
  "🙅🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♂"
end
it "`1F645 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO` (🙅‍♀️)" do
  "🙅‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♀️"
end
it "`1F645 200D 2640` (minimally-qualified) should match `woman gesturing NO` (🙅‍♀)" do
  "🙅‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♀"
end
it "`1F645 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: light skin tone` (🙅🏻‍♀️)" do
  "🙅🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♀️"
end
it "`1F645 1F3FB 200D 2640` (minimally-qualified) should match `woman gesturing NO: light skin tone` (🙅🏻‍♀)" do
  "🙅🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♀"
end
it "`1F645 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: medium-light skin tone` (🙅🏼‍♀️)" do
  "🙅🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♀️"
end
it "`1F645 1F3FC 200D 2640` (minimally-qualified) should match `woman gesturing NO: medium-light skin tone` (🙅🏼‍♀)" do
  "🙅🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♀"
end
it "`1F645 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: medium skin tone` (🙅🏽‍♀️)" do
  "🙅🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♀️"
end
it "`1F645 1F3FD 200D 2640` (minimally-qualified) should match `woman gesturing NO: medium skin tone` (🙅🏽‍♀)" do
  "🙅🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♀"
end
it "`1F645 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: medium-dark skin tone` (🙅🏾‍♀️)" do
  "🙅🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♀️"
end
it "`1F645 1F3FE 200D 2640` (minimally-qualified) should match `woman gesturing NO: medium-dark skin tone` (🙅🏾‍♀)" do
  "🙅🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♀"
end
it "`1F645 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: dark skin tone` (🙅🏿‍♀️)" do
  "🙅🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♀️"
end
it "`1F645 1F3FF 200D 2640` (minimally-qualified) should match `woman gesturing NO: dark skin tone` (🙅🏿‍♀)" do
  "🙅🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♀"
end
it "`1F646` (fully-qualified) should match `person gesturing OK` (🙆)" do
  "🙆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆"
end
it "`1F646 1F3FB` (fully-qualified) should match `person gesturing OK: light skin tone` (🙆🏻)" do
  "🙆🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻"
end
it "`1F646 1F3FC` (fully-qualified) should match `person gesturing OK: medium-light skin tone` (🙆🏼)" do
  "🙆🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼"
end
it "`1F646 1F3FD` (fully-qualified) should match `person gesturing OK: medium skin tone` (🙆🏽)" do
  "🙆🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽"
end
it "`1F646 1F3FE` (fully-qualified) should match `person gesturing OK: medium-dark skin tone` (🙆🏾)" do
  "🙆🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾"
end
it "`1F646 1F3FF` (fully-qualified) should match `person gesturing OK: dark skin tone` (🙆🏿)" do
  "🙆🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿"
end
it "`1F646 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK` (🙆‍♂️)" do
  "🙆‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♂️"
end
it "`1F646 200D 2642` (minimally-qualified) should match `man gesturing OK` (🙆‍♂)" do
  "🙆‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♂"
end
it "`1F646 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: light skin tone` (🙆🏻‍♂️)" do
  "🙆🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♂️"
end
it "`1F646 1F3FB 200D 2642` (minimally-qualified) should match `man gesturing OK: light skin tone` (🙆🏻‍♂)" do
  "🙆🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♂"
end
it "`1F646 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: medium-light skin tone` (🙆🏼‍♂️)" do
  "🙆🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♂️"
end
it "`1F646 1F3FC 200D 2642` (minimally-qualified) should match `man gesturing OK: medium-light skin tone` (🙆🏼‍♂)" do
  "🙆🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♂"
end
it "`1F646 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: medium skin tone` (🙆🏽‍♂️)" do
  "🙆🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♂️"
end
it "`1F646 1F3FD 200D 2642` (minimally-qualified) should match `man gesturing OK: medium skin tone` (🙆🏽‍♂)" do
  "🙆🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♂"
end
it "`1F646 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: medium-dark skin tone` (🙆🏾‍♂️)" do
  "🙆🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♂️"
end
it "`1F646 1F3FE 200D 2642` (minimally-qualified) should match `man gesturing OK: medium-dark skin tone` (🙆🏾‍♂)" do
  "🙆🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♂"
end
it "`1F646 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: dark skin tone` (🙆🏿‍♂️)" do
  "🙆🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♂️"
end
it "`1F646 1F3FF 200D 2642` (minimally-qualified) should match `man gesturing OK: dark skin tone` (🙆🏿‍♂)" do
  "🙆🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♂"
end
it "`1F646 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK` (🙆‍♀️)" do
  "🙆‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♀️"
end
it "`1F646 200D 2640` (minimally-qualified) should match `woman gesturing OK` (🙆‍♀)" do
  "🙆‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♀"
end
it "`1F646 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: light skin tone` (🙆🏻‍♀️)" do
  "🙆🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♀️"
end
it "`1F646 1F3FB 200D 2640` (minimally-qualified) should match `woman gesturing OK: light skin tone` (🙆🏻‍♀)" do
  "🙆🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♀"
end
it "`1F646 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: medium-light skin tone` (🙆🏼‍♀️)" do
  "🙆🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♀️"
end
it "`1F646 1F3FC 200D 2640` (minimally-qualified) should match `woman gesturing OK: medium-light skin tone` (🙆🏼‍♀)" do
  "🙆🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♀"
end
it "`1F646 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: medium skin tone` (🙆🏽‍♀️)" do
  "🙆🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♀️"
end
it "`1F646 1F3FD 200D 2640` (minimally-qualified) should match `woman gesturing OK: medium skin tone` (🙆🏽‍♀)" do
  "🙆🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♀"
end
it "`1F646 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: medium-dark skin tone` (🙆🏾‍♀️)" do
  "🙆🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♀️"
end
it "`1F646 1F3FE 200D 2640` (minimally-qualified) should match `woman gesturing OK: medium-dark skin tone` (🙆🏾‍♀)" do
  "🙆🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♀"
end
it "`1F646 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: dark skin tone` (🙆🏿‍♀️)" do
  "🙆🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♀️"
end
it "`1F646 1F3FF 200D 2640` (minimally-qualified) should match `woman gesturing OK: dark skin tone` (🙆🏿‍♀)" do
  "🙆🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♀"
end
it "`1F481` (fully-qualified) should match `person tipping hand` (💁)" do
  "💁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁"
end
it "`1F481 1F3FB` (fully-qualified) should match `person tipping hand: light skin tone` (💁🏻)" do
  "💁🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻"
end
it "`1F481 1F3FC` (fully-qualified) should match `person tipping hand: medium-light skin tone` (💁🏼)" do
  "💁🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼"
end
it "`1F481 1F3FD` (fully-qualified) should match `person tipping hand: medium skin tone` (💁🏽)" do
  "💁🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽"
end
it "`1F481 1F3FE` (fully-qualified) should match `person tipping hand: medium-dark skin tone` (💁🏾)" do
  "💁🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾"
end
it "`1F481 1F3FF` (fully-qualified) should match `person tipping hand: dark skin tone` (💁🏿)" do
  "💁🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿"
end
it "`1F481 200D 2642 FE0F` (fully-qualified) should match `man tipping hand` (💁‍♂️)" do
  "💁‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♂️"
end
it "`1F481 200D 2642` (minimally-qualified) should match `man tipping hand` (💁‍♂)" do
  "💁‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♂"
end
it "`1F481 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: light skin tone` (💁🏻‍♂️)" do
  "💁🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♂️"
end
it "`1F481 1F3FB 200D 2642` (minimally-qualified) should match `man tipping hand: light skin tone` (💁🏻‍♂)" do
  "💁🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♂"
end
it "`1F481 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: medium-light skin tone` (💁🏼‍♂️)" do
  "💁🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♂️"
end
it "`1F481 1F3FC 200D 2642` (minimally-qualified) should match `man tipping hand: medium-light skin tone` (💁🏼‍♂)" do
  "💁🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♂"
end
it "`1F481 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: medium skin tone` (💁🏽‍♂️)" do
  "💁🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♂️"
end
it "`1F481 1F3FD 200D 2642` (minimally-qualified) should match `man tipping hand: medium skin tone` (💁🏽‍♂)" do
  "💁🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♂"
end
it "`1F481 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: medium-dark skin tone` (💁🏾‍♂️)" do
  "💁🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♂️"
end
it "`1F481 1F3FE 200D 2642` (minimally-qualified) should match `man tipping hand: medium-dark skin tone` (💁🏾‍♂)" do
  "💁🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♂"
end
it "`1F481 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: dark skin tone` (💁🏿‍♂️)" do
  "💁🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♂️"
end
it "`1F481 1F3FF 200D 2642` (minimally-qualified) should match `man tipping hand: dark skin tone` (💁🏿‍♂)" do
  "💁🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♂"
end
it "`1F481 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand` (💁‍♀️)" do
  "💁‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♀️"
end
it "`1F481 200D 2640` (minimally-qualified) should match `woman tipping hand` (💁‍♀)" do
  "💁‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♀"
end
it "`1F481 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: light skin tone` (💁🏻‍♀️)" do
  "💁🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♀️"
end
it "`1F481 1F3FB 200D 2640` (minimally-qualified) should match `woman tipping hand: light skin tone` (💁🏻‍♀)" do
  "💁🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♀"
end
it "`1F481 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: medium-light skin tone` (💁🏼‍♀️)" do
  "💁🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♀️"
end
it "`1F481 1F3FC 200D 2640` (minimally-qualified) should match `woman tipping hand: medium-light skin tone` (💁🏼‍♀)" do
  "💁🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♀"
end
it "`1F481 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: medium skin tone` (💁🏽‍♀️)" do
  "💁🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♀️"
end
it "`1F481 1F3FD 200D 2640` (minimally-qualified) should match `woman tipping hand: medium skin tone` (💁🏽‍♀)" do
  "💁🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♀"
end
it "`1F481 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: medium-dark skin tone` (💁🏾‍♀️)" do
  "💁🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♀️"
end
it "`1F481 1F3FE 200D 2640` (minimally-qualified) should match `woman tipping hand: medium-dark skin tone` (💁🏾‍♀)" do
  "💁🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♀"
end
it "`1F481 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: dark skin tone` (💁🏿‍♀️)" do
  "💁🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♀️"
end
it "`1F481 1F3FF 200D 2640` (minimally-qualified) should match `woman tipping hand: dark skin tone` (💁🏿‍♀)" do
  "💁🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♀"
end
it "`1F64B` (fully-qualified) should match `person raising hand` (🙋)" do
  "🙋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋"
end
it "`1F64B 1F3FB` (fully-qualified) should match `person raising hand: light skin tone` (🙋🏻)" do
  "🙋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻"
end
it "`1F64B 1F3FC` (fully-qualified) should match `person raising hand: medium-light skin tone` (🙋🏼)" do
  "🙋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼"
end
it "`1F64B 1F3FD` (fully-qualified) should match `person raising hand: medium skin tone` (🙋🏽)" do
  "🙋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽"
end
it "`1F64B 1F3FE` (fully-qualified) should match `person raising hand: medium-dark skin tone` (🙋🏾)" do
  "🙋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾"
end
it "`1F64B 1F3FF` (fully-qualified) should match `person raising hand: dark skin tone` (🙋🏿)" do
  "🙋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿"
end
it "`1F64B 200D 2642 FE0F` (fully-qualified) should match `man raising hand` (🙋‍♂️)" do
  "🙋‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♂️"
end
it "`1F64B 200D 2642` (minimally-qualified) should match `man raising hand` (🙋‍♂)" do
  "🙋‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♂"
end
it "`1F64B 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man raising hand: light skin tone` (🙋🏻‍♂️)" do
  "🙋🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♂️"
end
it "`1F64B 1F3FB 200D 2642` (minimally-qualified) should match `man raising hand: light skin tone` (🙋🏻‍♂)" do
  "🙋🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♂"
end
it "`1F64B 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man raising hand: medium-light skin tone` (🙋🏼‍♂️)" do
  "🙋🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♂️"
end
it "`1F64B 1F3FC 200D 2642` (minimally-qualified) should match `man raising hand: medium-light skin tone` (🙋🏼‍♂)" do
  "🙋🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♂"
end
it "`1F64B 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man raising hand: medium skin tone` (🙋🏽‍♂️)" do
  "🙋🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♂️"
end
it "`1F64B 1F3FD 200D 2642` (minimally-qualified) should match `man raising hand: medium skin tone` (🙋🏽‍♂)" do
  "🙋🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♂"
end
it "`1F64B 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man raising hand: medium-dark skin tone` (🙋🏾‍♂️)" do
  "🙋🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♂️"
end
it "`1F64B 1F3FE 200D 2642` (minimally-qualified) should match `man raising hand: medium-dark skin tone` (🙋🏾‍♂)" do
  "🙋🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♂"
end
it "`1F64B 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man raising hand: dark skin tone` (🙋🏿‍♂️)" do
  "🙋🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♂️"
end
it "`1F64B 1F3FF 200D 2642` (minimally-qualified) should match `man raising hand: dark skin tone` (🙋🏿‍♂)" do
  "🙋🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♂"
end
it "`1F64B 200D 2640 FE0F` (fully-qualified) should match `woman raising hand` (🙋‍♀️)" do
  "🙋‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♀️"
end
it "`1F64B 200D 2640` (minimally-qualified) should match `woman raising hand` (🙋‍♀)" do
  "🙋‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♀"
end
it "`1F64B 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: light skin tone` (🙋🏻‍♀️)" do
  "🙋🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♀️"
end
it "`1F64B 1F3FB 200D 2640` (minimally-qualified) should match `woman raising hand: light skin tone` (🙋🏻‍♀)" do
  "🙋🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♀"
end
it "`1F64B 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: medium-light skin tone` (🙋🏼‍♀️)" do
  "🙋🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♀️"
end
it "`1F64B 1F3FC 200D 2640` (minimally-qualified) should match `woman raising hand: medium-light skin tone` (🙋🏼‍♀)" do
  "🙋🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♀"
end
it "`1F64B 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: medium skin tone` (🙋🏽‍♀️)" do
  "🙋🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♀️"
end
it "`1F64B 1F3FD 200D 2640` (minimally-qualified) should match `woman raising hand: medium skin tone` (🙋🏽‍♀)" do
  "🙋🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♀"
end
it "`1F64B 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: medium-dark skin tone` (🙋🏾‍♀️)" do
  "🙋🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♀️"
end
it "`1F64B 1F3FE 200D 2640` (minimally-qualified) should match `woman raising hand: medium-dark skin tone` (🙋🏾‍♀)" do
  "🙋🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♀"
end
it "`1F64B 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: dark skin tone` (🙋🏿‍♀️)" do
  "🙋🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♀️"
end
it "`1F64B 1F3FF 200D 2640` (minimally-qualified) should match `woman raising hand: dark skin tone` (🙋🏿‍♀)" do
  "🙋🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♀"
end
it "`1F9CF` (fully-qualified) should match `deaf person` (🧏)" do
  "🧏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏"
end
it "`1F9CF 1F3FB` (fully-qualified) should match `deaf person: light skin tone` (🧏🏻)" do
  "🧏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻"
end
it "`1F9CF 1F3FC` (fully-qualified) should match `deaf person: medium-light skin tone` (🧏🏼)" do
  "🧏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼"
end
it "`1F9CF 1F3FD` (fully-qualified) should match `deaf person: medium skin tone` (🧏🏽)" do
  "🧏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽"
end
it "`1F9CF 1F3FE` (fully-qualified) should match `deaf person: medium-dark skin tone` (🧏🏾)" do
  "🧏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾"
end
it "`1F9CF 1F3FF` (fully-qualified) should match `deaf person: dark skin tone` (🧏🏿)" do
  "🧏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿"
end
it "`1F9CF 200D 2642 FE0F` (fully-qualified) should match `deaf man` (🧏‍♂️)" do
  "🧏‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♂️"
end
it "`1F9CF 200D 2642` (minimally-qualified) should match `deaf man` (🧏‍♂)" do
  "🧏‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♂"
end
it "`1F9CF 1F3FB 200D 2642 FE0F` (fully-qualified) should match `deaf man: light skin tone` (🧏🏻‍♂️)" do
  "🧏🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♂️"
end
it "`1F9CF 1F3FB 200D 2642` (minimally-qualified) should match `deaf man: light skin tone` (🧏🏻‍♂)" do
  "🧏🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♂"
end
it "`1F9CF 1F3FC 200D 2642 FE0F` (fully-qualified) should match `deaf man: medium-light skin tone` (🧏🏼‍♂️)" do
  "🧏🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♂️"
end
it "`1F9CF 1F3FC 200D 2642` (minimally-qualified) should match `deaf man: medium-light skin tone` (🧏🏼‍♂)" do
  "🧏🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♂"
end
it "`1F9CF 1F3FD 200D 2642 FE0F` (fully-qualified) should match `deaf man: medium skin tone` (🧏🏽‍♂️)" do
  "🧏🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♂️"
end
it "`1F9CF 1F3FD 200D 2642` (minimally-qualified) should match `deaf man: medium skin tone` (🧏🏽‍♂)" do
  "🧏🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♂"
end
it "`1F9CF 1F3FE 200D 2642 FE0F` (fully-qualified) should match `deaf man: medium-dark skin tone` (🧏🏾‍♂️)" do
  "🧏🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♂️"
end
it "`1F9CF 1F3FE 200D 2642` (minimally-qualified) should match `deaf man: medium-dark skin tone` (🧏🏾‍♂)" do
  "🧏🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♂"
end
it "`1F9CF 1F3FF 200D 2642 FE0F` (fully-qualified) should match `deaf man: dark skin tone` (🧏🏿‍♂️)" do
  "🧏🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♂️"
end
it "`1F9CF 1F3FF 200D 2642` (minimally-qualified) should match `deaf man: dark skin tone` (🧏🏿‍♂)" do
  "🧏🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♂"
end
it "`1F9CF 200D 2640 FE0F` (fully-qualified) should match `deaf woman` (🧏‍♀️)" do
  "🧏‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♀️"
end
it "`1F9CF 200D 2640` (minimally-qualified) should match `deaf woman` (🧏‍♀)" do
  "🧏‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♀"
end
it "`1F9CF 1F3FB 200D 2640 FE0F` (fully-qualified) should match `deaf woman: light skin tone` (🧏🏻‍♀️)" do
  "🧏🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♀️"
end
it "`1F9CF 1F3FB 200D 2640` (minimally-qualified) should match `deaf woman: light skin tone` (🧏🏻‍♀)" do
  "🧏🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♀"
end
it "`1F9CF 1F3FC 200D 2640 FE0F` (fully-qualified) should match `deaf woman: medium-light skin tone` (🧏🏼‍♀️)" do
  "🧏🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♀️"
end
it "`1F9CF 1F3FC 200D 2640` (minimally-qualified) should match `deaf woman: medium-light skin tone` (🧏🏼‍♀)" do
  "🧏🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♀"
end
it "`1F9CF 1F3FD 200D 2640 FE0F` (fully-qualified) should match `deaf woman: medium skin tone` (🧏🏽‍♀️)" do
  "🧏🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♀️"
end
it "`1F9CF 1F3FD 200D 2640` (minimally-qualified) should match `deaf woman: medium skin tone` (🧏🏽‍♀)" do
  "🧏🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♀"
end
it "`1F9CF 1F3FE 200D 2640 FE0F` (fully-qualified) should match `deaf woman: medium-dark skin tone` (🧏🏾‍♀️)" do
  "🧏🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♀️"
end
it "`1F9CF 1F3FE 200D 2640` (minimally-qualified) should match `deaf woman: medium-dark skin tone` (🧏🏾‍♀)" do
  "🧏🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♀"
end
it "`1F9CF 1F3FF 200D 2640 FE0F` (fully-qualified) should match `deaf woman: dark skin tone` (🧏🏿‍♀️)" do
  "🧏🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♀️"
end
it "`1F9CF 1F3FF 200D 2640` (minimally-qualified) should match `deaf woman: dark skin tone` (🧏🏿‍♀)" do
  "🧏🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♀"
end
it "`1F647` (fully-qualified) should match `person bowing` (🙇)" do
  "🙇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇"
end
it "`1F647 1F3FB` (fully-qualified) should match `person bowing: light skin tone` (🙇🏻)" do
  "🙇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻"
end
it "`1F647 1F3FC` (fully-qualified) should match `person bowing: medium-light skin tone` (🙇🏼)" do
  "🙇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼"
end
it "`1F647 1F3FD` (fully-qualified) should match `person bowing: medium skin tone` (🙇🏽)" do
  "🙇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽"
end
it "`1F647 1F3FE` (fully-qualified) should match `person bowing: medium-dark skin tone` (🙇🏾)" do
  "🙇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾"
end
it "`1F647 1F3FF` (fully-qualified) should match `person bowing: dark skin tone` (🙇🏿)" do
  "🙇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿"
end
it "`1F647 200D 2642 FE0F` (fully-qualified) should match `man bowing` (🙇‍♂️)" do
  "🙇‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♂️"
end
it "`1F647 200D 2642` (minimally-qualified) should match `man bowing` (🙇‍♂)" do
  "🙇‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♂"
end
it "`1F647 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man bowing: light skin tone` (🙇🏻‍♂️)" do
  "🙇🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♂️"
end
it "`1F647 1F3FB 200D 2642` (minimally-qualified) should match `man bowing: light skin tone` (🙇🏻‍♂)" do
  "🙇🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♂"
end
it "`1F647 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man bowing: medium-light skin tone` (🙇🏼‍♂️)" do
  "🙇🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♂️"
end
it "`1F647 1F3FC 200D 2642` (minimally-qualified) should match `man bowing: medium-light skin tone` (🙇🏼‍♂)" do
  "🙇🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♂"
end
it "`1F647 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man bowing: medium skin tone` (🙇🏽‍♂️)" do
  "🙇🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♂️"
end
it "`1F647 1F3FD 200D 2642` (minimally-qualified) should match `man bowing: medium skin tone` (🙇🏽‍♂)" do
  "🙇🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♂"
end
it "`1F647 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man bowing: medium-dark skin tone` (🙇🏾‍♂️)" do
  "🙇🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♂️"
end
it "`1F647 1F3FE 200D 2642` (minimally-qualified) should match `man bowing: medium-dark skin tone` (🙇🏾‍♂)" do
  "🙇🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♂"
end
it "`1F647 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man bowing: dark skin tone` (🙇🏿‍♂️)" do
  "🙇🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♂️"
end
it "`1F647 1F3FF 200D 2642` (minimally-qualified) should match `man bowing: dark skin tone` (🙇🏿‍♂)" do
  "🙇🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♂"
end
it "`1F647 200D 2640 FE0F` (fully-qualified) should match `woman bowing` (🙇‍♀️)" do
  "🙇‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♀️"
end
it "`1F647 200D 2640` (minimally-qualified) should match `woman bowing` (🙇‍♀)" do
  "🙇‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♀"
end
it "`1F647 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman bowing: light skin tone` (🙇🏻‍♀️)" do
  "🙇🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♀️"
end
it "`1F647 1F3FB 200D 2640` (minimally-qualified) should match `woman bowing: light skin tone` (🙇🏻‍♀)" do
  "🙇🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♀"
end
it "`1F647 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman bowing: medium-light skin tone` (🙇🏼‍♀️)" do
  "🙇🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♀️"
end
it "`1F647 1F3FC 200D 2640` (minimally-qualified) should match `woman bowing: medium-light skin tone` (🙇🏼‍♀)" do
  "🙇🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♀"
end
it "`1F647 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman bowing: medium skin tone` (🙇🏽‍♀️)" do
  "🙇🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♀️"
end
it "`1F647 1F3FD 200D 2640` (minimally-qualified) should match `woman bowing: medium skin tone` (🙇🏽‍♀)" do
  "🙇🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♀"
end
it "`1F647 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman bowing: medium-dark skin tone` (🙇🏾‍♀️)" do
  "🙇🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♀️"
end
it "`1F647 1F3FE 200D 2640` (minimally-qualified) should match `woman bowing: medium-dark skin tone` (🙇🏾‍♀)" do
  "🙇🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♀"
end
it "`1F647 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman bowing: dark skin tone` (🙇🏿‍♀️)" do
  "🙇🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♀️"
end
it "`1F647 1F3FF 200D 2640` (minimally-qualified) should match `woman bowing: dark skin tone` (🙇🏿‍♀)" do
  "🙇🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♀"
end
it "`1F926` (fully-qualified) should match `person facepalming` (🤦)" do
  "🤦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦"
end
it "`1F926 1F3FB` (fully-qualified) should match `person facepalming: light skin tone` (🤦🏻)" do
  "🤦🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻"
end
it "`1F926 1F3FC` (fully-qualified) should match `person facepalming: medium-light skin tone` (🤦🏼)" do
  "🤦🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼"
end
it "`1F926 1F3FD` (fully-qualified) should match `person facepalming: medium skin tone` (🤦🏽)" do
  "🤦🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽"
end
it "`1F926 1F3FE` (fully-qualified) should match `person facepalming: medium-dark skin tone` (🤦🏾)" do
  "🤦🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾"
end
it "`1F926 1F3FF` (fully-qualified) should match `person facepalming: dark skin tone` (🤦🏿)" do
  "🤦🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿"
end
it "`1F926 200D 2642 FE0F` (fully-qualified) should match `man facepalming` (🤦‍♂️)" do
  "🤦‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♂️"
end
it "`1F926 200D 2642` (minimally-qualified) should match `man facepalming` (🤦‍♂)" do
  "🤦‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♂"
end
it "`1F926 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man facepalming: light skin tone` (🤦🏻‍♂️)" do
  "🤦🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♂️"
end
it "`1F926 1F3FB 200D 2642` (minimally-qualified) should match `man facepalming: light skin tone` (🤦🏻‍♂)" do
  "🤦🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♂"
end
it "`1F926 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man facepalming: medium-light skin tone` (🤦🏼‍♂️)" do
  "🤦🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♂️"
end
it "`1F926 1F3FC 200D 2642` (minimally-qualified) should match `man facepalming: medium-light skin tone` (🤦🏼‍♂)" do
  "🤦🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♂"
end
it "`1F926 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man facepalming: medium skin tone` (🤦🏽‍♂️)" do
  "🤦🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♂️"
end
it "`1F926 1F3FD 200D 2642` (minimally-qualified) should match `man facepalming: medium skin tone` (🤦🏽‍♂)" do
  "🤦🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♂"
end
it "`1F926 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man facepalming: medium-dark skin tone` (🤦🏾‍♂️)" do
  "🤦🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♂️"
end
it "`1F926 1F3FE 200D 2642` (minimally-qualified) should match `man facepalming: medium-dark skin tone` (🤦🏾‍♂)" do
  "🤦🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♂"
end
it "`1F926 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man facepalming: dark skin tone` (🤦🏿‍♂️)" do
  "🤦🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♂️"
end
it "`1F926 1F3FF 200D 2642` (minimally-qualified) should match `man facepalming: dark skin tone` (🤦🏿‍♂)" do
  "🤦🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♂"
end
it "`1F926 200D 2640 FE0F` (fully-qualified) should match `woman facepalming` (🤦‍♀️)" do
  "🤦‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♀️"
end
it "`1F926 200D 2640` (minimally-qualified) should match `woman facepalming` (🤦‍♀)" do
  "🤦‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♀"
end
it "`1F926 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: light skin tone` (🤦🏻‍♀️)" do
  "🤦🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♀️"
end
it "`1F926 1F3FB 200D 2640` (minimally-qualified) should match `woman facepalming: light skin tone` (🤦🏻‍♀)" do
  "🤦🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♀"
end
it "`1F926 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: medium-light skin tone` (🤦🏼‍♀️)" do
  "🤦🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♀️"
end
it "`1F926 1F3FC 200D 2640` (minimally-qualified) should match `woman facepalming: medium-light skin tone` (🤦🏼‍♀)" do
  "🤦🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♀"
end
it "`1F926 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: medium skin tone` (🤦🏽‍♀️)" do
  "🤦🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♀️"
end
it "`1F926 1F3FD 200D 2640` (minimally-qualified) should match `woman facepalming: medium skin tone` (🤦🏽‍♀)" do
  "🤦🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♀"
end
it "`1F926 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: medium-dark skin tone` (🤦🏾‍♀️)" do
  "🤦🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♀️"
end
it "`1F926 1F3FE 200D 2640` (minimally-qualified) should match `woman facepalming: medium-dark skin tone` (🤦🏾‍♀)" do
  "🤦🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♀"
end
it "`1F926 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: dark skin tone` (🤦🏿‍♀️)" do
  "🤦🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♀️"
end
it "`1F926 1F3FF 200D 2640` (minimally-qualified) should match `woman facepalming: dark skin tone` (🤦🏿‍♀)" do
  "🤦🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♀"
end
it "`1F937` (fully-qualified) should match `person shrugging` (🤷)" do
  "🤷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷"
end
it "`1F937 1F3FB` (fully-qualified) should match `person shrugging: light skin tone` (🤷🏻)" do
  "🤷🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻"
end
it "`1F937 1F3FC` (fully-qualified) should match `person shrugging: medium-light skin tone` (🤷🏼)" do
  "🤷🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼"
end
it "`1F937 1F3FD` (fully-qualified) should match `person shrugging: medium skin tone` (🤷🏽)" do
  "🤷🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽"
end
it "`1F937 1F3FE` (fully-qualified) should match `person shrugging: medium-dark skin tone` (🤷🏾)" do
  "🤷🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾"
end
it "`1F937 1F3FF` (fully-qualified) should match `person shrugging: dark skin tone` (🤷🏿)" do
  "🤷🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿"
end
it "`1F937 200D 2642 FE0F` (fully-qualified) should match `man shrugging` (🤷‍♂️)" do
  "🤷‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♂️"
end
it "`1F937 200D 2642` (minimally-qualified) should match `man shrugging` (🤷‍♂)" do
  "🤷‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♂"
end
it "`1F937 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man shrugging: light skin tone` (🤷🏻‍♂️)" do
  "🤷🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♂️"
end
it "`1F937 1F3FB 200D 2642` (minimally-qualified) should match `man shrugging: light skin tone` (🤷🏻‍♂)" do
  "🤷🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♂"
end
it "`1F937 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man shrugging: medium-light skin tone` (🤷🏼‍♂️)" do
  "🤷🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♂️"
end
it "`1F937 1F3FC 200D 2642` (minimally-qualified) should match `man shrugging: medium-light skin tone` (🤷🏼‍♂)" do
  "🤷🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♂"
end
it "`1F937 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man shrugging: medium skin tone` (🤷🏽‍♂️)" do
  "🤷🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♂️"
end
it "`1F937 1F3FD 200D 2642` (minimally-qualified) should match `man shrugging: medium skin tone` (🤷🏽‍♂)" do
  "🤷🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♂"
end
it "`1F937 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man shrugging: medium-dark skin tone` (🤷🏾‍♂️)" do
  "🤷🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♂️"
end
it "`1F937 1F3FE 200D 2642` (minimally-qualified) should match `man shrugging: medium-dark skin tone` (🤷🏾‍♂)" do
  "🤷🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♂"
end
it "`1F937 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man shrugging: dark skin tone` (🤷🏿‍♂️)" do
  "🤷🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♂️"
end
it "`1F937 1F3FF 200D 2642` (minimally-qualified) should match `man shrugging: dark skin tone` (🤷🏿‍♂)" do
  "🤷🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♂"
end
it "`1F937 200D 2640 FE0F` (fully-qualified) should match `woman shrugging` (🤷‍♀️)" do
  "🤷‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♀️"
end
it "`1F937 200D 2640` (minimally-qualified) should match `woman shrugging` (🤷‍♀)" do
  "🤷‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♀"
end
it "`1F937 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: light skin tone` (🤷🏻‍♀️)" do
  "🤷🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♀️"
end
it "`1F937 1F3FB 200D 2640` (minimally-qualified) should match `woman shrugging: light skin tone` (🤷🏻‍♀)" do
  "🤷🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♀"
end
it "`1F937 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: medium-light skin tone` (🤷🏼‍♀️)" do
  "🤷🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♀️"
end
it "`1F937 1F3FC 200D 2640` (minimally-qualified) should match `woman shrugging: medium-light skin tone` (🤷🏼‍♀)" do
  "🤷🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♀"
end
it "`1F937 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: medium skin tone` (🤷🏽‍♀️)" do
  "🤷🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♀️"
end
it "`1F937 1F3FD 200D 2640` (minimally-qualified) should match `woman shrugging: medium skin tone` (🤷🏽‍♀)" do
  "🤷🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♀"
end
it "`1F937 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: medium-dark skin tone` (🤷🏾‍♀️)" do
  "🤷🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♀️"
end
it "`1F937 1F3FE 200D 2640` (minimally-qualified) should match `woman shrugging: medium-dark skin tone` (🤷🏾‍♀)" do
  "🤷🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♀"
end
it "`1F937 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: dark skin tone` (🤷🏿‍♀️)" do
  "🤷🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♀️"
end
it "`1F937 1F3FF 200D 2640` (minimally-qualified) should match `woman shrugging: dark skin tone` (🤷🏿‍♀)" do
  "🤷🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♀"
end
it "`1F468 200D 2695 FE0F` (fully-qualified) should match `man health worker` (👨‍⚕️)" do
  "👨‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚕️"
end
it "`1F468 200D 2695` (minimally-qualified) should match `man health worker` (👨‍⚕)" do
  "👨‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚕"
end
it "`1F468 1F3FB 200D 2695 FE0F` (fully-qualified) should match `man health worker: light skin tone` (👨🏻‍⚕️)" do
  "👨🏻‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚕️"
end
it "`1F468 1F3FB 200D 2695` (minimally-qualified) should match `man health worker: light skin tone` (👨🏻‍⚕)" do
  "👨🏻‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚕"
end
it "`1F468 1F3FC 200D 2695 FE0F` (fully-qualified) should match `man health worker: medium-light skin tone` (👨🏼‍⚕️)" do
  "👨🏼‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚕️"
end
it "`1F468 1F3FC 200D 2695` (minimally-qualified) should match `man health worker: medium-light skin tone` (👨🏼‍⚕)" do
  "👨🏼‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚕"
end
it "`1F468 1F3FD 200D 2695 FE0F` (fully-qualified) should match `man health worker: medium skin tone` (👨🏽‍⚕️)" do
  "👨🏽‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚕️"
end
it "`1F468 1F3FD 200D 2695` (minimally-qualified) should match `man health worker: medium skin tone` (👨🏽‍⚕)" do
  "👨🏽‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚕"
end
it "`1F468 1F3FE 200D 2695 FE0F` (fully-qualified) should match `man health worker: medium-dark skin tone` (👨🏾‍⚕️)" do
  "👨🏾‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚕️"
end
it "`1F468 1F3FE 200D 2695` (minimally-qualified) should match `man health worker: medium-dark skin tone` (👨🏾‍⚕)" do
  "👨🏾‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚕"
end
it "`1F468 1F3FF 200D 2695 FE0F` (fully-qualified) should match `man health worker: dark skin tone` (👨🏿‍⚕️)" do
  "👨🏿‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚕️"
end
it "`1F468 1F3FF 200D 2695` (minimally-qualified) should match `man health worker: dark skin tone` (👨🏿‍⚕)" do
  "👨🏿‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚕"
end
it "`1F469 200D 2695 FE0F` (fully-qualified) should match `woman health worker` (👩‍⚕️)" do
  "👩‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚕️"
end
it "`1F469 200D 2695` (minimally-qualified) should match `woman health worker` (👩‍⚕)" do
  "👩‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚕"
end
it "`1F469 1F3FB 200D 2695 FE0F` (fully-qualified) should match `woman health worker: light skin tone` (👩🏻‍⚕️)" do
  "👩🏻‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚕️"
end
it "`1F469 1F3FB 200D 2695` (minimally-qualified) should match `woman health worker: light skin tone` (👩🏻‍⚕)" do
  "👩🏻‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚕"
end
it "`1F469 1F3FC 200D 2695 FE0F` (fully-qualified) should match `woman health worker: medium-light skin tone` (👩🏼‍⚕️)" do
  "👩🏼‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚕️"
end
it "`1F469 1F3FC 200D 2695` (minimally-qualified) should match `woman health worker: medium-light skin tone` (👩🏼‍⚕)" do
  "👩🏼‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚕"
end
it "`1F469 1F3FD 200D 2695 FE0F` (fully-qualified) should match `woman health worker: medium skin tone` (👩🏽‍⚕️)" do
  "👩🏽‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚕️"
end
it "`1F469 1F3FD 200D 2695` (minimally-qualified) should match `woman health worker: medium skin tone` (👩🏽‍⚕)" do
  "👩🏽‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚕"
end
it "`1F469 1F3FE 200D 2695 FE0F` (fully-qualified) should match `woman health worker: medium-dark skin tone` (👩🏾‍⚕️)" do
  "👩🏾‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚕️"
end
it "`1F469 1F3FE 200D 2695` (minimally-qualified) should match `woman health worker: medium-dark skin tone` (👩🏾‍⚕)" do
  "👩🏾‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚕"
end
it "`1F469 1F3FF 200D 2695 FE0F` (fully-qualified) should match `woman health worker: dark skin tone` (👩🏿‍⚕️)" do
  "👩🏿‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚕️"
end
it "`1F469 1F3FF 200D 2695` (minimally-qualified) should match `woman health worker: dark skin tone` (👩🏿‍⚕)" do
  "👩🏿‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚕"
end
it "`1F468 200D 1F393` (fully-qualified) should match `man student` (👨‍🎓)" do
  "👨‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🎓"
end
it "`1F468 1F3FB 200D 1F393` (fully-qualified) should match `man student: light skin tone` (👨🏻‍🎓)" do
  "👨🏻‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🎓"
end
it "`1F468 1F3FC 200D 1F393` (fully-qualified) should match `man student: medium-light skin tone` (👨🏼‍🎓)" do
  "👨🏼‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🎓"
end
it "`1F468 1F3FD 200D 1F393` (fully-qualified) should match `man student: medium skin tone` (👨🏽‍🎓)" do
  "👨🏽‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🎓"
end
it "`1F468 1F3FE 200D 1F393` (fully-qualified) should match `man student: medium-dark skin tone` (👨🏾‍🎓)" do
  "👨🏾‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🎓"
end
it "`1F468 1F3FF 200D 1F393` (fully-qualified) should match `man student: dark skin tone` (👨🏿‍🎓)" do
  "👨🏿‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🎓"
end
it "`1F469 200D 1F393` (fully-qualified) should match `woman student` (👩‍🎓)" do
  "👩‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🎓"
end
it "`1F469 1F3FB 200D 1F393` (fully-qualified) should match `woman student: light skin tone` (👩🏻‍🎓)" do
  "👩🏻‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🎓"
end
it "`1F469 1F3FC 200D 1F393` (fully-qualified) should match `woman student: medium-light skin tone` (👩🏼‍🎓)" do
  "👩🏼‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🎓"
end
it "`1F469 1F3FD 200D 1F393` (fully-qualified) should match `woman student: medium skin tone` (👩🏽‍🎓)" do
  "👩🏽‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🎓"
end
it "`1F469 1F3FE 200D 1F393` (fully-qualified) should match `woman student: medium-dark skin tone` (👩🏾‍🎓)" do
  "👩🏾‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🎓"
end
it "`1F469 1F3FF 200D 1F393` (fully-qualified) should match `woman student: dark skin tone` (👩🏿‍🎓)" do
  "👩🏿‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🎓"
end
it "`1F468 200D 1F3EB` (fully-qualified) should match `man teacher` (👨‍🏫)" do
  "👨‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🏫"
end
it "`1F468 1F3FB 200D 1F3EB` (fully-qualified) should match `man teacher: light skin tone` (👨🏻‍🏫)" do
  "👨🏻‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🏫"
end
it "`1F468 1F3FC 200D 1F3EB` (fully-qualified) should match `man teacher: medium-light skin tone` (👨🏼‍🏫)" do
  "👨🏼‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🏫"
end
it "`1F468 1F3FD 200D 1F3EB` (fully-qualified) should match `man teacher: medium skin tone` (👨🏽‍🏫)" do
  "👨🏽‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🏫"
end
it "`1F468 1F3FE 200D 1F3EB` (fully-qualified) should match `man teacher: medium-dark skin tone` (👨🏾‍🏫)" do
  "👨🏾‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🏫"
end
it "`1F468 1F3FF 200D 1F3EB` (fully-qualified) should match `man teacher: dark skin tone` (👨🏿‍🏫)" do
  "👨🏿‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🏫"
end
it "`1F469 200D 1F3EB` (fully-qualified) should match `woman teacher` (👩‍🏫)" do
  "👩‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🏫"
end
it "`1F469 1F3FB 200D 1F3EB` (fully-qualified) should match `woman teacher: light skin tone` (👩🏻‍🏫)" do
  "👩🏻‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🏫"
end
it "`1F469 1F3FC 200D 1F3EB` (fully-qualified) should match `woman teacher: medium-light skin tone` (👩🏼‍🏫)" do
  "👩🏼‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🏫"
end
it "`1F469 1F3FD 200D 1F3EB` (fully-qualified) should match `woman teacher: medium skin tone` (👩🏽‍🏫)" do
  "👩🏽‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🏫"
end
it "`1F469 1F3FE 200D 1F3EB` (fully-qualified) should match `woman teacher: medium-dark skin tone` (👩🏾‍🏫)" do
  "👩🏾‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🏫"
end
it "`1F469 1F3FF 200D 1F3EB` (fully-qualified) should match `woman teacher: dark skin tone` (👩🏿‍🏫)" do
  "👩🏿‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🏫"
end
it "`1F468 200D 2696 FE0F` (fully-qualified) should match `man judge` (👨‍⚖️)" do
  "👨‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚖️"
end
it "`1F468 200D 2696` (minimally-qualified) should match `man judge` (👨‍⚖)" do
  "👨‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚖"
end
it "`1F468 1F3FB 200D 2696 FE0F` (fully-qualified) should match `man judge: light skin tone` (👨🏻‍⚖️)" do
  "👨🏻‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚖️"
end
it "`1F468 1F3FB 200D 2696` (minimally-qualified) should match `man judge: light skin tone` (👨🏻‍⚖)" do
  "👨🏻‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚖"
end
it "`1F468 1F3FC 200D 2696 FE0F` (fully-qualified) should match `man judge: medium-light skin tone` (👨🏼‍⚖️)" do
  "👨🏼‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚖️"
end
it "`1F468 1F3FC 200D 2696` (minimally-qualified) should match `man judge: medium-light skin tone` (👨🏼‍⚖)" do
  "👨🏼‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚖"
end
it "`1F468 1F3FD 200D 2696 FE0F` (fully-qualified) should match `man judge: medium skin tone` (👨🏽‍⚖️)" do
  "👨🏽‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚖️"
end
it "`1F468 1F3FD 200D 2696` (minimally-qualified) should match `man judge: medium skin tone` (👨🏽‍⚖)" do
  "👨🏽‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚖"
end
it "`1F468 1F3FE 200D 2696 FE0F` (fully-qualified) should match `man judge: medium-dark skin tone` (👨🏾‍⚖️)" do
  "👨🏾‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚖️"
end
it "`1F468 1F3FE 200D 2696` (minimally-qualified) should match `man judge: medium-dark skin tone` (👨🏾‍⚖)" do
  "👨🏾‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚖"
end
it "`1F468 1F3FF 200D 2696 FE0F` (fully-qualified) should match `man judge: dark skin tone` (👨🏿‍⚖️)" do
  "👨🏿‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚖️"
end
it "`1F468 1F3FF 200D 2696` (minimally-qualified) should match `man judge: dark skin tone` (👨🏿‍⚖)" do
  "👨🏿‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚖"
end
it "`1F469 200D 2696 FE0F` (fully-qualified) should match `woman judge` (👩‍⚖️)" do
  "👩‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚖️"
end
it "`1F469 200D 2696` (minimally-qualified) should match `woman judge` (👩‍⚖)" do
  "👩‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚖"
end
it "`1F469 1F3FB 200D 2696 FE0F` (fully-qualified) should match `woman judge: light skin tone` (👩🏻‍⚖️)" do
  "👩🏻‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚖️"
end
it "`1F469 1F3FB 200D 2696` (minimally-qualified) should match `woman judge: light skin tone` (👩🏻‍⚖)" do
  "👩🏻‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚖"
end
it "`1F469 1F3FC 200D 2696 FE0F` (fully-qualified) should match `woman judge: medium-light skin tone` (👩🏼‍⚖️)" do
  "👩🏼‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚖️"
end
it "`1F469 1F3FC 200D 2696` (minimally-qualified) should match `woman judge: medium-light skin tone` (👩🏼‍⚖)" do
  "👩🏼‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚖"
end
it "`1F469 1F3FD 200D 2696 FE0F` (fully-qualified) should match `woman judge: medium skin tone` (👩🏽‍⚖️)" do
  "👩🏽‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚖️"
end
it "`1F469 1F3FD 200D 2696` (minimally-qualified) should match `woman judge: medium skin tone` (👩🏽‍⚖)" do
  "👩🏽‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚖"
end
it "`1F469 1F3FE 200D 2696 FE0F` (fully-qualified) should match `woman judge: medium-dark skin tone` (👩🏾‍⚖️)" do
  "👩🏾‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚖️"
end
it "`1F469 1F3FE 200D 2696` (minimally-qualified) should match `woman judge: medium-dark skin tone` (👩🏾‍⚖)" do
  "👩🏾‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚖"
end
it "`1F469 1F3FF 200D 2696 FE0F` (fully-qualified) should match `woman judge: dark skin tone` (👩🏿‍⚖️)" do
  "👩🏿‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚖️"
end
it "`1F469 1F3FF 200D 2696` (minimally-qualified) should match `woman judge: dark skin tone` (👩🏿‍⚖)" do
  "👩🏿‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚖"
end
it "`1F468 200D 1F33E` (fully-qualified) should match `man farmer` (👨‍🌾)" do
  "👨‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🌾"
end
it "`1F468 1F3FB 200D 1F33E` (fully-qualified) should match `man farmer: light skin tone` (👨🏻‍🌾)" do
  "👨🏻‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🌾"
end
it "`1F468 1F3FC 200D 1F33E` (fully-qualified) should match `man farmer: medium-light skin tone` (👨🏼‍🌾)" do
  "👨🏼‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🌾"
end
it "`1F468 1F3FD 200D 1F33E` (fully-qualified) should match `man farmer: medium skin tone` (👨🏽‍🌾)" do
  "👨🏽‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🌾"
end
it "`1F468 1F3FE 200D 1F33E` (fully-qualified) should match `man farmer: medium-dark skin tone` (👨🏾‍🌾)" do
  "👨🏾‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🌾"
end
it "`1F468 1F3FF 200D 1F33E` (fully-qualified) should match `man farmer: dark skin tone` (👨🏿‍🌾)" do
  "👨🏿‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🌾"
end
it "`1F469 200D 1F33E` (fully-qualified) should match `woman farmer` (👩‍🌾)" do
  "👩‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🌾"
end
it "`1F469 1F3FB 200D 1F33E` (fully-qualified) should match `woman farmer: light skin tone` (👩🏻‍🌾)" do
  "👩🏻‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🌾"
end
it "`1F469 1F3FC 200D 1F33E` (fully-qualified) should match `woman farmer: medium-light skin tone` (👩🏼‍🌾)" do
  "👩🏼‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🌾"
end
it "`1F469 1F3FD 200D 1F33E` (fully-qualified) should match `woman farmer: medium skin tone` (👩🏽‍🌾)" do
  "👩🏽‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🌾"
end
it "`1F469 1F3FE 200D 1F33E` (fully-qualified) should match `woman farmer: medium-dark skin tone` (👩🏾‍🌾)" do
  "👩🏾‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🌾"
end
it "`1F469 1F3FF 200D 1F33E` (fully-qualified) should match `woman farmer: dark skin tone` (👩🏿‍🌾)" do
  "👩🏿‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🌾"
end
it "`1F468 200D 1F373` (fully-qualified) should match `man cook` (👨‍🍳)" do
  "👨‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🍳"
end
it "`1F468 1F3FB 200D 1F373` (fully-qualified) should match `man cook: light skin tone` (👨🏻‍🍳)" do
  "👨🏻‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🍳"
end
it "`1F468 1F3FC 200D 1F373` (fully-qualified) should match `man cook: medium-light skin tone` (👨🏼‍🍳)" do
  "👨🏼‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🍳"
end
it "`1F468 1F3FD 200D 1F373` (fully-qualified) should match `man cook: medium skin tone` (👨🏽‍🍳)" do
  "👨🏽‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🍳"
end
it "`1F468 1F3FE 200D 1F373` (fully-qualified) should match `man cook: medium-dark skin tone` (👨🏾‍🍳)" do
  "👨🏾‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🍳"
end
it "`1F468 1F3FF 200D 1F373` (fully-qualified) should match `man cook: dark skin tone` (👨🏿‍🍳)" do
  "👨🏿‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🍳"
end
it "`1F469 200D 1F373` (fully-qualified) should match `woman cook` (👩‍🍳)" do
  "👩‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🍳"
end
it "`1F469 1F3FB 200D 1F373` (fully-qualified) should match `woman cook: light skin tone` (👩🏻‍🍳)" do
  "👩🏻‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🍳"
end
it "`1F469 1F3FC 200D 1F373` (fully-qualified) should match `woman cook: medium-light skin tone` (👩🏼‍🍳)" do
  "👩🏼‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🍳"
end
it "`1F469 1F3FD 200D 1F373` (fully-qualified) should match `woman cook: medium skin tone` (👩🏽‍🍳)" do
  "👩🏽‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🍳"
end
it "`1F469 1F3FE 200D 1F373` (fully-qualified) should match `woman cook: medium-dark skin tone` (👩🏾‍🍳)" do
  "👩🏾‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🍳"
end
it "`1F469 1F3FF 200D 1F373` (fully-qualified) should match `woman cook: dark skin tone` (👩🏿‍🍳)" do
  "👩🏿‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🍳"
end
it "`1F468 200D 1F527` (fully-qualified) should match `man mechanic` (👨‍🔧)" do
  "👨‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🔧"
end
it "`1F468 1F3FB 200D 1F527` (fully-qualified) should match `man mechanic: light skin tone` (👨🏻‍🔧)" do
  "👨🏻‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🔧"
end
it "`1F468 1F3FC 200D 1F527` (fully-qualified) should match `man mechanic: medium-light skin tone` (👨🏼‍🔧)" do
  "👨🏼‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🔧"
end
it "`1F468 1F3FD 200D 1F527` (fully-qualified) should match `man mechanic: medium skin tone` (👨🏽‍🔧)" do
  "👨🏽‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🔧"
end
it "`1F468 1F3FE 200D 1F527` (fully-qualified) should match `man mechanic: medium-dark skin tone` (👨🏾‍🔧)" do
  "👨🏾‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🔧"
end
it "`1F468 1F3FF 200D 1F527` (fully-qualified) should match `man mechanic: dark skin tone` (👨🏿‍🔧)" do
  "👨🏿‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🔧"
end
it "`1F469 200D 1F527` (fully-qualified) should match `woman mechanic` (👩‍🔧)" do
  "👩‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🔧"
end
it "`1F469 1F3FB 200D 1F527` (fully-qualified) should match `woman mechanic: light skin tone` (👩🏻‍🔧)" do
  "👩🏻‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🔧"
end
it "`1F469 1F3FC 200D 1F527` (fully-qualified) should match `woman mechanic: medium-light skin tone` (👩🏼‍🔧)" do
  "👩🏼‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🔧"
end
it "`1F469 1F3FD 200D 1F527` (fully-qualified) should match `woman mechanic: medium skin tone` (👩🏽‍🔧)" do
  "👩🏽‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🔧"
end
it "`1F469 1F3FE 200D 1F527` (fully-qualified) should match `woman mechanic: medium-dark skin tone` (👩🏾‍🔧)" do
  "👩🏾‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🔧"
end
it "`1F469 1F3FF 200D 1F527` (fully-qualified) should match `woman mechanic: dark skin tone` (👩🏿‍🔧)" do
  "👩🏿‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🔧"
end
it "`1F468 200D 1F3ED` (fully-qualified) should match `man factory worker` (👨‍🏭)" do
  "👨‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🏭"
end
it "`1F468 1F3FB 200D 1F3ED` (fully-qualified) should match `man factory worker: light skin tone` (👨🏻‍🏭)" do
  "👨🏻‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🏭"
end
it "`1F468 1F3FC 200D 1F3ED` (fully-qualified) should match `man factory worker: medium-light skin tone` (👨🏼‍🏭)" do
  "👨🏼‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🏭"
end
it "`1F468 1F3FD 200D 1F3ED` (fully-qualified) should match `man factory worker: medium skin tone` (👨🏽‍🏭)" do
  "👨🏽‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🏭"
end
it "`1F468 1F3FE 200D 1F3ED` (fully-qualified) should match `man factory worker: medium-dark skin tone` (👨🏾‍🏭)" do
  "👨🏾‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🏭"
end
it "`1F468 1F3FF 200D 1F3ED` (fully-qualified) should match `man factory worker: dark skin tone` (👨🏿‍🏭)" do
  "👨🏿‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🏭"
end
it "`1F469 200D 1F3ED` (fully-qualified) should match `woman factory worker` (👩‍🏭)" do
  "👩‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🏭"
end
it "`1F469 1F3FB 200D 1F3ED` (fully-qualified) should match `woman factory worker: light skin tone` (👩🏻‍🏭)" do
  "👩🏻‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🏭"
end
it "`1F469 1F3FC 200D 1F3ED` (fully-qualified) should match `woman factory worker: medium-light skin tone` (👩🏼‍🏭)" do
  "👩🏼‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🏭"
end
it "`1F469 1F3FD 200D 1F3ED` (fully-qualified) should match `woman factory worker: medium skin tone` (👩🏽‍🏭)" do
  "👩🏽‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🏭"
end
it "`1F469 1F3FE 200D 1F3ED` (fully-qualified) should match `woman factory worker: medium-dark skin tone` (👩🏾‍🏭)" do
  "👩🏾‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🏭"
end
it "`1F469 1F3FF 200D 1F3ED` (fully-qualified) should match `woman factory worker: dark skin tone` (👩🏿‍🏭)" do
  "👩🏿‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🏭"
end
it "`1F468 200D 1F4BC` (fully-qualified) should match `man office worker` (👨‍💼)" do
  "👨‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍💼"
end
it "`1F468 1F3FB 200D 1F4BC` (fully-qualified) should match `man office worker: light skin tone` (👨🏻‍💼)" do
  "👨🏻‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍💼"
end
it "`1F468 1F3FC 200D 1F4BC` (fully-qualified) should match `man office worker: medium-light skin tone` (👨🏼‍💼)" do
  "👨🏼‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍💼"
end
it "`1F468 1F3FD 200D 1F4BC` (fully-qualified) should match `man office worker: medium skin tone` (👨🏽‍💼)" do
  "👨🏽‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍💼"
end
it "`1F468 1F3FE 200D 1F4BC` (fully-qualified) should match `man office worker: medium-dark skin tone` (👨🏾‍💼)" do
  "👨🏾‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍💼"
end
it "`1F468 1F3FF 200D 1F4BC` (fully-qualified) should match `man office worker: dark skin tone` (👨🏿‍💼)" do
  "👨🏿‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍💼"
end
it "`1F469 200D 1F4BC` (fully-qualified) should match `woman office worker` (👩‍💼)" do
  "👩‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍💼"
end
it "`1F469 1F3FB 200D 1F4BC` (fully-qualified) should match `woman office worker: light skin tone` (👩🏻‍💼)" do
  "👩🏻‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍💼"
end
it "`1F469 1F3FC 200D 1F4BC` (fully-qualified) should match `woman office worker: medium-light skin tone` (👩🏼‍💼)" do
  "👩🏼‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍💼"
end
it "`1F469 1F3FD 200D 1F4BC` (fully-qualified) should match `woman office worker: medium skin tone` (👩🏽‍💼)" do
  "👩🏽‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍💼"
end
it "`1F469 1F3FE 200D 1F4BC` (fully-qualified) should match `woman office worker: medium-dark skin tone` (👩🏾‍💼)" do
  "👩🏾‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍💼"
end
it "`1F469 1F3FF 200D 1F4BC` (fully-qualified) should match `woman office worker: dark skin tone` (👩🏿‍💼)" do
  "👩🏿‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍💼"
end
it "`1F468 200D 1F52C` (fully-qualified) should match `man scientist` (👨‍🔬)" do
  "👨‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🔬"
end
it "`1F468 1F3FB 200D 1F52C` (fully-qualified) should match `man scientist: light skin tone` (👨🏻‍🔬)" do
  "👨🏻‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🔬"
end
it "`1F468 1F3FC 200D 1F52C` (fully-qualified) should match `man scientist: medium-light skin tone` (👨🏼‍🔬)" do
  "👨🏼‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🔬"
end
it "`1F468 1F3FD 200D 1F52C` (fully-qualified) should match `man scientist: medium skin tone` (👨🏽‍🔬)" do
  "👨🏽‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🔬"
end
it "`1F468 1F3FE 200D 1F52C` (fully-qualified) should match `man scientist: medium-dark skin tone` (👨🏾‍🔬)" do
  "👨🏾‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🔬"
end
it "`1F468 1F3FF 200D 1F52C` (fully-qualified) should match `man scientist: dark skin tone` (👨🏿‍🔬)" do
  "👨🏿‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🔬"
end
it "`1F469 200D 1F52C` (fully-qualified) should match `woman scientist` (👩‍🔬)" do
  "👩‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🔬"
end
it "`1F469 1F3FB 200D 1F52C` (fully-qualified) should match `woman scientist: light skin tone` (👩🏻‍🔬)" do
  "👩🏻‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🔬"
end
it "`1F469 1F3FC 200D 1F52C` (fully-qualified) should match `woman scientist: medium-light skin tone` (👩🏼‍🔬)" do
  "👩🏼‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🔬"
end
it "`1F469 1F3FD 200D 1F52C` (fully-qualified) should match `woman scientist: medium skin tone` (👩🏽‍🔬)" do
  "👩🏽‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🔬"
end
it "`1F469 1F3FE 200D 1F52C` (fully-qualified) should match `woman scientist: medium-dark skin tone` (👩🏾‍🔬)" do
  "👩🏾‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🔬"
end
it "`1F469 1F3FF 200D 1F52C` (fully-qualified) should match `woman scientist: dark skin tone` (👩🏿‍🔬)" do
  "👩🏿‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🔬"
end
it "`1F468 200D 1F4BB` (fully-qualified) should match `man technologist` (👨‍💻)" do
  "👨‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍💻"
end
it "`1F468 1F3FB 200D 1F4BB` (fully-qualified) should match `man technologist: light skin tone` (👨🏻‍💻)" do
  "👨🏻‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍💻"
end
it "`1F468 1F3FC 200D 1F4BB` (fully-qualified) should match `man technologist: medium-light skin tone` (👨🏼‍💻)" do
  "👨🏼‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍💻"
end
it "`1F468 1F3FD 200D 1F4BB` (fully-qualified) should match `man technologist: medium skin tone` (👨🏽‍💻)" do
  "👨🏽‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍💻"
end
it "`1F468 1F3FE 200D 1F4BB` (fully-qualified) should match `man technologist: medium-dark skin tone` (👨🏾‍💻)" do
  "👨🏾‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍💻"
end
it "`1F468 1F3FF 200D 1F4BB` (fully-qualified) should match `man technologist: dark skin tone` (👨🏿‍💻)" do
  "👨🏿‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍💻"
end
it "`1F469 200D 1F4BB` (fully-qualified) should match `woman technologist` (👩‍💻)" do
  "👩‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍💻"
end
it "`1F469 1F3FB 200D 1F4BB` (fully-qualified) should match `woman technologist: light skin tone` (👩🏻‍💻)" do
  "👩🏻‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍💻"
end
it "`1F469 1F3FC 200D 1F4BB` (fully-qualified) should match `woman technologist: medium-light skin tone` (👩🏼‍💻)" do
  "👩🏼‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍💻"
end
it "`1F469 1F3FD 200D 1F4BB` (fully-qualified) should match `woman technologist: medium skin tone` (👩🏽‍💻)" do
  "👩🏽‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍💻"
end
it "`1F469 1F3FE 200D 1F4BB` (fully-qualified) should match `woman technologist: medium-dark skin tone` (👩🏾‍💻)" do
  "👩🏾‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍💻"
end
it "`1F469 1F3FF 200D 1F4BB` (fully-qualified) should match `woman technologist: dark skin tone` (👩🏿‍💻)" do
  "👩🏿‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍💻"
end
it "`1F468 200D 1F3A4` (fully-qualified) should match `man singer` (👨‍🎤)" do
  "👨‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🎤"
end
it "`1F468 1F3FB 200D 1F3A4` (fully-qualified) should match `man singer: light skin tone` (👨🏻‍🎤)" do
  "👨🏻‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🎤"
end
it "`1F468 1F3FC 200D 1F3A4` (fully-qualified) should match `man singer: medium-light skin tone` (👨🏼‍🎤)" do
  "👨🏼‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🎤"
end
it "`1F468 1F3FD 200D 1F3A4` (fully-qualified) should match `man singer: medium skin tone` (👨🏽‍🎤)" do
  "👨🏽‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🎤"
end
it "`1F468 1F3FE 200D 1F3A4` (fully-qualified) should match `man singer: medium-dark skin tone` (👨🏾‍🎤)" do
  "👨🏾‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🎤"
end
it "`1F468 1F3FF 200D 1F3A4` (fully-qualified) should match `man singer: dark skin tone` (👨🏿‍🎤)" do
  "👨🏿‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🎤"
end
it "`1F469 200D 1F3A4` (fully-qualified) should match `woman singer` (👩‍🎤)" do
  "👩‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🎤"
end
it "`1F469 1F3FB 200D 1F3A4` (fully-qualified) should match `woman singer: light skin tone` (👩🏻‍🎤)" do
  "👩🏻‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🎤"
end
it "`1F469 1F3FC 200D 1F3A4` (fully-qualified) should match `woman singer: medium-light skin tone` (👩🏼‍🎤)" do
  "👩🏼‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🎤"
end
it "`1F469 1F3FD 200D 1F3A4` (fully-qualified) should match `woman singer: medium skin tone` (👩🏽‍🎤)" do
  "👩🏽‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🎤"
end
it "`1F469 1F3FE 200D 1F3A4` (fully-qualified) should match `woman singer: medium-dark skin tone` (👩🏾‍🎤)" do
  "👩🏾‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🎤"
end
it "`1F469 1F3FF 200D 1F3A4` (fully-qualified) should match `woman singer: dark skin tone` (👩🏿‍🎤)" do
  "👩🏿‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🎤"
end
it "`1F468 200D 1F3A8` (fully-qualified) should match `man artist` (👨‍🎨)" do
  "👨‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🎨"
end
it "`1F468 1F3FB 200D 1F3A8` (fully-qualified) should match `man artist: light skin tone` (👨🏻‍🎨)" do
  "👨🏻‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🎨"
end
it "`1F468 1F3FC 200D 1F3A8` (fully-qualified) should match `man artist: medium-light skin tone` (👨🏼‍🎨)" do
  "👨🏼‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🎨"
end
it "`1F468 1F3FD 200D 1F3A8` (fully-qualified) should match `man artist: medium skin tone` (👨🏽‍🎨)" do
  "👨🏽‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🎨"
end
it "`1F468 1F3FE 200D 1F3A8` (fully-qualified) should match `man artist: medium-dark skin tone` (👨🏾‍🎨)" do
  "👨🏾‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🎨"
end
it "`1F468 1F3FF 200D 1F3A8` (fully-qualified) should match `man artist: dark skin tone` (👨🏿‍🎨)" do
  "👨🏿‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🎨"
end
it "`1F469 200D 1F3A8` (fully-qualified) should match `woman artist` (👩‍🎨)" do
  "👩‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🎨"
end
it "`1F469 1F3FB 200D 1F3A8` (fully-qualified) should match `woman artist: light skin tone` (👩🏻‍🎨)" do
  "👩🏻‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🎨"
end
it "`1F469 1F3FC 200D 1F3A8` (fully-qualified) should match `woman artist: medium-light skin tone` (👩🏼‍🎨)" do
  "👩🏼‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🎨"
end
it "`1F469 1F3FD 200D 1F3A8` (fully-qualified) should match `woman artist: medium skin tone` (👩🏽‍🎨)" do
  "👩🏽‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🎨"
end
it "`1F469 1F3FE 200D 1F3A8` (fully-qualified) should match `woman artist: medium-dark skin tone` (👩🏾‍🎨)" do
  "👩🏾‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🎨"
end
it "`1F469 1F3FF 200D 1F3A8` (fully-qualified) should match `woman artist: dark skin tone` (👩🏿‍🎨)" do
  "👩🏿‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🎨"
end
it "`1F468 200D 2708 FE0F` (fully-qualified) should match `man pilot` (👨‍✈️)" do
  "👨‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍✈️"
end
it "`1F468 200D 2708` (minimally-qualified) should match `man pilot` (👨‍✈)" do
  "👨‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍✈"
end
it "`1F468 1F3FB 200D 2708 FE0F` (fully-qualified) should match `man pilot: light skin tone` (👨🏻‍✈️)" do
  "👨🏻‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍✈️"
end
it "`1F468 1F3FB 200D 2708` (minimally-qualified) should match `man pilot: light skin tone` (👨🏻‍✈)" do
  "👨🏻‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍✈"
end
it "`1F468 1F3FC 200D 2708 FE0F` (fully-qualified) should match `man pilot: medium-light skin tone` (👨🏼‍✈️)" do
  "👨🏼‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍✈️"
end
it "`1F468 1F3FC 200D 2708` (minimally-qualified) should match `man pilot: medium-light skin tone` (👨🏼‍✈)" do
  "👨🏼‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍✈"
end
it "`1F468 1F3FD 200D 2708 FE0F` (fully-qualified) should match `man pilot: medium skin tone` (👨🏽‍✈️)" do
  "👨🏽‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍✈️"
end
it "`1F468 1F3FD 200D 2708` (minimally-qualified) should match `man pilot: medium skin tone` (👨🏽‍✈)" do
  "👨🏽‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍✈"
end
it "`1F468 1F3FE 200D 2708 FE0F` (fully-qualified) should match `man pilot: medium-dark skin tone` (👨🏾‍✈️)" do
  "👨🏾‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍✈️"
end
it "`1F468 1F3FE 200D 2708` (minimally-qualified) should match `man pilot: medium-dark skin tone` (👨🏾‍✈)" do
  "👨🏾‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍✈"
end
it "`1F468 1F3FF 200D 2708 FE0F` (fully-qualified) should match `man pilot: dark skin tone` (👨🏿‍✈️)" do
  "👨🏿‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍✈️"
end
it "`1F468 1F3FF 200D 2708` (minimally-qualified) should match `man pilot: dark skin tone` (👨🏿‍✈)" do
  "👨🏿‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍✈"
end
it "`1F469 200D 2708 FE0F` (fully-qualified) should match `woman pilot` (👩‍✈️)" do
  "👩‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍✈️"
end
it "`1F469 200D 2708` (minimally-qualified) should match `woman pilot` (👩‍✈)" do
  "👩‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍✈"
end
it "`1F469 1F3FB 200D 2708 FE0F` (fully-qualified) should match `woman pilot: light skin tone` (👩🏻‍✈️)" do
  "👩🏻‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍✈️"
end
it "`1F469 1F3FB 200D 2708` (minimally-qualified) should match `woman pilot: light skin tone` (👩🏻‍✈)" do
  "👩🏻‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍✈"
end
it "`1F469 1F3FC 200D 2708 FE0F` (fully-qualified) should match `woman pilot: medium-light skin tone` (👩🏼‍✈️)" do
  "👩🏼‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍✈️"
end
it "`1F469 1F3FC 200D 2708` (minimally-qualified) should match `woman pilot: medium-light skin tone` (👩🏼‍✈)" do
  "👩🏼‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍✈"
end
it "`1F469 1F3FD 200D 2708 FE0F` (fully-qualified) should match `woman pilot: medium skin tone` (👩🏽‍✈️)" do
  "👩🏽‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍✈️"
end
it "`1F469 1F3FD 200D 2708` (minimally-qualified) should match `woman pilot: medium skin tone` (👩🏽‍✈)" do
  "👩🏽‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍✈"
end
it "`1F469 1F3FE 200D 2708 FE0F` (fully-qualified) should match `woman pilot: medium-dark skin tone` (👩🏾‍✈️)" do
  "👩🏾‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍✈️"
end
it "`1F469 1F3FE 200D 2708` (minimally-qualified) should match `woman pilot: medium-dark skin tone` (👩🏾‍✈)" do
  "👩🏾‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍✈"
end
it "`1F469 1F3FF 200D 2708 FE0F` (fully-qualified) should match `woman pilot: dark skin tone` (👩🏿‍✈️)" do
  "👩🏿‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍✈️"
end
it "`1F469 1F3FF 200D 2708` (minimally-qualified) should match `woman pilot: dark skin tone` (👩🏿‍✈)" do
  "👩🏿‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍✈"
end
it "`1F468 200D 1F680` (fully-qualified) should match `man astronaut` (👨‍🚀)" do
  "👨‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🚀"
end
it "`1F468 1F3FB 200D 1F680` (fully-qualified) should match `man astronaut: light skin tone` (👨🏻‍🚀)" do
  "👨🏻‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🚀"
end
it "`1F468 1F3FC 200D 1F680` (fully-qualified) should match `man astronaut: medium-light skin tone` (👨🏼‍🚀)" do
  "👨🏼‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🚀"
end
it "`1F468 1F3FD 200D 1F680` (fully-qualified) should match `man astronaut: medium skin tone` (👨🏽‍🚀)" do
  "👨🏽‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🚀"
end
it "`1F468 1F3FE 200D 1F680` (fully-qualified) should match `man astronaut: medium-dark skin tone` (👨🏾‍🚀)" do
  "👨🏾‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🚀"
end
it "`1F468 1F3FF 200D 1F680` (fully-qualified) should match `man astronaut: dark skin tone` (👨🏿‍🚀)" do
  "👨🏿‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🚀"
end
it "`1F469 200D 1F680` (fully-qualified) should match `woman astronaut` (👩‍🚀)" do
  "👩‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🚀"
end
it "`1F469 1F3FB 200D 1F680` (fully-qualified) should match `woman astronaut: light skin tone` (👩🏻‍🚀)" do
  "👩🏻‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🚀"
end
it "`1F469 1F3FC 200D 1F680` (fully-qualified) should match `woman astronaut: medium-light skin tone` (👩🏼‍🚀)" do
  "👩🏼‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🚀"
end
it "`1F469 1F3FD 200D 1F680` (fully-qualified) should match `woman astronaut: medium skin tone` (👩🏽‍🚀)" do
  "👩🏽‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🚀"
end
it "`1F469 1F3FE 200D 1F680` (fully-qualified) should match `woman astronaut: medium-dark skin tone` (👩🏾‍🚀)" do
  "👩🏾‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🚀"
end
it "`1F469 1F3FF 200D 1F680` (fully-qualified) should match `woman astronaut: dark skin tone` (👩🏿‍🚀)" do
  "👩🏿‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🚀"
end
it "`1F468 200D 1F692` (fully-qualified) should match `man firefighter` (👨‍🚒)" do
  "👨‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🚒"
end
it "`1F468 1F3FB 200D 1F692` (fully-qualified) should match `man firefighter: light skin tone` (👨🏻‍🚒)" do
  "👨🏻‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🚒"
end
it "`1F468 1F3FC 200D 1F692` (fully-qualified) should match `man firefighter: medium-light skin tone` (👨🏼‍🚒)" do
  "👨🏼‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🚒"
end
it "`1F468 1F3FD 200D 1F692` (fully-qualified) should match `man firefighter: medium skin tone` (👨🏽‍🚒)" do
  "👨🏽‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🚒"
end
it "`1F468 1F3FE 200D 1F692` (fully-qualified) should match `man firefighter: medium-dark skin tone` (👨🏾‍🚒)" do
  "👨🏾‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🚒"
end
it "`1F468 1F3FF 200D 1F692` (fully-qualified) should match `man firefighter: dark skin tone` (👨🏿‍🚒)" do
  "👨🏿‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🚒"
end
it "`1F469 200D 1F692` (fully-qualified) should match `woman firefighter` (👩‍🚒)" do
  "👩‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🚒"
end
it "`1F469 1F3FB 200D 1F692` (fully-qualified) should match `woman firefighter: light skin tone` (👩🏻‍🚒)" do
  "👩🏻‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🚒"
end
it "`1F469 1F3FC 200D 1F692` (fully-qualified) should match `woman firefighter: medium-light skin tone` (👩🏼‍🚒)" do
  "👩🏼‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🚒"
end
it "`1F469 1F3FD 200D 1F692` (fully-qualified) should match `woman firefighter: medium skin tone` (👩🏽‍🚒)" do
  "👩🏽‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🚒"
end
it "`1F469 1F3FE 200D 1F692` (fully-qualified) should match `woman firefighter: medium-dark skin tone` (👩🏾‍🚒)" do
  "👩🏾‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🚒"
end
it "`1F469 1F3FF 200D 1F692` (fully-qualified) should match `woman firefighter: dark skin tone` (👩🏿‍🚒)" do
  "👩🏿‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🚒"
end
it "`1F46E` (fully-qualified) should match `police officer` (👮)" do
  "👮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮"
end
it "`1F46E 1F3FB` (fully-qualified) should match `police officer: light skin tone` (👮🏻)" do
  "👮🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻"
end
it "`1F46E 1F3FC` (fully-qualified) should match `police officer: medium-light skin tone` (👮🏼)" do
  "👮🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼"
end
it "`1F46E 1F3FD` (fully-qualified) should match `police officer: medium skin tone` (👮🏽)" do
  "👮🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽"
end
it "`1F46E 1F3FE` (fully-qualified) should match `police officer: medium-dark skin tone` (👮🏾)" do
  "👮🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾"
end
it "`1F46E 1F3FF` (fully-qualified) should match `police officer: dark skin tone` (👮🏿)" do
  "👮🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿"
end
it "`1F46E 200D 2642 FE0F` (fully-qualified) should match `man police officer` (👮‍♂️)" do
  "👮‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♂️"
end
it "`1F46E 200D 2642` (minimally-qualified) should match `man police officer` (👮‍♂)" do
  "👮‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♂"
end
it "`1F46E 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man police officer: light skin tone` (👮🏻‍♂️)" do
  "👮🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♂️"
end
it "`1F46E 1F3FB 200D 2642` (minimally-qualified) should match `man police officer: light skin tone` (👮🏻‍♂)" do
  "👮🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♂"
end
it "`1F46E 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man police officer: medium-light skin tone` (👮🏼‍♂️)" do
  "👮🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♂️"
end
it "`1F46E 1F3FC 200D 2642` (minimally-qualified) should match `man police officer: medium-light skin tone` (👮🏼‍♂)" do
  "👮🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♂"
end
it "`1F46E 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man police officer: medium skin tone` (👮🏽‍♂️)" do
  "👮🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♂️"
end
it "`1F46E 1F3FD 200D 2642` (minimally-qualified) should match `man police officer: medium skin tone` (👮🏽‍♂)" do
  "👮🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♂"
end
it "`1F46E 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man police officer: medium-dark skin tone` (👮🏾‍♂️)" do
  "👮🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♂️"
end
it "`1F46E 1F3FE 200D 2642` (minimally-qualified) should match `man police officer: medium-dark skin tone` (👮🏾‍♂)" do
  "👮🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♂"
end
it "`1F46E 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man police officer: dark skin tone` (👮🏿‍♂️)" do
  "👮🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♂️"
end
it "`1F46E 1F3FF 200D 2642` (minimally-qualified) should match `man police officer: dark skin tone` (👮🏿‍♂)" do
  "👮🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♂"
end
it "`1F46E 200D 2640 FE0F` (fully-qualified) should match `woman police officer` (👮‍♀️)" do
  "👮‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♀️"
end
it "`1F46E 200D 2640` (minimally-qualified) should match `woman police officer` (👮‍♀)" do
  "👮‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♀"
end
it "`1F46E 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman police officer: light skin tone` (👮🏻‍♀️)" do
  "👮🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♀️"
end
it "`1F46E 1F3FB 200D 2640` (minimally-qualified) should match `woman police officer: light skin tone` (👮🏻‍♀)" do
  "👮🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♀"
end
it "`1F46E 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman police officer: medium-light skin tone` (👮🏼‍♀️)" do
  "👮🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♀️"
end
it "`1F46E 1F3FC 200D 2640` (minimally-qualified) should match `woman police officer: medium-light skin tone` (👮🏼‍♀)" do
  "👮🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♀"
end
it "`1F46E 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman police officer: medium skin tone` (👮🏽‍♀️)" do
  "👮🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♀️"
end
it "`1F46E 1F3FD 200D 2640` (minimally-qualified) should match `woman police officer: medium skin tone` (👮🏽‍♀)" do
  "👮🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♀"
end
it "`1F46E 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman police officer: medium-dark skin tone` (👮🏾‍♀️)" do
  "👮🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♀️"
end
it "`1F46E 1F3FE 200D 2640` (minimally-qualified) should match `woman police officer: medium-dark skin tone` (👮🏾‍♀)" do
  "👮🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♀"
end
it "`1F46E 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman police officer: dark skin tone` (👮🏿‍♀️)" do
  "👮🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♀️"
end
it "`1F46E 1F3FF 200D 2640` (minimally-qualified) should match `woman police officer: dark skin tone` (👮🏿‍♀)" do
  "👮🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♀"
end
it "`1F575 FE0F` (fully-qualified) should match `detective` (🕵️)" do
  "🕵️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️"
end
it "`1F575` (unqualified) should match `detective` (🕵)" do
  "🕵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵"
end
it "`1F575 1F3FB` (fully-qualified) should match `detective: light skin tone` (🕵🏻)" do
  "🕵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻"
end
it "`1F575 1F3FC` (fully-qualified) should match `detective: medium-light skin tone` (🕵🏼)" do
  "🕵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼"
end
it "`1F575 1F3FD` (fully-qualified) should match `detective: medium skin tone` (🕵🏽)" do
  "🕵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽"
end
it "`1F575 1F3FE` (fully-qualified) should match `detective: medium-dark skin tone` (🕵🏾)" do
  "🕵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾"
end
it "`1F575 1F3FF` (fully-qualified) should match `detective: dark skin tone` (🕵🏿)" do
  "🕵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿"
end
it "`1F575 FE0F 200D 2642 FE0F` (fully-qualified) should match `man detective` (🕵️‍♂️)" do
  "🕵️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♂️"
end
it "`1F575 200D 2642 FE0F` (unqualified) should match `man detective` (🕵‍♂️)" do
  "🕵‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♂️"
end
it "`1F575 FE0F 200D 2642` (unqualified) should match `man detective` (🕵️‍♂)" do
  "🕵️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♂"
end
it "`1F575 200D 2642` (unqualified) should match `man detective` (🕵‍♂)" do
  "🕵‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♂"
end
it "`1F575 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man detective: light skin tone` (🕵🏻‍♂️)" do
  "🕵🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♂️"
end
it "`1F575 1F3FB 200D 2642` (minimally-qualified) should match `man detective: light skin tone` (🕵🏻‍♂)" do
  "🕵🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♂"
end
it "`1F575 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man detective: medium-light skin tone` (🕵🏼‍♂️)" do
  "🕵🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♂️"
end
it "`1F575 1F3FC 200D 2642` (minimally-qualified) should match `man detective: medium-light skin tone` (🕵🏼‍♂)" do
  "🕵🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♂"
end
it "`1F575 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man detective: medium skin tone` (🕵🏽‍♂️)" do
  "🕵🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♂️"
end
it "`1F575 1F3FD 200D 2642` (minimally-qualified) should match `man detective: medium skin tone` (🕵🏽‍♂)" do
  "🕵🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♂"
end
it "`1F575 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man detective: medium-dark skin tone` (🕵🏾‍♂️)" do
  "🕵🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♂️"
end
it "`1F575 1F3FE 200D 2642` (minimally-qualified) should match `man detective: medium-dark skin tone` (🕵🏾‍♂)" do
  "🕵🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♂"
end
it "`1F575 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man detective: dark skin tone` (🕵🏿‍♂️)" do
  "🕵🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♂️"
end
it "`1F575 1F3FF 200D 2642` (minimally-qualified) should match `man detective: dark skin tone` (🕵🏿‍♂)" do
  "🕵🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♂"
end
it "`1F575 FE0F 200D 2640 FE0F` (fully-qualified) should match `woman detective` (🕵️‍♀️)" do
  "🕵️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♀️"
end
it "`1F575 200D 2640 FE0F` (unqualified) should match `woman detective` (🕵‍♀️)" do
  "🕵‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♀️"
end
it "`1F575 FE0F 200D 2640` (unqualified) should match `woman detective` (🕵️‍♀)" do
  "🕵️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♀"
end
it "`1F575 200D 2640` (unqualified) should match `woman detective` (🕵‍♀)" do
  "🕵‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♀"
end
it "`1F575 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman detective: light skin tone` (🕵🏻‍♀️)" do
  "🕵🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♀️"
end
it "`1F575 1F3FB 200D 2640` (minimally-qualified) should match `woman detective: light skin tone` (🕵🏻‍♀)" do
  "🕵🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♀"
end
it "`1F575 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman detective: medium-light skin tone` (🕵🏼‍♀️)" do
  "🕵🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♀️"
end
it "`1F575 1F3FC 200D 2640` (minimally-qualified) should match `woman detective: medium-light skin tone` (🕵🏼‍♀)" do
  "🕵🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♀"
end
it "`1F575 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman detective: medium skin tone` (🕵🏽‍♀️)" do
  "🕵🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♀️"
end
it "`1F575 1F3FD 200D 2640` (minimally-qualified) should match `woman detective: medium skin tone` (🕵🏽‍♀)" do
  "🕵🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♀"
end
it "`1F575 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman detective: medium-dark skin tone` (🕵🏾‍♀️)" do
  "🕵🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♀️"
end
it "`1F575 1F3FE 200D 2640` (minimally-qualified) should match `woman detective: medium-dark skin tone` (🕵🏾‍♀)" do
  "🕵🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♀"
end
it "`1F575 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman detective: dark skin tone` (🕵🏿‍♀️)" do
  "🕵🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♀️"
end
it "`1F575 1F3FF 200D 2640` (minimally-qualified) should match `woman detective: dark skin tone` (🕵🏿‍♀)" do
  "🕵🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♀"
end
it "`1F482` (fully-qualified) should match `guard` (💂)" do
  "💂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂"
end
it "`1F482 1F3FB` (fully-qualified) should match `guard: light skin tone` (💂🏻)" do
  "💂🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻"
end
it "`1F482 1F3FC` (fully-qualified) should match `guard: medium-light skin tone` (💂🏼)" do
  "💂🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼"
end
it "`1F482 1F3FD` (fully-qualified) should match `guard: medium skin tone` (💂🏽)" do
  "💂🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽"
end
it "`1F482 1F3FE` (fully-qualified) should match `guard: medium-dark skin tone` (💂🏾)" do
  "💂🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾"
end
it "`1F482 1F3FF` (fully-qualified) should match `guard: dark skin tone` (💂🏿)" do
  "💂🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿"
end
it "`1F482 200D 2642 FE0F` (fully-qualified) should match `man guard` (💂‍♂️)" do
  "💂‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♂️"
end
it "`1F482 200D 2642` (minimally-qualified) should match `man guard` (💂‍♂)" do
  "💂‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♂"
end
it "`1F482 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man guard: light skin tone` (💂🏻‍♂️)" do
  "💂🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♂️"
end
it "`1F482 1F3FB 200D 2642` (minimally-qualified) should match `man guard: light skin tone` (💂🏻‍♂)" do
  "💂🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♂"
end
it "`1F482 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man guard: medium-light skin tone` (💂🏼‍♂️)" do
  "💂🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♂️"
end
it "`1F482 1F3FC 200D 2642` (minimally-qualified) should match `man guard: medium-light skin tone` (💂🏼‍♂)" do
  "💂🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♂"
end
it "`1F482 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man guard: medium skin tone` (💂🏽‍♂️)" do
  "💂🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♂️"
end
it "`1F482 1F3FD 200D 2642` (minimally-qualified) should match `man guard: medium skin tone` (💂🏽‍♂)" do
  "💂🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♂"
end
it "`1F482 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man guard: medium-dark skin tone` (💂🏾‍♂️)" do
  "💂🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♂️"
end
it "`1F482 1F3FE 200D 2642` (minimally-qualified) should match `man guard: medium-dark skin tone` (💂🏾‍♂)" do
  "💂🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♂"
end
it "`1F482 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man guard: dark skin tone` (💂🏿‍♂️)" do
  "💂🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♂️"
end
it "`1F482 1F3FF 200D 2642` (minimally-qualified) should match `man guard: dark skin tone` (💂🏿‍♂)" do
  "💂🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♂"
end
it "`1F482 200D 2640 FE0F` (fully-qualified) should match `woman guard` (💂‍♀️)" do
  "💂‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♀️"
end
it "`1F482 200D 2640` (minimally-qualified) should match `woman guard` (💂‍♀)" do
  "💂‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♀"
end
it "`1F482 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman guard: light skin tone` (💂🏻‍♀️)" do
  "💂🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♀️"
end
it "`1F482 1F3FB 200D 2640` (minimally-qualified) should match `woman guard: light skin tone` (💂🏻‍♀)" do
  "💂🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♀"
end
it "`1F482 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman guard: medium-light skin tone` (💂🏼‍♀️)" do
  "💂🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♀️"
end
it "`1F482 1F3FC 200D 2640` (minimally-qualified) should match `woman guard: medium-light skin tone` (💂🏼‍♀)" do
  "💂🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♀"
end
it "`1F482 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman guard: medium skin tone` (💂🏽‍♀️)" do
  "💂🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♀️"
end
it "`1F482 1F3FD 200D 2640` (minimally-qualified) should match `woman guard: medium skin tone` (💂🏽‍♀)" do
  "💂🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♀"
end
it "`1F482 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman guard: medium-dark skin tone` (💂🏾‍♀️)" do
  "💂🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♀️"
end
it "`1F482 1F3FE 200D 2640` (minimally-qualified) should match `woman guard: medium-dark skin tone` (💂🏾‍♀)" do
  "💂🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♀"
end
it "`1F482 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman guard: dark skin tone` (💂🏿‍♀️)" do
  "💂🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♀️"
end
it "`1F482 1F3FF 200D 2640` (minimally-qualified) should match `woman guard: dark skin tone` (💂🏿‍♀)" do
  "💂🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♀"
end
it "`1F477` (fully-qualified) should match `construction worker` (👷)" do
  "👷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷"
end
it "`1F477 1F3FB` (fully-qualified) should match `construction worker: light skin tone` (👷🏻)" do
  "👷🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻"
end
it "`1F477 1F3FC` (fully-qualified) should match `construction worker: medium-light skin tone` (👷🏼)" do
  "👷🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼"
end
it "`1F477 1F3FD` (fully-qualified) should match `construction worker: medium skin tone` (👷🏽)" do
  "👷🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽"
end
it "`1F477 1F3FE` (fully-qualified) should match `construction worker: medium-dark skin tone` (👷🏾)" do
  "👷🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾"
end
it "`1F477 1F3FF` (fully-qualified) should match `construction worker: dark skin tone` (👷🏿)" do
  "👷🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿"
end
it "`1F477 200D 2642 FE0F` (fully-qualified) should match `man construction worker` (👷‍♂️)" do
  "👷‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♂️"
end
it "`1F477 200D 2642` (minimally-qualified) should match `man construction worker` (👷‍♂)" do
  "👷‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♂"
end
it "`1F477 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man construction worker: light skin tone` (👷🏻‍♂️)" do
  "👷🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♂️"
end
it "`1F477 1F3FB 200D 2642` (minimally-qualified) should match `man construction worker: light skin tone` (👷🏻‍♂)" do
  "👷🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♂"
end
it "`1F477 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man construction worker: medium-light skin tone` (👷🏼‍♂️)" do
  "👷🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♂️"
end
it "`1F477 1F3FC 200D 2642` (minimally-qualified) should match `man construction worker: medium-light skin tone` (👷🏼‍♂)" do
  "👷🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♂"
end
it "`1F477 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man construction worker: medium skin tone` (👷🏽‍♂️)" do
  "👷🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♂️"
end
it "`1F477 1F3FD 200D 2642` (minimally-qualified) should match `man construction worker: medium skin tone` (👷🏽‍♂)" do
  "👷🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♂"
end
it "`1F477 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man construction worker: medium-dark skin tone` (👷🏾‍♂️)" do
  "👷🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♂️"
end
it "`1F477 1F3FE 200D 2642` (minimally-qualified) should match `man construction worker: medium-dark skin tone` (👷🏾‍♂)" do
  "👷🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♂"
end
it "`1F477 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man construction worker: dark skin tone` (👷🏿‍♂️)" do
  "👷🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♂️"
end
it "`1F477 1F3FF 200D 2642` (minimally-qualified) should match `man construction worker: dark skin tone` (👷🏿‍♂)" do
  "👷🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♂"
end
it "`1F477 200D 2640 FE0F` (fully-qualified) should match `woman construction worker` (👷‍♀️)" do
  "👷‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♀️"
end
it "`1F477 200D 2640` (minimally-qualified) should match `woman construction worker` (👷‍♀)" do
  "👷‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♀"
end
it "`1F477 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: light skin tone` (👷🏻‍♀️)" do
  "👷🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♀️"
end
it "`1F477 1F3FB 200D 2640` (minimally-qualified) should match `woman construction worker: light skin tone` (👷🏻‍♀)" do
  "👷🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♀"
end
it "`1F477 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: medium-light skin tone` (👷🏼‍♀️)" do
  "👷🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♀️"
end
it "`1F477 1F3FC 200D 2640` (minimally-qualified) should match `woman construction worker: medium-light skin tone` (👷🏼‍♀)" do
  "👷🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♀"
end
it "`1F477 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: medium skin tone` (👷🏽‍♀️)" do
  "👷🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♀️"
end
it "`1F477 1F3FD 200D 2640` (minimally-qualified) should match `woman construction worker: medium skin tone` (👷🏽‍♀)" do
  "👷🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♀"
end
it "`1F477 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: medium-dark skin tone` (👷🏾‍♀️)" do
  "👷🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♀️"
end
it "`1F477 1F3FE 200D 2640` (minimally-qualified) should match `woman construction worker: medium-dark skin tone` (👷🏾‍♀)" do
  "👷🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♀"
end
it "`1F477 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: dark skin tone` (👷🏿‍♀️)" do
  "👷🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♀️"
end
it "`1F477 1F3FF 200D 2640` (minimally-qualified) should match `woman construction worker: dark skin tone` (👷🏿‍♀)" do
  "👷🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♀"
end
it "`1F934` (fully-qualified) should match `prince` (🤴)" do
  "🤴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴"
end
it "`1F934 1F3FB` (fully-qualified) should match `prince: light skin tone` (🤴🏻)" do
  "🤴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏻"
end
it "`1F934 1F3FC` (fully-qualified) should match `prince: medium-light skin tone` (🤴🏼)" do
  "🤴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏼"
end
it "`1F934 1F3FD` (fully-qualified) should match `prince: medium skin tone` (🤴🏽)" do
  "🤴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏽"
end
it "`1F934 1F3FE` (fully-qualified) should match `prince: medium-dark skin tone` (🤴🏾)" do
  "🤴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏾"
end
it "`1F934 1F3FF` (fully-qualified) should match `prince: dark skin tone` (🤴🏿)" do
  "🤴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏿"
end
it "`1F478` (fully-qualified) should match `princess` (👸)" do
  "👸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸"
end
it "`1F478 1F3FB` (fully-qualified) should match `princess: light skin tone` (👸🏻)" do
  "👸🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏻"
end
it "`1F478 1F3FC` (fully-qualified) should match `princess: medium-light skin tone` (👸🏼)" do
  "👸🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏼"
end
it "`1F478 1F3FD` (fully-qualified) should match `princess: medium skin tone` (👸🏽)" do
  "👸🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏽"
end
it "`1F478 1F3FE` (fully-qualified) should match `princess: medium-dark skin tone` (👸🏾)" do
  "👸🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏾"
end
it "`1F478 1F3FF` (fully-qualified) should match `princess: dark skin tone` (👸🏿)" do
  "👸🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏿"
end
it "`1F473` (fully-qualified) should match `person wearing turban` (👳)" do
  "👳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳"
end
it "`1F473 1F3FB` (fully-qualified) should match `person wearing turban: light skin tone` (👳🏻)" do
  "👳🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻"
end
it "`1F473 1F3FC` (fully-qualified) should match `person wearing turban: medium-light skin tone` (👳🏼)" do
  "👳🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼"
end
it "`1F473 1F3FD` (fully-qualified) should match `person wearing turban: medium skin tone` (👳🏽)" do
  "👳🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽"
end
it "`1F473 1F3FE` (fully-qualified) should match `person wearing turban: medium-dark skin tone` (👳🏾)" do
  "👳🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾"
end
it "`1F473 1F3FF` (fully-qualified) should match `person wearing turban: dark skin tone` (👳🏿)" do
  "👳🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿"
end
it "`1F473 200D 2642 FE0F` (fully-qualified) should match `man wearing turban` (👳‍♂️)" do
  "👳‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♂️"
end
it "`1F473 200D 2642` (minimally-qualified) should match `man wearing turban` (👳‍♂)" do
  "👳‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♂"
end
it "`1F473 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: light skin tone` (👳🏻‍♂️)" do
  "👳🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♂️"
end
it "`1F473 1F3FB 200D 2642` (minimally-qualified) should match `man wearing turban: light skin tone` (👳🏻‍♂)" do
  "👳🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♂"
end
it "`1F473 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: medium-light skin tone` (👳🏼‍♂️)" do
  "👳🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♂️"
end
it "`1F473 1F3FC 200D 2642` (minimally-qualified) should match `man wearing turban: medium-light skin tone` (👳🏼‍♂)" do
  "👳🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♂"
end
it "`1F473 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: medium skin tone` (👳🏽‍♂️)" do
  "👳🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♂️"
end
it "`1F473 1F3FD 200D 2642` (minimally-qualified) should match `man wearing turban: medium skin tone` (👳🏽‍♂)" do
  "👳🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♂"
end
it "`1F473 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: medium-dark skin tone` (👳🏾‍♂️)" do
  "👳🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♂️"
end
it "`1F473 1F3FE 200D 2642` (minimally-qualified) should match `man wearing turban: medium-dark skin tone` (👳🏾‍♂)" do
  "👳🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♂"
end
it "`1F473 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: dark skin tone` (👳🏿‍♂️)" do
  "👳🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♂️"
end
it "`1F473 1F3FF 200D 2642` (minimally-qualified) should match `man wearing turban: dark skin tone` (👳🏿‍♂)" do
  "👳🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♂"
end
it "`1F473 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban` (👳‍♀️)" do
  "👳‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♀️"
end
it "`1F473 200D 2640` (minimally-qualified) should match `woman wearing turban` (👳‍♀)" do
  "👳‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♀"
end
it "`1F473 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: light skin tone` (👳🏻‍♀️)" do
  "👳🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♀️"
end
it "`1F473 1F3FB 200D 2640` (minimally-qualified) should match `woman wearing turban: light skin tone` (👳🏻‍♀)" do
  "👳🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♀"
end
it "`1F473 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: medium-light skin tone` (👳🏼‍♀️)" do
  "👳🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♀️"
end
it "`1F473 1F3FC 200D 2640` (minimally-qualified) should match `woman wearing turban: medium-light skin tone` (👳🏼‍♀)" do
  "👳🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♀"
end
it "`1F473 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: medium skin tone` (👳🏽‍♀️)" do
  "👳🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♀️"
end
it "`1F473 1F3FD 200D 2640` (minimally-qualified) should match `woman wearing turban: medium skin tone` (👳🏽‍♀)" do
  "👳🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♀"
end
it "`1F473 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: medium-dark skin tone` (👳🏾‍♀️)" do
  "👳🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♀️"
end
it "`1F473 1F3FE 200D 2640` (minimally-qualified) should match `woman wearing turban: medium-dark skin tone` (👳🏾‍♀)" do
  "👳🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♀"
end
it "`1F473 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: dark skin tone` (👳🏿‍♀️)" do
  "👳🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♀️"
end
it "`1F473 1F3FF 200D 2640` (minimally-qualified) should match `woman wearing turban: dark skin tone` (👳🏿‍♀)" do
  "👳🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♀"
end
it "`1F472` (fully-qualified) should match `man with Chinese cap` (👲)" do
  "👲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲"
end
it "`1F472 1F3FB` (fully-qualified) should match `man with Chinese cap: light skin tone` (👲🏻)" do
  "👲🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏻"
end
it "`1F472 1F3FC` (fully-qualified) should match `man with Chinese cap: medium-light skin tone` (👲🏼)" do
  "👲🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏼"
end
it "`1F472 1F3FD` (fully-qualified) should match `man with Chinese cap: medium skin tone` (👲🏽)" do
  "👲🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏽"
end
it "`1F472 1F3FE` (fully-qualified) should match `man with Chinese cap: medium-dark skin tone` (👲🏾)" do
  "👲🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏾"
end
it "`1F472 1F3FF` (fully-qualified) should match `man with Chinese cap: dark skin tone` (👲🏿)" do
  "👲🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏿"
end
it "`1F9D5` (fully-qualified) should match `woman with headscarf` (🧕)" do
  "🧕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕"
end
it "`1F9D5 1F3FB` (fully-qualified) should match `woman with headscarf: light skin tone` (🧕🏻)" do
  "🧕🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏻"
end
it "`1F9D5 1F3FC` (fully-qualified) should match `woman with headscarf: medium-light skin tone` (🧕🏼)" do
  "🧕🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏼"
end
it "`1F9D5 1F3FD` (fully-qualified) should match `woman with headscarf: medium skin tone` (🧕🏽)" do
  "🧕🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏽"
end
it "`1F9D5 1F3FE` (fully-qualified) should match `woman with headscarf: medium-dark skin tone` (🧕🏾)" do
  "🧕🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏾"
end
it "`1F9D5 1F3FF` (fully-qualified) should match `woman with headscarf: dark skin tone` (🧕🏿)" do
  "🧕🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏿"
end
it "`1F935` (fully-qualified) should match `man in tuxedo` (🤵)" do
  "🤵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵"
end
it "`1F935 1F3FB` (fully-qualified) should match `man in tuxedo: light skin tone` (🤵🏻)" do
  "🤵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏻"
end
it "`1F935 1F3FC` (fully-qualified) should match `man in tuxedo: medium-light skin tone` (🤵🏼)" do
  "🤵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏼"
end
it "`1F935 1F3FD` (fully-qualified) should match `man in tuxedo: medium skin tone` (🤵🏽)" do
  "🤵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏽"
end
it "`1F935 1F3FE` (fully-qualified) should match `man in tuxedo: medium-dark skin tone` (🤵🏾)" do
  "🤵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏾"
end
it "`1F935 1F3FF` (fully-qualified) should match `man in tuxedo: dark skin tone` (🤵🏿)" do
  "🤵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏿"
end
it "`1F470` (fully-qualified) should match `bride with veil` (👰)" do
  "👰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰"
end
it "`1F470 1F3FB` (fully-qualified) should match `bride with veil: light skin tone` (👰🏻)" do
  "👰🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏻"
end
it "`1F470 1F3FC` (fully-qualified) should match `bride with veil: medium-light skin tone` (👰🏼)" do
  "👰🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏼"
end
it "`1F470 1F3FD` (fully-qualified) should match `bride with veil: medium skin tone` (👰🏽)" do
  "👰🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏽"
end
it "`1F470 1F3FE` (fully-qualified) should match `bride with veil: medium-dark skin tone` (👰🏾)" do
  "👰🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏾"
end
it "`1F470 1F3FF` (fully-qualified) should match `bride with veil: dark skin tone` (👰🏿)" do
  "👰🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏿"
end
it "`1F930` (fully-qualified) should match `pregnant woman` (🤰)" do
  "🤰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰"
end
it "`1F930 1F3FB` (fully-qualified) should match `pregnant woman: light skin tone` (🤰🏻)" do
  "🤰🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏻"
end
it "`1F930 1F3FC` (fully-qualified) should match `pregnant woman: medium-light skin tone` (🤰🏼)" do
  "🤰🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏼"
end
it "`1F930 1F3FD` (fully-qualified) should match `pregnant woman: medium skin tone` (🤰🏽)" do
  "🤰🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏽"
end
it "`1F930 1F3FE` (fully-qualified) should match `pregnant woman: medium-dark skin tone` (🤰🏾)" do
  "🤰🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏾"
end
it "`1F930 1F3FF` (fully-qualified) should match `pregnant woman: dark skin tone` (🤰🏿)" do
  "🤰🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏿"
end
it "`1F931` (fully-qualified) should match `breast-feeding` (🤱)" do
  "🤱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱"
end
it "`1F931 1F3FB` (fully-qualified) should match `breast-feeding: light skin tone` (🤱🏻)" do
  "🤱🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏻"
end
it "`1F931 1F3FC` (fully-qualified) should match `breast-feeding: medium-light skin tone` (🤱🏼)" do
  "🤱🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏼"
end
it "`1F931 1F3FD` (fully-qualified) should match `breast-feeding: medium skin tone` (🤱🏽)" do
  "🤱🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏽"
end
it "`1F931 1F3FE` (fully-qualified) should match `breast-feeding: medium-dark skin tone` (🤱🏾)" do
  "🤱🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏾"
end
it "`1F931 1F3FF` (fully-qualified) should match `breast-feeding: dark skin tone` (🤱🏿)" do
  "🤱🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏿"
end
it "`1F47C` (fully-qualified) should match `baby angel` (👼)" do
  "👼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼"
end
it "`1F47C 1F3FB` (fully-qualified) should match `baby angel: light skin tone` (👼🏻)" do
  "👼🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏻"
end
it "`1F47C 1F3FC` (fully-qualified) should match `baby angel: medium-light skin tone` (👼🏼)" do
  "👼🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏼"
end
it "`1F47C 1F3FD` (fully-qualified) should match `baby angel: medium skin tone` (👼🏽)" do
  "👼🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏽"
end
it "`1F47C 1F3FE` (fully-qualified) should match `baby angel: medium-dark skin tone` (👼🏾)" do
  "👼🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏾"
end
it "`1F47C 1F3FF` (fully-qualified) should match `baby angel: dark skin tone` (👼🏿)" do
  "👼🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏿"
end
it "`1F385` (fully-qualified) should match `Santa Claus` (🎅)" do
  "🎅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅"
end
it "`1F385 1F3FB` (fully-qualified) should match `Santa Claus: light skin tone` (🎅🏻)" do
  "🎅🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏻"
end
it "`1F385 1F3FC` (fully-qualified) should match `Santa Claus: medium-light skin tone` (🎅🏼)" do
  "🎅🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏼"
end
it "`1F385 1F3FD` (fully-qualified) should match `Santa Claus: medium skin tone` (🎅🏽)" do
  "🎅🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏽"
end
it "`1F385 1F3FE` (fully-qualified) should match `Santa Claus: medium-dark skin tone` (🎅🏾)" do
  "🎅🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏾"
end
it "`1F385 1F3FF` (fully-qualified) should match `Santa Claus: dark skin tone` (🎅🏿)" do
  "🎅🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏿"
end
it "`1F936` (fully-qualified) should match `Mrs. Claus` (🤶)" do
  "🤶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶"
end
it "`1F936 1F3FB` (fully-qualified) should match `Mrs. Claus: light skin tone` (🤶🏻)" do
  "🤶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏻"
end
it "`1F936 1F3FC` (fully-qualified) should match `Mrs. Claus: medium-light skin tone` (🤶🏼)" do
  "🤶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏼"
end
it "`1F936 1F3FD` (fully-qualified) should match `Mrs. Claus: medium skin tone` (🤶🏽)" do
  "🤶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏽"
end
it "`1F936 1F3FE` (fully-qualified) should match `Mrs. Claus: medium-dark skin tone` (🤶🏾)" do
  "🤶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏾"
end
it "`1F936 1F3FF` (fully-qualified) should match `Mrs. Claus: dark skin tone` (🤶🏿)" do
  "🤶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏿"
end
it "`1F9B8` (fully-qualified) should match `superhero` (🦸)" do
  "🦸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸"
end
it "`1F9B8 1F3FB` (fully-qualified) should match `superhero: light skin tone` (🦸🏻)" do
  "🦸🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻"
end
it "`1F9B8 1F3FC` (fully-qualified) should match `superhero: medium-light skin tone` (🦸🏼)" do
  "🦸🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼"
end
it "`1F9B8 1F3FD` (fully-qualified) should match `superhero: medium skin tone` (🦸🏽)" do
  "🦸🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽"
end
it "`1F9B8 1F3FE` (fully-qualified) should match `superhero: medium-dark skin tone` (🦸🏾)" do
  "🦸🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾"
end
it "`1F9B8 1F3FF` (fully-qualified) should match `superhero: dark skin tone` (🦸🏿)" do
  "🦸🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿"
end
it "`1F9B8 200D 2642 FE0F` (fully-qualified) should match `man superhero` (🦸‍♂️)" do
  "🦸‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♂️"
end
it "`1F9B8 200D 2642` (minimally-qualified) should match `man superhero` (🦸‍♂)" do
  "🦸‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♂"
end
it "`1F9B8 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man superhero: light skin tone` (🦸🏻‍♂️)" do
  "🦸🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♂️"
end
it "`1F9B8 1F3FB 200D 2642` (minimally-qualified) should match `man superhero: light skin tone` (🦸🏻‍♂)" do
  "🦸🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♂"
end
it "`1F9B8 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man superhero: medium-light skin tone` (🦸🏼‍♂️)" do
  "🦸🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♂️"
end
it "`1F9B8 1F3FC 200D 2642` (minimally-qualified) should match `man superhero: medium-light skin tone` (🦸🏼‍♂)" do
  "🦸🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♂"
end
it "`1F9B8 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man superhero: medium skin tone` (🦸🏽‍♂️)" do
  "🦸🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♂️"
end
it "`1F9B8 1F3FD 200D 2642` (minimally-qualified) should match `man superhero: medium skin tone` (🦸🏽‍♂)" do
  "🦸🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♂"
end
it "`1F9B8 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man superhero: medium-dark skin tone` (🦸🏾‍♂️)" do
  "🦸🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♂️"
end
it "`1F9B8 1F3FE 200D 2642` (minimally-qualified) should match `man superhero: medium-dark skin tone` (🦸🏾‍♂)" do
  "🦸🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♂"
end
it "`1F9B8 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man superhero: dark skin tone` (🦸🏿‍♂️)" do
  "🦸🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♂️"
end
it "`1F9B8 1F3FF 200D 2642` (minimally-qualified) should match `man superhero: dark skin tone` (🦸🏿‍♂)" do
  "🦸🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♂"
end
it "`1F9B8 200D 2640 FE0F` (fully-qualified) should match `woman superhero` (🦸‍♀️)" do
  "🦸‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♀️"
end
it "`1F9B8 200D 2640` (minimally-qualified) should match `woman superhero` (🦸‍♀)" do
  "🦸‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♀"
end
it "`1F9B8 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman superhero: light skin tone` (🦸🏻‍♀️)" do
  "🦸🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♀️"
end
it "`1F9B8 1F3FB 200D 2640` (minimally-qualified) should match `woman superhero: light skin tone` (🦸🏻‍♀)" do
  "🦸🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♀"
end
it "`1F9B8 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman superhero: medium-light skin tone` (🦸🏼‍♀️)" do
  "🦸🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♀️"
end
it "`1F9B8 1F3FC 200D 2640` (minimally-qualified) should match `woman superhero: medium-light skin tone` (🦸🏼‍♀)" do
  "🦸🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♀"
end
it "`1F9B8 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman superhero: medium skin tone` (🦸🏽‍♀️)" do
  "🦸🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♀️"
end
it "`1F9B8 1F3FD 200D 2640` (minimally-qualified) should match `woman superhero: medium skin tone` (🦸🏽‍♀)" do
  "🦸🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♀"
end
it "`1F9B8 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman superhero: medium-dark skin tone` (🦸🏾‍♀️)" do
  "🦸🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♀️"
end
it "`1F9B8 1F3FE 200D 2640` (minimally-qualified) should match `woman superhero: medium-dark skin tone` (🦸🏾‍♀)" do
  "🦸🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♀"
end
it "`1F9B8 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman superhero: dark skin tone` (🦸🏿‍♀️)" do
  "🦸🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♀️"
end
it "`1F9B8 1F3FF 200D 2640` (minimally-qualified) should match `woman superhero: dark skin tone` (🦸🏿‍♀)" do
  "🦸🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♀"
end
it "`1F9B9` (fully-qualified) should match `supervillain` (🦹)" do
  "🦹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹"
end
it "`1F9B9 1F3FB` (fully-qualified) should match `supervillain: light skin tone` (🦹🏻)" do
  "🦹🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻"
end
it "`1F9B9 1F3FC` (fully-qualified) should match `supervillain: medium-light skin tone` (🦹🏼)" do
  "🦹🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼"
end
it "`1F9B9 1F3FD` (fully-qualified) should match `supervillain: medium skin tone` (🦹🏽)" do
  "🦹🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽"
end
it "`1F9B9 1F3FE` (fully-qualified) should match `supervillain: medium-dark skin tone` (🦹🏾)" do
  "🦹🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾"
end
it "`1F9B9 1F3FF` (fully-qualified) should match `supervillain: dark skin tone` (🦹🏿)" do
  "🦹🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿"
end
it "`1F9B9 200D 2642 FE0F` (fully-qualified) should match `man supervillain` (🦹‍♂️)" do
  "🦹‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♂️"
end
it "`1F9B9 200D 2642` (minimally-qualified) should match `man supervillain` (🦹‍♂)" do
  "🦹‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♂"
end
it "`1F9B9 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man supervillain: light skin tone` (🦹🏻‍♂️)" do
  "🦹🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♂️"
end
it "`1F9B9 1F3FB 200D 2642` (minimally-qualified) should match `man supervillain: light skin tone` (🦹🏻‍♂)" do
  "🦹🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♂"
end
it "`1F9B9 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man supervillain: medium-light skin tone` (🦹🏼‍♂️)" do
  "🦹🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♂️"
end
it "`1F9B9 1F3FC 200D 2642` (minimally-qualified) should match `man supervillain: medium-light skin tone` (🦹🏼‍♂)" do
  "🦹🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♂"
end
it "`1F9B9 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man supervillain: medium skin tone` (🦹🏽‍♂️)" do
  "🦹🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♂️"
end
it "`1F9B9 1F3FD 200D 2642` (minimally-qualified) should match `man supervillain: medium skin tone` (🦹🏽‍♂)" do
  "🦹🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♂"
end
it "`1F9B9 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man supervillain: medium-dark skin tone` (🦹🏾‍♂️)" do
  "🦹🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♂️"
end
it "`1F9B9 1F3FE 200D 2642` (minimally-qualified) should match `man supervillain: medium-dark skin tone` (🦹🏾‍♂)" do
  "🦹🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♂"
end
it "`1F9B9 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man supervillain: dark skin tone` (🦹🏿‍♂️)" do
  "🦹🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♂️"
end
it "`1F9B9 1F3FF 200D 2642` (minimally-qualified) should match `man supervillain: dark skin tone` (🦹🏿‍♂)" do
  "🦹🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♂"
end
it "`1F9B9 200D 2640 FE0F` (fully-qualified) should match `woman supervillain` (🦹‍♀️)" do
  "🦹‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♀️"
end
it "`1F9B9 200D 2640` (minimally-qualified) should match `woman supervillain` (🦹‍♀)" do
  "🦹‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♀"
end
it "`1F9B9 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: light skin tone` (🦹🏻‍♀️)" do
  "🦹🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♀️"
end
it "`1F9B9 1F3FB 200D 2640` (minimally-qualified) should match `woman supervillain: light skin tone` (🦹🏻‍♀)" do
  "🦹🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♀"
end
it "`1F9B9 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: medium-light skin tone` (🦹🏼‍♀️)" do
  "🦹🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♀️"
end
it "`1F9B9 1F3FC 200D 2640` (minimally-qualified) should match `woman supervillain: medium-light skin tone` (🦹🏼‍♀)" do
  "🦹🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♀"
end
it "`1F9B9 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: medium skin tone` (🦹🏽‍♀️)" do
  "🦹🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♀️"
end
it "`1F9B9 1F3FD 200D 2640` (minimally-qualified) should match `woman supervillain: medium skin tone` (🦹🏽‍♀)" do
  "🦹🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♀"
end
it "`1F9B9 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: medium-dark skin tone` (🦹🏾‍♀️)" do
  "🦹🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♀️"
end
it "`1F9B9 1F3FE 200D 2640` (minimally-qualified) should match `woman supervillain: medium-dark skin tone` (🦹🏾‍♀)" do
  "🦹🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♀"
end
it "`1F9B9 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: dark skin tone` (🦹🏿‍♀️)" do
  "🦹🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♀️"
end
it "`1F9B9 1F3FF 200D 2640` (minimally-qualified) should match `woman supervillain: dark skin tone` (🦹🏿‍♀)" do
  "🦹🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♀"
end
it "`1F9D9` (fully-qualified) should match `mage` (🧙)" do
  "🧙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙"
end
it "`1F9D9 1F3FB` (fully-qualified) should match `mage: light skin tone` (🧙🏻)" do
  "🧙🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻"
end
it "`1F9D9 1F3FC` (fully-qualified) should match `mage: medium-light skin tone` (🧙🏼)" do
  "🧙🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼"
end
it "`1F9D9 1F3FD` (fully-qualified) should match `mage: medium skin tone` (🧙🏽)" do
  "🧙🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽"
end
it "`1F9D9 1F3FE` (fully-qualified) should match `mage: medium-dark skin tone` (🧙🏾)" do
  "🧙🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾"
end
it "`1F9D9 1F3FF` (fully-qualified) should match `mage: dark skin tone` (🧙🏿)" do
  "🧙🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿"
end
it "`1F9D9 200D 2642 FE0F` (fully-qualified) should match `man mage` (🧙‍♂️)" do
  "🧙‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♂️"
end
it "`1F9D9 200D 2642` (minimally-qualified) should match `man mage` (🧙‍♂)" do
  "🧙‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♂"
end
it "`1F9D9 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man mage: light skin tone` (🧙🏻‍♂️)" do
  "🧙🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♂️"
end
it "`1F9D9 1F3FB 200D 2642` (minimally-qualified) should match `man mage: light skin tone` (🧙🏻‍♂)" do
  "🧙🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♂"
end
it "`1F9D9 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man mage: medium-light skin tone` (🧙🏼‍♂️)" do
  "🧙🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♂️"
end
it "`1F9D9 1F3FC 200D 2642` (minimally-qualified) should match `man mage: medium-light skin tone` (🧙🏼‍♂)" do
  "🧙🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♂"
end
it "`1F9D9 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man mage: medium skin tone` (🧙🏽‍♂️)" do
  "🧙🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♂️"
end
it "`1F9D9 1F3FD 200D 2642` (minimally-qualified) should match `man mage: medium skin tone` (🧙🏽‍♂)" do
  "🧙🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♂"
end
it "`1F9D9 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man mage: medium-dark skin tone` (🧙🏾‍♂️)" do
  "🧙🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♂️"
end
it "`1F9D9 1F3FE 200D 2642` (minimally-qualified) should match `man mage: medium-dark skin tone` (🧙🏾‍♂)" do
  "🧙🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♂"
end
it "`1F9D9 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man mage: dark skin tone` (🧙🏿‍♂️)" do
  "🧙🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♂️"
end
it "`1F9D9 1F3FF 200D 2642` (minimally-qualified) should match `man mage: dark skin tone` (🧙🏿‍♂)" do
  "🧙🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♂"
end
it "`1F9D9 200D 2640 FE0F` (fully-qualified) should match `woman mage` (🧙‍♀️)" do
  "🧙‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♀️"
end
it "`1F9D9 200D 2640` (minimally-qualified) should match `woman mage` (🧙‍♀)" do
  "🧙‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♀"
end
it "`1F9D9 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman mage: light skin tone` (🧙🏻‍♀️)" do
  "🧙🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♀️"
end
it "`1F9D9 1F3FB 200D 2640` (minimally-qualified) should match `woman mage: light skin tone` (🧙🏻‍♀)" do
  "🧙🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♀"
end
it "`1F9D9 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman mage: medium-light skin tone` (🧙🏼‍♀️)" do
  "🧙🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♀️"
end
it "`1F9D9 1F3FC 200D 2640` (minimally-qualified) should match `woman mage: medium-light skin tone` (🧙🏼‍♀)" do
  "🧙🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♀"
end
it "`1F9D9 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman mage: medium skin tone` (🧙🏽‍♀️)" do
  "🧙🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♀️"
end
it "`1F9D9 1F3FD 200D 2640` (minimally-qualified) should match `woman mage: medium skin tone` (🧙🏽‍♀)" do
  "🧙🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♀"
end
it "`1F9D9 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman mage: medium-dark skin tone` (🧙🏾‍♀️)" do
  "🧙🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♀️"
end
it "`1F9D9 1F3FE 200D 2640` (minimally-qualified) should match `woman mage: medium-dark skin tone` (🧙🏾‍♀)" do
  "🧙🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♀"
end
it "`1F9D9 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman mage: dark skin tone` (🧙🏿‍♀️)" do
  "🧙🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♀️"
end
it "`1F9D9 1F3FF 200D 2640` (minimally-qualified) should match `woman mage: dark skin tone` (🧙🏿‍♀)" do
  "🧙🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♀"
end
it "`1F9DA` (fully-qualified) should match `fairy` (🧚)" do
  "🧚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚"
end
it "`1F9DA 1F3FB` (fully-qualified) should match `fairy: light skin tone` (🧚🏻)" do
  "🧚🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻"
end
it "`1F9DA 1F3FC` (fully-qualified) should match `fairy: medium-light skin tone` (🧚🏼)" do
  "🧚🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼"
end
it "`1F9DA 1F3FD` (fully-qualified) should match `fairy: medium skin tone` (🧚🏽)" do
  "🧚🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽"
end
it "`1F9DA 1F3FE` (fully-qualified) should match `fairy: medium-dark skin tone` (🧚🏾)" do
  "🧚🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾"
end
it "`1F9DA 1F3FF` (fully-qualified) should match `fairy: dark skin tone` (🧚🏿)" do
  "🧚🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿"
end
it "`1F9DA 200D 2642 FE0F` (fully-qualified) should match `man fairy` (🧚‍♂️)" do
  "🧚‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♂️"
end
it "`1F9DA 200D 2642` (minimally-qualified) should match `man fairy` (🧚‍♂)" do
  "🧚‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♂"
end
it "`1F9DA 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man fairy: light skin tone` (🧚🏻‍♂️)" do
  "🧚🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♂️"
end
it "`1F9DA 1F3FB 200D 2642` (minimally-qualified) should match `man fairy: light skin tone` (🧚🏻‍♂)" do
  "🧚🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♂"
end
it "`1F9DA 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man fairy: medium-light skin tone` (🧚🏼‍♂️)" do
  "🧚🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♂️"
end
it "`1F9DA 1F3FC 200D 2642` (minimally-qualified) should match `man fairy: medium-light skin tone` (🧚🏼‍♂)" do
  "🧚🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♂"
end
it "`1F9DA 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man fairy: medium skin tone` (🧚🏽‍♂️)" do
  "🧚🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♂️"
end
it "`1F9DA 1F3FD 200D 2642` (minimally-qualified) should match `man fairy: medium skin tone` (🧚🏽‍♂)" do
  "🧚🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♂"
end
it "`1F9DA 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man fairy: medium-dark skin tone` (🧚🏾‍♂️)" do
  "🧚🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♂️"
end
it "`1F9DA 1F3FE 200D 2642` (minimally-qualified) should match `man fairy: medium-dark skin tone` (🧚🏾‍♂)" do
  "🧚🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♂"
end
it "`1F9DA 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man fairy: dark skin tone` (🧚🏿‍♂️)" do
  "🧚🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♂️"
end
it "`1F9DA 1F3FF 200D 2642` (minimally-qualified) should match `man fairy: dark skin tone` (🧚🏿‍♂)" do
  "🧚🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♂"
end
it "`1F9DA 200D 2640 FE0F` (fully-qualified) should match `woman fairy` (🧚‍♀️)" do
  "🧚‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♀️"
end
it "`1F9DA 200D 2640` (minimally-qualified) should match `woman fairy` (🧚‍♀)" do
  "🧚‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♀"
end
it "`1F9DA 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman fairy: light skin tone` (🧚🏻‍♀️)" do
  "🧚🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♀️"
end
it "`1F9DA 1F3FB 200D 2640` (minimally-qualified) should match `woman fairy: light skin tone` (🧚🏻‍♀)" do
  "🧚🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♀"
end
it "`1F9DA 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman fairy: medium-light skin tone` (🧚🏼‍♀️)" do
  "🧚🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♀️"
end
it "`1F9DA 1F3FC 200D 2640` (minimally-qualified) should match `woman fairy: medium-light skin tone` (🧚🏼‍♀)" do
  "🧚🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♀"
end
it "`1F9DA 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman fairy: medium skin tone` (🧚🏽‍♀️)" do
  "🧚🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♀️"
end
it "`1F9DA 1F3FD 200D 2640` (minimally-qualified) should match `woman fairy: medium skin tone` (🧚🏽‍♀)" do
  "🧚🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♀"
end
it "`1F9DA 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman fairy: medium-dark skin tone` (🧚🏾‍♀️)" do
  "🧚🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♀️"
end
it "`1F9DA 1F3FE 200D 2640` (minimally-qualified) should match `woman fairy: medium-dark skin tone` (🧚🏾‍♀)" do
  "🧚🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♀"
end
it "`1F9DA 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman fairy: dark skin tone` (🧚🏿‍♀️)" do
  "🧚🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♀️"
end
it "`1F9DA 1F3FF 200D 2640` (minimally-qualified) should match `woman fairy: dark skin tone` (🧚🏿‍♀)" do
  "🧚🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♀"
end
it "`1F9DB` (fully-qualified) should match `vampire` (🧛)" do
  "🧛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛"
end
it "`1F9DB 1F3FB` (fully-qualified) should match `vampire: light skin tone` (🧛🏻)" do
  "🧛🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻"
end
it "`1F9DB 1F3FC` (fully-qualified) should match `vampire: medium-light skin tone` (🧛🏼)" do
  "🧛🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼"
end
it "`1F9DB 1F3FD` (fully-qualified) should match `vampire: medium skin tone` (🧛🏽)" do
  "🧛🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽"
end
it "`1F9DB 1F3FE` (fully-qualified) should match `vampire: medium-dark skin tone` (🧛🏾)" do
  "🧛🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾"
end
it "`1F9DB 1F3FF` (fully-qualified) should match `vampire: dark skin tone` (🧛🏿)" do
  "🧛🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿"
end
it "`1F9DB 200D 2642 FE0F` (fully-qualified) should match `man vampire` (🧛‍♂️)" do
  "🧛‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♂️"
end
it "`1F9DB 200D 2642` (minimally-qualified) should match `man vampire` (🧛‍♂)" do
  "🧛‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♂"
end
it "`1F9DB 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man vampire: light skin tone` (🧛🏻‍♂️)" do
  "🧛🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♂️"
end
it "`1F9DB 1F3FB 200D 2642` (minimally-qualified) should match `man vampire: light skin tone` (🧛🏻‍♂)" do
  "🧛🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♂"
end
it "`1F9DB 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man vampire: medium-light skin tone` (🧛🏼‍♂️)" do
  "🧛🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♂️"
end
it "`1F9DB 1F3FC 200D 2642` (minimally-qualified) should match `man vampire: medium-light skin tone` (🧛🏼‍♂)" do
  "🧛🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♂"
end
it "`1F9DB 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man vampire: medium skin tone` (🧛🏽‍♂️)" do
  "🧛🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♂️"
end
it "`1F9DB 1F3FD 200D 2642` (minimally-qualified) should match `man vampire: medium skin tone` (🧛🏽‍♂)" do
  "🧛🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♂"
end
it "`1F9DB 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man vampire: medium-dark skin tone` (🧛🏾‍♂️)" do
  "🧛🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♂️"
end
it "`1F9DB 1F3FE 200D 2642` (minimally-qualified) should match `man vampire: medium-dark skin tone` (🧛🏾‍♂)" do
  "🧛🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♂"
end
it "`1F9DB 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man vampire: dark skin tone` (🧛🏿‍♂️)" do
  "🧛🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♂️"
end
it "`1F9DB 1F3FF 200D 2642` (minimally-qualified) should match `man vampire: dark skin tone` (🧛🏿‍♂)" do
  "🧛🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♂"
end
it "`1F9DB 200D 2640 FE0F` (fully-qualified) should match `woman vampire` (🧛‍♀️)" do
  "🧛‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♀️"
end
it "`1F9DB 200D 2640` (minimally-qualified) should match `woman vampire` (🧛‍♀)" do
  "🧛‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♀"
end
it "`1F9DB 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman vampire: light skin tone` (🧛🏻‍♀️)" do
  "🧛🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♀️"
end
it "`1F9DB 1F3FB 200D 2640` (minimally-qualified) should match `woman vampire: light skin tone` (🧛🏻‍♀)" do
  "🧛🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♀"
end
it "`1F9DB 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman vampire: medium-light skin tone` (🧛🏼‍♀️)" do
  "🧛🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♀️"
end
it "`1F9DB 1F3FC 200D 2640` (minimally-qualified) should match `woman vampire: medium-light skin tone` (🧛🏼‍♀)" do
  "🧛🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♀"
end
it "`1F9DB 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman vampire: medium skin tone` (🧛🏽‍♀️)" do
  "🧛🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♀️"
end
it "`1F9DB 1F3FD 200D 2640` (minimally-qualified) should match `woman vampire: medium skin tone` (🧛🏽‍♀)" do
  "🧛🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♀"
end
it "`1F9DB 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman vampire: medium-dark skin tone` (🧛🏾‍♀️)" do
  "🧛🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♀️"
end
it "`1F9DB 1F3FE 200D 2640` (minimally-qualified) should match `woman vampire: medium-dark skin tone` (🧛🏾‍♀)" do
  "🧛🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♀"
end
it "`1F9DB 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman vampire: dark skin tone` (🧛🏿‍♀️)" do
  "🧛🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♀️"
end
it "`1F9DB 1F3FF 200D 2640` (minimally-qualified) should match `woman vampire: dark skin tone` (🧛🏿‍♀)" do
  "🧛🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♀"
end
it "`1F9DC` (fully-qualified) should match `merperson` (🧜)" do
  "🧜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜"
end
it "`1F9DC 1F3FB` (fully-qualified) should match `merperson: light skin tone` (🧜🏻)" do
  "🧜🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻"
end
it "`1F9DC 1F3FC` (fully-qualified) should match `merperson: medium-light skin tone` (🧜🏼)" do
  "🧜🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼"
end
it "`1F9DC 1F3FD` (fully-qualified) should match `merperson: medium skin tone` (🧜🏽)" do
  "🧜🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽"
end
it "`1F9DC 1F3FE` (fully-qualified) should match `merperson: medium-dark skin tone` (🧜🏾)" do
  "🧜🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾"
end
it "`1F9DC 1F3FF` (fully-qualified) should match `merperson: dark skin tone` (🧜🏿)" do
  "🧜🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿"
end
it "`1F9DC 200D 2642 FE0F` (fully-qualified) should match `merman` (🧜‍♂️)" do
  "🧜‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♂️"
end
it "`1F9DC 200D 2642` (minimally-qualified) should match `merman` (🧜‍♂)" do
  "🧜‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♂"
end
it "`1F9DC 1F3FB 200D 2642 FE0F` (fully-qualified) should match `merman: light skin tone` (🧜🏻‍♂️)" do
  "🧜🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♂️"
end
it "`1F9DC 1F3FB 200D 2642` (minimally-qualified) should match `merman: light skin tone` (🧜🏻‍♂)" do
  "🧜🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♂"
end
it "`1F9DC 1F3FC 200D 2642 FE0F` (fully-qualified) should match `merman: medium-light skin tone` (🧜🏼‍♂️)" do
  "🧜🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♂️"
end
it "`1F9DC 1F3FC 200D 2642` (minimally-qualified) should match `merman: medium-light skin tone` (🧜🏼‍♂)" do
  "🧜🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♂"
end
it "`1F9DC 1F3FD 200D 2642 FE0F` (fully-qualified) should match `merman: medium skin tone` (🧜🏽‍♂️)" do
  "🧜🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♂️"
end
it "`1F9DC 1F3FD 200D 2642` (minimally-qualified) should match `merman: medium skin tone` (🧜🏽‍♂)" do
  "🧜🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♂"
end
it "`1F9DC 1F3FE 200D 2642 FE0F` (fully-qualified) should match `merman: medium-dark skin tone` (🧜🏾‍♂️)" do
  "🧜🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♂️"
end
it "`1F9DC 1F3FE 200D 2642` (minimally-qualified) should match `merman: medium-dark skin tone` (🧜🏾‍♂)" do
  "🧜🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♂"
end
it "`1F9DC 1F3FF 200D 2642 FE0F` (fully-qualified) should match `merman: dark skin tone` (🧜🏿‍♂️)" do
  "🧜🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♂️"
end
it "`1F9DC 1F3FF 200D 2642` (minimally-qualified) should match `merman: dark skin tone` (🧜🏿‍♂)" do
  "🧜🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♂"
end
it "`1F9DC 200D 2640 FE0F` (fully-qualified) should match `mermaid` (🧜‍♀️)" do
  "🧜‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♀️"
end
it "`1F9DC 200D 2640` (minimally-qualified) should match `mermaid` (🧜‍♀)" do
  "🧜‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♀"
end
it "`1F9DC 1F3FB 200D 2640 FE0F` (fully-qualified) should match `mermaid: light skin tone` (🧜🏻‍♀️)" do
  "🧜🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♀️"
end
it "`1F9DC 1F3FB 200D 2640` (minimally-qualified) should match `mermaid: light skin tone` (🧜🏻‍♀)" do
  "🧜🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♀"
end
it "`1F9DC 1F3FC 200D 2640 FE0F` (fully-qualified) should match `mermaid: medium-light skin tone` (🧜🏼‍♀️)" do
  "🧜🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♀️"
end
it "`1F9DC 1F3FC 200D 2640` (minimally-qualified) should match `mermaid: medium-light skin tone` (🧜🏼‍♀)" do
  "🧜🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♀"
end
it "`1F9DC 1F3FD 200D 2640 FE0F` (fully-qualified) should match `mermaid: medium skin tone` (🧜🏽‍♀️)" do
  "🧜🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♀️"
end
it "`1F9DC 1F3FD 200D 2640` (minimally-qualified) should match `mermaid: medium skin tone` (🧜🏽‍♀)" do
  "🧜🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♀"
end
it "`1F9DC 1F3FE 200D 2640 FE0F` (fully-qualified) should match `mermaid: medium-dark skin tone` (🧜🏾‍♀️)" do
  "🧜🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♀️"
end
it "`1F9DC 1F3FE 200D 2640` (minimally-qualified) should match `mermaid: medium-dark skin tone` (🧜🏾‍♀)" do
  "🧜🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♀"
end
it "`1F9DC 1F3FF 200D 2640 FE0F` (fully-qualified) should match `mermaid: dark skin tone` (🧜🏿‍♀️)" do
  "🧜🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♀️"
end
it "`1F9DC 1F3FF 200D 2640` (minimally-qualified) should match `mermaid: dark skin tone` (🧜🏿‍♀)" do
  "🧜🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♀"
end
it "`1F9DD` (fully-qualified) should match `elf` (🧝)" do
  "🧝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝"
end
it "`1F9DD 1F3FB` (fully-qualified) should match `elf: light skin tone` (🧝🏻)" do
  "🧝🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻"
end
it "`1F9DD 1F3FC` (fully-qualified) should match `elf: medium-light skin tone` (🧝🏼)" do
  "🧝🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼"
end
it "`1F9DD 1F3FD` (fully-qualified) should match `elf: medium skin tone` (🧝🏽)" do
  "🧝🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽"
end
it "`1F9DD 1F3FE` (fully-qualified) should match `elf: medium-dark skin tone` (🧝🏾)" do
  "🧝🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾"
end
it "`1F9DD 1F3FF` (fully-qualified) should match `elf: dark skin tone` (🧝🏿)" do
  "🧝🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿"
end
it "`1F9DD 200D 2642 FE0F` (fully-qualified) should match `man elf` (🧝‍♂️)" do
  "🧝‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♂️"
end
it "`1F9DD 200D 2642` (minimally-qualified) should match `man elf` (🧝‍♂)" do
  "🧝‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♂"
end
it "`1F9DD 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man elf: light skin tone` (🧝🏻‍♂️)" do
  "🧝🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♂️"
end
it "`1F9DD 1F3FB 200D 2642` (minimally-qualified) should match `man elf: light skin tone` (🧝🏻‍♂)" do
  "🧝🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♂"
end
it "`1F9DD 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man elf: medium-light skin tone` (🧝🏼‍♂️)" do
  "🧝🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♂️"
end
it "`1F9DD 1F3FC 200D 2642` (minimally-qualified) should match `man elf: medium-light skin tone` (🧝🏼‍♂)" do
  "🧝🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♂"
end
it "`1F9DD 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man elf: medium skin tone` (🧝🏽‍♂️)" do
  "🧝🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♂️"
end
it "`1F9DD 1F3FD 200D 2642` (minimally-qualified) should match `man elf: medium skin tone` (🧝🏽‍♂)" do
  "🧝🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♂"
end
it "`1F9DD 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man elf: medium-dark skin tone` (🧝🏾‍♂️)" do
  "🧝🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♂️"
end
it "`1F9DD 1F3FE 200D 2642` (minimally-qualified) should match `man elf: medium-dark skin tone` (🧝🏾‍♂)" do
  "🧝🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♂"
end
it "`1F9DD 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man elf: dark skin tone` (🧝🏿‍♂️)" do
  "🧝🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♂️"
end
it "`1F9DD 1F3FF 200D 2642` (minimally-qualified) should match `man elf: dark skin tone` (🧝🏿‍♂)" do
  "🧝🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♂"
end
it "`1F9DD 200D 2640 FE0F` (fully-qualified) should match `woman elf` (🧝‍♀️)" do
  "🧝‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♀️"
end
it "`1F9DD 200D 2640` (minimally-qualified) should match `woman elf` (🧝‍♀)" do
  "🧝‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♀"
end
it "`1F9DD 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman elf: light skin tone` (🧝🏻‍♀️)" do
  "🧝🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♀️"
end
it "`1F9DD 1F3FB 200D 2640` (minimally-qualified) should match `woman elf: light skin tone` (🧝🏻‍♀)" do
  "🧝🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♀"
end
it "`1F9DD 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman elf: medium-light skin tone` (🧝🏼‍♀️)" do
  "🧝🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♀️"
end
it "`1F9DD 1F3FC 200D 2640` (minimally-qualified) should match `woman elf: medium-light skin tone` (🧝🏼‍♀)" do
  "🧝🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♀"
end
it "`1F9DD 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman elf: medium skin tone` (🧝🏽‍♀️)" do
  "🧝🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♀️"
end
it "`1F9DD 1F3FD 200D 2640` (minimally-qualified) should match `woman elf: medium skin tone` (🧝🏽‍♀)" do
  "🧝🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♀"
end
it "`1F9DD 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman elf: medium-dark skin tone` (🧝🏾‍♀️)" do
  "🧝🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♀️"
end
it "`1F9DD 1F3FE 200D 2640` (minimally-qualified) should match `woman elf: medium-dark skin tone` (🧝🏾‍♀)" do
  "🧝🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♀"
end
it "`1F9DD 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman elf: dark skin tone` (🧝🏿‍♀️)" do
  "🧝🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♀️"
end
it "`1F9DD 1F3FF 200D 2640` (minimally-qualified) should match `woman elf: dark skin tone` (🧝🏿‍♀)" do
  "🧝🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♀"
end
it "`1F9DE` (fully-qualified) should match `genie` (🧞)" do
  "🧞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞"
end
it "`1F9DE 200D 2642 FE0F` (fully-qualified) should match `man genie` (🧞‍♂️)" do
  "🧞‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♂️"
end
it "`1F9DE 200D 2642` (minimally-qualified) should match `man genie` (🧞‍♂)" do
  "🧞‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♂"
end
it "`1F9DE 200D 2640 FE0F` (fully-qualified) should match `woman genie` (🧞‍♀️)" do
  "🧞‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♀️"
end
it "`1F9DE 200D 2640` (minimally-qualified) should match `woman genie` (🧞‍♀)" do
  "🧞‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♀"
end
it "`1F9DF` (fully-qualified) should match `zombie` (🧟)" do
  "🧟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟"
end
it "`1F9DF 200D 2642 FE0F` (fully-qualified) should match `man zombie` (🧟‍♂️)" do
  "🧟‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♂️"
end
it "`1F9DF 200D 2642` (minimally-qualified) should match `man zombie` (🧟‍♂)" do
  "🧟‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♂"
end
it "`1F9DF 200D 2640 FE0F` (fully-qualified) should match `woman zombie` (🧟‍♀️)" do
  "🧟‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♀️"
end
it "`1F9DF 200D 2640` (minimally-qualified) should match `woman zombie` (🧟‍♀)" do
  "🧟‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♀"
end
it "`1F486` (fully-qualified) should match `person getting massage` (💆)" do
  "💆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆"
end
it "`1F486 1F3FB` (fully-qualified) should match `person getting massage: light skin tone` (💆🏻)" do
  "💆🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻"
end
it "`1F486 1F3FC` (fully-qualified) should match `person getting massage: medium-light skin tone` (💆🏼)" do
  "💆🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼"
end
it "`1F486 1F3FD` (fully-qualified) should match `person getting massage: medium skin tone` (💆🏽)" do
  "💆🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽"
end
it "`1F486 1F3FE` (fully-qualified) should match `person getting massage: medium-dark skin tone` (💆🏾)" do
  "💆🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾"
end
it "`1F486 1F3FF` (fully-qualified) should match `person getting massage: dark skin tone` (💆🏿)" do
  "💆🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿"
end
it "`1F486 200D 2642 FE0F` (fully-qualified) should match `man getting massage` (💆‍♂️)" do
  "💆‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♂️"
end
it "`1F486 200D 2642` (minimally-qualified) should match `man getting massage` (💆‍♂)" do
  "💆‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♂"
end
it "`1F486 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man getting massage: light skin tone` (💆🏻‍♂️)" do
  "💆🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♂️"
end
it "`1F486 1F3FB 200D 2642` (minimally-qualified) should match `man getting massage: light skin tone` (💆🏻‍♂)" do
  "💆🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♂"
end
it "`1F486 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man getting massage: medium-light skin tone` (💆🏼‍♂️)" do
  "💆🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♂️"
end
it "`1F486 1F3FC 200D 2642` (minimally-qualified) should match `man getting massage: medium-light skin tone` (💆🏼‍♂)" do
  "💆🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♂"
end
it "`1F486 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man getting massage: medium skin tone` (💆🏽‍♂️)" do
  "💆🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♂️"
end
it "`1F486 1F3FD 200D 2642` (minimally-qualified) should match `man getting massage: medium skin tone` (💆🏽‍♂)" do
  "💆🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♂"
end
it "`1F486 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man getting massage: medium-dark skin tone` (💆🏾‍♂️)" do
  "💆🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♂️"
end
it "`1F486 1F3FE 200D 2642` (minimally-qualified) should match `man getting massage: medium-dark skin tone` (💆🏾‍♂)" do
  "💆🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♂"
end
it "`1F486 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man getting massage: dark skin tone` (💆🏿‍♂️)" do
  "💆🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♂️"
end
it "`1F486 1F3FF 200D 2642` (minimally-qualified) should match `man getting massage: dark skin tone` (💆🏿‍♂)" do
  "💆🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♂"
end
it "`1F486 200D 2640 FE0F` (fully-qualified) should match `woman getting massage` (💆‍♀️)" do
  "💆‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♀️"
end
it "`1F486 200D 2640` (minimally-qualified) should match `woman getting massage` (💆‍♀)" do
  "💆‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♀"
end
it "`1F486 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: light skin tone` (💆🏻‍♀️)" do
  "💆🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♀️"
end
it "`1F486 1F3FB 200D 2640` (minimally-qualified) should match `woman getting massage: light skin tone` (💆🏻‍♀)" do
  "💆🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♀"
end
it "`1F486 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: medium-light skin tone` (💆🏼‍♀️)" do
  "💆🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♀️"
end
it "`1F486 1F3FC 200D 2640` (minimally-qualified) should match `woman getting massage: medium-light skin tone` (💆🏼‍♀)" do
  "💆🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♀"
end
it "`1F486 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: medium skin tone` (💆🏽‍♀️)" do
  "💆🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♀️"
end
it "`1F486 1F3FD 200D 2640` (minimally-qualified) should match `woman getting massage: medium skin tone` (💆🏽‍♀)" do
  "💆🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♀"
end
it "`1F486 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: medium-dark skin tone` (💆🏾‍♀️)" do
  "💆🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♀️"
end
it "`1F486 1F3FE 200D 2640` (minimally-qualified) should match `woman getting massage: medium-dark skin tone` (💆🏾‍♀)" do
  "💆🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♀"
end
it "`1F486 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: dark skin tone` (💆🏿‍♀️)" do
  "💆🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♀️"
end
it "`1F486 1F3FF 200D 2640` (minimally-qualified) should match `woman getting massage: dark skin tone` (💆🏿‍♀)" do
  "💆🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♀"
end
it "`1F487` (fully-qualified) should match `person getting haircut` (💇)" do
  "💇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇"
end
it "`1F487 1F3FB` (fully-qualified) should match `person getting haircut: light skin tone` (💇🏻)" do
  "💇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻"
end
it "`1F487 1F3FC` (fully-qualified) should match `person getting haircut: medium-light skin tone` (💇🏼)" do
  "💇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼"
end
it "`1F487 1F3FD` (fully-qualified) should match `person getting haircut: medium skin tone` (💇🏽)" do
  "💇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽"
end
it "`1F487 1F3FE` (fully-qualified) should match `person getting haircut: medium-dark skin tone` (💇🏾)" do
  "💇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾"
end
it "`1F487 1F3FF` (fully-qualified) should match `person getting haircut: dark skin tone` (💇🏿)" do
  "💇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿"
end
it "`1F487 200D 2642 FE0F` (fully-qualified) should match `man getting haircut` (💇‍♂️)" do
  "💇‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♂️"
end
it "`1F487 200D 2642` (minimally-qualified) should match `man getting haircut` (💇‍♂)" do
  "💇‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♂"
end
it "`1F487 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: light skin tone` (💇🏻‍♂️)" do
  "💇🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♂️"
end
it "`1F487 1F3FB 200D 2642` (minimally-qualified) should match `man getting haircut: light skin tone` (💇🏻‍♂)" do
  "💇🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♂"
end
it "`1F487 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: medium-light skin tone` (💇🏼‍♂️)" do
  "💇🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♂️"
end
it "`1F487 1F3FC 200D 2642` (minimally-qualified) should match `man getting haircut: medium-light skin tone` (💇🏼‍♂)" do
  "💇🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♂"
end
it "`1F487 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: medium skin tone` (💇🏽‍♂️)" do
  "💇🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♂️"
end
it "`1F487 1F3FD 200D 2642` (minimally-qualified) should match `man getting haircut: medium skin tone` (💇🏽‍♂)" do
  "💇🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♂"
end
it "`1F487 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: medium-dark skin tone` (💇🏾‍♂️)" do
  "💇🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♂️"
end
it "`1F487 1F3FE 200D 2642` (minimally-qualified) should match `man getting haircut: medium-dark skin tone` (💇🏾‍♂)" do
  "💇🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♂"
end
it "`1F487 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: dark skin tone` (💇🏿‍♂️)" do
  "💇🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♂️"
end
it "`1F487 1F3FF 200D 2642` (minimally-qualified) should match `man getting haircut: dark skin tone` (💇🏿‍♂)" do
  "💇🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♂"
end
it "`1F487 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut` (💇‍♀️)" do
  "💇‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♀️"
end
it "`1F487 200D 2640` (minimally-qualified) should match `woman getting haircut` (💇‍♀)" do
  "💇‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♀"
end
it "`1F487 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: light skin tone` (💇🏻‍♀️)" do
  "💇🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♀️"
end
it "`1F487 1F3FB 200D 2640` (minimally-qualified) should match `woman getting haircut: light skin tone` (💇🏻‍♀)" do
  "💇🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♀"
end
it "`1F487 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: medium-light skin tone` (💇🏼‍♀️)" do
  "💇🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♀️"
end
it "`1F487 1F3FC 200D 2640` (minimally-qualified) should match `woman getting haircut: medium-light skin tone` (💇🏼‍♀)" do
  "💇🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♀"
end
it "`1F487 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: medium skin tone` (💇🏽‍♀️)" do
  "💇🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♀️"
end
it "`1F487 1F3FD 200D 2640` (minimally-qualified) should match `woman getting haircut: medium skin tone` (💇🏽‍♀)" do
  "💇🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♀"
end
it "`1F487 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: medium-dark skin tone` (💇🏾‍♀️)" do
  "💇🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♀️"
end
it "`1F487 1F3FE 200D 2640` (minimally-qualified) should match `woman getting haircut: medium-dark skin tone` (💇🏾‍♀)" do
  "💇🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♀"
end
it "`1F487 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: dark skin tone` (💇🏿‍♀️)" do
  "💇🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♀️"
end
it "`1F487 1F3FF 200D 2640` (minimally-qualified) should match `woman getting haircut: dark skin tone` (💇🏿‍♀)" do
  "💇🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♀"
end
it "`1F6B6` (fully-qualified) should match `person walking` (🚶)" do
  "🚶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶"
end
it "`1F6B6 1F3FB` (fully-qualified) should match `person walking: light skin tone` (🚶🏻)" do
  "🚶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻"
end
it "`1F6B6 1F3FC` (fully-qualified) should match `person walking: medium-light skin tone` (🚶🏼)" do
  "🚶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼"
end
it "`1F6B6 1F3FD` (fully-qualified) should match `person walking: medium skin tone` (🚶🏽)" do
  "🚶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽"
end
it "`1F6B6 1F3FE` (fully-qualified) should match `person walking: medium-dark skin tone` (🚶🏾)" do
  "🚶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾"
end
it "`1F6B6 1F3FF` (fully-qualified) should match `person walking: dark skin tone` (🚶🏿)" do
  "🚶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿"
end
it "`1F6B6 200D 2642 FE0F` (fully-qualified) should match `man walking` (🚶‍♂️)" do
  "🚶‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♂️"
end
it "`1F6B6 200D 2642` (minimally-qualified) should match `man walking` (🚶‍♂)" do
  "🚶‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♂"
end
it "`1F6B6 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man walking: light skin tone` (🚶🏻‍♂️)" do
  "🚶🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♂️"
end
it "`1F6B6 1F3FB 200D 2642` (minimally-qualified) should match `man walking: light skin tone` (🚶🏻‍♂)" do
  "🚶🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♂"
end
it "`1F6B6 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man walking: medium-light skin tone` (🚶🏼‍♂️)" do
  "🚶🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♂️"
end
it "`1F6B6 1F3FC 200D 2642` (minimally-qualified) should match `man walking: medium-light skin tone` (🚶🏼‍♂)" do
  "🚶🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♂"
end
it "`1F6B6 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man walking: medium skin tone` (🚶🏽‍♂️)" do
  "🚶🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♂️"
end
it "`1F6B6 1F3FD 200D 2642` (minimally-qualified) should match `man walking: medium skin tone` (🚶🏽‍♂)" do
  "🚶🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♂"
end
it "`1F6B6 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man walking: medium-dark skin tone` (🚶🏾‍♂️)" do
  "🚶🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♂️"
end
it "`1F6B6 1F3FE 200D 2642` (minimally-qualified) should match `man walking: medium-dark skin tone` (🚶🏾‍♂)" do
  "🚶🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♂"
end
it "`1F6B6 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man walking: dark skin tone` (🚶🏿‍♂️)" do
  "🚶🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♂️"
end
it "`1F6B6 1F3FF 200D 2642` (minimally-qualified) should match `man walking: dark skin tone` (🚶🏿‍♂)" do
  "🚶🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♂"
end
it "`1F6B6 200D 2640 FE0F` (fully-qualified) should match `woman walking` (🚶‍♀️)" do
  "🚶‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♀️"
end
it "`1F6B6 200D 2640` (minimally-qualified) should match `woman walking` (🚶‍♀)" do
  "🚶‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♀"
end
it "`1F6B6 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman walking: light skin tone` (🚶🏻‍♀️)" do
  "🚶🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♀️"
end
it "`1F6B6 1F3FB 200D 2640` (minimally-qualified) should match `woman walking: light skin tone` (🚶🏻‍♀)" do
  "🚶🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♀"
end
it "`1F6B6 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman walking: medium-light skin tone` (🚶🏼‍♀️)" do
  "🚶🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♀️"
end
it "`1F6B6 1F3FC 200D 2640` (minimally-qualified) should match `woman walking: medium-light skin tone` (🚶🏼‍♀)" do
  "🚶🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♀"
end
it "`1F6B6 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman walking: medium skin tone` (🚶🏽‍♀️)" do
  "🚶🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♀️"
end
it "`1F6B6 1F3FD 200D 2640` (minimally-qualified) should match `woman walking: medium skin tone` (🚶🏽‍♀)" do
  "🚶🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♀"
end
it "`1F6B6 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman walking: medium-dark skin tone` (🚶🏾‍♀️)" do
  "🚶🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♀️"
end
it "`1F6B6 1F3FE 200D 2640` (minimally-qualified) should match `woman walking: medium-dark skin tone` (🚶🏾‍♀)" do
  "🚶🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♀"
end
it "`1F6B6 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman walking: dark skin tone` (🚶🏿‍♀️)" do
  "🚶🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♀️"
end
it "`1F6B6 1F3FF 200D 2640` (minimally-qualified) should match `woman walking: dark skin tone` (🚶🏿‍♀)" do
  "🚶🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♀"
end
it "`1F9CD` (fully-qualified) should match `person standing` (🧍)" do
  "🧍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍"
end
it "`1F9CD 1F3FB` (fully-qualified) should match `person standing: light skin tone` (🧍🏻)" do
  "🧍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻"
end
it "`1F9CD 1F3FC` (fully-qualified) should match `person standing: medium-light skin tone` (🧍🏼)" do
  "🧍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼"
end
it "`1F9CD 1F3FD` (fully-qualified) should match `person standing: medium skin tone` (🧍🏽)" do
  "🧍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽"
end
it "`1F9CD 1F3FE` (fully-qualified) should match `person standing: medium-dark skin tone` (🧍🏾)" do
  "🧍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾"
end
it "`1F9CD 1F3FF` (fully-qualified) should match `person standing: dark skin tone` (🧍🏿)" do
  "🧍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿"
end
it "`1F9CD 200D 2642 FE0F` (fully-qualified) should match `man standing` (🧍‍♂️)" do
  "🧍‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♂️"
end
it "`1F9CD 200D 2642` (minimally-qualified) should match `man standing` (🧍‍♂)" do
  "🧍‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♂"
end
it "`1F9CD 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man standing: light skin tone` (🧍🏻‍♂️)" do
  "🧍🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♂️"
end
it "`1F9CD 1F3FB 200D 2642` (minimally-qualified) should match `man standing: light skin tone` (🧍🏻‍♂)" do
  "🧍🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♂"
end
it "`1F9CD 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man standing: medium-light skin tone` (🧍🏼‍♂️)" do
  "🧍🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♂️"
end
it "`1F9CD 1F3FC 200D 2642` (minimally-qualified) should match `man standing: medium-light skin tone` (🧍🏼‍♂)" do
  "🧍🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♂"
end
it "`1F9CD 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man standing: medium skin tone` (🧍🏽‍♂️)" do
  "🧍🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♂️"
end
it "`1F9CD 1F3FD 200D 2642` (minimally-qualified) should match `man standing: medium skin tone` (🧍🏽‍♂)" do
  "🧍🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♂"
end
it "`1F9CD 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man standing: medium-dark skin tone` (🧍🏾‍♂️)" do
  "🧍🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♂️"
end
it "`1F9CD 1F3FE 200D 2642` (minimally-qualified) should match `man standing: medium-dark skin tone` (🧍🏾‍♂)" do
  "🧍🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♂"
end
it "`1F9CD 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man standing: dark skin tone` (🧍🏿‍♂️)" do
  "🧍🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♂️"
end
it "`1F9CD 1F3FF 200D 2642` (minimally-qualified) should match `man standing: dark skin tone` (🧍🏿‍♂)" do
  "🧍🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♂"
end
it "`1F9CD 200D 2640 FE0F` (fully-qualified) should match `woman standing` (🧍‍♀️)" do
  "🧍‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♀️"
end
it "`1F9CD 200D 2640` (minimally-qualified) should match `woman standing` (🧍‍♀)" do
  "🧍‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♀"
end
it "`1F9CD 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman standing: light skin tone` (🧍🏻‍♀️)" do
  "🧍🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♀️"
end
it "`1F9CD 1F3FB 200D 2640` (minimally-qualified) should match `woman standing: light skin tone` (🧍🏻‍♀)" do
  "🧍🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♀"
end
it "`1F9CD 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman standing: medium-light skin tone` (🧍🏼‍♀️)" do
  "🧍🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♀️"
end
it "`1F9CD 1F3FC 200D 2640` (minimally-qualified) should match `woman standing: medium-light skin tone` (🧍🏼‍♀)" do
  "🧍🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♀"
end
it "`1F9CD 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman standing: medium skin tone` (🧍🏽‍♀️)" do
  "🧍🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♀️"
end
it "`1F9CD 1F3FD 200D 2640` (minimally-qualified) should match `woman standing: medium skin tone` (🧍🏽‍♀)" do
  "🧍🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♀"
end
it "`1F9CD 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman standing: medium-dark skin tone` (🧍🏾‍♀️)" do
  "🧍🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♀️"
end
it "`1F9CD 1F3FE 200D 2640` (minimally-qualified) should match `woman standing: medium-dark skin tone` (🧍🏾‍♀)" do
  "🧍🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♀"
end
it "`1F9CD 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman standing: dark skin tone` (🧍🏿‍♀️)" do
  "🧍🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♀️"
end
it "`1F9CD 1F3FF 200D 2640` (minimally-qualified) should match `woman standing: dark skin tone` (🧍🏿‍♀)" do
  "🧍🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♀"
end
it "`1F9CE` (fully-qualified) should match `person kneeling` (🧎)" do
  "🧎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎"
end
it "`1F9CE 1F3FB` (fully-qualified) should match `person kneeling: light skin tone` (🧎🏻)" do
  "🧎🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻"
end
it "`1F9CE 1F3FC` (fully-qualified) should match `person kneeling: medium-light skin tone` (🧎🏼)" do
  "🧎🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼"
end
it "`1F9CE 1F3FD` (fully-qualified) should match `person kneeling: medium skin tone` (🧎🏽)" do
  "🧎🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽"
end
it "`1F9CE 1F3FE` (fully-qualified) should match `person kneeling: medium-dark skin tone` (🧎🏾)" do
  "🧎🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾"
end
it "`1F9CE 1F3FF` (fully-qualified) should match `person kneeling: dark skin tone` (🧎🏿)" do
  "🧎🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿"
end
it "`1F9CE 200D 2642 FE0F` (fully-qualified) should match `man kneeling` (🧎‍♂️)" do
  "🧎‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♂️"
end
it "`1F9CE 200D 2642` (minimally-qualified) should match `man kneeling` (🧎‍♂)" do
  "🧎‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♂"
end
it "`1F9CE 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man kneeling: light skin tone` (🧎🏻‍♂️)" do
  "🧎🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♂️"
end
it "`1F9CE 1F3FB 200D 2642` (minimally-qualified) should match `man kneeling: light skin tone` (🧎🏻‍♂)" do
  "🧎🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♂"
end
it "`1F9CE 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man kneeling: medium-light skin tone` (🧎🏼‍♂️)" do
  "🧎🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♂️"
end
it "`1F9CE 1F3FC 200D 2642` (minimally-qualified) should match `man kneeling: medium-light skin tone` (🧎🏼‍♂)" do
  "🧎🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♂"
end
it "`1F9CE 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man kneeling: medium skin tone` (🧎🏽‍♂️)" do
  "🧎🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♂️"
end
it "`1F9CE 1F3FD 200D 2642` (minimally-qualified) should match `man kneeling: medium skin tone` (🧎🏽‍♂)" do
  "🧎🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♂"
end
it "`1F9CE 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man kneeling: medium-dark skin tone` (🧎🏾‍♂️)" do
  "🧎🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♂️"
end
it "`1F9CE 1F3FE 200D 2642` (minimally-qualified) should match `man kneeling: medium-dark skin tone` (🧎🏾‍♂)" do
  "🧎🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♂"
end
it "`1F9CE 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man kneeling: dark skin tone` (🧎🏿‍♂️)" do
  "🧎🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♂️"
end
it "`1F9CE 1F3FF 200D 2642` (minimally-qualified) should match `man kneeling: dark skin tone` (🧎🏿‍♂)" do
  "🧎🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♂"
end
it "`1F9CE 200D 2640 FE0F` (fully-qualified) should match `woman kneeling` (🧎‍♀️)" do
  "🧎‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♀️"
end
it "`1F9CE 200D 2640` (minimally-qualified) should match `woman kneeling` (🧎‍♀)" do
  "🧎‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♀"
end
it "`1F9CE 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: light skin tone` (🧎🏻‍♀️)" do
  "🧎🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♀️"
end
it "`1F9CE 1F3FB 200D 2640` (minimally-qualified) should match `woman kneeling: light skin tone` (🧎🏻‍♀)" do
  "🧎🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♀"
end
it "`1F9CE 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: medium-light skin tone` (🧎🏼‍♀️)" do
  "🧎🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♀️"
end
it "`1F9CE 1F3FC 200D 2640` (minimally-qualified) should match `woman kneeling: medium-light skin tone` (🧎🏼‍♀)" do
  "🧎🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♀"
end
it "`1F9CE 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: medium skin tone` (🧎🏽‍♀️)" do
  "🧎🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♀️"
end
it "`1F9CE 1F3FD 200D 2640` (minimally-qualified) should match `woman kneeling: medium skin tone` (🧎🏽‍♀)" do
  "🧎🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♀"
end
it "`1F9CE 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: medium-dark skin tone` (🧎🏾‍♀️)" do
  "🧎🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♀️"
end
it "`1F9CE 1F3FE 200D 2640` (minimally-qualified) should match `woman kneeling: medium-dark skin tone` (🧎🏾‍♀)" do
  "🧎🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♀"
end
it "`1F9CE 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: dark skin tone` (🧎🏿‍♀️)" do
  "🧎🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♀️"
end
it "`1F9CE 1F3FF 200D 2640` (minimally-qualified) should match `woman kneeling: dark skin tone` (🧎🏿‍♀)" do
  "🧎🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♀"
end
it "`1F468 200D 1F9AF` (fully-qualified) should match `man with probing cane` (👨‍🦯)" do
  "👨‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦯"
end
it "`1F468 1F3FB 200D 1F9AF` (fully-qualified) should match `man with probing cane: light skin tone` (👨🏻‍🦯)" do
  "👨🏻‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦯"
end
it "`1F468 1F3FC 200D 1F9AF` (fully-qualified) should match `man with probing cane: medium-light skin tone` (👨🏼‍🦯)" do
  "👨🏼‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦯"
end
it "`1F468 1F3FD 200D 1F9AF` (fully-qualified) should match `man with probing cane: medium skin tone` (👨🏽‍🦯)" do
  "👨🏽‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦯"
end
it "`1F468 1F3FE 200D 1F9AF` (fully-qualified) should match `man with probing cane: medium-dark skin tone` (👨🏾‍🦯)" do
  "👨🏾‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦯"
end
it "`1F468 1F3FF 200D 1F9AF` (fully-qualified) should match `man with probing cane: dark skin tone` (👨🏿‍🦯)" do
  "👨🏿‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦯"
end
it "`1F469 200D 1F9AF` (fully-qualified) should match `woman with probing cane` (👩‍🦯)" do
  "👩‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦯"
end
it "`1F469 1F3FB 200D 1F9AF` (fully-qualified) should match `woman with probing cane: light skin tone` (👩🏻‍🦯)" do
  "👩🏻‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦯"
end
it "`1F469 1F3FC 200D 1F9AF` (fully-qualified) should match `woman with probing cane: medium-light skin tone` (👩🏼‍🦯)" do
  "👩🏼‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦯"
end
it "`1F469 1F3FD 200D 1F9AF` (fully-qualified) should match `woman with probing cane: medium skin tone` (👩🏽‍🦯)" do
  "👩🏽‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦯"
end
it "`1F469 1F3FE 200D 1F9AF` (fully-qualified) should match `woman with probing cane: medium-dark skin tone` (👩🏾‍🦯)" do
  "👩🏾‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦯"
end
it "`1F469 1F3FF 200D 1F9AF` (fully-qualified) should match `woman with probing cane: dark skin tone` (👩🏿‍🦯)" do
  "👩🏿‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦯"
end
it "`1F468 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair` (👨‍🦼)" do
  "👨‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦼"
end
it "`1F468 1F3FB 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: light skin tone` (👨🏻‍🦼)" do
  "👨🏻‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦼"
end
it "`1F468 1F3FC 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: medium-light skin tone` (👨🏼‍🦼)" do
  "👨🏼‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦼"
end
it "`1F468 1F3FD 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: medium skin tone` (👨🏽‍🦼)" do
  "👨🏽‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦼"
end
it "`1F468 1F3FE 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: medium-dark skin tone` (👨🏾‍🦼)" do
  "👨🏾‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦼"
end
it "`1F468 1F3FF 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: dark skin tone` (👨🏿‍🦼)" do
  "👨🏿‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦼"
end
it "`1F469 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair` (👩‍🦼)" do
  "👩‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦼"
end
it "`1F469 1F3FB 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: light skin tone` (👩🏻‍🦼)" do
  "👩🏻‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦼"
end
it "`1F469 1F3FC 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: medium-light skin tone` (👩🏼‍🦼)" do
  "👩🏼‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦼"
end
it "`1F469 1F3FD 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: medium skin tone` (👩🏽‍🦼)" do
  "👩🏽‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦼"
end
it "`1F469 1F3FE 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: medium-dark skin tone` (👩🏾‍🦼)" do
  "👩🏾‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦼"
end
it "`1F469 1F3FF 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: dark skin tone` (👩🏿‍🦼)" do
  "👩🏿‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦼"
end
it "`1F468 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair` (👨‍🦽)" do
  "👨‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦽"
end
it "`1F468 1F3FB 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: light skin tone` (👨🏻‍🦽)" do
  "👨🏻‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦽"
end
it "`1F468 1F3FC 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: medium-light skin tone` (👨🏼‍🦽)" do
  "👨🏼‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦽"
end
it "`1F468 1F3FD 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: medium skin tone` (👨🏽‍🦽)" do
  "👨🏽‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦽"
end
it "`1F468 1F3FE 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: medium-dark skin tone` (👨🏾‍🦽)" do
  "👨🏾‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦽"
end
it "`1F468 1F3FF 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: dark skin tone` (👨🏿‍🦽)" do
  "👨🏿‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦽"
end
it "`1F469 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair` (👩‍🦽)" do
  "👩‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦽"
end
it "`1F469 1F3FB 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: light skin tone` (👩🏻‍🦽)" do
  "👩🏻‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦽"
end
it "`1F469 1F3FC 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: medium-light skin tone` (👩🏼‍🦽)" do
  "👩🏼‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦽"
end
it "`1F469 1F3FD 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: medium skin tone` (👩🏽‍🦽)" do
  "👩🏽‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦽"
end
it "`1F469 1F3FE 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: medium-dark skin tone` (👩🏾‍🦽)" do
  "👩🏾‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦽"
end
it "`1F469 1F3FF 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: dark skin tone` (👩🏿‍🦽)" do
  "👩🏿‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦽"
end
it "`1F3C3` (fully-qualified) should match `person running` (🏃)" do
  "🏃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃"
end
it "`1F3C3 1F3FB` (fully-qualified) should match `person running: light skin tone` (🏃🏻)" do
  "🏃🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻"
end
it "`1F3C3 1F3FC` (fully-qualified) should match `person running: medium-light skin tone` (🏃🏼)" do
  "🏃🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼"
end
it "`1F3C3 1F3FD` (fully-qualified) should match `person running: medium skin tone` (🏃🏽)" do
  "🏃🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽"
end
it "`1F3C3 1F3FE` (fully-qualified) should match `person running: medium-dark skin tone` (🏃🏾)" do
  "🏃🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾"
end
it "`1F3C3 1F3FF` (fully-qualified) should match `person running: dark skin tone` (🏃🏿)" do
  "🏃🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿"
end
it "`1F3C3 200D 2642 FE0F` (fully-qualified) should match `man running` (🏃‍♂️)" do
  "🏃‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♂️"
end
it "`1F3C3 200D 2642` (minimally-qualified) should match `man running` (🏃‍♂)" do
  "🏃‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♂"
end
it "`1F3C3 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man running: light skin tone` (🏃🏻‍♂️)" do
  "🏃🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♂️"
end
it "`1F3C3 1F3FB 200D 2642` (minimally-qualified) should match `man running: light skin tone` (🏃🏻‍♂)" do
  "🏃🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♂"
end
it "`1F3C3 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man running: medium-light skin tone` (🏃🏼‍♂️)" do
  "🏃🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♂️"
end
it "`1F3C3 1F3FC 200D 2642` (minimally-qualified) should match `man running: medium-light skin tone` (🏃🏼‍♂)" do
  "🏃🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♂"
end
it "`1F3C3 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man running: medium skin tone` (🏃🏽‍♂️)" do
  "🏃🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♂️"
end
it "`1F3C3 1F3FD 200D 2642` (minimally-qualified) should match `man running: medium skin tone` (🏃🏽‍♂)" do
  "🏃🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♂"
end
it "`1F3C3 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man running: medium-dark skin tone` (🏃🏾‍♂️)" do
  "🏃🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♂️"
end
it "`1F3C3 1F3FE 200D 2642` (minimally-qualified) should match `man running: medium-dark skin tone` (🏃🏾‍♂)" do
  "🏃🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♂"
end
it "`1F3C3 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man running: dark skin tone` (🏃🏿‍♂️)" do
  "🏃🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♂️"
end
it "`1F3C3 1F3FF 200D 2642` (minimally-qualified) should match `man running: dark skin tone` (🏃🏿‍♂)" do
  "🏃🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♂"
end
it "`1F3C3 200D 2640 FE0F` (fully-qualified) should match `woman running` (🏃‍♀️)" do
  "🏃‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♀️"
end
it "`1F3C3 200D 2640` (minimally-qualified) should match `woman running` (🏃‍♀)" do
  "🏃‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♀"
end
it "`1F3C3 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman running: light skin tone` (🏃🏻‍♀️)" do
  "🏃🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♀️"
end
it "`1F3C3 1F3FB 200D 2640` (minimally-qualified) should match `woman running: light skin tone` (🏃🏻‍♀)" do
  "🏃🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♀"
end
it "`1F3C3 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman running: medium-light skin tone` (🏃🏼‍♀️)" do
  "🏃🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♀️"
end
it "`1F3C3 1F3FC 200D 2640` (minimally-qualified) should match `woman running: medium-light skin tone` (🏃🏼‍♀)" do
  "🏃🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♀"
end
it "`1F3C3 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman running: medium skin tone` (🏃🏽‍♀️)" do
  "🏃🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♀️"
end
it "`1F3C3 1F3FD 200D 2640` (minimally-qualified) should match `woman running: medium skin tone` (🏃🏽‍♀)" do
  "🏃🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♀"
end
it "`1F3C3 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman running: medium-dark skin tone` (🏃🏾‍♀️)" do
  "🏃🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♀️"
end
it "`1F3C3 1F3FE 200D 2640` (minimally-qualified) should match `woman running: medium-dark skin tone` (🏃🏾‍♀)" do
  "🏃🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♀"
end
it "`1F3C3 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman running: dark skin tone` (🏃🏿‍♀️)" do
  "🏃🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♀️"
end
it "`1F3C3 1F3FF 200D 2640` (minimally-qualified) should match `woman running: dark skin tone` (🏃🏿‍♀)" do
  "🏃🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♀"
end
it "`1F483` (fully-qualified) should match `woman dancing` (💃)" do
  "💃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃"
end
it "`1F483 1F3FB` (fully-qualified) should match `woman dancing: light skin tone` (💃🏻)" do
  "💃🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏻"
end
it "`1F483 1F3FC` (fully-qualified) should match `woman dancing: medium-light skin tone` (💃🏼)" do
  "💃🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏼"
end
it "`1F483 1F3FD` (fully-qualified) should match `woman dancing: medium skin tone` (💃🏽)" do
  "💃🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏽"
end
it "`1F483 1F3FE` (fully-qualified) should match `woman dancing: medium-dark skin tone` (💃🏾)" do
  "💃🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏾"
end
it "`1F483 1F3FF` (fully-qualified) should match `woman dancing: dark skin tone` (💃🏿)" do
  "💃🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏿"
end
it "`1F57A` (fully-qualified) should match `man dancing` (🕺)" do
  "🕺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺"
end
it "`1F57A 1F3FB` (fully-qualified) should match `man dancing: light skin tone` (🕺🏻)" do
  "🕺🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏻"
end
it "`1F57A 1F3FC` (fully-qualified) should match `man dancing: medium-light skin tone` (🕺🏼)" do
  "🕺🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏼"
end
it "`1F57A 1F3FD` (fully-qualified) should match `man dancing: medium skin tone` (🕺🏽)" do
  "🕺🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏽"
end
it "`1F57A 1F3FE` (fully-qualified) should match `man dancing: medium-dark skin tone` (🕺🏾)" do
  "🕺🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏾"
end
it "`1F57A 1F3FF` (fully-qualified) should match `man dancing: dark skin tone` (🕺🏿)" do
  "🕺🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏿"
end
it "`1F574 FE0F` (fully-qualified) should match `man in suit levitating` (🕴️)" do
  "🕴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴️"
end
it "`1F574` (unqualified) should match `man in suit levitating` (🕴)" do
  "🕴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴"
end
it "`1F574 1F3FB` (fully-qualified) should match `man in suit levitating: light skin tone` (🕴🏻)" do
  "🕴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏻"
end
it "`1F574 1F3FC` (fully-qualified) should match `man in suit levitating: medium-light skin tone` (🕴🏼)" do
  "🕴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏼"
end
it "`1F574 1F3FD` (fully-qualified) should match `man in suit levitating: medium skin tone` (🕴🏽)" do
  "🕴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏽"
end
it "`1F574 1F3FE` (fully-qualified) should match `man in suit levitating: medium-dark skin tone` (🕴🏾)" do
  "🕴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏾"
end
it "`1F574 1F3FF` (fully-qualified) should match `man in suit levitating: dark skin tone` (🕴🏿)" do
  "🕴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏿"
end
it "`1F46F` (fully-qualified) should match `people with bunny ears` (👯)" do
  "👯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯"
end
it "`1F46F 200D 2642 FE0F` (fully-qualified) should match `men with bunny ears` (👯‍♂️)" do
  "👯‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♂️"
end
it "`1F46F 200D 2642` (minimally-qualified) should match `men with bunny ears` (👯‍♂)" do
  "👯‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♂"
end
it "`1F46F 200D 2640 FE0F` (fully-qualified) should match `women with bunny ears` (👯‍♀️)" do
  "👯‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♀️"
end
it "`1F46F 200D 2640` (minimally-qualified) should match `women with bunny ears` (👯‍♀)" do
  "👯‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♀"
end
it "`1F9D6` (fully-qualified) should match `person in steamy room` (🧖)" do
  "🧖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖"
end
it "`1F9D6 1F3FB` (fully-qualified) should match `person in steamy room: light skin tone` (🧖🏻)" do
  "🧖🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻"
end
it "`1F9D6 1F3FC` (fully-qualified) should match `person in steamy room: medium-light skin tone` (🧖🏼)" do
  "🧖🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼"
end
it "`1F9D6 1F3FD` (fully-qualified) should match `person in steamy room: medium skin tone` (🧖🏽)" do
  "🧖🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽"
end
it "`1F9D6 1F3FE` (fully-qualified) should match `person in steamy room: medium-dark skin tone` (🧖🏾)" do
  "🧖🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾"
end
it "`1F9D6 1F3FF` (fully-qualified) should match `person in steamy room: dark skin tone` (🧖🏿)" do
  "🧖🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿"
end
it "`1F9D6 200D 2642 FE0F` (fully-qualified) should match `man in steamy room` (🧖‍♂️)" do
  "🧖‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♂️"
end
it "`1F9D6 200D 2642` (minimally-qualified) should match `man in steamy room` (🧖‍♂)" do
  "🧖‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♂"
end
it "`1F9D6 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: light skin tone` (🧖🏻‍♂️)" do
  "🧖🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♂️"
end
it "`1F9D6 1F3FB 200D 2642` (minimally-qualified) should match `man in steamy room: light skin tone` (🧖🏻‍♂)" do
  "🧖🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♂"
end
it "`1F9D6 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: medium-light skin tone` (🧖🏼‍♂️)" do
  "🧖🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♂️"
end
it "`1F9D6 1F3FC 200D 2642` (minimally-qualified) should match `man in steamy room: medium-light skin tone` (🧖🏼‍♂)" do
  "🧖🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♂"
end
it "`1F9D6 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: medium skin tone` (🧖🏽‍♂️)" do
  "🧖🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♂️"
end
it "`1F9D6 1F3FD 200D 2642` (minimally-qualified) should match `man in steamy room: medium skin tone` (🧖🏽‍♂)" do
  "🧖🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♂"
end
it "`1F9D6 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: medium-dark skin tone` (🧖🏾‍♂️)" do
  "🧖🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♂️"
end
it "`1F9D6 1F3FE 200D 2642` (minimally-qualified) should match `man in steamy room: medium-dark skin tone` (🧖🏾‍♂)" do
  "🧖🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♂"
end
it "`1F9D6 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: dark skin tone` (🧖🏿‍♂️)" do
  "🧖🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♂️"
end
it "`1F9D6 1F3FF 200D 2642` (minimally-qualified) should match `man in steamy room: dark skin tone` (🧖🏿‍♂)" do
  "🧖🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♂"
end
it "`1F9D6 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room` (🧖‍♀️)" do
  "🧖‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♀️"
end
it "`1F9D6 200D 2640` (minimally-qualified) should match `woman in steamy room` (🧖‍♀)" do
  "🧖‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♀"
end
it "`1F9D6 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: light skin tone` (🧖🏻‍♀️)" do
  "🧖🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♀️"
end
it "`1F9D6 1F3FB 200D 2640` (minimally-qualified) should match `woman in steamy room: light skin tone` (🧖🏻‍♀)" do
  "🧖🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♀"
end
it "`1F9D6 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: medium-light skin tone` (🧖🏼‍♀️)" do
  "🧖🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♀️"
end
it "`1F9D6 1F3FC 200D 2640` (minimally-qualified) should match `woman in steamy room: medium-light skin tone` (🧖🏼‍♀)" do
  "🧖🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♀"
end
it "`1F9D6 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: medium skin tone` (🧖🏽‍♀️)" do
  "🧖🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♀️"
end
it "`1F9D6 1F3FD 200D 2640` (minimally-qualified) should match `woman in steamy room: medium skin tone` (🧖🏽‍♀)" do
  "🧖🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♀"
end
it "`1F9D6 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: medium-dark skin tone` (🧖🏾‍♀️)" do
  "🧖🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♀️"
end
it "`1F9D6 1F3FE 200D 2640` (minimally-qualified) should match `woman in steamy room: medium-dark skin tone` (🧖🏾‍♀)" do
  "🧖🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♀"
end
it "`1F9D6 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: dark skin tone` (🧖🏿‍♀️)" do
  "🧖🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♀️"
end
it "`1F9D6 1F3FF 200D 2640` (minimally-qualified) should match `woman in steamy room: dark skin tone` (🧖🏿‍♀)" do
  "🧖🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♀"
end
it "`1F9D7` (fully-qualified) should match `person climbing` (🧗)" do
  "🧗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗"
end
it "`1F9D7 1F3FB` (fully-qualified) should match `person climbing: light skin tone` (🧗🏻)" do
  "🧗🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻"
end
it "`1F9D7 1F3FC` (fully-qualified) should match `person climbing: medium-light skin tone` (🧗🏼)" do
  "🧗🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼"
end
it "`1F9D7 1F3FD` (fully-qualified) should match `person climbing: medium skin tone` (🧗🏽)" do
  "🧗🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽"
end
it "`1F9D7 1F3FE` (fully-qualified) should match `person climbing: medium-dark skin tone` (🧗🏾)" do
  "🧗🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾"
end
it "`1F9D7 1F3FF` (fully-qualified) should match `person climbing: dark skin tone` (🧗🏿)" do
  "🧗🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿"
end
it "`1F9D7 200D 2642 FE0F` (fully-qualified) should match `man climbing` (🧗‍♂️)" do
  "🧗‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♂️"
end
it "`1F9D7 200D 2642` (minimally-qualified) should match `man climbing` (🧗‍♂)" do
  "🧗‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♂"
end
it "`1F9D7 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man climbing: light skin tone` (🧗🏻‍♂️)" do
  "🧗🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♂️"
end
it "`1F9D7 1F3FB 200D 2642` (minimally-qualified) should match `man climbing: light skin tone` (🧗🏻‍♂)" do
  "🧗🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♂"
end
it "`1F9D7 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man climbing: medium-light skin tone` (🧗🏼‍♂️)" do
  "🧗🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♂️"
end
it "`1F9D7 1F3FC 200D 2642` (minimally-qualified) should match `man climbing: medium-light skin tone` (🧗🏼‍♂)" do
  "🧗🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♂"
end
it "`1F9D7 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man climbing: medium skin tone` (🧗🏽‍♂️)" do
  "🧗🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♂️"
end
it "`1F9D7 1F3FD 200D 2642` (minimally-qualified) should match `man climbing: medium skin tone` (🧗🏽‍♂)" do
  "🧗🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♂"
end
it "`1F9D7 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man climbing: medium-dark skin tone` (🧗🏾‍♂️)" do
  "🧗🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♂️"
end
it "`1F9D7 1F3FE 200D 2642` (minimally-qualified) should match `man climbing: medium-dark skin tone` (🧗🏾‍♂)" do
  "🧗🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♂"
end
it "`1F9D7 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man climbing: dark skin tone` (🧗🏿‍♂️)" do
  "🧗🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♂️"
end
it "`1F9D7 1F3FF 200D 2642` (minimally-qualified) should match `man climbing: dark skin tone` (🧗🏿‍♂)" do
  "🧗🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♂"
end
it "`1F9D7 200D 2640 FE0F` (fully-qualified) should match `woman climbing` (🧗‍♀️)" do
  "🧗‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♀️"
end
it "`1F9D7 200D 2640` (minimally-qualified) should match `woman climbing` (🧗‍♀)" do
  "🧗‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♀"
end
it "`1F9D7 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman climbing: light skin tone` (🧗🏻‍♀️)" do
  "🧗🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♀️"
end
it "`1F9D7 1F3FB 200D 2640` (minimally-qualified) should match `woman climbing: light skin tone` (🧗🏻‍♀)" do
  "🧗🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♀"
end
it "`1F9D7 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman climbing: medium-light skin tone` (🧗🏼‍♀️)" do
  "🧗🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♀️"
end
it "`1F9D7 1F3FC 200D 2640` (minimally-qualified) should match `woman climbing: medium-light skin tone` (🧗🏼‍♀)" do
  "🧗🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♀"
end
it "`1F9D7 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman climbing: medium skin tone` (🧗🏽‍♀️)" do
  "🧗🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♀️"
end
it "`1F9D7 1F3FD 200D 2640` (minimally-qualified) should match `woman climbing: medium skin tone` (🧗🏽‍♀)" do
  "🧗🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♀"
end
it "`1F9D7 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman climbing: medium-dark skin tone` (🧗🏾‍♀️)" do
  "🧗🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♀️"
end
it "`1F9D7 1F3FE 200D 2640` (minimally-qualified) should match `woman climbing: medium-dark skin tone` (🧗🏾‍♀)" do
  "🧗🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♀"
end
it "`1F9D7 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman climbing: dark skin tone` (🧗🏿‍♀️)" do
  "🧗🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♀️"
end
it "`1F9D7 1F3FF 200D 2640` (minimally-qualified) should match `woman climbing: dark skin tone` (🧗🏿‍♀)" do
  "🧗🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♀"
end
it "`1F93A` (fully-qualified) should match `person fencing` (🤺)" do
  "🤺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤺"
end
it "`1F3C7` (fully-qualified) should match `horse racing` (🏇)" do
  "🏇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇"
end
it "`1F3C7 1F3FB` (fully-qualified) should match `horse racing: light skin tone` (🏇🏻)" do
  "🏇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏻"
end
it "`1F3C7 1F3FC` (fully-qualified) should match `horse racing: medium-light skin tone` (🏇🏼)" do
  "🏇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏼"
end
it "`1F3C7 1F3FD` (fully-qualified) should match `horse racing: medium skin tone` (🏇🏽)" do
  "🏇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏽"
end
it "`1F3C7 1F3FE` (fully-qualified) should match `horse racing: medium-dark skin tone` (🏇🏾)" do
  "🏇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏾"
end
it "`1F3C7 1F3FF` (fully-qualified) should match `horse racing: dark skin tone` (🏇🏿)" do
  "🏇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏿"
end
it "`26F7 FE0F` (fully-qualified) should match `skier` (⛷️)" do
  "⛷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛷️"
end
it "`26F7` (unqualified) should match `skier` (⛷)" do
  "⛷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛷"
end
it "`1F3C2` (fully-qualified) should match `snowboarder` (🏂)" do
  "🏂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂"
end
it "`1F3C2 1F3FB` (fully-qualified) should match `snowboarder: light skin tone` (🏂🏻)" do
  "🏂🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏻"
end
it "`1F3C2 1F3FC` (fully-qualified) should match `snowboarder: medium-light skin tone` (🏂🏼)" do
  "🏂🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏼"
end
it "`1F3C2 1F3FD` (fully-qualified) should match `snowboarder: medium skin tone` (🏂🏽)" do
  "🏂🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏽"
end
it "`1F3C2 1F3FE` (fully-qualified) should match `snowboarder: medium-dark skin tone` (🏂🏾)" do
  "🏂🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏾"
end
it "`1F3C2 1F3FF` (fully-qualified) should match `snowboarder: dark skin tone` (🏂🏿)" do
  "🏂🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏿"
end
it "`1F3CC FE0F` (fully-qualified) should match `person golfing` (🏌️)" do
  "🏌️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️"
end
it "`1F3CC` (unqualified) should match `person golfing` (🏌)" do
  "🏌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌"
end
it "`1F3CC 1F3FB` (fully-qualified) should match `person golfing: light skin tone` (🏌🏻)" do
  "🏌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻"
end
it "`1F3CC 1F3FC` (fully-qualified) should match `person golfing: medium-light skin tone` (🏌🏼)" do
  "🏌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼"
end
it "`1F3CC 1F3FD` (fully-qualified) should match `person golfing: medium skin tone` (🏌🏽)" do
  "🏌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽"
end
it "`1F3CC 1F3FE` (fully-qualified) should match `person golfing: medium-dark skin tone` (🏌🏾)" do
  "🏌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾"
end
it "`1F3CC 1F3FF` (fully-qualified) should match `person golfing: dark skin tone` (🏌🏿)" do
  "🏌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿"
end
it "`1F3CC FE0F 200D 2642 FE0F` (fully-qualified) should match `man golfing` (🏌️‍♂️)" do
  "🏌️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♂️"
end
it "`1F3CC 200D 2642 FE0F` (unqualified) should match `man golfing` (🏌‍♂️)" do
  "🏌‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♂️"
end
it "`1F3CC FE0F 200D 2642` (unqualified) should match `man golfing` (🏌️‍♂)" do
  "🏌️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♂"
end
it "`1F3CC 200D 2642` (unqualified) should match `man golfing` (🏌‍♂)" do
  "🏌‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♂"
end
it "`1F3CC 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man golfing: light skin tone` (🏌🏻‍♂️)" do
  "🏌🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♂️"
end
it "`1F3CC 1F3FB 200D 2642` (minimally-qualified) should match `man golfing: light skin tone` (🏌🏻‍♂)" do
  "🏌🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♂"
end
it "`1F3CC 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man golfing: medium-light skin tone` (🏌🏼‍♂️)" do
  "🏌🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♂️"
end
it "`1F3CC 1F3FC 200D 2642` (minimally-qualified) should match `man golfing: medium-light skin tone` (🏌🏼‍♂)" do
  "🏌🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♂"
end
it "`1F3CC 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man golfing: medium skin tone` (🏌🏽‍♂️)" do
  "🏌🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♂️"
end
it "`1F3CC 1F3FD 200D 2642` (minimally-qualified) should match `man golfing: medium skin tone` (🏌🏽‍♂)" do
  "🏌🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♂"
end
it "`1F3CC 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man golfing: medium-dark skin tone` (🏌🏾‍♂️)" do
  "🏌🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♂️"
end
it "`1F3CC 1F3FE 200D 2642` (minimally-qualified) should match `man golfing: medium-dark skin tone` (🏌🏾‍♂)" do
  "🏌🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♂"
end
it "`1F3CC 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man golfing: dark skin tone` (🏌🏿‍♂️)" do
  "🏌🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♂️"
end
it "`1F3CC 1F3FF 200D 2642` (minimally-qualified) should match `man golfing: dark skin tone` (🏌🏿‍♂)" do
  "🏌🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♂"
end
it "`1F3CC FE0F 200D 2640 FE0F` (fully-qualified) should match `woman golfing` (🏌️‍♀️)" do
  "🏌️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♀️"
end
it "`1F3CC 200D 2640 FE0F` (unqualified) should match `woman golfing` (🏌‍♀️)" do
  "🏌‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♀️"
end
it "`1F3CC FE0F 200D 2640` (unqualified) should match `woman golfing` (🏌️‍♀)" do
  "🏌️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♀"
end
it "`1F3CC 200D 2640` (unqualified) should match `woman golfing` (🏌‍♀)" do
  "🏌‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♀"
end
it "`1F3CC 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman golfing: light skin tone` (🏌🏻‍♀️)" do
  "🏌🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♀️"
end
it "`1F3CC 1F3FB 200D 2640` (minimally-qualified) should match `woman golfing: light skin tone` (🏌🏻‍♀)" do
  "🏌🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♀"
end
it "`1F3CC 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman golfing: medium-light skin tone` (🏌🏼‍♀️)" do
  "🏌🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♀️"
end
it "`1F3CC 1F3FC 200D 2640` (minimally-qualified) should match `woman golfing: medium-light skin tone` (🏌🏼‍♀)" do
  "🏌🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♀"
end
it "`1F3CC 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman golfing: medium skin tone` (🏌🏽‍♀️)" do
  "🏌🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♀️"
end
it "`1F3CC 1F3FD 200D 2640` (minimally-qualified) should match `woman golfing: medium skin tone` (🏌🏽‍♀)" do
  "🏌🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♀"
end
it "`1F3CC 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman golfing: medium-dark skin tone` (🏌🏾‍♀️)" do
  "🏌🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♀️"
end
it "`1F3CC 1F3FE 200D 2640` (minimally-qualified) should match `woman golfing: medium-dark skin tone` (🏌🏾‍♀)" do
  "🏌🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♀"
end
it "`1F3CC 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman golfing: dark skin tone` (🏌🏿‍♀️)" do
  "🏌🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♀️"
end
it "`1F3CC 1F3FF 200D 2640` (minimally-qualified) should match `woman golfing: dark skin tone` (🏌🏿‍♀)" do
  "🏌🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♀"
end
it "`1F3C4` (fully-qualified) should match `person surfing` (🏄)" do
  "🏄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄"
end
it "`1F3C4 1F3FB` (fully-qualified) should match `person surfing: light skin tone` (🏄🏻)" do
  "🏄🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻"
end
it "`1F3C4 1F3FC` (fully-qualified) should match `person surfing: medium-light skin tone` (🏄🏼)" do
  "🏄🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼"
end
it "`1F3C4 1F3FD` (fully-qualified) should match `person surfing: medium skin tone` (🏄🏽)" do
  "🏄🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽"
end
it "`1F3C4 1F3FE` (fully-qualified) should match `person surfing: medium-dark skin tone` (🏄🏾)" do
  "🏄🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾"
end
it "`1F3C4 1F3FF` (fully-qualified) should match `person surfing: dark skin tone` (🏄🏿)" do
  "🏄🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿"
end
it "`1F3C4 200D 2642 FE0F` (fully-qualified) should match `man surfing` (🏄‍♂️)" do
  "🏄‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♂️"
end
it "`1F3C4 200D 2642` (minimally-qualified) should match `man surfing` (🏄‍♂)" do
  "🏄‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♂"
end
it "`1F3C4 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man surfing: light skin tone` (🏄🏻‍♂️)" do
  "🏄🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♂️"
end
it "`1F3C4 1F3FB 200D 2642` (minimally-qualified) should match `man surfing: light skin tone` (🏄🏻‍♂)" do
  "🏄🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♂"
end
it "`1F3C4 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man surfing: medium-light skin tone` (🏄🏼‍♂️)" do
  "🏄🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♂️"
end
it "`1F3C4 1F3FC 200D 2642` (minimally-qualified) should match `man surfing: medium-light skin tone` (🏄🏼‍♂)" do
  "🏄🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♂"
end
it "`1F3C4 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man surfing: medium skin tone` (🏄🏽‍♂️)" do
  "🏄🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♂️"
end
it "`1F3C4 1F3FD 200D 2642` (minimally-qualified) should match `man surfing: medium skin tone` (🏄🏽‍♂)" do
  "🏄🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♂"
end
it "`1F3C4 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man surfing: medium-dark skin tone` (🏄🏾‍♂️)" do
  "🏄🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♂️"
end
it "`1F3C4 1F3FE 200D 2642` (minimally-qualified) should match `man surfing: medium-dark skin tone` (🏄🏾‍♂)" do
  "🏄🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♂"
end
it "`1F3C4 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man surfing: dark skin tone` (🏄🏿‍♂️)" do
  "🏄🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♂️"
end
it "`1F3C4 1F3FF 200D 2642` (minimally-qualified) should match `man surfing: dark skin tone` (🏄🏿‍♂)" do
  "🏄🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♂"
end
it "`1F3C4 200D 2640 FE0F` (fully-qualified) should match `woman surfing` (🏄‍♀️)" do
  "🏄‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♀️"
end
it "`1F3C4 200D 2640` (minimally-qualified) should match `woman surfing` (🏄‍♀)" do
  "🏄‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♀"
end
it "`1F3C4 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman surfing: light skin tone` (🏄🏻‍♀️)" do
  "🏄🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♀️"
end
it "`1F3C4 1F3FB 200D 2640` (minimally-qualified) should match `woman surfing: light skin tone` (🏄🏻‍♀)" do
  "🏄🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♀"
end
it "`1F3C4 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman surfing: medium-light skin tone` (🏄🏼‍♀️)" do
  "🏄🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♀️"
end
it "`1F3C4 1F3FC 200D 2640` (minimally-qualified) should match `woman surfing: medium-light skin tone` (🏄🏼‍♀)" do
  "🏄🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♀"
end
it "`1F3C4 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman surfing: medium skin tone` (🏄🏽‍♀️)" do
  "🏄🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♀️"
end
it "`1F3C4 1F3FD 200D 2640` (minimally-qualified) should match `woman surfing: medium skin tone` (🏄🏽‍♀)" do
  "🏄🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♀"
end
it "`1F3C4 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman surfing: medium-dark skin tone` (🏄🏾‍♀️)" do
  "🏄🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♀️"
end
it "`1F3C4 1F3FE 200D 2640` (minimally-qualified) should match `woman surfing: medium-dark skin tone` (🏄🏾‍♀)" do
  "🏄🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♀"
end
it "`1F3C4 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman surfing: dark skin tone` (🏄🏿‍♀️)" do
  "🏄🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♀️"
end
it "`1F3C4 1F3FF 200D 2640` (minimally-qualified) should match `woman surfing: dark skin tone` (🏄🏿‍♀)" do
  "🏄🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♀"
end
it "`1F6A3` (fully-qualified) should match `person rowing boat` (🚣)" do
  "🚣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣"
end
it "`1F6A3 1F3FB` (fully-qualified) should match `person rowing boat: light skin tone` (🚣🏻)" do
  "🚣🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻"
end
it "`1F6A3 1F3FC` (fully-qualified) should match `person rowing boat: medium-light skin tone` (🚣🏼)" do
  "🚣🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼"
end
it "`1F6A3 1F3FD` (fully-qualified) should match `person rowing boat: medium skin tone` (🚣🏽)" do
  "🚣🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽"
end
it "`1F6A3 1F3FE` (fully-qualified) should match `person rowing boat: medium-dark skin tone` (🚣🏾)" do
  "🚣🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾"
end
it "`1F6A3 1F3FF` (fully-qualified) should match `person rowing boat: dark skin tone` (🚣🏿)" do
  "🚣🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿"
end
it "`1F6A3 200D 2642 FE0F` (fully-qualified) should match `man rowing boat` (🚣‍♂️)" do
  "🚣‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♂️"
end
it "`1F6A3 200D 2642` (minimally-qualified) should match `man rowing boat` (🚣‍♂)" do
  "🚣‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♂"
end
it "`1F6A3 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: light skin tone` (🚣🏻‍♂️)" do
  "🚣🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♂️"
end
it "`1F6A3 1F3FB 200D 2642` (minimally-qualified) should match `man rowing boat: light skin tone` (🚣🏻‍♂)" do
  "🚣🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♂"
end
it "`1F6A3 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: medium-light skin tone` (🚣🏼‍♂️)" do
  "🚣🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♂️"
end
it "`1F6A3 1F3FC 200D 2642` (minimally-qualified) should match `man rowing boat: medium-light skin tone` (🚣🏼‍♂)" do
  "🚣🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♂"
end
it "`1F6A3 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: medium skin tone` (🚣🏽‍♂️)" do
  "🚣🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♂️"
end
it "`1F6A3 1F3FD 200D 2642` (minimally-qualified) should match `man rowing boat: medium skin tone` (🚣🏽‍♂)" do
  "🚣🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♂"
end
it "`1F6A3 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: medium-dark skin tone` (🚣🏾‍♂️)" do
  "🚣🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♂️"
end
it "`1F6A3 1F3FE 200D 2642` (minimally-qualified) should match `man rowing boat: medium-dark skin tone` (🚣🏾‍♂)" do
  "🚣🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♂"
end
it "`1F6A3 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: dark skin tone` (🚣🏿‍♂️)" do
  "🚣🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♂️"
end
it "`1F6A3 1F3FF 200D 2642` (minimally-qualified) should match `man rowing boat: dark skin tone` (🚣🏿‍♂)" do
  "🚣🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♂"
end
it "`1F6A3 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat` (🚣‍♀️)" do
  "🚣‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♀️"
end
it "`1F6A3 200D 2640` (minimally-qualified) should match `woman rowing boat` (🚣‍♀)" do
  "🚣‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♀"
end
it "`1F6A3 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: light skin tone` (🚣🏻‍♀️)" do
  "🚣🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♀️"
end
it "`1F6A3 1F3FB 200D 2640` (minimally-qualified) should match `woman rowing boat: light skin tone` (🚣🏻‍♀)" do
  "🚣🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♀"
end
it "`1F6A3 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: medium-light skin tone` (🚣🏼‍♀️)" do
  "🚣🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♀️"
end
it "`1F6A3 1F3FC 200D 2640` (minimally-qualified) should match `woman rowing boat: medium-light skin tone` (🚣🏼‍♀)" do
  "🚣🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♀"
end
it "`1F6A3 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: medium skin tone` (🚣🏽‍♀️)" do
  "🚣🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♀️"
end
it "`1F6A3 1F3FD 200D 2640` (minimally-qualified) should match `woman rowing boat: medium skin tone` (🚣🏽‍♀)" do
  "🚣🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♀"
end
it "`1F6A3 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: medium-dark skin tone` (🚣🏾‍♀️)" do
  "🚣🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♀️"
end
it "`1F6A3 1F3FE 200D 2640` (minimally-qualified) should match `woman rowing boat: medium-dark skin tone` (🚣🏾‍♀)" do
  "🚣🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♀"
end
it "`1F6A3 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: dark skin tone` (🚣🏿‍♀️)" do
  "🚣🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♀️"
end
it "`1F6A3 1F3FF 200D 2640` (minimally-qualified) should match `woman rowing boat: dark skin tone` (🚣🏿‍♀)" do
  "🚣🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♀"
end
it "`1F3CA` (fully-qualified) should match `person swimming` (🏊)" do
  "🏊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊"
end
it "`1F3CA 1F3FB` (fully-qualified) should match `person swimming: light skin tone` (🏊🏻)" do
  "🏊🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻"
end
it "`1F3CA 1F3FC` (fully-qualified) should match `person swimming: medium-light skin tone` (🏊🏼)" do
  "🏊🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼"
end
it "`1F3CA 1F3FD` (fully-qualified) should match `person swimming: medium skin tone` (🏊🏽)" do
  "🏊🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽"
end
it "`1F3CA 1F3FE` (fully-qualified) should match `person swimming: medium-dark skin tone` (🏊🏾)" do
  "🏊🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾"
end
it "`1F3CA 1F3FF` (fully-qualified) should match `person swimming: dark skin tone` (🏊🏿)" do
  "🏊🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿"
end
it "`1F3CA 200D 2642 FE0F` (fully-qualified) should match `man swimming` (🏊‍♂️)" do
  "🏊‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♂️"
end
it "`1F3CA 200D 2642` (minimally-qualified) should match `man swimming` (🏊‍♂)" do
  "🏊‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♂"
end
it "`1F3CA 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man swimming: light skin tone` (🏊🏻‍♂️)" do
  "🏊🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♂️"
end
it "`1F3CA 1F3FB 200D 2642` (minimally-qualified) should match `man swimming: light skin tone` (🏊🏻‍♂)" do
  "🏊🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♂"
end
it "`1F3CA 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man swimming: medium-light skin tone` (🏊🏼‍♂️)" do
  "🏊🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♂️"
end
it "`1F3CA 1F3FC 200D 2642` (minimally-qualified) should match `man swimming: medium-light skin tone` (🏊🏼‍♂)" do
  "🏊🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♂"
end
it "`1F3CA 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man swimming: medium skin tone` (🏊🏽‍♂️)" do
  "🏊🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♂️"
end
it "`1F3CA 1F3FD 200D 2642` (minimally-qualified) should match `man swimming: medium skin tone` (🏊🏽‍♂)" do
  "🏊🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♂"
end
it "`1F3CA 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man swimming: medium-dark skin tone` (🏊🏾‍♂️)" do
  "🏊🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♂️"
end
it "`1F3CA 1F3FE 200D 2642` (minimally-qualified) should match `man swimming: medium-dark skin tone` (🏊🏾‍♂)" do
  "🏊🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♂"
end
it "`1F3CA 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man swimming: dark skin tone` (🏊🏿‍♂️)" do
  "🏊🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♂️"
end
it "`1F3CA 1F3FF 200D 2642` (minimally-qualified) should match `man swimming: dark skin tone` (🏊🏿‍♂)" do
  "🏊🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♂"
end
it "`1F3CA 200D 2640 FE0F` (fully-qualified) should match `woman swimming` (🏊‍♀️)" do
  "🏊‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♀️"
end
it "`1F3CA 200D 2640` (minimally-qualified) should match `woman swimming` (🏊‍♀)" do
  "🏊‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♀"
end
it "`1F3CA 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman swimming: light skin tone` (🏊🏻‍♀️)" do
  "🏊🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♀️"
end
it "`1F3CA 1F3FB 200D 2640` (minimally-qualified) should match `woman swimming: light skin tone` (🏊🏻‍♀)" do
  "🏊🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♀"
end
it "`1F3CA 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman swimming: medium-light skin tone` (🏊🏼‍♀️)" do
  "🏊🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♀️"
end
it "`1F3CA 1F3FC 200D 2640` (minimally-qualified) should match `woman swimming: medium-light skin tone` (🏊🏼‍♀)" do
  "🏊🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♀"
end
it "`1F3CA 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman swimming: medium skin tone` (🏊🏽‍♀️)" do
  "🏊🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♀️"
end
it "`1F3CA 1F3FD 200D 2640` (minimally-qualified) should match `woman swimming: medium skin tone` (🏊🏽‍♀)" do
  "🏊🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♀"
end
it "`1F3CA 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman swimming: medium-dark skin tone` (🏊🏾‍♀️)" do
  "🏊🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♀️"
end
it "`1F3CA 1F3FE 200D 2640` (minimally-qualified) should match `woman swimming: medium-dark skin tone` (🏊🏾‍♀)" do
  "🏊🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♀"
end
it "`1F3CA 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman swimming: dark skin tone` (🏊🏿‍♀️)" do
  "🏊🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♀️"
end
it "`1F3CA 1F3FF 200D 2640` (minimally-qualified) should match `woman swimming: dark skin tone` (🏊🏿‍♀)" do
  "🏊🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♀"
end
it "`26F9 FE0F` (fully-qualified) should match `person bouncing ball` (⛹️)" do
  "⛹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️"
end
it "`26F9` (unqualified) should match `person bouncing ball` (⛹)" do
  "⛹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹"
end
it "`26F9 1F3FB` (fully-qualified) should match `person bouncing ball: light skin tone` (⛹🏻)" do
  "⛹🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻"
end
it "`26F9 1F3FC` (fully-qualified) should match `person bouncing ball: medium-light skin tone` (⛹🏼)" do
  "⛹🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼"
end
it "`26F9 1F3FD` (fully-qualified) should match `person bouncing ball: medium skin tone` (⛹🏽)" do
  "⛹🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽"
end
it "`26F9 1F3FE` (fully-qualified) should match `person bouncing ball: medium-dark skin tone` (⛹🏾)" do
  "⛹🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾"
end
it "`26F9 1F3FF` (fully-qualified) should match `person bouncing ball: dark skin tone` (⛹🏿)" do
  "⛹🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿"
end
it "`26F9 FE0F 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball` (⛹️‍♂️)" do
  "⛹️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♂️"
end
it "`26F9 200D 2642 FE0F` (unqualified) should match `man bouncing ball` (⛹‍♂️)" do
  "⛹‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♂️"
end
it "`26F9 FE0F 200D 2642` (unqualified) should match `man bouncing ball` (⛹️‍♂)" do
  "⛹️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♂"
end
it "`26F9 200D 2642` (unqualified) should match `man bouncing ball` (⛹‍♂)" do
  "⛹‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♂"
end
it "`26F9 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: light skin tone` (⛹🏻‍♂️)" do
  "⛹🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♂️"
end
it "`26F9 1F3FB 200D 2642` (minimally-qualified) should match `man bouncing ball: light skin tone` (⛹🏻‍♂)" do
  "⛹🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♂"
end
it "`26F9 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: medium-light skin tone` (⛹🏼‍♂️)" do
  "⛹🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♂️"
end
it "`26F9 1F3FC 200D 2642` (minimally-qualified) should match `man bouncing ball: medium-light skin tone` (⛹🏼‍♂)" do
  "⛹🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♂"
end
it "`26F9 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: medium skin tone` (⛹🏽‍♂️)" do
  "⛹🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♂️"
end
it "`26F9 1F3FD 200D 2642` (minimally-qualified) should match `man bouncing ball: medium skin tone` (⛹🏽‍♂)" do
  "⛹🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♂"
end
it "`26F9 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: medium-dark skin tone` (⛹🏾‍♂️)" do
  "⛹🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♂️"
end
it "`26F9 1F3FE 200D 2642` (minimally-qualified) should match `man bouncing ball: medium-dark skin tone` (⛹🏾‍♂)" do
  "⛹🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♂"
end
it "`26F9 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: dark skin tone` (⛹🏿‍♂️)" do
  "⛹🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♂️"
end
it "`26F9 1F3FF 200D 2642` (minimally-qualified) should match `man bouncing ball: dark skin tone` (⛹🏿‍♂)" do
  "⛹🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♂"
end
it "`26F9 FE0F 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball` (⛹️‍♀️)" do
  "⛹️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♀️"
end
it "`26F9 200D 2640 FE0F` (unqualified) should match `woman bouncing ball` (⛹‍♀️)" do
  "⛹‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♀️"
end
it "`26F9 FE0F 200D 2640` (unqualified) should match `woman bouncing ball` (⛹️‍♀)" do
  "⛹️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♀"
end
it "`26F9 200D 2640` (unqualified) should match `woman bouncing ball` (⛹‍♀)" do
  "⛹‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♀"
end
it "`26F9 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: light skin tone` (⛹🏻‍♀️)" do
  "⛹🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♀️"
end
it "`26F9 1F3FB 200D 2640` (minimally-qualified) should match `woman bouncing ball: light skin tone` (⛹🏻‍♀)" do
  "⛹🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♀"
end
it "`26F9 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: medium-light skin tone` (⛹🏼‍♀️)" do
  "⛹🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♀️"
end
it "`26F9 1F3FC 200D 2640` (minimally-qualified) should match `woman bouncing ball: medium-light skin tone` (⛹🏼‍♀)" do
  "⛹🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♀"
end
it "`26F9 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: medium skin tone` (⛹🏽‍♀️)" do
  "⛹🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♀️"
end
it "`26F9 1F3FD 200D 2640` (minimally-qualified) should match `woman bouncing ball: medium skin tone` (⛹🏽‍♀)" do
  "⛹🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♀"
end
it "`26F9 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: medium-dark skin tone` (⛹🏾‍♀️)" do
  "⛹🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♀️"
end
it "`26F9 1F3FE 200D 2640` (minimally-qualified) should match `woman bouncing ball: medium-dark skin tone` (⛹🏾‍♀)" do
  "⛹🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♀"
end
it "`26F9 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: dark skin tone` (⛹🏿‍♀️)" do
  "⛹🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♀️"
end
it "`26F9 1F3FF 200D 2640` (minimally-qualified) should match `woman bouncing ball: dark skin tone` (⛹🏿‍♀)" do
  "⛹🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♀"
end
it "`1F3CB FE0F` (fully-qualified) should match `person lifting weights` (🏋️)" do
  "🏋️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️"
end
it "`1F3CB` (unqualified) should match `person lifting weights` (🏋)" do
  "🏋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋"
end
it "`1F3CB 1F3FB` (fully-qualified) should match `person lifting weights: light skin tone` (🏋🏻)" do
  "🏋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻"
end
it "`1F3CB 1F3FC` (fully-qualified) should match `person lifting weights: medium-light skin tone` (🏋🏼)" do
  "🏋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼"
end
it "`1F3CB 1F3FD` (fully-qualified) should match `person lifting weights: medium skin tone` (🏋🏽)" do
  "🏋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽"
end
it "`1F3CB 1F3FE` (fully-qualified) should match `person lifting weights: medium-dark skin tone` (🏋🏾)" do
  "🏋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾"
end
it "`1F3CB 1F3FF` (fully-qualified) should match `person lifting weights: dark skin tone` (🏋🏿)" do
  "🏋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿"
end
it "`1F3CB FE0F 200D 2642 FE0F` (fully-qualified) should match `man lifting weights` (🏋️‍♂️)" do
  "🏋️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♂️"
end
it "`1F3CB 200D 2642 FE0F` (unqualified) should match `man lifting weights` (🏋‍♂️)" do
  "🏋‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♂️"
end
it "`1F3CB FE0F 200D 2642` (unqualified) should match `man lifting weights` (🏋️‍♂)" do
  "🏋️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♂"
end
it "`1F3CB 200D 2642` (unqualified) should match `man lifting weights` (🏋‍♂)" do
  "🏋‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♂"
end
it "`1F3CB 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: light skin tone` (🏋🏻‍♂️)" do
  "🏋🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♂️"
end
it "`1F3CB 1F3FB 200D 2642` (minimally-qualified) should match `man lifting weights: light skin tone` (🏋🏻‍♂)" do
  "🏋🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♂"
end
it "`1F3CB 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: medium-light skin tone` (🏋🏼‍♂️)" do
  "🏋🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♂️"
end
it "`1F3CB 1F3FC 200D 2642` (minimally-qualified) should match `man lifting weights: medium-light skin tone` (🏋🏼‍♂)" do
  "🏋🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♂"
end
it "`1F3CB 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: medium skin tone` (🏋🏽‍♂️)" do
  "🏋🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♂️"
end
it "`1F3CB 1F3FD 200D 2642` (minimally-qualified) should match `man lifting weights: medium skin tone` (🏋🏽‍♂)" do
  "🏋🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♂"
end
it "`1F3CB 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: medium-dark skin tone` (🏋🏾‍♂️)" do
  "🏋🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♂️"
end
it "`1F3CB 1F3FE 200D 2642` (minimally-qualified) should match `man lifting weights: medium-dark skin tone` (🏋🏾‍♂)" do
  "🏋🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♂"
end
it "`1F3CB 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: dark skin tone` (🏋🏿‍♂️)" do
  "🏋🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♂️"
end
it "`1F3CB 1F3FF 200D 2642` (minimally-qualified) should match `man lifting weights: dark skin tone` (🏋🏿‍♂)" do
  "🏋🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♂"
end
it "`1F3CB FE0F 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights` (🏋️‍♀️)" do
  "🏋️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♀️"
end
it "`1F3CB 200D 2640 FE0F` (unqualified) should match `woman lifting weights` (🏋‍♀️)" do
  "🏋‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♀️"
end
it "`1F3CB FE0F 200D 2640` (unqualified) should match `woman lifting weights` (🏋️‍♀)" do
  "🏋️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♀"
end
it "`1F3CB 200D 2640` (unqualified) should match `woman lifting weights` (🏋‍♀)" do
  "🏋‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♀"
end
it "`1F3CB 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: light skin tone` (🏋🏻‍♀️)" do
  "🏋🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♀️"
end
it "`1F3CB 1F3FB 200D 2640` (minimally-qualified) should match `woman lifting weights: light skin tone` (🏋🏻‍♀)" do
  "🏋🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♀"
end
it "`1F3CB 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: medium-light skin tone` (🏋🏼‍♀️)" do
  "🏋🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♀️"
end
it "`1F3CB 1F3FC 200D 2640` (minimally-qualified) should match `woman lifting weights: medium-light skin tone` (🏋🏼‍♀)" do
  "🏋🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♀"
end
it "`1F3CB 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: medium skin tone` (🏋🏽‍♀️)" do
  "🏋🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♀️"
end
it "`1F3CB 1F3FD 200D 2640` (minimally-qualified) should match `woman lifting weights: medium skin tone` (🏋🏽‍♀)" do
  "🏋🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♀"
end
it "`1F3CB 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: medium-dark skin tone` (🏋🏾‍♀️)" do
  "🏋🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♀️"
end
it "`1F3CB 1F3FE 200D 2640` (minimally-qualified) should match `woman lifting weights: medium-dark skin tone` (🏋🏾‍♀)" do
  "🏋🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♀"
end
it "`1F3CB 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: dark skin tone` (🏋🏿‍♀️)" do
  "🏋🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♀️"
end
it "`1F3CB 1F3FF 200D 2640` (minimally-qualified) should match `woman lifting weights: dark skin tone` (🏋🏿‍♀)" do
  "🏋🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♀"
end
it "`1F6B4` (fully-qualified) should match `person biking` (🚴)" do
  "🚴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴"
end
it "`1F6B4 1F3FB` (fully-qualified) should match `person biking: light skin tone` (🚴🏻)" do
  "🚴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻"
end
it "`1F6B4 1F3FC` (fully-qualified) should match `person biking: medium-light skin tone` (🚴🏼)" do
  "🚴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼"
end
it "`1F6B4 1F3FD` (fully-qualified) should match `person biking: medium skin tone` (🚴🏽)" do
  "🚴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽"
end
it "`1F6B4 1F3FE` (fully-qualified) should match `person biking: medium-dark skin tone` (🚴🏾)" do
  "🚴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾"
end
it "`1F6B4 1F3FF` (fully-qualified) should match `person biking: dark skin tone` (🚴🏿)" do
  "🚴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿"
end
it "`1F6B4 200D 2642 FE0F` (fully-qualified) should match `man biking` (🚴‍♂️)" do
  "🚴‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♂️"
end
it "`1F6B4 200D 2642` (minimally-qualified) should match `man biking` (🚴‍♂)" do
  "🚴‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♂"
end
it "`1F6B4 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man biking: light skin tone` (🚴🏻‍♂️)" do
  "🚴🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♂️"
end
it "`1F6B4 1F3FB 200D 2642` (minimally-qualified) should match `man biking: light skin tone` (🚴🏻‍♂)" do
  "🚴🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♂"
end
it "`1F6B4 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man biking: medium-light skin tone` (🚴🏼‍♂️)" do
  "🚴🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♂️"
end
it "`1F6B4 1F3FC 200D 2642` (minimally-qualified) should match `man biking: medium-light skin tone` (🚴🏼‍♂)" do
  "🚴🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♂"
end
it "`1F6B4 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man biking: medium skin tone` (🚴🏽‍♂️)" do
  "🚴🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♂️"
end
it "`1F6B4 1F3FD 200D 2642` (minimally-qualified) should match `man biking: medium skin tone` (🚴🏽‍♂)" do
  "🚴🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♂"
end
it "`1F6B4 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man biking: medium-dark skin tone` (🚴🏾‍♂️)" do
  "🚴🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♂️"
end
it "`1F6B4 1F3FE 200D 2642` (minimally-qualified) should match `man biking: medium-dark skin tone` (🚴🏾‍♂)" do
  "🚴🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♂"
end
it "`1F6B4 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man biking: dark skin tone` (🚴🏿‍♂️)" do
  "🚴🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♂️"
end
it "`1F6B4 1F3FF 200D 2642` (minimally-qualified) should match `man biking: dark skin tone` (🚴🏿‍♂)" do
  "🚴🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♂"
end
it "`1F6B4 200D 2640 FE0F` (fully-qualified) should match `woman biking` (🚴‍♀️)" do
  "🚴‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♀️"
end
it "`1F6B4 200D 2640` (minimally-qualified) should match `woman biking` (🚴‍♀)" do
  "🚴‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♀"
end
it "`1F6B4 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman biking: light skin tone` (🚴🏻‍♀️)" do
  "🚴🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♀️"
end
it "`1F6B4 1F3FB 200D 2640` (minimally-qualified) should match `woman biking: light skin tone` (🚴🏻‍♀)" do
  "🚴🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♀"
end
it "`1F6B4 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman biking: medium-light skin tone` (🚴🏼‍♀️)" do
  "🚴🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♀️"
end
it "`1F6B4 1F3FC 200D 2640` (minimally-qualified) should match `woman biking: medium-light skin tone` (🚴🏼‍♀)" do
  "🚴🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♀"
end
it "`1F6B4 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman biking: medium skin tone` (🚴🏽‍♀️)" do
  "🚴🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♀️"
end
it "`1F6B4 1F3FD 200D 2640` (minimally-qualified) should match `woman biking: medium skin tone` (🚴🏽‍♀)" do
  "🚴🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♀"
end
it "`1F6B4 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman biking: medium-dark skin tone` (🚴🏾‍♀️)" do
  "🚴🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♀️"
end
it "`1F6B4 1F3FE 200D 2640` (minimally-qualified) should match `woman biking: medium-dark skin tone` (🚴🏾‍♀)" do
  "🚴🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♀"
end
it "`1F6B4 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman biking: dark skin tone` (🚴🏿‍♀️)" do
  "🚴🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♀️"
end
it "`1F6B4 1F3FF 200D 2640` (minimally-qualified) should match `woman biking: dark skin tone` (🚴🏿‍♀)" do
  "🚴🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♀"
end
it "`1F6B5` (fully-qualified) should match `person mountain biking` (🚵)" do
  "🚵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵"
end
it "`1F6B5 1F3FB` (fully-qualified) should match `person mountain biking: light skin tone` (🚵🏻)" do
  "🚵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻"
end
it "`1F6B5 1F3FC` (fully-qualified) should match `person mountain biking: medium-light skin tone` (🚵🏼)" do
  "🚵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼"
end
it "`1F6B5 1F3FD` (fully-qualified) should match `person mountain biking: medium skin tone` (🚵🏽)" do
  "🚵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽"
end
it "`1F6B5 1F3FE` (fully-qualified) should match `person mountain biking: medium-dark skin tone` (🚵🏾)" do
  "🚵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾"
end
it "`1F6B5 1F3FF` (fully-qualified) should match `person mountain biking: dark skin tone` (🚵🏿)" do
  "🚵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿"
end
it "`1F6B5 200D 2642 FE0F` (fully-qualified) should match `man mountain biking` (🚵‍♂️)" do
  "🚵‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♂️"
end
it "`1F6B5 200D 2642` (minimally-qualified) should match `man mountain biking` (🚵‍♂)" do
  "🚵‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♂"
end
it "`1F6B5 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: light skin tone` (🚵🏻‍♂️)" do
  "🚵🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♂️"
end
it "`1F6B5 1F3FB 200D 2642` (minimally-qualified) should match `man mountain biking: light skin tone` (🚵🏻‍♂)" do
  "🚵🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♂"
end
it "`1F6B5 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: medium-light skin tone` (🚵🏼‍♂️)" do
  "🚵🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♂️"
end
it "`1F6B5 1F3FC 200D 2642` (minimally-qualified) should match `man mountain biking: medium-light skin tone` (🚵🏼‍♂)" do
  "🚵🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♂"
end
it "`1F6B5 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: medium skin tone` (🚵🏽‍♂️)" do
  "🚵🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♂️"
end
it "`1F6B5 1F3FD 200D 2642` (minimally-qualified) should match `man mountain biking: medium skin tone` (🚵🏽‍♂)" do
  "🚵🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♂"
end
it "`1F6B5 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: medium-dark skin tone` (🚵🏾‍♂️)" do
  "🚵🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♂️"
end
it "`1F6B5 1F3FE 200D 2642` (minimally-qualified) should match `man mountain biking: medium-dark skin tone` (🚵🏾‍♂)" do
  "🚵🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♂"
end
it "`1F6B5 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: dark skin tone` (🚵🏿‍♂️)" do
  "🚵🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♂️"
end
it "`1F6B5 1F3FF 200D 2642` (minimally-qualified) should match `man mountain biking: dark skin tone` (🚵🏿‍♂)" do
  "🚵🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♂"
end
it "`1F6B5 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking` (🚵‍♀️)" do
  "🚵‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♀️"
end
it "`1F6B5 200D 2640` (minimally-qualified) should match `woman mountain biking` (🚵‍♀)" do
  "🚵‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♀"
end
it "`1F6B5 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: light skin tone` (🚵🏻‍♀️)" do
  "🚵🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♀️"
end
it "`1F6B5 1F3FB 200D 2640` (minimally-qualified) should match `woman mountain biking: light skin tone` (🚵🏻‍♀)" do
  "🚵🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♀"
end
it "`1F6B5 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: medium-light skin tone` (🚵🏼‍♀️)" do
  "🚵🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♀️"
end
it "`1F6B5 1F3FC 200D 2640` (minimally-qualified) should match `woman mountain biking: medium-light skin tone` (🚵🏼‍♀)" do
  "🚵🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♀"
end
it "`1F6B5 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: medium skin tone` (🚵🏽‍♀️)" do
  "🚵🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♀️"
end
it "`1F6B5 1F3FD 200D 2640` (minimally-qualified) should match `woman mountain biking: medium skin tone` (🚵🏽‍♀)" do
  "🚵🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♀"
end
it "`1F6B5 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: medium-dark skin tone` (🚵🏾‍♀️)" do
  "🚵🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♀️"
end
it "`1F6B5 1F3FE 200D 2640` (minimally-qualified) should match `woman mountain biking: medium-dark skin tone` (🚵🏾‍♀)" do
  "🚵🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♀"
end
it "`1F6B5 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: dark skin tone` (🚵🏿‍♀️)" do
  "🚵🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♀️"
end
it "`1F6B5 1F3FF 200D 2640` (minimally-qualified) should match `woman mountain biking: dark skin tone` (🚵🏿‍♀)" do
  "🚵🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♀"
end
it "`1F938` (fully-qualified) should match `person cartwheeling` (🤸)" do
  "🤸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸"
end
it "`1F938 1F3FB` (fully-qualified) should match `person cartwheeling: light skin tone` (🤸🏻)" do
  "🤸🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻"
end
it "`1F938 1F3FC` (fully-qualified) should match `person cartwheeling: medium-light skin tone` (🤸🏼)" do
  "🤸🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼"
end
it "`1F938 1F3FD` (fully-qualified) should match `person cartwheeling: medium skin tone` (🤸🏽)" do
  "🤸🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽"
end
it "`1F938 1F3FE` (fully-qualified) should match `person cartwheeling: medium-dark skin tone` (🤸🏾)" do
  "🤸🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾"
end
it "`1F938 1F3FF` (fully-qualified) should match `person cartwheeling: dark skin tone` (🤸🏿)" do
  "🤸🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿"
end
it "`1F938 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling` (🤸‍♂️)" do
  "🤸‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♂️"
end
it "`1F938 200D 2642` (minimally-qualified) should match `man cartwheeling` (🤸‍♂)" do
  "🤸‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♂"
end
it "`1F938 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: light skin tone` (🤸🏻‍♂️)" do
  "🤸🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♂️"
end
it "`1F938 1F3FB 200D 2642` (minimally-qualified) should match `man cartwheeling: light skin tone` (🤸🏻‍♂)" do
  "🤸🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♂"
end
it "`1F938 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: medium-light skin tone` (🤸🏼‍♂️)" do
  "🤸🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♂️"
end
it "`1F938 1F3FC 200D 2642` (minimally-qualified) should match `man cartwheeling: medium-light skin tone` (🤸🏼‍♂)" do
  "🤸🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♂"
end
it "`1F938 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: medium skin tone` (🤸🏽‍♂️)" do
  "🤸🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♂️"
end
it "`1F938 1F3FD 200D 2642` (minimally-qualified) should match `man cartwheeling: medium skin tone` (🤸🏽‍♂)" do
  "🤸🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♂"
end
it "`1F938 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: medium-dark skin tone` (🤸🏾‍♂️)" do
  "🤸🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♂️"
end
it "`1F938 1F3FE 200D 2642` (minimally-qualified) should match `man cartwheeling: medium-dark skin tone` (🤸🏾‍♂)" do
  "🤸🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♂"
end
it "`1F938 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: dark skin tone` (🤸🏿‍♂️)" do
  "🤸🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♂️"
end
it "`1F938 1F3FF 200D 2642` (minimally-qualified) should match `man cartwheeling: dark skin tone` (🤸🏿‍♂)" do
  "🤸🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♂"
end
it "`1F938 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling` (🤸‍♀️)" do
  "🤸‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♀️"
end
it "`1F938 200D 2640` (minimally-qualified) should match `woman cartwheeling` (🤸‍♀)" do
  "🤸‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♀"
end
it "`1F938 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: light skin tone` (🤸🏻‍♀️)" do
  "🤸🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♀️"
end
it "`1F938 1F3FB 200D 2640` (minimally-qualified) should match `woman cartwheeling: light skin tone` (🤸🏻‍♀)" do
  "🤸🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♀"
end
it "`1F938 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: medium-light skin tone` (🤸🏼‍♀️)" do
  "🤸🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♀️"
end
it "`1F938 1F3FC 200D 2640` (minimally-qualified) should match `woman cartwheeling: medium-light skin tone` (🤸🏼‍♀)" do
  "🤸🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♀"
end
it "`1F938 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: medium skin tone` (🤸🏽‍♀️)" do
  "🤸🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♀️"
end
it "`1F938 1F3FD 200D 2640` (minimally-qualified) should match `woman cartwheeling: medium skin tone` (🤸🏽‍♀)" do
  "🤸🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♀"
end
it "`1F938 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: medium-dark skin tone` (🤸🏾‍♀️)" do
  "🤸🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♀️"
end
it "`1F938 1F3FE 200D 2640` (minimally-qualified) should match `woman cartwheeling: medium-dark skin tone` (🤸🏾‍♀)" do
  "🤸🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♀"
end
it "`1F938 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: dark skin tone` (🤸🏿‍♀️)" do
  "🤸🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♀️"
end
it "`1F938 1F3FF 200D 2640` (minimally-qualified) should match `woman cartwheeling: dark skin tone` (🤸🏿‍♀)" do
  "🤸🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♀"
end
it "`1F93C` (fully-qualified) should match `people wrestling` (🤼)" do
  "🤼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼"
end
it "`1F93C 200D 2642 FE0F` (fully-qualified) should match `men wrestling` (🤼‍♂️)" do
  "🤼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♂️"
end
it "`1F93C 200D 2642` (minimally-qualified) should match `men wrestling` (🤼‍♂)" do
  "🤼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♂"
end
it "`1F93C 200D 2640 FE0F` (fully-qualified) should match `women wrestling` (🤼‍♀️)" do
  "🤼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♀️"
end
it "`1F93C 200D 2640` (minimally-qualified) should match `women wrestling` (🤼‍♀)" do
  "🤼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♀"
end
it "`1F93D` (fully-qualified) should match `person playing water polo` (🤽)" do
  "🤽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽"
end
it "`1F93D 1F3FB` (fully-qualified) should match `person playing water polo: light skin tone` (🤽🏻)" do
  "🤽🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻"
end
it "`1F93D 1F3FC` (fully-qualified) should match `person playing water polo: medium-light skin tone` (🤽🏼)" do
  "🤽🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼"
end
it "`1F93D 1F3FD` (fully-qualified) should match `person playing water polo: medium skin tone` (🤽🏽)" do
  "🤽🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽"
end
it "`1F93D 1F3FE` (fully-qualified) should match `person playing water polo: medium-dark skin tone` (🤽🏾)" do
  "🤽🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾"
end
it "`1F93D 1F3FF` (fully-qualified) should match `person playing water polo: dark skin tone` (🤽🏿)" do
  "🤽🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿"
end
it "`1F93D 200D 2642 FE0F` (fully-qualified) should match `man playing water polo` (🤽‍♂️)" do
  "🤽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♂️"
end
it "`1F93D 200D 2642` (minimally-qualified) should match `man playing water polo` (🤽‍♂)" do
  "🤽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♂"
end
it "`1F93D 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: light skin tone` (🤽🏻‍♂️)" do
  "🤽🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♂️"
end
it "`1F93D 1F3FB 200D 2642` (minimally-qualified) should match `man playing water polo: light skin tone` (🤽🏻‍♂)" do
  "🤽🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♂"
end
it "`1F93D 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: medium-light skin tone` (🤽🏼‍♂️)" do
  "🤽🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♂️"
end
it "`1F93D 1F3FC 200D 2642` (minimally-qualified) should match `man playing water polo: medium-light skin tone` (🤽🏼‍♂)" do
  "🤽🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♂"
end
it "`1F93D 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: medium skin tone` (🤽🏽‍♂️)" do
  "🤽🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♂️"
end
it "`1F93D 1F3FD 200D 2642` (minimally-qualified) should match `man playing water polo: medium skin tone` (🤽🏽‍♂)" do
  "🤽🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♂"
end
it "`1F93D 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: medium-dark skin tone` (🤽🏾‍♂️)" do
  "🤽🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♂️"
end
it "`1F93D 1F3FE 200D 2642` (minimally-qualified) should match `man playing water polo: medium-dark skin tone` (🤽🏾‍♂)" do
  "🤽🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♂"
end
it "`1F93D 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: dark skin tone` (🤽🏿‍♂️)" do
  "🤽🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♂️"
end
it "`1F93D 1F3FF 200D 2642` (minimally-qualified) should match `man playing water polo: dark skin tone` (🤽🏿‍♂)" do
  "🤽🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♂"
end
it "`1F93D 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo` (🤽‍♀️)" do
  "🤽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♀️"
end
it "`1F93D 200D 2640` (minimally-qualified) should match `woman playing water polo` (🤽‍♀)" do
  "🤽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♀"
end
it "`1F93D 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: light skin tone` (🤽🏻‍♀️)" do
  "🤽🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♀️"
end
it "`1F93D 1F3FB 200D 2640` (minimally-qualified) should match `woman playing water polo: light skin tone` (🤽🏻‍♀)" do
  "🤽🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♀"
end
it "`1F93D 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: medium-light skin tone` (🤽🏼‍♀️)" do
  "🤽🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♀️"
end
it "`1F93D 1F3FC 200D 2640` (minimally-qualified) should match `woman playing water polo: medium-light skin tone` (🤽🏼‍♀)" do
  "🤽🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♀"
end
it "`1F93D 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: medium skin tone` (🤽🏽‍♀️)" do
  "🤽🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♀️"
end
it "`1F93D 1F3FD 200D 2640` (minimally-qualified) should match `woman playing water polo: medium skin tone` (🤽🏽‍♀)" do
  "🤽🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♀"
end
it "`1F93D 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: medium-dark skin tone` (🤽🏾‍♀️)" do
  "🤽🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♀️"
end
it "`1F93D 1F3FE 200D 2640` (minimally-qualified) should match `woman playing water polo: medium-dark skin tone` (🤽🏾‍♀)" do
  "🤽🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♀"
end
it "`1F93D 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: dark skin tone` (🤽🏿‍♀️)" do
  "🤽🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♀️"
end
it "`1F93D 1F3FF 200D 2640` (minimally-qualified) should match `woman playing water polo: dark skin tone` (🤽🏿‍♀)" do
  "🤽🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♀"
end
it "`1F93E` (fully-qualified) should match `person playing handball` (🤾)" do
  "🤾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾"
end
it "`1F93E 1F3FB` (fully-qualified) should match `person playing handball: light skin tone` (🤾🏻)" do
  "🤾🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻"
end
it "`1F93E 1F3FC` (fully-qualified) should match `person playing handball: medium-light skin tone` (🤾🏼)" do
  "🤾🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼"
end
it "`1F93E 1F3FD` (fully-qualified) should match `person playing handball: medium skin tone` (🤾🏽)" do
  "🤾🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽"
end
it "`1F93E 1F3FE` (fully-qualified) should match `person playing handball: medium-dark skin tone` (🤾🏾)" do
  "🤾🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾"
end
it "`1F93E 1F3FF` (fully-qualified) should match `person playing handball: dark skin tone` (🤾🏿)" do
  "🤾🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿"
end
it "`1F93E 200D 2642 FE0F` (fully-qualified) should match `man playing handball` (🤾‍♂️)" do
  "🤾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♂️"
end
it "`1F93E 200D 2642` (minimally-qualified) should match `man playing handball` (🤾‍♂)" do
  "🤾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♂"
end
it "`1F93E 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man playing handball: light skin tone` (🤾🏻‍♂️)" do
  "🤾🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♂️"
end
it "`1F93E 1F3FB 200D 2642` (minimally-qualified) should match `man playing handball: light skin tone` (🤾🏻‍♂)" do
  "🤾🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♂"
end
it "`1F93E 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man playing handball: medium-light skin tone` (🤾🏼‍♂️)" do
  "🤾🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♂️"
end
it "`1F93E 1F3FC 200D 2642` (minimally-qualified) should match `man playing handball: medium-light skin tone` (🤾🏼‍♂)" do
  "🤾🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♂"
end
it "`1F93E 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man playing handball: medium skin tone` (🤾🏽‍♂️)" do
  "🤾🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♂️"
end
it "`1F93E 1F3FD 200D 2642` (minimally-qualified) should match `man playing handball: medium skin tone` (🤾🏽‍♂)" do
  "🤾🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♂"
end
it "`1F93E 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man playing handball: medium-dark skin tone` (🤾🏾‍♂️)" do
  "🤾🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♂️"
end
it "`1F93E 1F3FE 200D 2642` (minimally-qualified) should match `man playing handball: medium-dark skin tone` (🤾🏾‍♂)" do
  "🤾🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♂"
end
it "`1F93E 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man playing handball: dark skin tone` (🤾🏿‍♂️)" do
  "🤾🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♂️"
end
it "`1F93E 1F3FF 200D 2642` (minimally-qualified) should match `man playing handball: dark skin tone` (🤾🏿‍♂)" do
  "🤾🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♂"
end
it "`1F93E 200D 2640 FE0F` (fully-qualified) should match `woman playing handball` (🤾‍♀️)" do
  "🤾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♀️"
end
it "`1F93E 200D 2640` (minimally-qualified) should match `woman playing handball` (🤾‍♀)" do
  "🤾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♀"
end
it "`1F93E 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: light skin tone` (🤾🏻‍♀️)" do
  "🤾🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♀️"
end
it "`1F93E 1F3FB 200D 2640` (minimally-qualified) should match `woman playing handball: light skin tone` (🤾🏻‍♀)" do
  "🤾🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♀"
end
it "`1F93E 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: medium-light skin tone` (🤾🏼‍♀️)" do
  "🤾🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♀️"
end
it "`1F93E 1F3FC 200D 2640` (minimally-qualified) should match `woman playing handball: medium-light skin tone` (🤾🏼‍♀)" do
  "🤾🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♀"
end
it "`1F93E 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: medium skin tone` (🤾🏽‍♀️)" do
  "🤾🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♀️"
end
it "`1F93E 1F3FD 200D 2640` (minimally-qualified) should match `woman playing handball: medium skin tone` (🤾🏽‍♀)" do
  "🤾🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♀"
end
it "`1F93E 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: medium-dark skin tone` (🤾🏾‍♀️)" do
  "🤾🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♀️"
end
it "`1F93E 1F3FE 200D 2640` (minimally-qualified) should match `woman playing handball: medium-dark skin tone` (🤾🏾‍♀)" do
  "🤾🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♀"
end
it "`1F93E 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: dark skin tone` (🤾🏿‍♀️)" do
  "🤾🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♀️"
end
it "`1F93E 1F3FF 200D 2640` (minimally-qualified) should match `woman playing handball: dark skin tone` (🤾🏿‍♀)" do
  "🤾🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♀"
end
it "`1F939` (fully-qualified) should match `person juggling` (🤹)" do
  "🤹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹"
end
it "`1F939 1F3FB` (fully-qualified) should match `person juggling: light skin tone` (🤹🏻)" do
  "🤹🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻"
end
it "`1F939 1F3FC` (fully-qualified) should match `person juggling: medium-light skin tone` (🤹🏼)" do
  "🤹🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼"
end
it "`1F939 1F3FD` (fully-qualified) should match `person juggling: medium skin tone` (🤹🏽)" do
  "🤹🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽"
end
it "`1F939 1F3FE` (fully-qualified) should match `person juggling: medium-dark skin tone` (🤹🏾)" do
  "🤹🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾"
end
it "`1F939 1F3FF` (fully-qualified) should match `person juggling: dark skin tone` (🤹🏿)" do
  "🤹🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿"
end
it "`1F939 200D 2642 FE0F` (fully-qualified) should match `man juggling` (🤹‍♂️)" do
  "🤹‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♂️"
end
it "`1F939 200D 2642` (minimally-qualified) should match `man juggling` (🤹‍♂)" do
  "🤹‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♂"
end
it "`1F939 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man juggling: light skin tone` (🤹🏻‍♂️)" do
  "🤹🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♂️"
end
it "`1F939 1F3FB 200D 2642` (minimally-qualified) should match `man juggling: light skin tone` (🤹🏻‍♂)" do
  "🤹🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♂"
end
it "`1F939 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man juggling: medium-light skin tone` (🤹🏼‍♂️)" do
  "🤹🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♂️"
end
it "`1F939 1F3FC 200D 2642` (minimally-qualified) should match `man juggling: medium-light skin tone` (🤹🏼‍♂)" do
  "🤹🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♂"
end
it "`1F939 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man juggling: medium skin tone` (🤹🏽‍♂️)" do
  "🤹🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♂️"
end
it "`1F939 1F3FD 200D 2642` (minimally-qualified) should match `man juggling: medium skin tone` (🤹🏽‍♂)" do
  "🤹🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♂"
end
it "`1F939 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man juggling: medium-dark skin tone` (🤹🏾‍♂️)" do
  "🤹🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♂️"
end
it "`1F939 1F3FE 200D 2642` (minimally-qualified) should match `man juggling: medium-dark skin tone` (🤹🏾‍♂)" do
  "🤹🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♂"
end
it "`1F939 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man juggling: dark skin tone` (🤹🏿‍♂️)" do
  "🤹🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♂️"
end
it "`1F939 1F3FF 200D 2642` (minimally-qualified) should match `man juggling: dark skin tone` (🤹🏿‍♂)" do
  "🤹🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♂"
end
it "`1F939 200D 2640 FE0F` (fully-qualified) should match `woman juggling` (🤹‍♀️)" do
  "🤹‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♀️"
end
it "`1F939 200D 2640` (minimally-qualified) should match `woman juggling` (🤹‍♀)" do
  "🤹‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♀"
end
it "`1F939 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman juggling: light skin tone` (🤹🏻‍♀️)" do
  "🤹🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♀️"
end
it "`1F939 1F3FB 200D 2640` (minimally-qualified) should match `woman juggling: light skin tone` (🤹🏻‍♀)" do
  "🤹🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♀"
end
it "`1F939 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman juggling: medium-light skin tone` (🤹🏼‍♀️)" do
  "🤹🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♀️"
end
it "`1F939 1F3FC 200D 2640` (minimally-qualified) should match `woman juggling: medium-light skin tone` (🤹🏼‍♀)" do
  "🤹🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♀"
end
it "`1F939 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman juggling: medium skin tone` (🤹🏽‍♀️)" do
  "🤹🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♀️"
end
it "`1F939 1F3FD 200D 2640` (minimally-qualified) should match `woman juggling: medium skin tone` (🤹🏽‍♀)" do
  "🤹🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♀"
end
it "`1F939 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman juggling: medium-dark skin tone` (🤹🏾‍♀️)" do
  "🤹🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♀️"
end
it "`1F939 1F3FE 200D 2640` (minimally-qualified) should match `woman juggling: medium-dark skin tone` (🤹🏾‍♀)" do
  "🤹🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♀"
end
it "`1F939 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman juggling: dark skin tone` (🤹🏿‍♀️)" do
  "🤹🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♀️"
end
it "`1F939 1F3FF 200D 2640` (minimally-qualified) should match `woman juggling: dark skin tone` (🤹🏿‍♀)" do
  "🤹🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♀"
end
it "`1F9D8` (fully-qualified) should match `person in lotus position` (🧘)" do
  "🧘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘"
end
it "`1F9D8 1F3FB` (fully-qualified) should match `person in lotus position: light skin tone` (🧘🏻)" do
  "🧘🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻"
end
it "`1F9D8 1F3FC` (fully-qualified) should match `person in lotus position: medium-light skin tone` (🧘🏼)" do
  "🧘🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼"
end
it "`1F9D8 1F3FD` (fully-qualified) should match `person in lotus position: medium skin tone` (🧘🏽)" do
  "🧘🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽"
end
it "`1F9D8 1F3FE` (fully-qualified) should match `person in lotus position: medium-dark skin tone` (🧘🏾)" do
  "🧘🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾"
end
it "`1F9D8 1F3FF` (fully-qualified) should match `person in lotus position: dark skin tone` (🧘🏿)" do
  "🧘🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿"
end
it "`1F9D8 200D 2642 FE0F` (fully-qualified) should match `man in lotus position` (🧘‍♂️)" do
  "🧘‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♂️"
end
it "`1F9D8 200D 2642` (minimally-qualified) should match `man in lotus position` (🧘‍♂)" do
  "🧘‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♂"
end
it "`1F9D8 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: light skin tone` (🧘🏻‍♂️)" do
  "🧘🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♂️"
end
it "`1F9D8 1F3FB 200D 2642` (minimally-qualified) should match `man in lotus position: light skin tone` (🧘🏻‍♂)" do
  "🧘🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♂"
end
it "`1F9D8 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: medium-light skin tone` (🧘🏼‍♂️)" do
  "🧘🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♂️"
end
it "`1F9D8 1F3FC 200D 2642` (minimally-qualified) should match `man in lotus position: medium-light skin tone` (🧘🏼‍♂)" do
  "🧘🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♂"
end
it "`1F9D8 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: medium skin tone` (🧘🏽‍♂️)" do
  "🧘🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♂️"
end
it "`1F9D8 1F3FD 200D 2642` (minimally-qualified) should match `man in lotus position: medium skin tone` (🧘🏽‍♂)" do
  "🧘🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♂"
end
it "`1F9D8 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: medium-dark skin tone` (🧘🏾‍♂️)" do
  "🧘🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♂️"
end
it "`1F9D8 1F3FE 200D 2642` (minimally-qualified) should match `man in lotus position: medium-dark skin tone` (🧘🏾‍♂)" do
  "🧘🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♂"
end
it "`1F9D8 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: dark skin tone` (🧘🏿‍♂️)" do
  "🧘🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♂️"
end
it "`1F9D8 1F3FF 200D 2642` (minimally-qualified) should match `man in lotus position: dark skin tone` (🧘🏿‍♂)" do
  "🧘🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♂"
end
it "`1F9D8 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position` (🧘‍♀️)" do
  "🧘‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♀️"
end
it "`1F9D8 200D 2640` (minimally-qualified) should match `woman in lotus position` (🧘‍♀)" do
  "🧘‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♀"
end
it "`1F9D8 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: light skin tone` (🧘🏻‍♀️)" do
  "🧘🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♀️"
end
it "`1F9D8 1F3FB 200D 2640` (minimally-qualified) should match `woman in lotus position: light skin tone` (🧘🏻‍♀)" do
  "🧘🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♀"
end
it "`1F9D8 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: medium-light skin tone` (🧘🏼‍♀️)" do
  "🧘🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♀️"
end
it "`1F9D8 1F3FC 200D 2640` (minimally-qualified) should match `woman in lotus position: medium-light skin tone` (🧘🏼‍♀)" do
  "🧘🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♀"
end
it "`1F9D8 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: medium skin tone` (🧘🏽‍♀️)" do
  "🧘🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♀️"
end
it "`1F9D8 1F3FD 200D 2640` (minimally-qualified) should match `woman in lotus position: medium skin tone` (🧘🏽‍♀)" do
  "🧘🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♀"
end
it "`1F9D8 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: medium-dark skin tone` (🧘🏾‍♀️)" do
  "🧘🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♀️"
end
it "`1F9D8 1F3FE 200D 2640` (minimally-qualified) should match `woman in lotus position: medium-dark skin tone` (🧘🏾‍♀)" do
  "🧘🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♀"
end
it "`1F9D8 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: dark skin tone` (🧘🏿‍♀️)" do
  "🧘🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♀️"
end
it "`1F9D8 1F3FF 200D 2640` (minimally-qualified) should match `woman in lotus position: dark skin tone` (🧘🏿‍♀)" do
  "🧘🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♀"
end
it "`1F6C0` (fully-qualified) should match `person taking bath` (🛀)" do
  "🛀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀"
end
it "`1F6C0 1F3FB` (fully-qualified) should match `person taking bath: light skin tone` (🛀🏻)" do
  "🛀🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏻"
end
it "`1F6C0 1F3FC` (fully-qualified) should match `person taking bath: medium-light skin tone` (🛀🏼)" do
  "🛀🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏼"
end
it "`1F6C0 1F3FD` (fully-qualified) should match `person taking bath: medium skin tone` (🛀🏽)" do
  "🛀🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏽"
end
it "`1F6C0 1F3FE` (fully-qualified) should match `person taking bath: medium-dark skin tone` (🛀🏾)" do
  "🛀🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏾"
end
it "`1F6C0 1F3FF` (fully-qualified) should match `person taking bath: dark skin tone` (🛀🏿)" do
  "🛀🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏿"
end
it "`1F6CC` (fully-qualified) should match `person in bed` (🛌)" do
  "🛌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌"
end
it "`1F6CC 1F3FB` (fully-qualified) should match `person in bed: light skin tone` (🛌🏻)" do
  "🛌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏻"
end
it "`1F6CC 1F3FC` (fully-qualified) should match `person in bed: medium-light skin tone` (🛌🏼)" do
  "🛌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏼"
end
it "`1F6CC 1F3FD` (fully-qualified) should match `person in bed: medium skin tone` (🛌🏽)" do
  "🛌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏽"
end
it "`1F6CC 1F3FE` (fully-qualified) should match `person in bed: medium-dark skin tone` (🛌🏾)" do
  "🛌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏾"
end
it "`1F6CC 1F3FF` (fully-qualified) should match `person in bed: dark skin tone` (🛌🏿)" do
  "🛌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏿"
end
it "`1F9D1 200D 1F91D 200D 1F9D1` (fully-qualified) should match `people holding hands` (🧑‍🤝‍🧑)" do
  "🧑‍🤝‍🧑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑‍🤝‍🧑"
end
it "`1F9D1 1F3FB 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: light skin tone` (🧑🏻‍🤝‍🧑🏻)" do
  "🧑🏻‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏻‍🤝‍🧑🏻"
end
it "`1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: medium-light skin tone, light skin tone` (🧑🏼‍🤝‍🧑🏻)" do
  "🧑🏼‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏼‍🤝‍🧑🏻"
end
it "`1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: medium-light skin tone` (🧑🏼‍🤝‍🧑🏼)" do
  "🧑🏼‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏼‍🤝‍🧑🏼"
end
it "`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: medium skin tone, light skin tone` (🧑🏽‍🤝‍🧑🏻)" do
  "🧑🏽‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽‍🤝‍🧑🏻"
end
it "`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: medium skin tone, medium-light skin tone` (🧑🏽‍🤝‍🧑🏼)" do
  "🧑🏽‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽‍🤝‍🧑🏼"
end
it "`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FD` (fully-qualified) should match `people holding hands: medium skin tone` (🧑🏽‍🤝‍🧑🏽)" do
  "🧑🏽‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽‍🤝‍🧑🏽"
end
it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: medium-dark skin tone, light skin tone` (🧑🏾‍🤝‍🧑🏻)" do
  "🧑🏾‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏻"
end
it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: medium-dark skin tone, medium-light skin tone` (🧑🏾‍🤝‍🧑🏼)" do
  "🧑🏾‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏼"
end
it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FD` (fully-qualified) should match `people holding hands: medium-dark skin tone, medium skin tone` (🧑🏾‍🤝‍🧑🏽)" do
  "🧑🏾‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏽"
end
it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FE` (fully-qualified) should match `people holding hands: medium-dark skin tone` (🧑🏾‍🤝‍🧑🏾)" do
  "🧑🏾‍🤝‍🧑🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏾"
end
it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: dark skin tone, light skin tone` (🧑🏿‍🤝‍🧑🏻)" do
  "🧑🏿‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏻"
end
it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: dark skin tone, medium-light skin tone` (🧑🏿‍🤝‍🧑🏼)" do
  "🧑🏿‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏼"
end
it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FD` (fully-qualified) should match `people holding hands: dark skin tone, medium skin tone` (🧑🏿‍🤝‍🧑🏽)" do
  "🧑🏿‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏽"
end
it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FE` (fully-qualified) should match `people holding hands: dark skin tone, medium-dark skin tone` (🧑🏿‍🤝‍🧑🏾)" do
  "🧑🏿‍🤝‍🧑🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏾"
end
it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FF` (fully-qualified) should match `people holding hands: dark skin tone` (🧑🏿‍🤝‍🧑🏿)" do
  "🧑🏿‍🤝‍🧑🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏿"
end
it "`1F46D` (fully-qualified) should match `women holding hands` (👭)" do
  "👭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭"
end
it "`1F46D 1F3FB` (fully-qualified) should match `women holding hands: light skin tone` (👭🏻)" do
  "👭🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏻"
end
it "`1F469 1F3FC 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: medium-light skin tone, light skin tone` (👩🏼‍🤝‍👩🏻)" do
  "👩🏼‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👩🏻"
end
it "`1F46D 1F3FC` (fully-qualified) should match `women holding hands: medium-light skin tone` (👭🏼)" do
  "👭🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏼"
end
it "`1F469 1F3FD 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: medium skin tone, light skin tone` (👩🏽‍🤝‍👩🏻)" do
  "👩🏽‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👩🏻"
end
it "`1F469 1F3FD 200D 1F91D 200D 1F469 1F3FC` (fully-qualified) should match `women holding hands: medium skin tone, medium-light skin tone` (👩🏽‍🤝‍👩🏼)" do
  "👩🏽‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👩🏼"
end
it "`1F46D 1F3FD` (fully-qualified) should match `women holding hands: medium skin tone` (👭🏽)" do
  "👭🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏽"
end
it "`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: medium-dark skin tone, light skin tone` (👩🏾‍🤝‍👩🏻)" do
  "👩🏾‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👩🏻"
end
it "`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FC` (fully-qualified) should match `women holding hands: medium-dark skin tone, medium-light skin tone` (👩🏾‍🤝‍👩🏼)" do
  "👩🏾‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👩🏼"
end
it "`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FD` (fully-qualified) should match `women holding hands: medium-dark skin tone, medium skin tone` (👩🏾‍🤝‍👩🏽)" do
  "👩🏾‍🤝‍👩🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👩🏽"
end
it "`1F46D 1F3FE` (fully-qualified) should match `women holding hands: medium-dark skin tone` (👭🏾)" do
  "👭🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏾"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: dark skin tone, light skin tone` (👩🏿‍🤝‍👩🏻)" do
  "👩🏿‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏻"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FC` (fully-qualified) should match `women holding hands: dark skin tone, medium-light skin tone` (👩🏿‍🤝‍👩🏼)" do
  "👩🏿‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏼"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FD` (fully-qualified) should match `women holding hands: dark skin tone, medium skin tone` (👩🏿‍🤝‍👩🏽)" do
  "👩🏿‍🤝‍👩🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏽"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FE` (fully-qualified) should match `women holding hands: dark skin tone, medium-dark skin tone` (👩🏿‍🤝‍👩🏾)" do
  "👩🏿‍🤝‍👩🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏾"
end
it "`1F46D 1F3FF` (fully-qualified) should match `women holding hands: dark skin tone` (👭🏿)" do
  "👭🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏿"
end
it "`1F46B` (fully-qualified) should match `woman and man holding hands` (👫)" do
  "👫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫"
end
it "`1F46B 1F3FB` (fully-qualified) should match `woman and man holding hands: light skin tone` (👫🏻)" do
  "👫🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏻"
end
it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: light skin tone, medium-light skin tone` (👩🏻‍🤝‍👨🏼)" do
  "👩🏻‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏼"
end
it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: light skin tone, medium skin tone` (👩🏻‍🤝‍👨🏽)" do
  "👩🏻‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏽"
end
it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: light skin tone, medium-dark skin tone` (👩🏻‍🤝‍👨🏾)" do
  "👩🏻‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏾"
end
it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: light skin tone, dark skin tone` (👩🏻‍🤝‍👨🏿)" do
  "👩🏻‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏿"
end
it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, light skin tone` (👩🏼‍🤝‍👨🏻)" do
  "👩🏼‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏻"
end
it "`1F46B 1F3FC` (fully-qualified) should match `woman and man holding hands: medium-light skin tone` (👫🏼)" do
  "👫🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏼"
end
it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, medium skin tone` (👩🏼‍🤝‍👨🏽)" do
  "👩🏼‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏽"
end
it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, medium-dark skin tone` (👩🏼‍🤝‍👨🏾)" do
  "👩🏼‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏾"
end
it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, dark skin tone` (👩🏼‍🤝‍👨🏿)" do
  "👩🏼‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏿"
end
it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: medium skin tone, light skin tone` (👩🏽‍🤝‍👨🏻)" do
  "👩🏽‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏻"
end
it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: medium skin tone, medium-light skin tone` (👩🏽‍🤝‍👨🏼)" do
  "👩🏽‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏼"
end
it "`1F46B 1F3FD` (fully-qualified) should match `woman and man holding hands: medium skin tone` (👫🏽)" do
  "👫🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏽"
end
it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: medium skin tone, medium-dark skin tone` (👩🏽‍🤝‍👨🏾)" do
  "👩🏽‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏾"
end
it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: medium skin tone, dark skin tone` (👩🏽‍🤝‍👨🏿)" do
  "👩🏽‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏿"
end
it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, light skin tone` (👩🏾‍🤝‍👨🏻)" do
  "👩🏾‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏻"
end
it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, medium-light skin tone` (👩🏾‍🤝‍👨🏼)" do
  "👩🏾‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏼"
end
it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, medium skin tone` (👩🏾‍🤝‍👨🏽)" do
  "👩🏾‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏽"
end
it "`1F46B 1F3FE` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone` (👫🏾)" do
  "👫🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏾"
end
it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, dark skin tone` (👩🏾‍🤝‍👨🏿)" do
  "👩🏾‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏿"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: dark skin tone, light skin tone` (👩🏿‍🤝‍👨🏻)" do
  "👩🏿‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏻"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: dark skin tone, medium-light skin tone` (👩🏿‍🤝‍👨🏼)" do
  "👩🏿‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏼"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: dark skin tone, medium skin tone` (👩🏿‍🤝‍👨🏽)" do
  "👩🏿‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏽"
end
it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: dark skin tone, medium-dark skin tone` (👩🏿‍🤝‍👨🏾)" do
  "👩🏿‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏾"
end
it "`1F46B 1F3FF` (fully-qualified) should match `woman and man holding hands: dark skin tone` (👫🏿)" do
  "👫🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏿"
end
it "`1F46C` (fully-qualified) should match `men holding hands` (👬)" do
  "👬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬"
end
it "`1F46C 1F3FB` (fully-qualified) should match `men holding hands: light skin tone` (👬🏻)" do
  "👬🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏻"
end
it "`1F468 1F3FC 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: medium-light skin tone, light skin tone` (👨🏼‍🤝‍👨🏻)" do
  "👨🏼‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🤝‍👨🏻"
end
it "`1F46C 1F3FC` (fully-qualified) should match `men holding hands: medium-light skin tone` (👬🏼)" do
  "👬🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏼"
end
it "`1F468 1F3FD 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: medium skin tone, light skin tone` (👨🏽‍🤝‍👨🏻)" do
  "👨🏽‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🤝‍👨🏻"
end
it "`1F468 1F3FD 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `men holding hands: medium skin tone, medium-light skin tone` (👨🏽‍🤝‍👨🏼)" do
  "👨🏽‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🤝‍👨🏼"
end
it "`1F46C 1F3FD` (fully-qualified) should match `men holding hands: medium skin tone` (👬🏽)" do
  "👬🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏽"
end
it "`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: medium-dark skin tone, light skin tone` (👨🏾‍🤝‍👨🏻)" do
  "👨🏾‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🤝‍👨🏻"
end
it "`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `men holding hands: medium-dark skin tone, medium-light skin tone` (👨🏾‍🤝‍👨🏼)" do
  "👨🏾‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🤝‍👨🏼"
end
it "`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `men holding hands: medium-dark skin tone, medium skin tone` (👨🏾‍🤝‍👨🏽)" do
  "👨🏾‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🤝‍👨🏽"
end
it "`1F46C 1F3FE` (fully-qualified) should match `men holding hands: medium-dark skin tone` (👬🏾)" do
  "👬🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏾"
end
it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: dark skin tone, light skin tone` (👨🏿‍🤝‍👨🏻)" do
  "👨🏿‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏻"
end
it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `men holding hands: dark skin tone, medium-light skin tone` (👨🏿‍🤝‍👨🏼)" do
  "👨🏿‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏼"
end
it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `men holding hands: dark skin tone, medium skin tone` (👨🏿‍🤝‍👨🏽)" do
  "👨🏿‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏽"
end
it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `men holding hands: dark skin tone, medium-dark skin tone` (👨🏿‍🤝‍👨🏾)" do
  "👨🏿‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏾"
end
it "`1F46C 1F3FF` (fully-qualified) should match `men holding hands: dark skin tone` (👬🏿)" do
  "👬🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏿"
end
it "`1F48F` (fully-qualified) should match `kiss` (💏)" do
  "💏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💏"
end
it "`1F469 200D 2764 FE0F 200D 1F48B 200D 1F468` (fully-qualified) should match `kiss: woman, man` (👩‍❤️‍💋‍👨)" do
  "👩‍❤️‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍💋‍👨"
end
it "`1F469 200D 2764 200D 1F48B 200D 1F468` (minimally-qualified) should match `kiss: woman, man` (👩‍❤‍💋‍👨)" do
  "👩‍❤‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍💋‍👨"
end
it "`1F468 200D 2764 FE0F 200D 1F48B 200D 1F468` (fully-qualified) should match `kiss: man, man` (👨‍❤️‍💋‍👨)" do
  "👨‍❤️‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤️‍💋‍👨"
end
it "`1F468 200D 2764 200D 1F48B 200D 1F468` (minimally-qualified) should match `kiss: man, man` (👨‍❤‍💋‍👨)" do
  "👨‍❤‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤‍💋‍👨"
end
it "`1F469 200D 2764 FE0F 200D 1F48B 200D 1F469` (fully-qualified) should match `kiss: woman, woman` (👩‍❤️‍💋‍👩)" do
  "👩‍❤️‍💋‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍💋‍👩"
end
it "`1F469 200D 2764 200D 1F48B 200D 1F469` (minimally-qualified) should match `kiss: woman, woman` (👩‍❤‍💋‍👩)" do
  "👩‍❤‍💋‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍💋‍👩"
end
it "`1F491` (fully-qualified) should match `couple with heart` (💑)" do
  "💑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💑"
end
it "`1F469 200D 2764 FE0F 200D 1F468` (fully-qualified) should match `couple with heart: woman, man` (👩‍❤️‍👨)" do
  "👩‍❤️‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍👨"
end
it "`1F469 200D 2764 200D 1F468` (minimally-qualified) should match `couple with heart: woman, man` (👩‍❤‍👨)" do
  "👩‍❤‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍👨"
end
it "`1F468 200D 2764 FE0F 200D 1F468` (fully-qualified) should match `couple with heart: man, man` (👨‍❤️‍👨)" do
  "👨‍❤️‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤️‍👨"
end
it "`1F468 200D 2764 200D 1F468` (minimally-qualified) should match `couple with heart: man, man` (👨‍❤‍👨)" do
  "👨‍❤‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤‍👨"
end
it "`1F469 200D 2764 FE0F 200D 1F469` (fully-qualified) should match `couple with heart: woman, woman` (👩‍❤️‍👩)" do
  "👩‍❤️‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍👩"
end
it "`1F469 200D 2764 200D 1F469` (minimally-qualified) should match `couple with heart: woman, woman` (👩‍❤‍👩)" do
  "👩‍❤‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍👩"
end
it "`1F46A` (fully-qualified) should match `family` (👪)" do
  "👪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👪"
end
it "`1F468 200D 1F469 200D 1F466` (fully-qualified) should match `family: man, woman, boy` (👨‍👩‍👦)" do
  "👨‍👩‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👦"
end
it "`1F468 200D 1F469 200D 1F467` (fully-qualified) should match `family: man, woman, girl` (👨‍👩‍👧)" do
  "👨‍👩‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👧"
end
it "`1F468 200D 1F469 200D 1F467 200D 1F466` (fully-qualified) should match `family: man, woman, girl, boy` (👨‍👩‍👧‍👦)" do
  "👨‍👩‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👧‍👦"
end
it "`1F468 200D 1F469 200D 1F466 200D 1F466` (fully-qualified) should match `family: man, woman, boy, boy` (👨‍👩‍👦‍👦)" do
  "👨‍👩‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👦‍👦"
end
it "`1F468 200D 1F469 200D 1F467 200D 1F467` (fully-qualified) should match `family: man, woman, girl, girl` (👨‍👩‍👧‍👧)" do
  "👨‍👩‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👧‍👧"
end
it "`1F468 200D 1F468 200D 1F466` (fully-qualified) should match `family: man, man, boy` (👨‍👨‍👦)" do
  "👨‍👨‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👦"
end
it "`1F468 200D 1F468 200D 1F467` (fully-qualified) should match `family: man, man, girl` (👨‍👨‍👧)" do
  "👨‍👨‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👧"
end
it "`1F468 200D 1F468 200D 1F467 200D 1F466` (fully-qualified) should match `family: man, man, girl, boy` (👨‍👨‍👧‍👦)" do
  "👨‍👨‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👧‍👦"
end
it "`1F468 200D 1F468 200D 1F466 200D 1F466` (fully-qualified) should match `family: man, man, boy, boy` (👨‍👨‍👦‍👦)" do
  "👨‍👨‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👦‍👦"
end
it "`1F468 200D 1F468 200D 1F467 200D 1F467` (fully-qualified) should match `family: man, man, girl, girl` (👨‍👨‍👧‍👧)" do
  "👨‍👨‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👧‍👧"
end
it "`1F469 200D 1F469 200D 1F466` (fully-qualified) should match `family: woman, woman, boy` (👩‍👩‍👦)" do
  "👩‍👩‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👦"
end
it "`1F469 200D 1F469 200D 1F467` (fully-qualified) should match `family: woman, woman, girl` (👩‍👩‍👧)" do
  "👩‍👩‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👧"
end
it "`1F469 200D 1F469 200D 1F467 200D 1F466` (fully-qualified) should match `family: woman, woman, girl, boy` (👩‍👩‍👧‍👦)" do
  "👩‍👩‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👧‍👦"
end
it "`1F469 200D 1F469 200D 1F466 200D 1F466` (fully-qualified) should match `family: woman, woman, boy, boy` (👩‍👩‍👦‍👦)" do
  "👩‍👩‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👦‍👦"
end
it "`1F469 200D 1F469 200D 1F467 200D 1F467` (fully-qualified) should match `family: woman, woman, girl, girl` (👩‍👩‍👧‍👧)" do
  "👩‍👩‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👧‍👧"
end
it "`1F468 200D 1F466` (fully-qualified) should match `family: man, boy` (👨‍👦)" do
  "👨‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👦"
end
it "`1F468 200D 1F466 200D 1F466` (fully-qualified) should match `family: man, boy, boy` (👨‍👦‍👦)" do
  "👨‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👦‍👦"
end
it "`1F468 200D 1F467` (fully-qualified) should match `family: man, girl` (👨‍👧)" do
  "👨‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👧"
end
it "`1F468 200D 1F467 200D 1F466` (fully-qualified) should match `family: man, girl, boy` (👨‍👧‍👦)" do
  "👨‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👧‍👦"
end
it "`1F468 200D 1F467 200D 1F467` (fully-qualified) should match `family: man, girl, girl` (👨‍👧‍👧)" do
  "👨‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👧‍👧"
end
it "`1F469 200D 1F466` (fully-qualified) should match `family: woman, boy` (👩‍👦)" do
  "👩‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👦"
end
it "`1F469 200D 1F466 200D 1F466` (fully-qualified) should match `family: woman, boy, boy` (👩‍👦‍👦)" do
  "👩‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👦‍👦"
end
it "`1F469 200D 1F467` (fully-qualified) should match `family: woman, girl` (👩‍👧)" do
  "👩‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👧"
end
it "`1F469 200D 1F467 200D 1F466` (fully-qualified) should match `family: woman, girl, boy` (👩‍👧‍👦)" do
  "👩‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👧‍👦"
end
it "`1F469 200D 1F467 200D 1F467` (fully-qualified) should match `family: woman, girl, girl` (👩‍👧‍👧)" do
  "👩‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👧‍👧"
end
it "`1F5E3 FE0F` (fully-qualified) should match `speaking head` (🗣️)" do
  "🗣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗣️"
end
it "`1F5E3` (unqualified) should match `speaking head` (🗣)" do
  "🗣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗣"
end
it "`1F464` (fully-qualified) should match `bust in silhouette` (👤)" do
  "👤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👤"
end
it "`1F465` (fully-qualified) should match `busts in silhouette` (👥)" do
  "👥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👥"
end
it "`1F463` (fully-qualified) should match `footprints` (👣)" do
  "👣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👣"
end
it "`1F3FB` (component) should match `light skin tone` (🏻)" do
  "🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏻"
end
it "`1F3FC` (component) should match `medium-light skin tone` (🏼)" do
  "🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏼"
end
it "`1F3FD` (component) should match `medium skin tone` (🏽)" do
  "🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏽"
end
it "`1F3FE` (component) should match `medium-dark skin tone` (🏾)" do
  "🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏾"
end
it "`1F3FF` (component) should match `dark skin tone` (🏿)" do
  "🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏿"
end
it "`1F9B0` (component) should match `red hair` (🦰)" do
  "🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦰"
end
it "`1F9B1` (component) should match `curly hair` (🦱)" do
  "🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦱"
end
it "`1F9B3` (component) should match `white hair` (🦳)" do
  "🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦳"
end
it "`1F9B2` (component) should match `bald` (🦲)" do
  "🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦲"
end
it "`1F435` (fully-qualified) should match `monkey face` (🐵)" do
  "🐵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐵"
end
it "`1F412` (fully-qualified) should match `monkey` (🐒)" do
  "🐒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐒"
end
it "`1F98D` (fully-qualified) should match `gorilla` (🦍)" do
  "🦍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦍"
end
it "`1F9A7` (fully-qualified) should match `orangutan` (🦧)" do
  "🦧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦧"
end
it "`1F436` (fully-qualified) should match `dog face` (🐶)" do
  "🐶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐶"
end
it "`1F415` (fully-qualified) should match `dog` (🐕)" do
  "🐕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐕"
end
it "`1F9AE` (fully-qualified) should match `guide dog` (🦮)" do
  "🦮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦮"
end
it "`1F415 200D 1F9BA` (fully-qualified) should match `service dog` (🐕‍🦺)" do
  "🐕‍🦺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐕‍🦺"
end
it "`1F429` (fully-qualified) should match `poodle` (🐩)" do
  "🐩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐩"
end
it "`1F43A` (fully-qualified) should match `wolf` (🐺)" do
  "🐺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐺"
end
it "`1F98A` (fully-qualified) should match `fox` (🦊)" do
  "🦊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦊"
end
it "`1F99D` (fully-qualified) should match `raccoon` (🦝)" do
  "🦝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦝"
end
it "`1F431` (fully-qualified) should match `cat face` (🐱)" do
  "🐱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐱"
end
it "`1F408` (fully-qualified) should match `cat` (🐈)" do
  "🐈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐈"
end
it "`1F981` (fully-qualified) should match `lion` (🦁)" do
  "🦁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦁"
end
it "`1F42F` (fully-qualified) should match `tiger face` (🐯)" do
  "🐯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐯"
end
it "`1F405` (fully-qualified) should match `tiger` (🐅)" do
  "🐅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐅"
end
it "`1F406` (fully-qualified) should match `leopard` (🐆)" do
  "🐆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐆"
end
it "`1F434` (fully-qualified) should match `horse face` (🐴)" do
  "🐴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐴"
end
it "`1F40E` (fully-qualified) should match `horse` (🐎)" do
  "🐎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐎"
end
it "`1F984` (fully-qualified) should match `unicorn` (🦄)" do
  "🦄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦄"
end
it "`1F993` (fully-qualified) should match `zebra` (🦓)" do
  "🦓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦓"
end
it "`1F98C` (fully-qualified) should match `deer` (🦌)" do
  "🦌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦌"
end
it "`1F42E` (fully-qualified) should match `cow face` (🐮)" do
  "🐮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐮"
end
it "`1F402` (fully-qualified) should match `ox` (🐂)" do
  "🐂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐂"
end
it "`1F403` (fully-qualified) should match `water buffalo` (🐃)" do
  "🐃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐃"
end
it "`1F404` (fully-qualified) should match `cow` (🐄)" do
  "🐄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐄"
end
it "`1F437` (fully-qualified) should match `pig face` (🐷)" do
  "🐷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐷"
end
it "`1F416` (fully-qualified) should match `pig` (🐖)" do
  "🐖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐖"
end
it "`1F417` (fully-qualified) should match `boar` (🐗)" do
  "🐗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐗"
end
it "`1F43D` (fully-qualified) should match `pig nose` (🐽)" do
  "🐽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐽"
end
it "`1F40F` (fully-qualified) should match `ram` (🐏)" do
  "🐏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐏"
end
it "`1F411` (fully-qualified) should match `ewe` (🐑)" do
  "🐑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐑"
end
it "`1F410` (fully-qualified) should match `goat` (🐐)" do
  "🐐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐐"
end
it "`1F42A` (fully-qualified) should match `camel` (🐪)" do
  "🐪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐪"
end
it "`1F42B` (fully-qualified) should match `two-hump camel` (🐫)" do
  "🐫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐫"
end
it "`1F999` (fully-qualified) should match `llama` (🦙)" do
  "🦙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦙"
end
it "`1F992` (fully-qualified) should match `giraffe` (🦒)" do
  "🦒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦒"
end
it "`1F418` (fully-qualified) should match `elephant` (🐘)" do
  "🐘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐘"
end
it "`1F98F` (fully-qualified) should match `rhinoceros` (🦏)" do
  "🦏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦏"
end
it "`1F99B` (fully-qualified) should match `hippopotamus` (🦛)" do
  "🦛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦛"
end
it "`1F42D` (fully-qualified) should match `mouse face` (🐭)" do
  "🐭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐭"
end
it "`1F401` (fully-qualified) should match `mouse` (🐁)" do
  "🐁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐁"
end
it "`1F400` (fully-qualified) should match `rat` (🐀)" do
  "🐀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐀"
end
it "`1F439` (fully-qualified) should match `hamster` (🐹)" do
  "🐹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐹"
end
it "`1F430` (fully-qualified) should match `rabbit face` (🐰)" do
  "🐰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐰"
end
it "`1F407` (fully-qualified) should match `rabbit` (🐇)" do
  "🐇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐇"
end
it "`1F43F FE0F` (fully-qualified) should match `chipmunk` (🐿️)" do
  "🐿️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐿️"
end
it "`1F43F` (unqualified) should match `chipmunk` (🐿)" do
  "🐿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐿"
end
it "`1F994` (fully-qualified) should match `hedgehog` (🦔)" do
  "🦔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦔"
end
it "`1F987` (fully-qualified) should match `bat` (🦇)" do
  "🦇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦇"
end
it "`1F43B` (fully-qualified) should match `bear` (🐻)" do
  "🐻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐻"
end
it "`1F428` (fully-qualified) should match `koala` (🐨)" do
  "🐨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐨"
end
it "`1F43C` (fully-qualified) should match `panda` (🐼)" do
  "🐼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐼"
end
it "`1F9A5` (fully-qualified) should match `sloth` (🦥)" do
  "🦥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦥"
end
it "`1F9A6` (fully-qualified) should match `otter` (🦦)" do
  "🦦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦦"
end
it "`1F9A8` (fully-qualified) should match `skunk` (🦨)" do
  "🦨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦨"
end
it "`1F998` (fully-qualified) should match `kangaroo` (🦘)" do
  "🦘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦘"
end
it "`1F9A1` (fully-qualified) should match `badger` (🦡)" do
  "🦡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦡"
end
it "`1F43E` (fully-qualified) should match `paw prints` (🐾)" do
  "🐾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐾"
end
it "`1F983` (fully-qualified) should match `turkey` (🦃)" do
  "🦃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦃"
end
it "`1F414` (fully-qualified) should match `chicken` (🐔)" do
  "🐔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐔"
end
it "`1F413` (fully-qualified) should match `rooster` (🐓)" do
  "🐓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐓"
end
it "`1F423` (fully-qualified) should match `hatching chick` (🐣)" do
  "🐣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐣"
end
it "`1F424` (fully-qualified) should match `baby chick` (🐤)" do
  "🐤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐤"
end
it "`1F425` (fully-qualified) should match `front-facing baby chick` (🐥)" do
  "🐥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐥"
end
it "`1F426` (fully-qualified) should match `bird` (🐦)" do
  "🐦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐦"
end
it "`1F427` (fully-qualified) should match `penguin` (🐧)" do
  "🐧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐧"
end
it "`1F54A FE0F` (fully-qualified) should match `dove` (🕊️)" do
  "🕊️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕊️"
end
it "`1F54A` (unqualified) should match `dove` (🕊)" do
  "🕊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕊"
end
it "`1F985` (fully-qualified) should match `eagle` (🦅)" do
  "🦅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦅"
end
it "`1F986` (fully-qualified) should match `duck` (🦆)" do
  "🦆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦆"
end
it "`1F9A2` (fully-qualified) should match `swan` (🦢)" do
  "🦢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦢"
end
it "`1F989` (fully-qualified) should match `owl` (🦉)" do
  "🦉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦉"
end
it "`1F9A9` (fully-qualified) should match `flamingo` (🦩)" do
  "🦩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦩"
end
it "`1F99A` (fully-qualified) should match `peacock` (🦚)" do
  "🦚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦚"
end
it "`1F99C` (fully-qualified) should match `parrot` (🦜)" do
  "🦜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦜"
end
it "`1F438` (fully-qualified) should match `frog` (🐸)" do
  "🐸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐸"
end
it "`1F40A` (fully-qualified) should match `crocodile` (🐊)" do
  "🐊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐊"
end
it "`1F422` (fully-qualified) should match `turtle` (🐢)" do
  "🐢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐢"
end
it "`1F98E` (fully-qualified) should match `lizard` (🦎)" do
  "🦎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦎"
end
it "`1F40D` (fully-qualified) should match `snake` (🐍)" do
  "🐍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐍"
end
it "`1F432` (fully-qualified) should match `dragon face` (🐲)" do
  "🐲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐲"
end
it "`1F409` (fully-qualified) should match `dragon` (🐉)" do
  "🐉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐉"
end
it "`1F995` (fully-qualified) should match `sauropod` (🦕)" do
  "🦕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦕"
end
it "`1F996` (fully-qualified) should match `T-Rex` (🦖)" do
  "🦖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦖"
end
it "`1F433` (fully-qualified) should match `spouting whale` (🐳)" do
  "🐳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐳"
end
it "`1F40B` (fully-qualified) should match `whale` (🐋)" do
  "🐋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐋"
end
it "`1F42C` (fully-qualified) should match `dolphin` (🐬)" do
  "🐬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐬"
end
it "`1F41F` (fully-qualified) should match `fish` (🐟)" do
  "🐟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐟"
end
it "`1F420` (fully-qualified) should match `tropical fish` (🐠)" do
  "🐠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐠"
end
it "`1F421` (fully-qualified) should match `blowfish` (🐡)" do
  "🐡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐡"
end
it "`1F988` (fully-qualified) should match `shark` (🦈)" do
  "🦈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦈"
end
it "`1F419` (fully-qualified) should match `octopus` (🐙)" do
  "🐙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐙"
end
it "`1F41A` (fully-qualified) should match `spiral shell` (🐚)" do
  "🐚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐚"
end
it "`1F40C` (fully-qualified) should match `snail` (🐌)" do
  "🐌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐌"
end
it "`1F98B` (fully-qualified) should match `butterfly` (🦋)" do
  "🦋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦋"
end
it "`1F41B` (fully-qualified) should match `bug` (🐛)" do
  "🐛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐛"
end
it "`1F41C` (fully-qualified) should match `ant` (🐜)" do
  "🐜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐜"
end
it "`1F41D` (fully-qualified) should match `honeybee` (🐝)" do
  "🐝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐝"
end
it "`1F41E` (fully-qualified) should match `lady beetle` (🐞)" do
  "🐞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐞"
end
it "`1F997` (fully-qualified) should match `cricket` (🦗)" do
  "🦗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦗"
end
it "`1F577 FE0F` (fully-qualified) should match `spider` (🕷️)" do
  "🕷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕷️"
end
it "`1F577` (unqualified) should match `spider` (🕷)" do
  "🕷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕷"
end
it "`1F578 FE0F` (fully-qualified) should match `spider web` (🕸️)" do
  "🕸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕸️"
end
it "`1F578` (unqualified) should match `spider web` (🕸)" do
  "🕸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕸"
end
it "`1F982` (fully-qualified) should match `scorpion` (🦂)" do
  "🦂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦂"
end
it "`1F99F` (fully-qualified) should match `mosquito` (🦟)" do
  "🦟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦟"
end
it "`1F9A0` (fully-qualified) should match `microbe` (🦠)" do
  "🦠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦠"
end
it "`1F490` (fully-qualified) should match `bouquet` (💐)" do
  "💐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💐"
end
it "`1F338` (fully-qualified) should match `cherry blossom` (🌸)" do
  "🌸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌸"
end
it "`1F4AE` (fully-qualified) should match `white flower` (💮)" do
  "💮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💮"
end
it "`1F3F5 FE0F` (fully-qualified) should match `rosette` (🏵️)" do
  "🏵️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏵️"
end
it "`1F3F5` (unqualified) should match `rosette` (🏵)" do
  "🏵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏵"
end
it "`1F339` (fully-qualified) should match `rose` (🌹)" do
  "🌹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌹"
end
it "`1F940` (fully-qualified) should match `wilted flower` (🥀)" do
  "🥀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥀"
end
it "`1F33A` (fully-qualified) should match `hibiscus` (🌺)" do
  "🌺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌺"
end
it "`1F33B` (fully-qualified) should match `sunflower` (🌻)" do
  "🌻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌻"
end
it "`1F33C` (fully-qualified) should match `blossom` (🌼)" do
  "🌼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌼"
end
it "`1F337` (fully-qualified) should match `tulip` (🌷)" do
  "🌷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌷"
end
it "`1F331` (fully-qualified) should match `seedling` (🌱)" do
  "🌱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌱"
end
it "`1F332` (fully-qualified) should match `evergreen tree` (🌲)" do
  "🌲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌲"
end
it "`1F333` (fully-qualified) should match `deciduous tree` (🌳)" do
  "🌳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌳"
end
it "`1F334` (fully-qualified) should match `palm tree` (🌴)" do
  "🌴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌴"
end
it "`1F335` (fully-qualified) should match `cactus` (🌵)" do
  "🌵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌵"
end
it "`1F33E` (fully-qualified) should match `sheaf of rice` (🌾)" do
  "🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌾"
end
it "`1F33F` (fully-qualified) should match `herb` (🌿)" do
  "🌿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌿"
end
it "`2618 FE0F` (fully-qualified) should match `shamrock` (☘️)" do
  "☘️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☘️"
end
it "`2618` (unqualified) should match `shamrock` (☘)" do
  "☘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☘"
end
it "`1F340` (fully-qualified) should match `four leaf clover` (🍀)" do
  "🍀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍀"
end
it "`1F341` (fully-qualified) should match `maple leaf` (🍁)" do
  "🍁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍁"
end
it "`1F342` (fully-qualified) should match `fallen leaf` (🍂)" do
  "🍂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍂"
end
it "`1F343` (fully-qualified) should match `leaf fluttering in wind` (🍃)" do
  "🍃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍃"
end
it "`1F347` (fully-qualified) should match `grapes` (🍇)" do
  "🍇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍇"
end
it "`1F348` (fully-qualified) should match `melon` (🍈)" do
  "🍈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍈"
end
it "`1F349` (fully-qualified) should match `watermelon` (🍉)" do
  "🍉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍉"
end
it "`1F34A` (fully-qualified) should match `tangerine` (🍊)" do
  "🍊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍊"
end
it "`1F34B` (fully-qualified) should match `lemon` (🍋)" do
  "🍋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍋"
end
it "`1F34C` (fully-qualified) should match `banana` (🍌)" do
  "🍌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍌"
end
it "`1F34D` (fully-qualified) should match `pineapple` (🍍)" do
  "🍍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍍"
end
it "`1F96D` (fully-qualified) should match `mango` (🥭)" do
  "🥭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥭"
end
it "`1F34E` (fully-qualified) should match `red apple` (🍎)" do
  "🍎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍎"
end
it "`1F34F` (fully-qualified) should match `green apple` (🍏)" do
  "🍏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍏"
end
it "`1F350` (fully-qualified) should match `pear` (🍐)" do
  "🍐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍐"
end
it "`1F351` (fully-qualified) should match `peach` (🍑)" do
  "🍑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍑"
end
it "`1F352` (fully-qualified) should match `cherries` (🍒)" do
  "🍒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍒"
end
it "`1F353` (fully-qualified) should match `strawberry` (🍓)" do
  "🍓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍓"
end
it "`1F95D` (fully-qualified) should match `kiwi fruit` (🥝)" do
  "🥝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥝"
end
it "`1F345` (fully-qualified) should match `tomato` (🍅)" do
  "🍅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍅"
end
it "`1F965` (fully-qualified) should match `coconut` (🥥)" do
  "🥥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥥"
end
it "`1F951` (fully-qualified) should match `avocado` (🥑)" do
  "🥑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥑"
end
it "`1F346` (fully-qualified) should match `eggplant` (🍆)" do
  "🍆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍆"
end
it "`1F954` (fully-qualified) should match `potato` (🥔)" do
  "🥔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥔"
end
it "`1F955` (fully-qualified) should match `carrot` (🥕)" do
  "🥕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥕"
end
it "`1F33D` (fully-qualified) should match `ear of corn` (🌽)" do
  "🌽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌽"
end
it "`1F336 FE0F` (fully-qualified) should match `hot pepper` (🌶️)" do
  "🌶️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌶️"
end
it "`1F336` (unqualified) should match `hot pepper` (🌶)" do
  "🌶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌶"
end
it "`1F952` (fully-qualified) should match `cucumber` (🥒)" do
  "🥒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥒"
end
it "`1F96C` (fully-qualified) should match `leafy green` (🥬)" do
  "🥬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥬"
end
it "`1F966` (fully-qualified) should match `broccoli` (🥦)" do
  "🥦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥦"
end
it "`1F9C4` (fully-qualified) should match `garlic` (🧄)" do
  "🧄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧄"
end
it "`1F9C5` (fully-qualified) should match `onion` (🧅)" do
  "🧅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧅"
end
it "`1F344` (fully-qualified) should match `mushroom` (🍄)" do
  "🍄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍄"
end
it "`1F95C` (fully-qualified) should match `peanuts` (🥜)" do
  "🥜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥜"
end
it "`1F330` (fully-qualified) should match `chestnut` (🌰)" do
  "🌰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌰"
end
it "`1F35E` (fully-qualified) should match `bread` (🍞)" do
  "🍞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍞"
end
it "`1F950` (fully-qualified) should match `croissant` (🥐)" do
  "🥐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥐"
end
it "`1F956` (fully-qualified) should match `baguette bread` (🥖)" do
  "🥖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥖"
end
it "`1F968` (fully-qualified) should match `pretzel` (🥨)" do
  "🥨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥨"
end
it "`1F96F` (fully-qualified) should match `bagel` (🥯)" do
  "🥯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥯"
end
it "`1F95E` (fully-qualified) should match `pancakes` (🥞)" do
  "🥞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥞"
end
it "`1F9C7` (fully-qualified) should match `waffle` (🧇)" do
  "🧇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧇"
end
it "`1F9C0` (fully-qualified) should match `cheese wedge` (🧀)" do
  "🧀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧀"
end
it "`1F356` (fully-qualified) should match `meat on bone` (🍖)" do
  "🍖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍖"
end
it "`1F357` (fully-qualified) should match `poultry leg` (🍗)" do
  "🍗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍗"
end
it "`1F969` (fully-qualified) should match `cut of meat` (🥩)" do
  "🥩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥩"
end
it "`1F953` (fully-qualified) should match `bacon` (🥓)" do
  "🥓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥓"
end
it "`1F354` (fully-qualified) should match `hamburger` (🍔)" do
  "🍔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍔"
end
it "`1F35F` (fully-qualified) should match `french fries` (🍟)" do
  "🍟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍟"
end
it "`1F355` (fully-qualified) should match `pizza` (🍕)" do
  "🍕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍕"
end
it "`1F32D` (fully-qualified) should match `hot dog` (🌭)" do
  "🌭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌭"
end
it "`1F96A` (fully-qualified) should match `sandwich` (🥪)" do
  "🥪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥪"
end
it "`1F32E` (fully-qualified) should match `taco` (🌮)" do
  "🌮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌮"
end
it "`1F32F` (fully-qualified) should match `burrito` (🌯)" do
  "🌯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌯"
end
it "`1F959` (fully-qualified) should match `stuffed flatbread` (🥙)" do
  "🥙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥙"
end
it "`1F9C6` (fully-qualified) should match `falafel` (🧆)" do
  "🧆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧆"
end
it "`1F95A` (fully-qualified) should match `egg` (🥚)" do
  "🥚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥚"
end
it "`1F373` (fully-qualified) should match `cooking` (🍳)" do
  "🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍳"
end
it "`1F958` (fully-qualified) should match `shallow pan of food` (🥘)" do
  "🥘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥘"
end
it "`1F372` (fully-qualified) should match `pot of food` (🍲)" do
  "🍲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍲"
end
it "`1F963` (fully-qualified) should match `bowl with spoon` (🥣)" do
  "🥣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥣"
end
it "`1F957` (fully-qualified) should match `green salad` (🥗)" do
  "🥗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥗"
end
it "`1F37F` (fully-qualified) should match `popcorn` (🍿)" do
  "🍿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍿"
end
it "`1F9C8` (fully-qualified) should match `butter` (🧈)" do
  "🧈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧈"
end
it "`1F9C2` (fully-qualified) should match `salt` (🧂)" do
  "🧂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧂"
end
it "`1F96B` (fully-qualified) should match `canned food` (🥫)" do
  "🥫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥫"
end
it "`1F371` (fully-qualified) should match `bento box` (🍱)" do
  "🍱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍱"
end
it "`1F358` (fully-qualified) should match `rice cracker` (🍘)" do
  "🍘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍘"
end
it "`1F359` (fully-qualified) should match `rice ball` (🍙)" do
  "🍙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍙"
end
it "`1F35A` (fully-qualified) should match `cooked rice` (🍚)" do
  "🍚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍚"
end
it "`1F35B` (fully-qualified) should match `curry rice` (🍛)" do
  "🍛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍛"
end
it "`1F35C` (fully-qualified) should match `steaming bowl` (🍜)" do
  "🍜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍜"
end
it "`1F35D` (fully-qualified) should match `spaghetti` (🍝)" do
  "🍝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍝"
end
it "`1F360` (fully-qualified) should match `roasted sweet potato` (🍠)" do
  "🍠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍠"
end
it "`1F362` (fully-qualified) should match `oden` (🍢)" do
  "🍢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍢"
end
it "`1F363` (fully-qualified) should match `sushi` (🍣)" do
  "🍣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍣"
end
it "`1F364` (fully-qualified) should match `fried shrimp` (🍤)" do
  "🍤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍤"
end
it "`1F365` (fully-qualified) should match `fish cake with swirl` (🍥)" do
  "🍥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍥"
end
it "`1F96E` (fully-qualified) should match `moon cake` (🥮)" do
  "🥮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥮"
end
it "`1F361` (fully-qualified) should match `dango` (🍡)" do
  "🍡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍡"
end
it "`1F95F` (fully-qualified) should match `dumpling` (🥟)" do
  "🥟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥟"
end
it "`1F960` (fully-qualified) should match `fortune cookie` (🥠)" do
  "🥠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥠"
end
it "`1F961` (fully-qualified) should match `takeout box` (🥡)" do
  "🥡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥡"
end
it "`1F980` (fully-qualified) should match `crab` (🦀)" do
  "🦀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦀"
end
it "`1F99E` (fully-qualified) should match `lobster` (🦞)" do
  "🦞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦞"
end
it "`1F990` (fully-qualified) should match `shrimp` (🦐)" do
  "🦐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦐"
end
it "`1F991` (fully-qualified) should match `squid` (🦑)" do
  "🦑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦑"
end
it "`1F9AA` (fully-qualified) should match `oyster` (🦪)" do
  "🦪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦪"
end
it "`1F366` (fully-qualified) should match `soft ice cream` (🍦)" do
  "🍦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍦"
end
it "`1F367` (fully-qualified) should match `shaved ice` (🍧)" do
  "🍧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍧"
end
it "`1F368` (fully-qualified) should match `ice cream` (🍨)" do
  "🍨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍨"
end
it "`1F369` (fully-qualified) should match `doughnut` (🍩)" do
  "🍩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍩"
end
it "`1F36A` (fully-qualified) should match `cookie` (🍪)" do
  "🍪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍪"
end
it "`1F382` (fully-qualified) should match `birthday cake` (🎂)" do
  "🎂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎂"
end
it "`1F370` (fully-qualified) should match `shortcake` (🍰)" do
  "🍰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍰"
end
it "`1F9C1` (fully-qualified) should match `cupcake` (🧁)" do
  "🧁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧁"
end
it "`1F967` (fully-qualified) should match `pie` (🥧)" do
  "🥧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥧"
end
it "`1F36B` (fully-qualified) should match `chocolate bar` (🍫)" do
  "🍫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍫"
end
it "`1F36C` (fully-qualified) should match `candy` (🍬)" do
  "🍬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍬"
end
it "`1F36D` (fully-qualified) should match `lollipop` (🍭)" do
  "🍭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍭"
end
it "`1F36E` (fully-qualified) should match `custard` (🍮)" do
  "🍮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍮"
end
it "`1F36F` (fully-qualified) should match `honey pot` (🍯)" do
  "🍯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍯"
end
it "`1F37C` (fully-qualified) should match `baby bottle` (🍼)" do
  "🍼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍼"
end
it "`1F95B` (fully-qualified) should match `glass of milk` (🥛)" do
  "🥛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥛"
end
it "`2615` (fully-qualified) should match `hot beverage` (☕)" do
  "☕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☕"
end
it "`1F375` (fully-qualified) should match `teacup without handle` (🍵)" do
  "🍵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍵"
end
it "`1F376` (fully-qualified) should match `sake` (🍶)" do
  "🍶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍶"
end
it "`1F37E` (fully-qualified) should match `bottle with popping cork` (🍾)" do
  "🍾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍾"
end
it "`1F377` (fully-qualified) should match `wine glass` (🍷)" do
  "🍷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍷"
end
it "`1F378` (fully-qualified) should match `cocktail glass` (🍸)" do
  "🍸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍸"
end
it "`1F379` (fully-qualified) should match `tropical drink` (🍹)" do
  "🍹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍹"
end
it "`1F37A` (fully-qualified) should match `beer mug` (🍺)" do
  "🍺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍺"
end
it "`1F37B` (fully-qualified) should match `clinking beer mugs` (🍻)" do
  "🍻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍻"
end
it "`1F942` (fully-qualified) should match `clinking glasses` (🥂)" do
  "🥂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥂"
end
it "`1F943` (fully-qualified) should match `tumbler glass` (🥃)" do
  "🥃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥃"
end
it "`1F964` (fully-qualified) should match `cup with straw` (🥤)" do
  "🥤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥤"
end
it "`1F9C3` (fully-qualified) should match `beverage box` (🧃)" do
  "🧃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧃"
end
it "`1F9C9` (fully-qualified) should match `mate` (🧉)" do
  "🧉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧉"
end
it "`1F9CA` (fully-qualified) should match `ice cube` (🧊)" do
  "🧊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧊"
end
it "`1F962` (fully-qualified) should match `chopsticks` (🥢)" do
  "🥢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥢"
end
it "`1F37D FE0F` (fully-qualified) should match `fork and knife with plate` (🍽️)" do
  "🍽️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍽️"
end
it "`1F37D` (unqualified) should match `fork and knife with plate` (🍽)" do
  "🍽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍽"
end
it "`1F374` (fully-qualified) should match `fork and knife` (🍴)" do
  "🍴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍴"
end
it "`1F944` (fully-qualified) should match `spoon` (🥄)" do
  "🥄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥄"
end
it "`1F52A` (fully-qualified) should match `kitchen knife` (🔪)" do
  "🔪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔪"
end
it "`1F3FA` (fully-qualified) should match `amphora` (🏺)" do
  "🏺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏺"
end
it "`1F30D` (fully-qualified) should match `globe showing Europe-Africa` (🌍)" do
  "🌍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌍"
end
it "`1F30E` (fully-qualified) should match `globe showing Americas` (🌎)" do
  "🌎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌎"
end
it "`1F30F` (fully-qualified) should match `globe showing Asia-Australia` (🌏)" do
  "🌏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌏"
end
it "`1F310` (fully-qualified) should match `globe with meridians` (🌐)" do
  "🌐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌐"
end
it "`1F5FA FE0F` (fully-qualified) should match `world map` (🗺️)" do
  "🗺️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗺️"
end
it "`1F5FA` (unqualified) should match `world map` (🗺)" do
  "🗺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗺"
end
it "`1F5FE` (fully-qualified) should match `map of Japan` (🗾)" do
  "🗾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗾"
end
it "`1F9ED` (fully-qualified) should match `compass` (🧭)" do
  "🧭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧭"
end
it "`1F3D4 FE0F` (fully-qualified) should match `snow-capped mountain` (🏔️)" do
  "🏔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏔️"
end
it "`1F3D4` (unqualified) should match `snow-capped mountain` (🏔)" do
  "🏔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏔"
end
it "`26F0 FE0F` (fully-qualified) should match `mountain` (⛰️)" do
  "⛰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛰️"
end
it "`26F0` (unqualified) should match `mountain` (⛰)" do
  "⛰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛰"
end
it "`1F30B` (fully-qualified) should match `volcano` (🌋)" do
  "🌋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌋"
end
it "`1F5FB` (fully-qualified) should match `mount fuji` (🗻)" do
  "🗻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗻"
end
it "`1F3D5 FE0F` (fully-qualified) should match `camping` (🏕️)" do
  "🏕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏕️"
end
it "`1F3D5` (unqualified) should match `camping` (🏕)" do
  "🏕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏕"
end
it "`1F3D6 FE0F` (fully-qualified) should match `beach with umbrella` (🏖️)" do
  "🏖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏖️"
end
it "`1F3D6` (unqualified) should match `beach with umbrella` (🏖)" do
  "🏖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏖"
end
it "`1F3DC FE0F` (fully-qualified) should match `desert` (🏜️)" do
  "🏜️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏜️"
end
it "`1F3DC` (unqualified) should match `desert` (🏜)" do
  "🏜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏜"
end
it "`1F3DD FE0F` (fully-qualified) should match `desert island` (🏝️)" do
  "🏝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏝️"
end
it "`1F3DD` (unqualified) should match `desert island` (🏝)" do
  "🏝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏝"
end
it "`1F3DE FE0F` (fully-qualified) should match `national park` (🏞️)" do
  "🏞️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏞️"
end
it "`1F3DE` (unqualified) should match `national park` (🏞)" do
  "🏞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏞"
end
it "`1F3DF FE0F` (fully-qualified) should match `stadium` (🏟️)" do
  "🏟️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏟️"
end
it "`1F3DF` (unqualified) should match `stadium` (🏟)" do
  "🏟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏟"
end
it "`1F3DB FE0F` (fully-qualified) should match `classical building` (🏛️)" do
  "🏛️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏛️"
end
it "`1F3DB` (unqualified) should match `classical building` (🏛)" do
  "🏛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏛"
end
it "`1F3D7 FE0F` (fully-qualified) should match `building construction` (🏗️)" do
  "🏗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏗️"
end
it "`1F3D7` (unqualified) should match `building construction` (🏗)" do
  "🏗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏗"
end
it "`1F9F1` (fully-qualified) should match `brick` (🧱)" do
  "🧱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧱"
end
it "`1F3D8 FE0F` (fully-qualified) should match `houses` (🏘️)" do
  "🏘️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏘️"
end
it "`1F3D8` (unqualified) should match `houses` (🏘)" do
  "🏘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏘"
end
it "`1F3DA FE0F` (fully-qualified) should match `derelict house` (🏚️)" do
  "🏚️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏚️"
end
it "`1F3DA` (unqualified) should match `derelict house` (🏚)" do
  "🏚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏚"
end
it "`1F3E0` (fully-qualified) should match `house` (🏠)" do
  "🏠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏠"
end
it "`1F3E1` (fully-qualified) should match `house with garden` (🏡)" do
  "🏡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏡"
end
it "`1F3E2` (fully-qualified) should match `office building` (🏢)" do
  "🏢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏢"
end
it "`1F3E3` (fully-qualified) should match `Japanese post office` (🏣)" do
  "🏣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏣"
end
it "`1F3E4` (fully-qualified) should match `post office` (🏤)" do
  "🏤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏤"
end
it "`1F3E5` (fully-qualified) should match `hospital` (🏥)" do
  "🏥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏥"
end
it "`1F3E6` (fully-qualified) should match `bank` (🏦)" do
  "🏦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏦"
end
it "`1F3E8` (fully-qualified) should match `hotel` (🏨)" do
  "🏨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏨"
end
it "`1F3E9` (fully-qualified) should match `love hotel` (🏩)" do
  "🏩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏩"
end
it "`1F3EA` (fully-qualified) should match `convenience store` (🏪)" do
  "🏪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏪"
end
it "`1F3EB` (fully-qualified) should match `school` (🏫)" do
  "🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏫"
end
it "`1F3EC` (fully-qualified) should match `department store` (🏬)" do
  "🏬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏬"
end
it "`1F3ED` (fully-qualified) should match `factory` (🏭)" do
  "🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏭"
end
it "`1F3EF` (fully-qualified) should match `Japanese castle` (🏯)" do
  "🏯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏯"
end
it "`1F3F0` (fully-qualified) should match `castle` (🏰)" do
  "🏰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏰"
end
it "`1F492` (fully-qualified) should match `wedding` (💒)" do
  "💒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💒"
end
it "`1F5FC` (fully-qualified) should match `Tokyo tower` (🗼)" do
  "🗼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗼"
end
it "`1F5FD` (fully-qualified) should match `Statue of Liberty` (🗽)" do
  "🗽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗽"
end
it "`26EA` (fully-qualified) should match `church` (⛪)" do
  "⛪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛪"
end
it "`1F54C` (fully-qualified) should match `mosque` (🕌)" do
  "🕌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕌"
end
it "`1F6D5` (fully-qualified) should match `hindu temple` (🛕)" do
  "🛕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛕"
end
it "`1F54D` (fully-qualified) should match `synagogue` (🕍)" do
  "🕍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕍"
end
it "`26E9 FE0F` (fully-qualified) should match `shinto shrine` (⛩️)" do
  "⛩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛩️"
end
it "`26E9` (unqualified) should match `shinto shrine` (⛩)" do
  "⛩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛩"
end
it "`1F54B` (fully-qualified) should match `kaaba` (🕋)" do
  "🕋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕋"
end
it "`26F2` (fully-qualified) should match `fountain` (⛲)" do
  "⛲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛲"
end
it "`26FA` (fully-qualified) should match `tent` (⛺)" do
  "⛺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛺"
end
it "`1F301` (fully-qualified) should match `foggy` (🌁)" do
  "🌁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌁"
end
it "`1F303` (fully-qualified) should match `night with stars` (🌃)" do
  "🌃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌃"
end
it "`1F3D9 FE0F` (fully-qualified) should match `cityscape` (🏙️)" do
  "🏙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏙️"
end
it "`1F3D9` (unqualified) should match `cityscape` (🏙)" do
  "🏙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏙"
end
it "`1F304` (fully-qualified) should match `sunrise over mountains` (🌄)" do
  "🌄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌄"
end
it "`1F305` (fully-qualified) should match `sunrise` (🌅)" do
  "🌅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌅"
end
it "`1F306` (fully-qualified) should match `cityscape at dusk` (🌆)" do
  "🌆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌆"
end
it "`1F307` (fully-qualified) should match `sunset` (🌇)" do
  "🌇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌇"
end
it "`1F309` (fully-qualified) should match `bridge at night` (🌉)" do
  "🌉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌉"
end
it "`2668 FE0F` (fully-qualified) should match `hot springs` (♨️)" do
  "♨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♨️"
end
it "`2668` (unqualified) should match `hot springs` (♨)" do
  "♨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♨"
end
it "`1F3A0` (fully-qualified) should match `carousel horse` (🎠)" do
  "🎠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎠"
end
it "`1F3A1` (fully-qualified) should match `ferris wheel` (🎡)" do
  "🎡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎡"
end
it "`1F3A2` (fully-qualified) should match `roller coaster` (🎢)" do
  "🎢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎢"
end
it "`1F488` (fully-qualified) should match `barber pole` (💈)" do
  "💈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💈"
end
it "`1F3AA` (fully-qualified) should match `circus tent` (🎪)" do
  "🎪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎪"
end
it "`1F682` (fully-qualified) should match `locomotive` (🚂)" do
  "🚂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚂"
end
it "`1F683` (fully-qualified) should match `railway car` (🚃)" do
  "🚃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚃"
end
it "`1F684` (fully-qualified) should match `high-speed train` (🚄)" do
  "🚄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚄"
end
it "`1F685` (fully-qualified) should match `bullet train` (🚅)" do
  "🚅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚅"
end
it "`1F686` (fully-qualified) should match `train` (🚆)" do
  "🚆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚆"
end
it "`1F687` (fully-qualified) should match `metro` (🚇)" do
  "🚇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚇"
end
it "`1F688` (fully-qualified) should match `light rail` (🚈)" do
  "🚈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚈"
end
it "`1F689` (fully-qualified) should match `station` (🚉)" do
  "🚉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚉"
end
it "`1F68A` (fully-qualified) should match `tram` (🚊)" do
  "🚊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚊"
end
it "`1F69D` (fully-qualified) should match `monorail` (🚝)" do
  "🚝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚝"
end
it "`1F69E` (fully-qualified) should match `mountain railway` (🚞)" do
  "🚞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚞"
end
it "`1F68B` (fully-qualified) should match `tram car` (🚋)" do
  "🚋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚋"
end
it "`1F68C` (fully-qualified) should match `bus` (🚌)" do
  "🚌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚌"
end
it "`1F68D` (fully-qualified) should match `oncoming bus` (🚍)" do
  "🚍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚍"
end
it "`1F68E` (fully-qualified) should match `trolleybus` (🚎)" do
  "🚎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚎"
end
it "`1F690` (fully-qualified) should match `minibus` (🚐)" do
  "🚐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚐"
end
it "`1F691` (fully-qualified) should match `ambulance` (🚑)" do
  "🚑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚑"
end
it "`1F692` (fully-qualified) should match `fire engine` (🚒)" do
  "🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚒"
end
it "`1F693` (fully-qualified) should match `police car` (🚓)" do
  "🚓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚓"
end
it "`1F694` (fully-qualified) should match `oncoming police car` (🚔)" do
  "🚔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚔"
end
it "`1F695` (fully-qualified) should match `taxi` (🚕)" do
  "🚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚕"
end
it "`1F696` (fully-qualified) should match `oncoming taxi` (🚖)" do
  "🚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚖"
end
it "`1F697` (fully-qualified) should match `automobile` (🚗)" do
  "🚗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚗"
end
it "`1F698` (fully-qualified) should match `oncoming automobile` (🚘)" do
  "🚘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚘"
end
it "`1F699` (fully-qualified) should match `sport utility vehicle` (🚙)" do
  "🚙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚙"
end
it "`1F69A` (fully-qualified) should match `delivery truck` (🚚)" do
  "🚚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚚"
end
it "`1F69B` (fully-qualified) should match `articulated lorry` (🚛)" do
  "🚛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚛"
end
it "`1F69C` (fully-qualified) should match `tractor` (🚜)" do
  "🚜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚜"
end
it "`1F3CE FE0F` (fully-qualified) should match `racing car` (🏎️)" do
  "🏎️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏎️"
end
it "`1F3CE` (unqualified) should match `racing car` (🏎)" do
  "🏎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏎"
end
it "`1F3CD FE0F` (fully-qualified) should match `motorcycle` (🏍️)" do
  "🏍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏍️"
end
it "`1F3CD` (unqualified) should match `motorcycle` (🏍)" do
  "🏍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏍"
end
it "`1F6F5` (fully-qualified) should match `motor scooter` (🛵)" do
  "🛵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛵"
end
it "`1F9BD` (fully-qualified) should match `manual wheelchair` (🦽)" do
  "🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦽"
end
it "`1F9BC` (fully-qualified) should match `motorized wheelchair` (🦼)" do
  "🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦼"
end
it "`1F6FA` (fully-qualified) should match `auto rickshaw` (🛺)" do
  "🛺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛺"
end
it "`1F6B2` (fully-qualified) should match `bicycle` (🚲)" do
  "🚲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚲"
end
it "`1F6F4` (fully-qualified) should match `kick scooter` (🛴)" do
  "🛴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛴"
end
it "`1F6F9` (fully-qualified) should match `skateboard` (🛹)" do
  "🛹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛹"
end
it "`1F68F` (fully-qualified) should match `bus stop` (🚏)" do
  "🚏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚏"
end
it "`1F6E3 FE0F` (fully-qualified) should match `motorway` (🛣️)" do
  "🛣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛣️"
end
it "`1F6E3` (unqualified) should match `motorway` (🛣)" do
  "🛣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛣"
end
it "`1F6E4 FE0F` (fully-qualified) should match `railway track` (🛤️)" do
  "🛤️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛤️"
end
it "`1F6E4` (unqualified) should match `railway track` (🛤)" do
  "🛤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛤"
end
it "`1F6E2 FE0F` (fully-qualified) should match `oil drum` (🛢️)" do
  "🛢️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛢️"
end
it "`1F6E2` (unqualified) should match `oil drum` (🛢)" do
  "🛢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛢"
end
it "`26FD` (fully-qualified) should match `fuel pump` (⛽)" do
  "⛽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛽"
end
it "`1F6A8` (fully-qualified) should match `police car light` (🚨)" do
  "🚨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚨"
end
it "`1F6A5` (fully-qualified) should match `horizontal traffic light` (🚥)" do
  "🚥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚥"
end
it "`1F6A6` (fully-qualified) should match `vertical traffic light` (🚦)" do
  "🚦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚦"
end
it "`1F6D1` (fully-qualified) should match `stop sign` (🛑)" do
  "🛑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛑"
end
it "`1F6A7` (fully-qualified) should match `construction` (🚧)" do
  "🚧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚧"
end
it "`2693` (fully-qualified) should match `anchor` (⚓)" do
  "⚓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚓"
end
it "`26F5` (fully-qualified) should match `sailboat` (⛵)" do
  "⛵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛵"
end
it "`1F6F6` (fully-qualified) should match `canoe` (🛶)" do
  "🛶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛶"
end
it "`1F6A4` (fully-qualified) should match `speedboat` (🚤)" do
  "🚤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚤"
end
it "`1F6F3 FE0F` (fully-qualified) should match `passenger ship` (🛳️)" do
  "🛳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛳️"
end
it "`1F6F3` (unqualified) should match `passenger ship` (🛳)" do
  "🛳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛳"
end
it "`26F4 FE0F` (fully-qualified) should match `ferry` (⛴️)" do
  "⛴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛴️"
end
it "`26F4` (unqualified) should match `ferry` (⛴)" do
  "⛴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛴"
end
it "`1F6E5 FE0F` (fully-qualified) should match `motor boat` (🛥️)" do
  "🛥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛥️"
end
it "`1F6E5` (unqualified) should match `motor boat` (🛥)" do
  "🛥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛥"
end
it "`1F6A2` (fully-qualified) should match `ship` (🚢)" do
  "🚢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚢"
end
it "`2708 FE0F` (fully-qualified) should match `airplane` (✈️)" do
  "✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✈️"
end
it "`2708` (unqualified) should match `airplane` (✈)" do
  "✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✈"
end
it "`1F6E9 FE0F` (fully-qualified) should match `small airplane` (🛩️)" do
  "🛩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛩️"
end
it "`1F6E9` (unqualified) should match `small airplane` (🛩)" do
  "🛩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛩"
end
it "`1F6EB` (fully-qualified) should match `airplane departure` (🛫)" do
  "🛫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛫"
end
it "`1F6EC` (fully-qualified) should match `airplane arrival` (🛬)" do
  "🛬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛬"
end
it "`1FA82` (fully-qualified) should match `parachute` (🪂)" do
  "🪂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪂"
end
it "`1F4BA` (fully-qualified) should match `seat` (💺)" do
  "💺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💺"
end
it "`1F681` (fully-qualified) should match `helicopter` (🚁)" do
  "🚁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚁"
end
it "`1F69F` (fully-qualified) should match `suspension railway` (🚟)" do
  "🚟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚟"
end
it "`1F6A0` (fully-qualified) should match `mountain cableway` (🚠)" do
  "🚠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚠"
end
it "`1F6A1` (fully-qualified) should match `aerial tramway` (🚡)" do
  "🚡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚡"
end
it "`1F6F0 FE0F` (fully-qualified) should match `satellite` (🛰️)" do
  "🛰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛰️"
end
it "`1F6F0` (unqualified) should match `satellite` (🛰)" do
  "🛰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛰"
end
it "`1F680` (fully-qualified) should match `rocket` (🚀)" do
  "🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚀"
end
it "`1F6F8` (fully-qualified) should match `flying saucer` (🛸)" do
  "🛸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛸"
end
it "`1F6CE FE0F` (fully-qualified) should match `bellhop bell` (🛎️)" do
  "🛎️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛎️"
end
it "`1F6CE` (unqualified) should match `bellhop bell` (🛎)" do
  "🛎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛎"
end
it "`1F9F3` (fully-qualified) should match `luggage` (🧳)" do
  "🧳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧳"
end
it "`231B` (fully-qualified) should match `hourglass done` (⌛)" do
  "⌛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌛"
end
it "`23F3` (fully-qualified) should match `hourglass not done` (⏳)" do
  "⏳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏳"
end
it "`231A` (fully-qualified) should match `watch` (⌚)" do
  "⌚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌚"
end
it "`23F0` (fully-qualified) should match `alarm clock` (⏰)" do
  "⏰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏰"
end
it "`23F1 FE0F` (fully-qualified) should match `stopwatch` (⏱️)" do
  "⏱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏱️"
end
it "`23F1` (unqualified) should match `stopwatch` (⏱)" do
  "⏱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏱"
end
it "`23F2 FE0F` (fully-qualified) should match `timer clock` (⏲️)" do
  "⏲️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏲️"
end
it "`23F2` (unqualified) should match `timer clock` (⏲)" do
  "⏲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏲"
end
it "`1F570 FE0F` (fully-qualified) should match `mantelpiece clock` (🕰️)" do
  "🕰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕰️"
end
it "`1F570` (unqualified) should match `mantelpiece clock` (🕰)" do
  "🕰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕰"
end
it "`1F55B` (fully-qualified) should match `twelve o’clock` (🕛)" do
  "🕛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕛"
end
it "`1F567` (fully-qualified) should match `twelve-thirty` (🕧)" do
  "🕧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕧"
end
it "`1F550` (fully-qualified) should match `one o’clock` (🕐)" do
  "🕐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕐"
end
it "`1F55C` (fully-qualified) should match `one-thirty` (🕜)" do
  "🕜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕜"
end
it "`1F551` (fully-qualified) should match `two o’clock` (🕑)" do
  "🕑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕑"
end
it "`1F55D` (fully-qualified) should match `two-thirty` (🕝)" do
  "🕝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕝"
end
it "`1F552` (fully-qualified) should match `three o’clock` (🕒)" do
  "🕒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕒"
end
it "`1F55E` (fully-qualified) should match `three-thirty` (🕞)" do
  "🕞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕞"
end
it "`1F553` (fully-qualified) should match `four o’clock` (🕓)" do
  "🕓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕓"
end
it "`1F55F` (fully-qualified) should match `four-thirty` (🕟)" do
  "🕟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕟"
end
it "`1F554` (fully-qualified) should match `five o’clock` (🕔)" do
  "🕔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕔"
end
it "`1F560` (fully-qualified) should match `five-thirty` (🕠)" do
  "🕠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕠"
end
it "`1F555` (fully-qualified) should match `six o’clock` (🕕)" do
  "🕕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕕"
end
it "`1F561` (fully-qualified) should match `six-thirty` (🕡)" do
  "🕡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕡"
end
it "`1F556` (fully-qualified) should match `seven o’clock` (🕖)" do
  "🕖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕖"
end
it "`1F562` (fully-qualified) should match `seven-thirty` (🕢)" do
  "🕢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕢"
end
it "`1F557` (fully-qualified) should match `eight o’clock` (🕗)" do
  "🕗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕗"
end
it "`1F563` (fully-qualified) should match `eight-thirty` (🕣)" do
  "🕣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕣"
end
it "`1F558` (fully-qualified) should match `nine o’clock` (🕘)" do
  "🕘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕘"
end
it "`1F564` (fully-qualified) should match `nine-thirty` (🕤)" do
  "🕤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕤"
end
it "`1F559` (fully-qualified) should match `ten o’clock` (🕙)" do
  "🕙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕙"
end
it "`1F565` (fully-qualified) should match `ten-thirty` (🕥)" do
  "🕥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕥"
end
it "`1F55A` (fully-qualified) should match `eleven o’clock` (🕚)" do
  "🕚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕚"
end
it "`1F566` (fully-qualified) should match `eleven-thirty` (🕦)" do
  "🕦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕦"
end
it "`1F311` (fully-qualified) should match `new moon` (🌑)" do
  "🌑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌑"
end
it "`1F312` (fully-qualified) should match `waxing crescent moon` (🌒)" do
  "🌒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌒"
end
it "`1F313` (fully-qualified) should match `first quarter moon` (🌓)" do
  "🌓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌓"
end
it "`1F314` (fully-qualified) should match `waxing gibbous moon` (🌔)" do
  "🌔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌔"
end
it "`1F315` (fully-qualified) should match `full moon` (🌕)" do
  "🌕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌕"
end
it "`1F316` (fully-qualified) should match `waning gibbous moon` (🌖)" do
  "🌖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌖"
end
it "`1F317` (fully-qualified) should match `last quarter moon` (🌗)" do
  "🌗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌗"
end
it "`1F318` (fully-qualified) should match `waning crescent moon` (🌘)" do
  "🌘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌘"
end
it "`1F319` (fully-qualified) should match `crescent moon` (🌙)" do
  "🌙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌙"
end
it "`1F31A` (fully-qualified) should match `new moon face` (🌚)" do
  "🌚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌚"
end
it "`1F31B` (fully-qualified) should match `first quarter moon face` (🌛)" do
  "🌛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌛"
end
it "`1F31C` (fully-qualified) should match `last quarter moon face` (🌜)" do
  "🌜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌜"
end
it "`1F321 FE0F` (fully-qualified) should match `thermometer` (🌡️)" do
  "🌡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌡️"
end
it "`1F321` (unqualified) should match `thermometer` (🌡)" do
  "🌡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌡"
end
it "`2600 FE0F` (fully-qualified) should match `sun` (☀️)" do
  "☀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☀️"
end
it "`2600` (unqualified) should match `sun` (☀)" do
  "☀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☀"
end
it "`1F31D` (fully-qualified) should match `full moon face` (🌝)" do
  "🌝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌝"
end
it "`1F31E` (fully-qualified) should match `sun with face` (🌞)" do
  "🌞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌞"
end
it "`1FA90` (fully-qualified) should match `ringed planet` (🪐)" do
  "🪐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪐"
end
it "`2B50` (fully-qualified) should match `star` (⭐)" do
  "⭐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⭐"
end
it "`1F31F` (fully-qualified) should match `glowing star` (🌟)" do
  "🌟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌟"
end
it "`1F320` (fully-qualified) should match `shooting star` (🌠)" do
  "🌠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌠"
end
it "`1F30C` (fully-qualified) should match `milky way` (🌌)" do
  "🌌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌌"
end
it "`2601 FE0F` (fully-qualified) should match `cloud` (☁️)" do
  "☁️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☁️"
end
it "`2601` (unqualified) should match `cloud` (☁)" do
  "☁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☁"
end
it "`26C5` (fully-qualified) should match `sun behind cloud` (⛅)" do
  "⛅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛅"
end
it "`26C8 FE0F` (fully-qualified) should match `cloud with lightning and rain` (⛈️)" do
  "⛈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛈️"
end
it "`26C8` (unqualified) should match `cloud with lightning and rain` (⛈)" do
  "⛈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛈"
end
it "`1F324 FE0F` (fully-qualified) should match `sun behind small cloud` (🌤️)" do
  "🌤️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌤️"
end
it "`1F324` (unqualified) should match `sun behind small cloud` (🌤)" do
  "🌤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌤"
end
it "`1F325 FE0F` (fully-qualified) should match `sun behind large cloud` (🌥️)" do
  "🌥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌥️"
end
it "`1F325` (unqualified) should match `sun behind large cloud` (🌥)" do
  "🌥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌥"
end
it "`1F326 FE0F` (fully-qualified) should match `sun behind rain cloud` (🌦️)" do
  "🌦️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌦️"
end
it "`1F326` (unqualified) should match `sun behind rain cloud` (🌦)" do
  "🌦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌦"
end
it "`1F327 FE0F` (fully-qualified) should match `cloud with rain` (🌧️)" do
  "🌧️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌧️"
end
it "`1F327` (unqualified) should match `cloud with rain` (🌧)" do
  "🌧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌧"
end
it "`1F328 FE0F` (fully-qualified) should match `cloud with snow` (🌨️)" do
  "🌨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌨️"
end
it "`1F328` (unqualified) should match `cloud with snow` (🌨)" do
  "🌨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌨"
end
it "`1F329 FE0F` (fully-qualified) should match `cloud with lightning` (🌩️)" do
  "🌩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌩️"
end
it "`1F329` (unqualified) should match `cloud with lightning` (🌩)" do
  "🌩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌩"
end
it "`1F32A FE0F` (fully-qualified) should match `tornado` (🌪️)" do
  "🌪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌪️"
end
it "`1F32A` (unqualified) should match `tornado` (🌪)" do
  "🌪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌪"
end
it "`1F32B FE0F` (fully-qualified) should match `fog` (🌫️)" do
  "🌫️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌫️"
end
it "`1F32B` (unqualified) should match `fog` (🌫)" do
  "🌫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌫"
end
it "`1F32C FE0F` (fully-qualified) should match `wind face` (🌬️)" do
  "🌬️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌬️"
end
it "`1F32C` (unqualified) should match `wind face` (🌬)" do
  "🌬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌬"
end
it "`1F300` (fully-qualified) should match `cyclone` (🌀)" do
  "🌀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌀"
end
it "`1F308` (fully-qualified) should match `rainbow` (🌈)" do
  "🌈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌈"
end
it "`1F302` (fully-qualified) should match `closed umbrella` (🌂)" do
  "🌂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌂"
end
it "`2602 FE0F` (fully-qualified) should match `umbrella` (☂️)" do
  "☂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☂️"
end
it "`2602` (unqualified) should match `umbrella` (☂)" do
  "☂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☂"
end
it "`2614` (fully-qualified) should match `umbrella with rain drops` (☔)" do
  "☔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☔"
end
it "`26F1 FE0F` (fully-qualified) should match `umbrella on ground` (⛱️)" do
  "⛱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛱️"
end
it "`26F1` (unqualified) should match `umbrella on ground` (⛱)" do
  "⛱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛱"
end
it "`26A1` (fully-qualified) should match `high voltage` (⚡)" do
  "⚡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚡"
end
it "`2744 FE0F` (fully-qualified) should match `snowflake` (❄️)" do
  "❄️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❄️"
end
it "`2744` (unqualified) should match `snowflake` (❄)" do
  "❄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❄"
end
it "`2603 FE0F` (fully-qualified) should match `snowman` (☃️)" do
  "☃️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☃️"
end
it "`2603` (unqualified) should match `snowman` (☃)" do
  "☃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☃"
end
it "`26C4` (fully-qualified) should match `snowman without snow` (⛄)" do
  "⛄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛄"
end
it "`2604 FE0F` (fully-qualified) should match `comet` (☄️)" do
  "☄️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☄️"
end
it "`2604` (unqualified) should match `comet` (☄)" do
  "☄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☄"
end
it "`1F525` (fully-qualified) should match `fire` (🔥)" do
  "🔥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔥"
end
it "`1F4A7` (fully-qualified) should match `droplet` (💧)" do
  "💧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💧"
end
it "`1F30A` (fully-qualified) should match `water wave` (🌊)" do
  "🌊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌊"
end
it "`1F383` (fully-qualified) should match `jack-o-lantern` (🎃)" do
  "🎃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎃"
end
it "`1F384` (fully-qualified) should match `Christmas tree` (🎄)" do
  "🎄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎄"
end
it "`1F386` (fully-qualified) should match `fireworks` (🎆)" do
  "🎆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎆"
end
it "`1F387` (fully-qualified) should match `sparkler` (🎇)" do
  "🎇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎇"
end
it "`1F9E8` (fully-qualified) should match `firecracker` (🧨)" do
  "🧨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧨"
end
it "`2728` (fully-qualified) should match `sparkles` (✨)" do
  "✨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✨"
end
it "`1F388` (fully-qualified) should match `balloon` (🎈)" do
  "🎈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎈"
end
it "`1F389` (fully-qualified) should match `party popper` (🎉)" do
  "🎉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎉"
end
it "`1F38A` (fully-qualified) should match `confetti ball` (🎊)" do
  "🎊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎊"
end
it "`1F38B` (fully-qualified) should match `tanabata tree` (🎋)" do
  "🎋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎋"
end
it "`1F38D` (fully-qualified) should match `pine decoration` (🎍)" do
  "🎍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎍"
end
it "`1F38E` (fully-qualified) should match `Japanese dolls` (🎎)" do
  "🎎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎎"
end
it "`1F38F` (fully-qualified) should match `carp streamer` (🎏)" do
  "🎏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎏"
end
it "`1F390` (fully-qualified) should match `wind chime` (🎐)" do
  "🎐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎐"
end
it "`1F391` (fully-qualified) should match `moon viewing ceremony` (🎑)" do
  "🎑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎑"
end
it "`1F9E7` (fully-qualified) should match `red envelope` (🧧)" do
  "🧧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧧"
end
it "`1F380` (fully-qualified) should match `ribbon` (🎀)" do
  "🎀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎀"
end
it "`1F381` (fully-qualified) should match `wrapped gift` (🎁)" do
  "🎁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎁"
end
it "`1F397 FE0F` (fully-qualified) should match `reminder ribbon` (🎗️)" do
  "🎗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎗️"
end
it "`1F397` (unqualified) should match `reminder ribbon` (🎗)" do
  "🎗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎗"
end
it "`1F39F FE0F` (fully-qualified) should match `admission tickets` (🎟️)" do
  "🎟️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎟️"
end
it "`1F39F` (unqualified) should match `admission tickets` (🎟)" do
  "🎟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎟"
end
it "`1F3AB` (fully-qualified) should match `ticket` (🎫)" do
  "🎫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎫"
end
it "`1F396 FE0F` (fully-qualified) should match `military medal` (🎖️)" do
  "🎖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎖️"
end
it "`1F396` (unqualified) should match `military medal` (🎖)" do
  "🎖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎖"
end
it "`1F3C6` (fully-qualified) should match `trophy` (🏆)" do
  "🏆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏆"
end
it "`1F3C5` (fully-qualified) should match `sports medal` (🏅)" do
  "🏅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏅"
end
it "`1F947` (fully-qualified) should match `1st place medal` (🥇)" do
  "🥇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥇"
end
it "`1F948` (fully-qualified) should match `2nd place medal` (🥈)" do
  "🥈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥈"
end
it "`1F949` (fully-qualified) should match `3rd place medal` (🥉)" do
  "🥉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥉"
end
it "`26BD` (fully-qualified) should match `soccer ball` (⚽)" do
  "⚽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚽"
end
it "`26BE` (fully-qualified) should match `baseball` (⚾)" do
  "⚾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚾"
end
it "`1F94E` (fully-qualified) should match `softball` (🥎)" do
  "🥎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥎"
end
it "`1F3C0` (fully-qualified) should match `basketball` (🏀)" do
  "🏀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏀"
end
it "`1F3D0` (fully-qualified) should match `volleyball` (🏐)" do
  "🏐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏐"
end
it "`1F3C8` (fully-qualified) should match `american football` (🏈)" do
  "🏈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏈"
end
it "`1F3C9` (fully-qualified) should match `rugby football` (🏉)" do
  "🏉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏉"
end
it "`1F3BE` (fully-qualified) should match `tennis` (🎾)" do
  "🎾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎾"
end
it "`1F94F` (fully-qualified) should match `flying disc` (🥏)" do
  "🥏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥏"
end
it "`1F3B3` (fully-qualified) should match `bowling` (🎳)" do
  "🎳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎳"
end
it "`1F3CF` (fully-qualified) should match `cricket game` (🏏)" do
  "🏏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏏"
end
it "`1F3D1` (fully-qualified) should match `field hockey` (🏑)" do
  "🏑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏑"
end
it "`1F3D2` (fully-qualified) should match `ice hockey` (🏒)" do
  "🏒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏒"
end
it "`1F94D` (fully-qualified) should match `lacrosse` (🥍)" do
  "🥍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥍"
end
it "`1F3D3` (fully-qualified) should match `ping pong` (🏓)" do
  "🏓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏓"
end
it "`1F3F8` (fully-qualified) should match `badminton` (🏸)" do
  "🏸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏸"
end
it "`1F94A` (fully-qualified) should match `boxing glove` (🥊)" do
  "🥊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥊"
end
it "`1F94B` (fully-qualified) should match `martial arts uniform` (🥋)" do
  "🥋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥋"
end
it "`1F945` (fully-qualified) should match `goal net` (🥅)" do
  "🥅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥅"
end
it "`26F3` (fully-qualified) should match `flag in hole` (⛳)" do
  "⛳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛳"
end
it "`26F8 FE0F` (fully-qualified) should match `ice skate` (⛸️)" do
  "⛸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛸️"
end
it "`26F8` (unqualified) should match `ice skate` (⛸)" do
  "⛸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛸"
end
it "`1F3A3` (fully-qualified) should match `fishing pole` (🎣)" do
  "🎣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎣"
end
it "`1F93F` (fully-qualified) should match `diving mask` (🤿)" do
  "🤿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤿"
end
it "`1F3BD` (fully-qualified) should match `running shirt` (🎽)" do
  "🎽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎽"
end
it "`1F3BF` (fully-qualified) should match `skis` (🎿)" do
  "🎿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎿"
end
it "`1F6F7` (fully-qualified) should match `sled` (🛷)" do
  "🛷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛷"
end
it "`1F94C` (fully-qualified) should match `curling stone` (🥌)" do
  "🥌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥌"
end
it "`1F3AF` (fully-qualified) should match `direct hit` (🎯)" do
  "🎯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎯"
end
it "`1FA80` (fully-qualified) should match `yo-yo` (🪀)" do
  "🪀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪀"
end
it "`1FA81` (fully-qualified) should match `kite` (🪁)" do
  "🪁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪁"
end
it "`1F3B1` (fully-qualified) should match `pool 8 ball` (🎱)" do
  "🎱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎱"
end
it "`1F52E` (fully-qualified) should match `crystal ball` (🔮)" do
  "🔮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔮"
end
it "`1F9FF` (fully-qualified) should match `nazar amulet` (🧿)" do
  "🧿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧿"
end
it "`1F3AE` (fully-qualified) should match `video game` (🎮)" do
  "🎮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎮"
end
it "`1F579 FE0F` (fully-qualified) should match `joystick` (🕹️)" do
  "🕹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕹️"
end
it "`1F579` (unqualified) should match `joystick` (🕹)" do
  "🕹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕹"
end
it "`1F3B0` (fully-qualified) should match `slot machine` (🎰)" do
  "🎰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎰"
end
it "`1F3B2` (fully-qualified) should match `game die` (🎲)" do
  "🎲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎲"
end
it "`1F9E9` (fully-qualified) should match `puzzle piece` (🧩)" do
  "🧩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧩"
end
it "`1F9F8` (fully-qualified) should match `teddy bear` (🧸)" do
  "🧸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧸"
end
it "`2660 FE0F` (fully-qualified) should match `spade suit` (♠️)" do
  "♠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♠️"
end
it "`2660` (unqualified) should match `spade suit` (♠)" do
  "♠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♠"
end
it "`2665 FE0F` (fully-qualified) should match `heart suit` (♥️)" do
  "♥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♥️"
end
it "`2665` (unqualified) should match `heart suit` (♥)" do
  "♥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♥"
end
it "`2666 FE0F` (fully-qualified) should match `diamond suit` (♦️)" do
  "♦️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♦️"
end
it "`2666` (unqualified) should match `diamond suit` (♦)" do
  "♦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♦"
end
it "`2663 FE0F` (fully-qualified) should match `club suit` (♣️)" do
  "♣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♣️"
end
it "`2663` (unqualified) should match `club suit` (♣)" do
  "♣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♣"
end
it "`265F FE0F` (fully-qualified) should match `chess pawn` (♟️)" do
  "♟️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♟️"
end
it "`265F` (unqualified) should match `chess pawn` (♟)" do
  "♟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♟"
end
it "`1F0CF` (fully-qualified) should match `joker` (🃏)" do
  "🃏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🃏"
end
it "`1F004` (fully-qualified) should match `mahjong red dragon` (🀄)" do
  "🀄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🀄"
end
it "`1F3B4` (fully-qualified) should match `flower playing cards` (🎴)" do
  "🎴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎴"
end
it "`1F3AD` (fully-qualified) should match `performing arts` (🎭)" do
  "🎭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎭"
end
it "`1F5BC FE0F` (fully-qualified) should match `framed picture` (🖼️)" do
  "🖼️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖼️"
end
it "`1F5BC` (unqualified) should match `framed picture` (🖼)" do
  "🖼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖼"
end
it "`1F3A8` (fully-qualified) should match `artist palette` (🎨)" do
  "🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎨"
end
it "`1F9F5` (fully-qualified) should match `thread` (🧵)" do
  "🧵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧵"
end
it "`1F9F6` (fully-qualified) should match `yarn` (🧶)" do
  "🧶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧶"
end
it "`1F453` (fully-qualified) should match `glasses` (👓)" do
  "👓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👓"
end
it "`1F576 FE0F` (fully-qualified) should match `sunglasses` (🕶️)" do
  "🕶️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕶️"
end
it "`1F576` (unqualified) should match `sunglasses` (🕶)" do
  "🕶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕶"
end
it "`1F97D` (fully-qualified) should match `goggles` (🥽)" do
  "🥽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥽"
end
it "`1F97C` (fully-qualified) should match `lab coat` (🥼)" do
  "🥼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥼"
end
it "`1F9BA` (fully-qualified) should match `safety vest` (🦺)" do
  "🦺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦺"
end
it "`1F454` (fully-qualified) should match `necktie` (👔)" do
  "👔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👔"
end
it "`1F455` (fully-qualified) should match `t-shirt` (👕)" do
  "👕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👕"
end
it "`1F456` (fully-qualified) should match `jeans` (👖)" do
  "👖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👖"
end
it "`1F9E3` (fully-qualified) should match `scarf` (🧣)" do
  "🧣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧣"
end
it "`1F9E4` (fully-qualified) should match `gloves` (🧤)" do
  "🧤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧤"
end
it "`1F9E5` (fully-qualified) should match `coat` (🧥)" do
  "🧥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧥"
end
it "`1F9E6` (fully-qualified) should match `socks` (🧦)" do
  "🧦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧦"
end
it "`1F457` (fully-qualified) should match `dress` (👗)" do
  "👗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👗"
end
it "`1F458` (fully-qualified) should match `kimono` (👘)" do
  "👘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👘"
end
it "`1F97B` (fully-qualified) should match `sari` (🥻)" do
  "🥻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥻"
end
it "`1FA71` (fully-qualified) should match `one-piece swimsuit` (🩱)" do
  "🩱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩱"
end
it "`1FA72` (fully-qualified) should match `swim brief` (🩲)" do
  "🩲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩲"
end
it "`1FA73` (fully-qualified) should match `shorts` (🩳)" do
  "🩳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩳"
end
it "`1F459` (fully-qualified) should match `bikini` (👙)" do
  "👙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👙"
end
it "`1F45A` (fully-qualified) should match `woman’s clothes` (👚)" do
  "👚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👚"
end
it "`1F45B` (fully-qualified) should match `purse` (👛)" do
  "👛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👛"
end
it "`1F45C` (fully-qualified) should match `handbag` (👜)" do
  "👜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👜"
end
it "`1F45D` (fully-qualified) should match `clutch bag` (👝)" do
  "👝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👝"
end
it "`1F6CD FE0F` (fully-qualified) should match `shopping bags` (🛍️)" do
  "🛍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛍️"
end
it "`1F6CD` (unqualified) should match `shopping bags` (🛍)" do
  "🛍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛍"
end
it "`1F392` (fully-qualified) should match `backpack` (🎒)" do
  "🎒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎒"
end
it "`1F45E` (fully-qualified) should match `man’s shoe` (👞)" do
  "👞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👞"
end
it "`1F45F` (fully-qualified) should match `running shoe` (👟)" do
  "👟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👟"
end
it "`1F97E` (fully-qualified) should match `hiking boot` (🥾)" do
  "🥾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥾"
end
it "`1F97F` (fully-qualified) should match `flat shoe` (🥿)" do
  "🥿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥿"
end
it "`1F460` (fully-qualified) should match `high-heeled shoe` (👠)" do
  "👠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👠"
end
it "`1F461` (fully-qualified) should match `woman’s sandal` (👡)" do
  "👡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👡"
end
it "`1FA70` (fully-qualified) should match `ballet shoes` (🩰)" do
  "🩰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩰"
end
it "`1F462` (fully-qualified) should match `woman’s boot` (👢)" do
  "👢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👢"
end
it "`1F451` (fully-qualified) should match `crown` (👑)" do
  "👑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👑"
end
it "`1F452` (fully-qualified) should match `woman’s hat` (👒)" do
  "👒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👒"
end
it "`1F3A9` (fully-qualified) should match `top hat` (🎩)" do
  "🎩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎩"
end
it "`1F393` (fully-qualified) should match `graduation cap` (🎓)" do
  "🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎓"
end
it "`1F9E2` (fully-qualified) should match `billed cap` (🧢)" do
  "🧢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧢"
end
it "`26D1 FE0F` (fully-qualified) should match `rescue worker’s helmet` (⛑️)" do
  "⛑️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛑️"
end
it "`26D1` (unqualified) should match `rescue worker’s helmet` (⛑)" do
  "⛑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛑"
end
it "`1F4FF` (fully-qualified) should match `prayer beads` (📿)" do
  "📿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📿"
end
it "`1F484` (fully-qualified) should match `lipstick` (💄)" do
  "💄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💄"
end
it "`1F48D` (fully-qualified) should match `ring` (💍)" do
  "💍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💍"
end
it "`1F48E` (fully-qualified) should match `gem stone` (💎)" do
  "💎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💎"
end
it "`1F507` (fully-qualified) should match `muted speaker` (🔇)" do
  "🔇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔇"
end
it "`1F508` (fully-qualified) should match `speaker low volume` (🔈)" do
  "🔈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔈"
end
it "`1F509` (fully-qualified) should match `speaker medium volume` (🔉)" do
  "🔉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔉"
end
it "`1F50A` (fully-qualified) should match `speaker high volume` (🔊)" do
  "🔊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔊"
end
it "`1F4E2` (fully-qualified) should match `loudspeaker` (📢)" do
  "📢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📢"
end
it "`1F4E3` (fully-qualified) should match `megaphone` (📣)" do
  "📣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📣"
end
it "`1F4EF` (fully-qualified) should match `postal horn` (📯)" do
  "📯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📯"
end
it "`1F514` (fully-qualified) should match `bell` (🔔)" do
  "🔔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔔"
end
it "`1F515` (fully-qualified) should match `bell with slash` (🔕)" do
  "🔕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔕"
end
it "`1F3BC` (fully-qualified) should match `musical score` (🎼)" do
  "🎼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎼"
end
it "`1F3B5` (fully-qualified) should match `musical note` (🎵)" do
  "🎵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎵"
end
it "`1F3B6` (fully-qualified) should match `musical notes` (🎶)" do
  "🎶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎶"
end
it "`1F399 FE0F` (fully-qualified) should match `studio microphone` (🎙️)" do
  "🎙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎙️"
end
it "`1F399` (unqualified) should match `studio microphone` (🎙)" do
  "🎙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎙"
end
it "`1F39A FE0F` (fully-qualified) should match `level slider` (🎚️)" do
  "🎚️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎚️"
end
it "`1F39A` (unqualified) should match `level slider` (🎚)" do
  "🎚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎚"
end
it "`1F39B FE0F` (fully-qualified) should match `control knobs` (🎛️)" do
  "🎛️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎛️"
end
it "`1F39B` (unqualified) should match `control knobs` (🎛)" do
  "🎛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎛"
end
it "`1F3A4` (fully-qualified) should match `microphone` (🎤)" do
  "🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎤"
end
it "`1F3A7` (fully-qualified) should match `headphone` (🎧)" do
  "🎧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎧"
end
it "`1F4FB` (fully-qualified) should match `radio` (📻)" do
  "📻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📻"
end
it "`1F3B7` (fully-qualified) should match `saxophone` (🎷)" do
  "🎷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎷"
end
it "`1F3B8` (fully-qualified) should match `guitar` (🎸)" do
  "🎸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎸"
end
it "`1F3B9` (fully-qualified) should match `musical keyboard` (🎹)" do
  "🎹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎹"
end
it "`1F3BA` (fully-qualified) should match `trumpet` (🎺)" do
  "🎺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎺"
end
it "`1F3BB` (fully-qualified) should match `violin` (🎻)" do
  "🎻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎻"
end
it "`1FA95` (fully-qualified) should match `banjo` (🪕)" do
  "🪕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪕"
end
it "`1F941` (fully-qualified) should match `drum` (🥁)" do
  "🥁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥁"
end
it "`1F4F1` (fully-qualified) should match `mobile phone` (📱)" do
  "📱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📱"
end
it "`1F4F2` (fully-qualified) should match `mobile phone with arrow` (📲)" do
  "📲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📲"
end
it "`260E FE0F` (fully-qualified) should match `telephone` (☎️)" do
  "☎️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☎️"
end
it "`260E` (unqualified) should match `telephone` (☎)" do
  "☎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☎"
end
it "`1F4DE` (fully-qualified) should match `telephone receiver` (📞)" do
  "📞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📞"
end
it "`1F4DF` (fully-qualified) should match `pager` (📟)" do
  "📟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📟"
end
it "`1F4E0` (fully-qualified) should match `fax machine` (📠)" do
  "📠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📠"
end
it "`1F50B` (fully-qualified) should match `battery` (🔋)" do
  "🔋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔋"
end
it "`1F50C` (fully-qualified) should match `electric plug` (🔌)" do
  "🔌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔌"
end
it "`1F4BB` (fully-qualified) should match `laptop computer` (💻)" do
  "💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💻"
end
it "`1F5A5 FE0F` (fully-qualified) should match `desktop computer` (🖥️)" do
  "🖥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖥️"
end
it "`1F5A5` (unqualified) should match `desktop computer` (🖥)" do
  "🖥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖥"
end
it "`1F5A8 FE0F` (fully-qualified) should match `printer` (🖨️)" do
  "🖨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖨️"
end
it "`1F5A8` (unqualified) should match `printer` (🖨)" do
  "🖨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖨"
end
it "`2328 FE0F` (fully-qualified) should match `keyboard` (⌨️)" do
  "⌨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌨️"
end
it "`2328` (unqualified) should match `keyboard` (⌨)" do
  "⌨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌨"
end
it "`1F5B1 FE0F` (fully-qualified) should match `computer mouse` (🖱️)" do
  "🖱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖱️"
end
it "`1F5B1` (unqualified) should match `computer mouse` (🖱)" do
  "🖱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖱"
end
it "`1F5B2 FE0F` (fully-qualified) should match `trackball` (🖲️)" do
  "🖲️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖲️"
end
it "`1F5B2` (unqualified) should match `trackball` (🖲)" do
  "🖲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖲"
end
it "`1F4BD` (fully-qualified) should match `computer disk` (💽)" do
  "💽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💽"
end
it "`1F4BE` (fully-qualified) should match `floppy disk` (💾)" do
  "💾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💾"
end
it "`1F4BF` (fully-qualified) should match `optical disk` (💿)" do
  "💿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💿"
end
it "`1F4C0` (fully-qualified) should match `dvd` (📀)" do
  "📀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📀"
end
it "`1F9EE` (fully-qualified) should match `abacus` (🧮)" do
  "🧮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧮"
end
it "`1F3A5` (fully-qualified) should match `movie camera` (🎥)" do
  "🎥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎥"
end
it "`1F39E FE0F` (fully-qualified) should match `film frames` (🎞️)" do
  "🎞️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎞️"
end
it "`1F39E` (unqualified) should match `film frames` (🎞)" do
  "🎞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎞"
end
it "`1F4FD FE0F` (fully-qualified) should match `film projector` (📽️)" do
  "📽️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📽️"
end
it "`1F4FD` (unqualified) should match `film projector` (📽)" do
  "📽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📽"
end
it "`1F3AC` (fully-qualified) should match `clapper board` (🎬)" do
  "🎬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎬"
end
it "`1F4FA` (fully-qualified) should match `television` (📺)" do
  "📺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📺"
end
it "`1F4F7` (fully-qualified) should match `camera` (📷)" do
  "📷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📷"
end
it "`1F4F8` (fully-qualified) should match `camera with flash` (📸)" do
  "📸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📸"
end
it "`1F4F9` (fully-qualified) should match `video camera` (📹)" do
  "📹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📹"
end
it "`1F4FC` (fully-qualified) should match `videocassette` (📼)" do
  "📼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📼"
end
it "`1F50D` (fully-qualified) should match `magnifying glass tilted left` (🔍)" do
  "🔍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔍"
end
it "`1F50E` (fully-qualified) should match `magnifying glass tilted right` (🔎)" do
  "🔎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔎"
end
it "`1F56F FE0F` (fully-qualified) should match `candle` (🕯️)" do
  "🕯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕯️"
end
it "`1F56F` (unqualified) should match `candle` (🕯)" do
  "🕯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕯"
end
it "`1F4A1` (fully-qualified) should match `light bulb` (💡)" do
  "💡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💡"
end
it "`1F526` (fully-qualified) should match `flashlight` (🔦)" do
  "🔦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔦"
end
it "`1F3EE` (fully-qualified) should match `red paper lantern` (🏮)" do
  "🏮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏮"
end
it "`1FA94` (fully-qualified) should match `diya lamp` (🪔)" do
  "🪔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪔"
end
it "`1F4D4` (fully-qualified) should match `notebook with decorative cover` (📔)" do
  "📔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📔"
end
it "`1F4D5` (fully-qualified) should match `closed book` (📕)" do
  "📕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📕"
end
it "`1F4D6` (fully-qualified) should match `open book` (📖)" do
  "📖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📖"
end
it "`1F4D7` (fully-qualified) should match `green book` (📗)" do
  "📗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📗"
end
it "`1F4D8` (fully-qualified) should match `blue book` (📘)" do
  "📘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📘"
end
it "`1F4D9` (fully-qualified) should match `orange book` (📙)" do
  "📙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📙"
end
it "`1F4DA` (fully-qualified) should match `books` (📚)" do
  "📚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📚"
end
it "`1F4D3` (fully-qualified) should match `notebook` (📓)" do
  "📓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📓"
end
it "`1F4D2` (fully-qualified) should match `ledger` (📒)" do
  "📒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📒"
end
it "`1F4C3` (fully-qualified) should match `page with curl` (📃)" do
  "📃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📃"
end
it "`1F4DC` (fully-qualified) should match `scroll` (📜)" do
  "📜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📜"
end
it "`1F4C4` (fully-qualified) should match `page facing up` (📄)" do
  "📄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📄"
end
it "`1F4F0` (fully-qualified) should match `newspaper` (📰)" do
  "📰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📰"
end
it "`1F5DE FE0F` (fully-qualified) should match `rolled-up newspaper` (🗞️)" do
  "🗞️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗞️"
end
it "`1F5DE` (unqualified) should match `rolled-up newspaper` (🗞)" do
  "🗞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗞"
end
it "`1F4D1` (fully-qualified) should match `bookmark tabs` (📑)" do
  "📑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📑"
end
it "`1F516` (fully-qualified) should match `bookmark` (🔖)" do
  "🔖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔖"
end
it "`1F3F7 FE0F` (fully-qualified) should match `label` (🏷️)" do
  "🏷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏷️"
end
it "`1F3F7` (unqualified) should match `label` (🏷)" do
  "🏷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏷"
end
it "`1F4B0` (fully-qualified) should match `money bag` (💰)" do
  "💰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💰"
end
it "`1F4B4` (fully-qualified) should match `yen banknote` (💴)" do
  "💴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💴"
end
it "`1F4B5` (fully-qualified) should match `dollar banknote` (💵)" do
  "💵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💵"
end
it "`1F4B6` (fully-qualified) should match `euro banknote` (💶)" do
  "💶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💶"
end
it "`1F4B7` (fully-qualified) should match `pound banknote` (💷)" do
  "💷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💷"
end
it "`1F4B8` (fully-qualified) should match `money with wings` (💸)" do
  "💸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💸"
end
it "`1F4B3` (fully-qualified) should match `credit card` (💳)" do
  "💳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💳"
end
it "`1F9FE` (fully-qualified) should match `receipt` (🧾)" do
  "🧾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧾"
end
it "`1F4B9` (fully-qualified) should match `chart increasing with yen` (💹)" do
  "💹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💹"
end
it "`1F4B1` (fully-qualified) should match `currency exchange` (💱)" do
  "💱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💱"
end
it "`1F4B2` (fully-qualified) should match `heavy dollar sign` (💲)" do
  "💲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💲"
end
it "`2709 FE0F` (fully-qualified) should match `envelope` (✉️)" do
  "✉️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✉️"
end
it "`2709` (unqualified) should match `envelope` (✉)" do
  "✉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✉"
end
it "`1F4E7` (fully-qualified) should match `e-mail` (📧)" do
  "📧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📧"
end
it "`1F4E8` (fully-qualified) should match `incoming envelope` (📨)" do
  "📨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📨"
end
it "`1F4E9` (fully-qualified) should match `envelope with arrow` (📩)" do
  "📩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📩"
end
it "`1F4E4` (fully-qualified) should match `outbox tray` (📤)" do
  "📤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📤"
end
it "`1F4E5` (fully-qualified) should match `inbox tray` (📥)" do
  "📥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📥"
end
it "`1F4E6` (fully-qualified) should match `package` (📦)" do
  "📦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📦"
end
it "`1F4EB` (fully-qualified) should match `closed mailbox with raised flag` (📫)" do
  "📫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📫"
end
it "`1F4EA` (fully-qualified) should match `closed mailbox with lowered flag` (📪)" do
  "📪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📪"
end
it "`1F4EC` (fully-qualified) should match `open mailbox with raised flag` (📬)" do
  "📬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📬"
end
it "`1F4ED` (fully-qualified) should match `open mailbox with lowered flag` (📭)" do
  "📭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📭"
end
it "`1F4EE` (fully-qualified) should match `postbox` (📮)" do
  "📮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📮"
end
it "`1F5F3 FE0F` (fully-qualified) should match `ballot box with ballot` (🗳️)" do
  "🗳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗳️"
end
it "`1F5F3` (unqualified) should match `ballot box with ballot` (🗳)" do
  "🗳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗳"
end
it "`270F FE0F` (fully-qualified) should match `pencil` (✏️)" do
  "✏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✏️"
end
it "`270F` (unqualified) should match `pencil` (✏)" do
  "✏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✏"
end
it "`2712 FE0F` (fully-qualified) should match `black nib` (✒️)" do
  "✒️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✒️"
end
it "`2712` (unqualified) should match `black nib` (✒)" do
  "✒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✒"
end
it "`1F58B FE0F` (fully-qualified) should match `fountain pen` (🖋️)" do
  "🖋️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖋️"
end
it "`1F58B` (unqualified) should match `fountain pen` (🖋)" do
  "🖋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖋"
end
it "`1F58A FE0F` (fully-qualified) should match `pen` (🖊️)" do
  "🖊️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖊️"
end
it "`1F58A` (unqualified) should match `pen` (🖊)" do
  "🖊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖊"
end
it "`1F58C FE0F` (fully-qualified) should match `paintbrush` (🖌️)" do
  "🖌️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖌️"
end
it "`1F58C` (unqualified) should match `paintbrush` (🖌)" do
  "🖌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖌"
end
it "`1F58D FE0F` (fully-qualified) should match `crayon` (🖍️)" do
  "🖍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖍️"
end
it "`1F58D` (unqualified) should match `crayon` (🖍)" do
  "🖍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖍"
end
it "`1F4DD` (fully-qualified) should match `memo` (📝)" do
  "📝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📝"
end
it "`1F4BC` (fully-qualified) should match `briefcase` (💼)" do
  "💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💼"
end
it "`1F4C1` (fully-qualified) should match `file folder` (📁)" do
  "📁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📁"
end
it "`1F4C2` (fully-qualified) should match `open file folder` (📂)" do
  "📂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📂"
end
it "`1F5C2 FE0F` (fully-qualified) should match `card index dividers` (🗂️)" do
  "🗂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗂️"
end
it "`1F5C2` (unqualified) should match `card index dividers` (🗂)" do
  "🗂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗂"
end
it "`1F4C5` (fully-qualified) should match `calendar` (📅)" do
  "📅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📅"
end
it "`1F4C6` (fully-qualified) should match `tear-off calendar` (📆)" do
  "📆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📆"
end
it "`1F5D2 FE0F` (fully-qualified) should match `spiral notepad` (🗒️)" do
  "🗒️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗒️"
end
it "`1F5D2` (unqualified) should match `spiral notepad` (🗒)" do
  "🗒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗒"
end
it "`1F5D3 FE0F` (fully-qualified) should match `spiral calendar` (🗓️)" do
  "🗓️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗓️"
end
it "`1F5D3` (unqualified) should match `spiral calendar` (🗓)" do
  "🗓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗓"
end
it "`1F4C7` (fully-qualified) should match `card index` (📇)" do
  "📇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📇"
end
it "`1F4C8` (fully-qualified) should match `chart increasing` (📈)" do
  "📈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📈"
end
it "`1F4C9` (fully-qualified) should match `chart decreasing` (📉)" do
  "📉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📉"
end
it "`1F4CA` (fully-qualified) should match `bar chart` (📊)" do
  "📊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📊"
end
it "`1F4CB` (fully-qualified) should match `clipboard` (📋)" do
  "📋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📋"
end
it "`1F4CC` (fully-qualified) should match `pushpin` (📌)" do
  "📌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📌"
end
it "`1F4CD` (fully-qualified) should match `round pushpin` (📍)" do
  "📍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📍"
end
it "`1F4CE` (fully-qualified) should match `paperclip` (📎)" do
  "📎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📎"
end
it "`1F587 FE0F` (fully-qualified) should match `linked paperclips` (🖇️)" do
  "🖇️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖇️"
end
it "`1F587` (unqualified) should match `linked paperclips` (🖇)" do
  "🖇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖇"
end
it "`1F4CF` (fully-qualified) should match `straight ruler` (📏)" do
  "📏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📏"
end
it "`1F4D0` (fully-qualified) should match `triangular ruler` (📐)" do
  "📐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📐"
end
it "`2702 FE0F` (fully-qualified) should match `scissors` (✂️)" do
  "✂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✂️"
end
it "`2702` (unqualified) should match `scissors` (✂)" do
  "✂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✂"
end
it "`1F5C3 FE0F` (fully-qualified) should match `card file box` (🗃️)" do
  "🗃️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗃️"
end
it "`1F5C3` (unqualified) should match `card file box` (🗃)" do
  "🗃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗃"
end
it "`1F5C4 FE0F` (fully-qualified) should match `file cabinet` (🗄️)" do
  "🗄️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗄️"
end
it "`1F5C4` (unqualified) should match `file cabinet` (🗄)" do
  "🗄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗄"
end
it "`1F5D1 FE0F` (fully-qualified) should match `wastebasket` (🗑️)" do
  "🗑️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗑️"
end
it "`1F5D1` (unqualified) should match `wastebasket` (🗑)" do
  "🗑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗑"
end
it "`1F512` (fully-qualified) should match `locked` (🔒)" do
  "🔒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔒"
end
it "`1F513` (fully-qualified) should match `unlocked` (🔓)" do
  "🔓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔓"
end
it "`1F50F` (fully-qualified) should match `locked with pen` (🔏)" do
  "🔏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔏"
end
it "`1F510` (fully-qualified) should match `locked with key` (🔐)" do
  "🔐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔐"
end
it "`1F511` (fully-qualified) should match `key` (🔑)" do
  "🔑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔑"
end
it "`1F5DD FE0F` (fully-qualified) should match `old key` (🗝️)" do
  "🗝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗝️"
end
it "`1F5DD` (unqualified) should match `old key` (🗝)" do
  "🗝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗝"
end
it "`1F528` (fully-qualified) should match `hammer` (🔨)" do
  "🔨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔨"
end
it "`1FA93` (fully-qualified) should match `axe` (🪓)" do
  "🪓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪓"
end
it "`26CF FE0F` (fully-qualified) should match `pick` (⛏️)" do
  "⛏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛏️"
end
it "`26CF` (unqualified) should match `pick` (⛏)" do
  "⛏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛏"
end
it "`2692 FE0F` (fully-qualified) should match `hammer and pick` (⚒️)" do
  "⚒️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚒️"
end
it "`2692` (unqualified) should match `hammer and pick` (⚒)" do
  "⚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚒"
end
it "`1F6E0 FE0F` (fully-qualified) should match `hammer and wrench` (🛠️)" do
  "🛠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛠️"
end
it "`1F6E0` (unqualified) should match `hammer and wrench` (🛠)" do
  "🛠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛠"
end
it "`1F5E1 FE0F` (fully-qualified) should match `dagger` (🗡️)" do
  "🗡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗡️"
end
it "`1F5E1` (unqualified) should match `dagger` (🗡)" do
  "🗡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗡"
end
it "`2694 FE0F` (fully-qualified) should match `crossed swords` (⚔️)" do
  "⚔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚔️"
end
it "`2694` (unqualified) should match `crossed swords` (⚔)" do
  "⚔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚔"
end
it "`1F52B` (fully-qualified) should match `pistol` (🔫)" do
  "🔫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔫"
end
it "`1F3F9` (fully-qualified) should match `bow and arrow` (🏹)" do
  "🏹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏹"
end
it "`1F6E1 FE0F` (fully-qualified) should match `shield` (🛡️)" do
  "🛡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛡️"
end
it "`1F6E1` (unqualified) should match `shield` (🛡)" do
  "🛡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛡"
end
it "`1F527` (fully-qualified) should match `wrench` (🔧)" do
  "🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔧"
end
it "`1F529` (fully-qualified) should match `nut and bolt` (🔩)" do
  "🔩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔩"
end
it "`2699 FE0F` (fully-qualified) should match `gear` (⚙️)" do
  "⚙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚙️"
end
it "`2699` (unqualified) should match `gear` (⚙)" do
  "⚙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚙"
end
it "`1F5DC FE0F` (fully-qualified) should match `clamp` (🗜️)" do
  "🗜️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗜️"
end
it "`1F5DC` (unqualified) should match `clamp` (🗜)" do
  "🗜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗜"
end
it "`2696 FE0F` (fully-qualified) should match `balance scale` (⚖️)" do
  "⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚖️"
end
it "`2696` (unqualified) should match `balance scale` (⚖)" do
  "⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚖"
end
it "`1F9AF` (fully-qualified) should match `probing cane` (🦯)" do
  "🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦯"
end
it "`1F517` (fully-qualified) should match `link` (🔗)" do
  "🔗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔗"
end
it "`26D3 FE0F` (fully-qualified) should match `chains` (⛓️)" do
  "⛓️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛓️"
end
it "`26D3` (unqualified) should match `chains` (⛓)" do
  "⛓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛓"
end
it "`1F9F0` (fully-qualified) should match `toolbox` (🧰)" do
  "🧰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧰"
end
it "`1F9F2` (fully-qualified) should match `magnet` (🧲)" do
  "🧲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧲"
end
it "`2697 FE0F` (fully-qualified) should match `alembic` (⚗️)" do
  "⚗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚗️"
end
it "`2697` (unqualified) should match `alembic` (⚗)" do
  "⚗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚗"
end
it "`1F9EA` (fully-qualified) should match `test tube` (🧪)" do
  "🧪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧪"
end
it "`1F9EB` (fully-qualified) should match `petri dish` (🧫)" do
  "🧫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧫"
end
it "`1F9EC` (fully-qualified) should match `dna` (🧬)" do
  "🧬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧬"
end
it "`1F52C` (fully-qualified) should match `microscope` (🔬)" do
  "🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔬"
end
it "`1F52D` (fully-qualified) should match `telescope` (🔭)" do
  "🔭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔭"
end
it "`1F4E1` (fully-qualified) should match `satellite antenna` (📡)" do
  "📡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📡"
end
it "`1F489` (fully-qualified) should match `syringe` (💉)" do
  "💉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💉"
end
it "`1FA78` (fully-qualified) should match `drop of blood` (🩸)" do
  "🩸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩸"
end
it "`1F48A` (fully-qualified) should match `pill` (💊)" do
  "💊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💊"
end
it "`1FA79` (fully-qualified) should match `adhesive bandage` (🩹)" do
  "🩹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩹"
end
it "`1FA7A` (fully-qualified) should match `stethoscope` (🩺)" do
  "🩺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩺"
end
it "`1F6AA` (fully-qualified) should match `door` (🚪)" do
  "🚪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚪"
end
it "`1F6CF FE0F` (fully-qualified) should match `bed` (🛏️)" do
  "🛏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛏️"
end
it "`1F6CF` (unqualified) should match `bed` (🛏)" do
  "🛏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛏"
end
it "`1F6CB FE0F` (fully-qualified) should match `couch and lamp` (🛋️)" do
  "🛋️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛋️"
end
it "`1F6CB` (unqualified) should match `couch and lamp` (🛋)" do
  "🛋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛋"
end
it "`1FA91` (fully-qualified) should match `chair` (🪑)" do
  "🪑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪑"
end
it "`1F6BD` (fully-qualified) should match `toilet` (🚽)" do
  "🚽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚽"
end
it "`1F6BF` (fully-qualified) should match `shower` (🚿)" do
  "🚿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚿"
end
it "`1F6C1` (fully-qualified) should match `bathtub` (🛁)" do
  "🛁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛁"
end
it "`1FA92` (fully-qualified) should match `razor` (🪒)" do
  "🪒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪒"
end
it "`1F9F4` (fully-qualified) should match `lotion bottle` (🧴)" do
  "🧴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧴"
end
it "`1F9F7` (fully-qualified) should match `safety pin` (🧷)" do
  "🧷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧷"
end
it "`1F9F9` (fully-qualified) should match `broom` (🧹)" do
  "🧹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧹"
end
it "`1F9FA` (fully-qualified) should match `basket` (🧺)" do
  "🧺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧺"
end
it "`1F9FB` (fully-qualified) should match `roll of paper` (🧻)" do
  "🧻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧻"
end
it "`1F9FC` (fully-qualified) should match `soap` (🧼)" do
  "🧼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧼"
end
it "`1F9FD` (fully-qualified) should match `sponge` (🧽)" do
  "🧽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧽"
end
it "`1F9EF` (fully-qualified) should match `fire extinguisher` (🧯)" do
  "🧯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧯"
end
it "`1F6D2` (fully-qualified) should match `shopping cart` (🛒)" do
  "🛒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛒"
end
it "`1F6AC` (fully-qualified) should match `cigarette` (🚬)" do
  "🚬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚬"
end
it "`26B0 FE0F` (fully-qualified) should match `coffin` (⚰️)" do
  "⚰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚰️"
end
it "`26B0` (unqualified) should match `coffin` (⚰)" do
  "⚰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚰"
end
it "`26B1 FE0F` (fully-qualified) should match `funeral urn` (⚱️)" do
  "⚱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚱️"
end
it "`26B1` (unqualified) should match `funeral urn` (⚱)" do
  "⚱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚱"
end
it "`1F5FF` (fully-qualified) should match `moai` (🗿)" do
  "🗿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗿"
end
it "`1F3E7` (fully-qualified) should match `ATM sign` (🏧)" do
  "🏧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏧"
end
it "`1F6AE` (fully-qualified) should match `litter in bin sign` (🚮)" do
  "🚮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚮"
end
it "`1F6B0` (fully-qualified) should match `potable water` (🚰)" do
  "🚰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚰"
end
it "`267F` (fully-qualified) should match `wheelchair symbol` (♿)" do
  "♿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♿"
end
it "`1F6B9` (fully-qualified) should match `men’s room` (🚹)" do
  "🚹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚹"
end
it "`1F6BA` (fully-qualified) should match `women’s room` (🚺)" do
  "🚺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚺"
end
it "`1F6BB` (fully-qualified) should match `restroom` (🚻)" do
  "🚻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚻"
end
it "`1F6BC` (fully-qualified) should match `baby symbol` (🚼)" do
  "🚼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚼"
end
it "`1F6BE` (fully-qualified) should match `water closet` (🚾)" do
  "🚾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚾"
end
it "`1F6C2` (fully-qualified) should match `passport control` (🛂)" do
  "🛂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛂"
end
it "`1F6C3` (fully-qualified) should match `customs` (🛃)" do
  "🛃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛃"
end
it "`1F6C4` (fully-qualified) should match `baggage claim` (🛄)" do
  "🛄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛄"
end
it "`1F6C5` (fully-qualified) should match `left luggage` (🛅)" do
  "🛅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛅"
end
it "`26A0 FE0F` (fully-qualified) should match `warning` (⚠️)" do
  "⚠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚠️"
end
it "`26A0` (unqualified) should match `warning` (⚠)" do
  "⚠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚠"
end
it "`1F6B8` (fully-qualified) should match `children crossing` (🚸)" do
  "🚸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚸"
end
it "`26D4` (fully-qualified) should match `no entry` (⛔)" do
  "⛔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛔"
end
it "`1F6AB` (fully-qualified) should match `prohibited` (🚫)" do
  "🚫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚫"
end
it "`1F6B3` (fully-qualified) should match `no bicycles` (🚳)" do
  "🚳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚳"
end
it "`1F6AD` (fully-qualified) should match `no smoking` (🚭)" do
  "🚭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚭"
end
it "`1F6AF` (fully-qualified) should match `no littering` (🚯)" do
  "🚯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚯"
end
it "`1F6B1` (fully-qualified) should match `non-potable water` (🚱)" do
  "🚱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚱"
end
it "`1F6B7` (fully-qualified) should match `no pedestrians` (🚷)" do
  "🚷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚷"
end
it "`1F4F5` (fully-qualified) should match `no mobile phones` (📵)" do
  "📵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📵"
end
it "`1F51E` (fully-qualified) should match `no one under eighteen` (🔞)" do
  "🔞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔞"
end
it "`2622 FE0F` (fully-qualified) should match `radioactive` (☢️)" do
  "☢️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☢️"
end
it "`2622` (unqualified) should match `radioactive` (☢)" do
  "☢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☢"
end
it "`2623 FE0F` (fully-qualified) should match `biohazard` (☣️)" do
  "☣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☣️"
end
it "`2623` (unqualified) should match `biohazard` (☣)" do
  "☣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☣"
end
it "`2B06 FE0F` (fully-qualified) should match `up arrow` (⬆️)" do
  "⬆️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬆️"
end
it "`2B06` (unqualified) should match `up arrow` (⬆)" do
  "⬆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬆"
end
it "`2197 FE0F` (fully-qualified) should match `up-right arrow` (↗️)" do
  "↗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↗️"
end
it "`2197` (unqualified) should match `up-right arrow` (↗)" do
  "↗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↗"
end
it "`27A1 FE0F` (fully-qualified) should match `right arrow` (➡️)" do
  "➡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➡️"
end
it "`27A1` (unqualified) should match `right arrow` (➡)" do
  "➡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➡"
end
it "`2198 FE0F` (fully-qualified) should match `down-right arrow` (↘️)" do
  "↘️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↘️"
end
it "`2198` (unqualified) should match `down-right arrow` (↘)" do
  "↘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↘"
end
it "`2B07 FE0F` (fully-qualified) should match `down arrow` (⬇️)" do
  "⬇️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬇️"
end
it "`2B07` (unqualified) should match `down arrow` (⬇)" do
  "⬇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬇"
end
it "`2199 FE0F` (fully-qualified) should match `down-left arrow` (↙️)" do
  "↙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↙️"
end
it "`2199` (unqualified) should match `down-left arrow` (↙)" do
  "↙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↙"
end
it "`2B05 FE0F` (fully-qualified) should match `left arrow` (⬅️)" do
  "⬅️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬅️"
end
it "`2B05` (unqualified) should match `left arrow` (⬅)" do
  "⬅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬅"
end
it "`2196 FE0F` (fully-qualified) should match `up-left arrow` (↖️)" do
  "↖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↖️"
end
it "`2196` (unqualified) should match `up-left arrow` (↖)" do
  "↖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↖"
end
it "`2195 FE0F` (fully-qualified) should match `up-down arrow` (↕️)" do
  "↕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↕️"
end
it "`2195` (unqualified) should match `up-down arrow` (↕)" do
  "↕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↕"
end
it "`2194 FE0F` (fully-qualified) should match `left-right arrow` (↔️)" do
  "↔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↔️"
end
it "`2194` (unqualified) should match `left-right arrow` (↔)" do
  "↔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↔"
end
it "`21A9 FE0F` (fully-qualified) should match `right arrow curving left` (↩️)" do
  "↩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↩️"
end
it "`21A9` (unqualified) should match `right arrow curving left` (↩)" do
  "↩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↩"
end
it "`21AA FE0F` (fully-qualified) should match `left arrow curving right` (↪️)" do
  "↪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↪️"
end
it "`21AA` (unqualified) should match `left arrow curving right` (↪)" do
  "↪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↪"
end
it "`2934 FE0F` (fully-qualified) should match `right arrow curving up` (⤴️)" do
  "⤴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤴️"
end
it "`2934` (unqualified) should match `right arrow curving up` (⤴)" do
  "⤴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤴"
end
it "`2935 FE0F` (fully-qualified) should match `right arrow curving down` (⤵️)" do
  "⤵️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤵️"
end
it "`2935` (unqualified) should match `right arrow curving down` (⤵)" do
  "⤵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤵"
end
it "`1F503` (fully-qualified) should match `clockwise vertical arrows` (🔃)" do
  "🔃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔃"
end
it "`1F504` (fully-qualified) should match `counterclockwise arrows button` (🔄)" do
  "🔄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔄"
end
it "`1F519` (fully-qualified) should match `BACK arrow` (🔙)" do
  "🔙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔙"
end
it "`1F51A` (fully-qualified) should match `END arrow` (🔚)" do
  "🔚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔚"
end
it "`1F51B` (fully-qualified) should match `ON! arrow` (🔛)" do
  "🔛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔛"
end
it "`1F51C` (fully-qualified) should match `SOON arrow` (🔜)" do
  "🔜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔜"
end
it "`1F51D` (fully-qualified) should match `TOP arrow` (🔝)" do
  "🔝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔝"
end
it "`1F6D0` (fully-qualified) should match `place of worship` (🛐)" do
  "🛐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛐"
end
it "`269B FE0F` (fully-qualified) should match `atom symbol` (⚛️)" do
  "⚛️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚛️"
end
it "`269B` (unqualified) should match `atom symbol` (⚛)" do
  "⚛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚛"
end
it "`1F549 FE0F` (fully-qualified) should match `om` (🕉️)" do
  "🕉️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕉️"
end
it "`1F549` (unqualified) should match `om` (🕉)" do
  "🕉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕉"
end
it "`2721 FE0F` (fully-qualified) should match `star of David` (✡️)" do
  "✡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✡️"
end
it "`2721` (unqualified) should match `star of David` (✡)" do
  "✡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✡"
end
it "`2638 FE0F` (fully-qualified) should match `wheel of dharma` (☸️)" do
  "☸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☸️"
end
it "`2638` (unqualified) should match `wheel of dharma` (☸)" do
  "☸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☸"
end
it "`262F FE0F` (fully-qualified) should match `yin yang` (☯️)" do
  "☯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☯️"
end
it "`262F` (unqualified) should match `yin yang` (☯)" do
  "☯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☯"
end
it "`271D FE0F` (fully-qualified) should match `latin cross` (✝️)" do
  "✝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✝️"
end
it "`271D` (unqualified) should match `latin cross` (✝)" do
  "✝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✝"
end
it "`2626 FE0F` (fully-qualified) should match `orthodox cross` (☦️)" do
  "☦️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☦️"
end
it "`2626` (unqualified) should match `orthodox cross` (☦)" do
  "☦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☦"
end
it "`262A FE0F` (fully-qualified) should match `star and crescent` (☪️)" do
  "☪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☪️"
end
it "`262A` (unqualified) should match `star and crescent` (☪)" do
  "☪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☪"
end
it "`262E FE0F` (fully-qualified) should match `peace symbol` (☮️)" do
  "☮️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☮️"
end
it "`262E` (unqualified) should match `peace symbol` (☮)" do
  "☮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☮"
end
it "`1F54E` (fully-qualified) should match `menorah` (🕎)" do
  "🕎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕎"
end
it "`1F52F` (fully-qualified) should match `dotted six-pointed star` (🔯)" do
  "🔯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔯"
end
it "`2648` (fully-qualified) should match `Aries` (♈)" do
  "♈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♈"
end
it "`2649` (fully-qualified) should match `Taurus` (♉)" do
  "♉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♉"
end
it "`264A` (fully-qualified) should match `Gemini` (♊)" do
  "♊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♊"
end
it "`264B` (fully-qualified) should match `Cancer` (♋)" do
  "♋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♋"
end
it "`264C` (fully-qualified) should match `Leo` (♌)" do
  "♌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♌"
end
it "`264D` (fully-qualified) should match `Virgo` (♍)" do
  "♍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♍"
end
it "`264E` (fully-qualified) should match `Libra` (♎)" do
  "♎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♎"
end
it "`264F` (fully-qualified) should match `Scorpio` (♏)" do
  "♏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♏"
end
it "`2650` (fully-qualified) should match `Sagittarius` (♐)" do
  "♐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♐"
end
it "`2651` (fully-qualified) should match `Capricorn` (♑)" do
  "♑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♑"
end
it "`2652` (fully-qualified) should match `Aquarius` (♒)" do
  "♒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♒"
end
it "`2653` (fully-qualified) should match `Pisces` (♓)" do
  "♓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♓"
end
it "`26CE` (fully-qualified) should match `Ophiuchus` (⛎)" do
  "⛎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛎"
end
it "`1F500` (fully-qualified) should match `shuffle tracks button` (🔀)" do
  "🔀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔀"
end
it "`1F501` (fully-qualified) should match `repeat button` (🔁)" do
  "🔁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔁"
end
it "`1F502` (fully-qualified) should match `repeat single button` (🔂)" do
  "🔂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔂"
end
it "`25B6 FE0F` (fully-qualified) should match `play button` (▶️)" do
  "▶️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▶️"
end
it "`25B6` (unqualified) should match `play button` (▶)" do
  "▶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▶"
end
it "`23E9` (fully-qualified) should match `fast-forward button` (⏩)" do
  "⏩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏩"
end
it "`23ED FE0F` (fully-qualified) should match `next track button` (⏭️)" do
  "⏭️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏭️"
end
it "`23ED` (unqualified) should match `next track button` (⏭)" do
  "⏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏭"
end
it "`23EF FE0F` (fully-qualified) should match `play or pause button` (⏯️)" do
  "⏯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏯️"
end
it "`23EF` (unqualified) should match `play or pause button` (⏯)" do
  "⏯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏯"
end
it "`25C0 FE0F` (fully-qualified) should match `reverse button` (◀️)" do
  "◀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◀️"
end
it "`25C0` (unqualified) should match `reverse button` (◀)" do
  "◀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◀"
end
it "`23EA` (fully-qualified) should match `fast reverse button` (⏪)" do
  "⏪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏪"
end
it "`23EE FE0F` (fully-qualified) should match `last track button` (⏮️)" do
  "⏮️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏮️"
end
it "`23EE` (unqualified) should match `last track button` (⏮)" do
  "⏮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏮"
end
it "`1F53C` (fully-qualified) should match `upwards button` (🔼)" do
  "🔼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔼"
end
it "`23EB` (fully-qualified) should match `fast up button` (⏫)" do
  "⏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏫"
end
it "`1F53D` (fully-qualified) should match `downwards button` (🔽)" do
  "🔽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔽"
end
it "`23EC` (fully-qualified) should match `fast down button` (⏬)" do
  "⏬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏬"
end
it "`23F8 FE0F` (fully-qualified) should match `pause button` (⏸️)" do
  "⏸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏸️"
end
it "`23F8` (unqualified) should match `pause button` (⏸)" do
  "⏸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏸"
end
it "`23F9 FE0F` (fully-qualified) should match `stop button` (⏹️)" do
  "⏹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏹️"
end
it "`23F9` (unqualified) should match `stop button` (⏹)" do
  "⏹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏹"
end
it "`23FA FE0F` (fully-qualified) should match `record button` (⏺️)" do
  "⏺️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏺️"
end
it "`23FA` (unqualified) should match `record button` (⏺)" do
  "⏺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏺"
end
it "`23CF FE0F` (fully-qualified) should match `eject button` (⏏️)" do
  "⏏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏏️"
end
it "`23CF` (unqualified) should match `eject button` (⏏)" do
  "⏏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏏"
end
it "`1F3A6` (fully-qualified) should match `cinema` (🎦)" do
  "🎦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎦"
end
it "`1F505` (fully-qualified) should match `dim button` (🔅)" do
  "🔅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔅"
end
it "`1F506` (fully-qualified) should match `bright button` (🔆)" do
  "🔆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔆"
end
it "`1F4F6` (fully-qualified) should match `antenna bars` (📶)" do
  "📶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📶"
end
it "`1F4F3` (fully-qualified) should match `vibration mode` (📳)" do
  "📳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📳"
end
it "`1F4F4` (fully-qualified) should match `mobile phone off` (📴)" do
  "📴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📴"
end
it "`2640 FE0F` (fully-qualified) should match `female sign` (♀️)" do
  "♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♀️"
end
it "`2640` (unqualified) should match `female sign` (♀)" do
  "♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♀"
end
it "`2642 FE0F` (fully-qualified) should match `male sign` (♂️)" do
  "♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♂️"
end
it "`2642` (unqualified) should match `male sign` (♂)" do
  "♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♂"
end
it "`2695 FE0F` (fully-qualified) should match `medical symbol` (⚕️)" do
  "⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚕️"
end
it "`2695` (unqualified) should match `medical symbol` (⚕)" do
  "⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚕"
end
it "`267E FE0F` (fully-qualified) should match `infinity` (♾️)" do
  "♾️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♾️"
end
it "`267E` (unqualified) should match `infinity` (♾)" do
  "♾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♾"
end
it "`267B FE0F` (fully-qualified) should match `recycling symbol` (♻️)" do
  "♻️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♻️"
end
it "`267B` (unqualified) should match `recycling symbol` (♻)" do
  "♻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♻"
end
it "`269C FE0F` (fully-qualified) should match `fleur-de-lis` (⚜️)" do
  "⚜️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚜️"
end
it "`269C` (unqualified) should match `fleur-de-lis` (⚜)" do
  "⚜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚜"
end
it "`1F531` (fully-qualified) should match `trident emblem` (🔱)" do
  "🔱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔱"
end
it "`1F4DB` (fully-qualified) should match `name badge` (📛)" do
  "📛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📛"
end
it "`1F530` (fully-qualified) should match `Japanese symbol for beginner` (🔰)" do
  "🔰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔰"
end
it "`2B55` (fully-qualified) should match `hollow red circle` (⭕)" do
  "⭕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⭕"
end
it "`2705` (fully-qualified) should match `check mark button` (✅)" do
  "✅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✅"
end
it "`2611 FE0F` (fully-qualified) should match `check box with check` (☑️)" do
  "☑️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☑️"
end
it "`2611` (unqualified) should match `check box with check` (☑)" do
  "☑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☑"
end
it "`2714 FE0F` (fully-qualified) should match `check mark` (✔️)" do
  "✔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✔️"
end
it "`2714` (unqualified) should match `check mark` (✔)" do
  "✔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✔"
end
it "`2716 FE0F` (fully-qualified) should match `multiplication sign` (✖️)" do
  "✖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✖️"
end
it "`2716` (unqualified) should match `multiplication sign` (✖)" do
  "✖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✖"
end
it "`274C` (fully-qualified) should match `cross mark` (❌)" do
  "❌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❌"
end
it "`274E` (fully-qualified) should match `cross mark button` (❎)" do
  "❎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❎"
end
it "`2795` (fully-qualified) should match `plus sign` (➕)" do
  "➕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➕"
end
it "`2796` (fully-qualified) should match `minus sign` (➖)" do
  "➖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➖"
end
it "`2797` (fully-qualified) should match `division sign` (➗)" do
  "➗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➗"
end
it "`27B0` (fully-qualified) should match `curly loop` (➰)" do
  "➰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➰"
end
it "`27BF` (fully-qualified) should match `double curly loop` (➿)" do
  "➿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➿"
end
it "`303D FE0F` (fully-qualified) should match `part alternation mark` (〽️)" do
  "〽️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〽️"
end
it "`303D` (unqualified) should match `part alternation mark` (〽)" do
  "〽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〽"
end
it "`2733 FE0F` (fully-qualified) should match `eight-spoked asterisk` (✳️)" do
  "✳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✳️"
end
it "`2733` (unqualified) should match `eight-spoked asterisk` (✳)" do
  "✳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✳"
end
it "`2734 FE0F` (fully-qualified) should match `eight-pointed star` (✴️)" do
  "✴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✴️"
end
it "`2734` (unqualified) should match `eight-pointed star` (✴)" do
  "✴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✴"
end
it "`2747 FE0F` (fully-qualified) should match `sparkle` (❇️)" do
  "❇️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❇️"
end
it "`2747` (unqualified) should match `sparkle` (❇)" do
  "❇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❇"
end
it "`203C FE0F` (fully-qualified) should match `double exclamation mark` (‼️)" do
  "‼️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "‼️"
end
it "`203C` (unqualified) should match `double exclamation mark` (‼)" do
  "‼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "‼"
end
it "`2049 FE0F` (fully-qualified) should match `exclamation question mark` (⁉️)" do
  "⁉️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⁉️"
end
it "`2049` (unqualified) should match `exclamation question mark` (⁉)" do
  "⁉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⁉"
end
it "`2753` (fully-qualified) should match `question mark` (❓)" do
  "❓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❓"
end
it "`2754` (fully-qualified) should match `white question mark` (❔)" do
  "❔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❔"
end
it "`2755` (fully-qualified) should match `white exclamation mark` (❕)" do
  "❕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❕"
end
it "`2757` (fully-qualified) should match `exclamation mark` (❗)" do
  "❗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❗"
end
it "`3030 FE0F` (fully-qualified) should match `wavy dash` (〰️)" do
  "〰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〰️"
end
it "`3030` (unqualified) should match `wavy dash` (〰)" do
  "〰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〰"
end
it "`00A9 FE0F` (fully-qualified) should match `copyright` (©️)" do
  "©️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "©️"
end
it "`00A9` (unqualified) should match `copyright` (©)" do
  "©".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "©"
end
it "`00AE FE0F` (fully-qualified) should match `registered` (®️)" do
  "®️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "®️"
end
it "`00AE` (unqualified) should match `registered` (®)" do
  "®".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "®"
end
it "`2122 FE0F` (fully-qualified) should match `trade mark` (™️)" do
  "™️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "™️"
end
it "`2122` (unqualified) should match `trade mark` (™)" do
  "™".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "™"
end
it "`0023 FE0F 20E3` (fully-qualified) should match `keycap: #` (#️⃣)" do
  "#️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "#️⃣"
end
it "`0023 20E3` (unqualified) should match `keycap: #` (#⃣)" do
  "#⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "#⃣"
end
it "`002A FE0F 20E3` (fully-qualified) should match `keycap: *` (*️⃣)" do
  "*️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "*️⃣"
end
it "`002A 20E3` (unqualified) should match `keycap: *` (*⃣)" do
  "*⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "*⃣"
end
it "`0030 FE0F 20E3` (fully-qualified) should match `keycap: 0` (0️⃣)" do
  "0️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "0️⃣"
end
it "`0030 20E3` (unqualified) should match `keycap: 0` (0⃣)" do
  "0⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "0⃣"
end
it "`0031 FE0F 20E3` (fully-qualified) should match `keycap: 1` (1️⃣)" do
  "1️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "1️⃣"
end
it "`0031 20E3` (unqualified) should match `keycap: 1` (1⃣)" do
  "1⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "1⃣"
end
it "`0032 FE0F 20E3` (fully-qualified) should match `keycap: 2` (2️⃣)" do
  "2️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "2️⃣"
end
it "`0032 20E3` (unqualified) should match `keycap: 2` (2⃣)" do
  "2⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "2⃣"
end
it "`0033 FE0F 20E3` (fully-qualified) should match `keycap: 3` (3️⃣)" do
  "3️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "3️⃣"
end
it "`0033 20E3` (unqualified) should match `keycap: 3` (3⃣)" do
  "3⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "3⃣"
end
it "`0034 FE0F 20E3` (fully-qualified) should match `keycap: 4` (4️⃣)" do
  "4️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "4️⃣"
end
it "`0034 20E3` (unqualified) should match `keycap: 4` (4⃣)" do
  "4⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "4⃣"
end
it "`0035 FE0F 20E3` (fully-qualified) should match `keycap: 5` (5️⃣)" do
  "5️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "5️⃣"
end
it "`0035 20E3` (unqualified) should match `keycap: 5` (5⃣)" do
  "5⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "5⃣"
end
it "`0036 FE0F 20E3` (fully-qualified) should match `keycap: 6` (6️⃣)" do
  "6️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "6️⃣"
end
it "`0036 20E3` (unqualified) should match `keycap: 6` (6⃣)" do
  "6⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "6⃣"
end
it "`0037 FE0F 20E3` (fully-qualified) should match `keycap: 7` (7️⃣)" do
  "7️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "7️⃣"
end
it "`0037 20E3` (unqualified) should match `keycap: 7` (7⃣)" do
  "7⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "7⃣"
end
it "`0038 FE0F 20E3` (fully-qualified) should match `keycap: 8` (8️⃣)" do
  "8️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "8️⃣"
end
it "`0038 20E3` (unqualified) should match `keycap: 8` (8⃣)" do
  "8⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "8⃣"
end
it "`0039 FE0F 20E3` (fully-qualified) should match `keycap: 9` (9️⃣)" do
  "9️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "9️⃣"
end
it "`0039 20E3` (unqualified) should match `keycap: 9` (9⃣)" do
  "9⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "9⃣"
end
it "`1F51F` (fully-qualified) should match `keycap: 10` (🔟)" do
  "🔟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔟"
end
it "`1F520` (fully-qualified) should match `input latin uppercase` (🔠)" do
  "🔠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔠"
end
it "`1F521` (fully-qualified) should match `input latin lowercase` (🔡)" do
  "🔡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔡"
end
it "`1F522` (fully-qualified) should match `input numbers` (🔢)" do
  "🔢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔢"
end
it "`1F523` (fully-qualified) should match `input symbols` (🔣)" do
  "🔣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔣"
end
it "`1F524` (fully-qualified) should match `input latin letters` (🔤)" do
  "🔤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔤"
end
it "`1F170 FE0F` (fully-qualified) should match `A button (blood type)` (🅰️)" do
  "🅰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅰️"
end
it "`1F170` (unqualified) should match `A button (blood type)` (🅰)" do
  "🅰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅰"
end
it "`1F18E` (fully-qualified) should match `AB button (blood type)` (🆎)" do
  "🆎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆎"
end
it "`1F171 FE0F` (fully-qualified) should match `B button (blood type)` (🅱️)" do
  "🅱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅱️"
end
it "`1F171` (unqualified) should match `B button (blood type)` (🅱)" do
  "🅱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅱"
end
it "`1F191` (fully-qualified) should match `CL button` (🆑)" do
  "🆑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆑"
end
it "`1F192` (fully-qualified) should match `COOL button` (🆒)" do
  "🆒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆒"
end
it "`1F193` (fully-qualified) should match `FREE button` (🆓)" do
  "🆓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆓"
end
it "`2139 FE0F` (fully-qualified) should match `information` (ℹ️)" do
  "ℹ️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "ℹ️"
end
it "`2139` (unqualified) should match `information` (ℹ)" do
  "ℹ".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "ℹ"
end
it "`1F194` (fully-qualified) should match `ID button` (🆔)" do
  "🆔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆔"
end
it "`24C2 FE0F` (fully-qualified) should match `circled M` (Ⓜ️)" do
  "Ⓜ️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "Ⓜ️"
end
it "`24C2` (unqualified) should match `circled M` (Ⓜ)" do
  "Ⓜ".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "Ⓜ"
end
it "`1F195` (fully-qualified) should match `NEW button` (🆕)" do
  "🆕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆕"
end
it "`1F196` (fully-qualified) should match `NG button` (🆖)" do
  "🆖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆖"
end
it "`1F17E FE0F` (fully-qualified) should match `O button (blood type)` (🅾️)" do
  "🅾️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅾️"
end
it "`1F17E` (unqualified) should match `O button (blood type)` (🅾)" do
  "🅾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅾"
end
it "`1F197` (fully-qualified) should match `OK button` (🆗)" do
  "🆗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆗"
end
it "`1F17F FE0F` (fully-qualified) should match `P button` (🅿️)" do
  "🅿️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅿️"
end
it "`1F17F` (unqualified) should match `P button` (🅿)" do
  "🅿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅿"
end
it "`1F198` (fully-qualified) should match `SOS button` (🆘)" do
  "🆘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆘"
end
it "`1F199` (fully-qualified) should match `UP! button` (🆙)" do
  "🆙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆙"
end
it "`1F19A` (fully-qualified) should match `VS button` (🆚)" do
  "🆚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆚"
end
it "`1F201` (fully-qualified) should match `Japanese “here” button` (🈁)" do
  "🈁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈁"
end
it "`1F202 FE0F` (fully-qualified) should match `Japanese “service charge” button` (🈂️)" do
  "🈂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈂️"
end
it "`1F202` (unqualified) should match `Japanese “service charge” button` (🈂)" do
  "🈂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈂"
end
it "`1F237 FE0F` (fully-qualified) should match `Japanese “monthly amount” button` (🈷️)" do
  "🈷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈷️"
end
it "`1F237` (unqualified) should match `Japanese “monthly amount” button` (🈷)" do
  "🈷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈷"
end
it "`1F236` (fully-qualified) should match `Japanese “not free of charge” button` (🈶)" do
  "🈶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈶"
end
it "`1F22F` (fully-qualified) should match `Japanese “reserved” button` (🈯)" do
  "🈯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈯"
end
it "`1F250` (fully-qualified) should match `Japanese “bargain” button` (🉐)" do
  "🉐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🉐"
end
it "`1F239` (fully-qualified) should match `Japanese “discount” button` (🈹)" do
  "🈹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈹"
end
it "`1F21A` (fully-qualified) should match `Japanese “free of charge” button` (🈚)" do
  "🈚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈚"
end
it "`1F232` (fully-qualified) should match `Japanese “prohibited” button` (🈲)" do
  "🈲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈲"
end
it "`1F251` (fully-qualified) should match `Japanese “acceptable” button` (🉑)" do
  "🉑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🉑"
end
it "`1F238` (fully-qualified) should match `Japanese “application” button` (🈸)" do
  "🈸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈸"
end
it "`1F234` (fully-qualified) should match `Japanese “passing grade” button` (🈴)" do
  "🈴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈴"
end
it "`1F233` (fully-qualified) should match `Japanese “vacancy” button` (🈳)" do
  "🈳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈳"
end
it "`3297 FE0F` (fully-qualified) should match `Japanese “congratulations” button` (㊗️)" do
  "㊗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊗️"
end
it "`3297` (unqualified) should match `Japanese “congratulations” button` (㊗)" do
  "㊗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊗"
end
it "`3299 FE0F` (fully-qualified) should match `Japanese “secret” button` (㊙️)" do
  "㊙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊙️"
end
it "`3299` (unqualified) should match `Japanese “secret” button` (㊙)" do
  "㊙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊙"
end
it "`1F23A` (fully-qualified) should match `Japanese “open for business” button` (🈺)" do
  "🈺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈺"
end
it "`1F235` (fully-qualified) should match `Japanese “no vacancy” button` (🈵)" do
  "🈵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈵"
end
it "`1F534` (fully-qualified) should match `red circle` (🔴)" do
  "🔴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔴"
end
it "`1F7E0` (fully-qualified) should match `orange circle` (🟠)" do
  "🟠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟠"
end
it "`1F7E1` (fully-qualified) should match `yellow circle` (🟡)" do
  "🟡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟡"
end
it "`1F7E2` (fully-qualified) should match `green circle` (🟢)" do
  "🟢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟢"
end
it "`1F535` (fully-qualified) should match `blue circle` (🔵)" do
  "🔵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔵"
end
it "`1F7E3` (fully-qualified) should match `purple circle` (🟣)" do
  "🟣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟣"
end
it "`1F7E4` (fully-qualified) should match `brown circle` (🟤)" do
  "🟤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟤"
end
it "`26AB` (fully-qualified) should match `black circle` (⚫)" do
  "⚫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚫"
end
it "`26AA` (fully-qualified) should match `white circle` (⚪)" do
  "⚪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚪"
end
it "`1F7E5` (fully-qualified) should match `red square` (🟥)" do
  "🟥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟥"
end
it "`1F7E7` (fully-qualified) should match `orange square` (🟧)" do
  "🟧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟧"
end
it "`1F7E8` (fully-qualified) should match `yellow square` (🟨)" do
  "🟨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟨"
end
it "`1F7E9` (fully-qualified) should match `green square` (🟩)" do
  "🟩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟩"
end
it "`1F7E6` (fully-qualified) should match `blue square` (🟦)" do
  "🟦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟦"
end
it "`1F7EA` (fully-qualified) should match `purple square` (🟪)" do
  "🟪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟪"
end
it "`1F7EB` (fully-qualified) should match `brown square` (🟫)" do
  "🟫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟫"
end
it "`2B1B` (fully-qualified) should match `black large square` (⬛)" do
  "⬛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬛"
end
it "`2B1C` (fully-qualified) should match `white large square` (⬜)" do
  "⬜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬜"
end
it "`25FC FE0F` (fully-qualified) should match `black medium square` (◼️)" do
  "◼️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◼️"
end
it "`25FC` (unqualified) should match `black medium square` (◼)" do
  "◼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◼"
end
it "`25FB FE0F` (fully-qualified) should match `white medium square` (◻️)" do
  "◻️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◻️"
end
it "`25FB` (unqualified) should match `white medium square` (◻)" do
  "◻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◻"
end
it "`25FE` (fully-qualified) should match `black medium-small square` (◾)" do
  "◾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◾"
end
it "`25FD` (fully-qualified) should match `white medium-small square` (◽)" do
  "◽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◽"
end
it "`25AA FE0F` (fully-qualified) should match `black small square` (▪️)" do
  "▪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▪️"
end
it "`25AA` (unqualified) should match `black small square` (▪)" do
  "▪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▪"
end
it "`25AB FE0F` (fully-qualified) should match `white small square` (▫️)" do
  "▫️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▫️"
end
it "`25AB` (unqualified) should match `white small square` (▫)" do
  "▫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▫"
end
it "`1F536` (fully-qualified) should match `large orange diamond` (🔶)" do
  "🔶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔶"
end
it "`1F537` (fully-qualified) should match `large blue diamond` (🔷)" do
  "🔷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔷"
end
it "`1F538` (fully-qualified) should match `small orange diamond` (🔸)" do
  "🔸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔸"
end
it "`1F539` (fully-qualified) should match `small blue diamond` (🔹)" do
  "🔹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔹"
end
it "`1F53A` (fully-qualified) should match `red triangle pointed up` (🔺)" do
  "🔺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔺"
end
it "`1F53B` (fully-qualified) should match `red triangle pointed down` (🔻)" do
  "🔻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔻"
end
it "`1F4A0` (fully-qualified) should match `diamond with a dot` (💠)" do
  "💠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💠"
end
it "`1F518` (fully-qualified) should match `radio button` (🔘)" do
  "🔘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔘"
end
it "`1F533` (fully-qualified) should match `white square button` (🔳)" do
  "🔳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔳"
end
it "`1F532` (fully-qualified) should match `black square button` (🔲)" do
  "🔲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔲"
end
it "`1F3C1` (fully-qualified) should match `chequered flag` (🏁)" do
  "🏁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏁"
end
it "`1F6A9` (fully-qualified) should match `triangular flag` (🚩)" do
  "🚩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚩"
end
it "`1F38C` (fully-qualified) should match `crossed flags` (🎌)" do
  "🎌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎌"
end
it "`1F3F4` (fully-qualified) should match `black flag` (🏴)" do
  "🏴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴"
end
it "`1F3F3 FE0F` (fully-qualified) should match `white flag` (🏳️)" do
  "🏳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳️"
end
it "`1F3F3` (unqualified) should match `white flag` (🏳)" do
  "🏳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳"
end
it "`1F3F3 FE0F 200D 1F308` (fully-qualified) should match `rainbow flag` (🏳️‍🌈)" do
  "🏳️‍🌈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳️‍🌈"
end
it "`1F3F3 200D 1F308` (unqualified) should match `rainbow flag` (🏳‍🌈)" do
  "🏳‍🌈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳‍🌈"
end
it "`1F3F4 200D 2620 FE0F` (fully-qualified) should match `pirate flag` (🏴‍☠️)" do
  "🏴‍☠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴‍☠️"
end
it "`1F3F4 200D 2620` (minimally-qualified) should match `pirate flag` (🏴‍☠)" do
  "🏴‍☠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴‍☠"
end
it "`1F1E6 1F1E8` (fully-qualified) should match `flag: Ascension Island` (🇦🇨)" do
  "🇦🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇨"
end
it "`1F1E6 1F1E9` (fully-qualified) should match `flag: Andorra` (🇦🇩)" do
  "🇦🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇩"
end
it "`1F1E6 1F1EA` (fully-qualified) should match `flag: United Arab Emirates` (🇦🇪)" do
  "🇦🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇪"
end
it "`1F1E6 1F1EB` (fully-qualified) should match `flag: Afghanistan` (🇦🇫)" do
  "🇦🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇫"
end
it "`1F1E6 1F1EC` (fully-qualified) should match `flag: Antigua & Barbuda` (🇦🇬)" do
  "🇦🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇬"
end
it "`1F1E6 1F1EE` (fully-qualified) should match `flag: Anguilla` (🇦🇮)" do
  "🇦🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇮"
end
it "`1F1E6 1F1F1` (fully-qualified) should match `flag: Albania` (🇦🇱)" do
  "🇦🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇱"
end
it "`1F1E6 1F1F2` (fully-qualified) should match `flag: Armenia` (🇦🇲)" do
  "🇦🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇲"
end
it "`1F1E6 1F1F4` (fully-qualified) should match `flag: Angola` (🇦🇴)" do
  "🇦🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇴"
end
it "`1F1E6 1F1F6` (fully-qualified) should match `flag: Antarctica` (🇦🇶)" do
  "🇦🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇶"
end
it "`1F1E6 1F1F7` (fully-qualified) should match `flag: Argentina` (🇦🇷)" do
  "🇦🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇷"
end
it "`1F1E6 1F1F8` (fully-qualified) should match `flag: American Samoa` (🇦🇸)" do
  "🇦🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇸"
end
it "`1F1E6 1F1F9` (fully-qualified) should match `flag: Austria` (🇦🇹)" do
  "🇦🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇹"
end
it "`1F1E6 1F1FA` (fully-qualified) should match `flag: Australia` (🇦🇺)" do
  "🇦🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇺"
end
it "`1F1E6 1F1FC` (fully-qualified) should match `flag: Aruba` (🇦🇼)" do
  "🇦🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇼"
end
it "`1F1E6 1F1FD` (fully-qualified) should match `flag: Åland Islands` (🇦🇽)" do
  "🇦🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇽"
end
it "`1F1E6 1F1FF` (fully-qualified) should match `flag: Azerbaijan` (🇦🇿)" do
  "🇦🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇿"
end
it "`1F1E7 1F1E6` (fully-qualified) should match `flag: Bosnia & Herzegovina` (🇧🇦)" do
  "🇧🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇦"
end
it "`1F1E7 1F1E7` (fully-qualified) should match `flag: Barbados` (🇧🇧)" do
  "🇧🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇧"
end
it "`1F1E7 1F1E9` (fully-qualified) should match `flag: Bangladesh` (🇧🇩)" do
  "🇧🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇩"
end
it "`1F1E7 1F1EA` (fully-qualified) should match `flag: Belgium` (🇧🇪)" do
  "🇧🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇪"
end
it "`1F1E7 1F1EB` (fully-qualified) should match `flag: Burkina Faso` (🇧🇫)" do
  "🇧🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇫"
end
it "`1F1E7 1F1EC` (fully-qualified) should match `flag: Bulgaria` (🇧🇬)" do
  "🇧🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇬"
end
it "`1F1E7 1F1ED` (fully-qualified) should match `flag: Bahrain` (🇧🇭)" do
  "🇧🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇭"
end
it "`1F1E7 1F1EE` (fully-qualified) should match `flag: Burundi` (🇧🇮)" do
  "🇧🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇮"
end
it "`1F1E7 1F1EF` (fully-qualified) should match `flag: Benin` (🇧🇯)" do
  "🇧🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇯"
end
it "`1F1E7 1F1F1` (fully-qualified) should match `flag: St. Barthélemy` (🇧🇱)" do
  "🇧🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇱"
end
it "`1F1E7 1F1F2` (fully-qualified) should match `flag: Bermuda` (🇧🇲)" do
  "🇧🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇲"
end
it "`1F1E7 1F1F3` (fully-qualified) should match `flag: Brunei` (🇧🇳)" do
  "🇧🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇳"
end
it "`1F1E7 1F1F4` (fully-qualified) should match `flag: Bolivia` (🇧🇴)" do
  "🇧🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇴"
end
it "`1F1E7 1F1F6` (fully-qualified) should match `flag: Caribbean Netherlands` (🇧🇶)" do
  "🇧🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇶"
end
it "`1F1E7 1F1F7` (fully-qualified) should match `flag: Brazil` (🇧🇷)" do
  "🇧🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇷"
end
it "`1F1E7 1F1F8` (fully-qualified) should match `flag: Bahamas` (🇧🇸)" do
  "🇧🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇸"
end
it "`1F1E7 1F1F9` (fully-qualified) should match `flag: Bhutan` (🇧🇹)" do
  "🇧🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇹"
end
it "`1F1E7 1F1FB` (fully-qualified) should match `flag: Bouvet Island` (🇧🇻)" do
  "🇧🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇻"
end
it "`1F1E7 1F1FC` (fully-qualified) should match `flag: Botswana` (🇧🇼)" do
  "🇧🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇼"
end
it "`1F1E7 1F1FE` (fully-qualified) should match `flag: Belarus` (🇧🇾)" do
  "🇧🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇾"
end
it "`1F1E7 1F1FF` (fully-qualified) should match `flag: Belize` (🇧🇿)" do
  "🇧🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇿"
end
it "`1F1E8 1F1E6` (fully-qualified) should match `flag: Canada` (🇨🇦)" do
  "🇨🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇦"
end
it "`1F1E8 1F1E8` (fully-qualified) should match `flag: Cocos (Keeling) Islands` (🇨🇨)" do
  "🇨🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇨"
end
it "`1F1E8 1F1E9` (fully-qualified) should match `flag: Congo - Kinshasa` (🇨🇩)" do
  "🇨🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇩"
end
it "`1F1E8 1F1EB` (fully-qualified) should match `flag: Central African Republic` (🇨🇫)" do
  "🇨🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇫"
end
it "`1F1E8 1F1EC` (fully-qualified) should match `flag: Congo - Brazzaville` (🇨🇬)" do
  "🇨🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇬"
end
it "`1F1E8 1F1ED` (fully-qualified) should match `flag: Switzerland` (🇨🇭)" do
  "🇨🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇭"
end
it "`1F1E8 1F1EE` (fully-qualified) should match `flag: Côte d’Ivoire` (🇨🇮)" do
  "🇨🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇮"
end
it "`1F1E8 1F1F0` (fully-qualified) should match `flag: Cook Islands` (🇨🇰)" do
  "🇨🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇰"
end
it "`1F1E8 1F1F1` (fully-qualified) should match `flag: Chile` (🇨🇱)" do
  "🇨🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇱"
end
it "`1F1E8 1F1F2` (fully-qualified) should match `flag: Cameroon` (🇨🇲)" do
  "🇨🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇲"
end
it "`1F1E8 1F1F3` (fully-qualified) should match `flag: China` (🇨🇳)" do
  "🇨🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇳"
end
it "`1F1E8 1F1F4` (fully-qualified) should match `flag: Colombia` (🇨🇴)" do
  "🇨🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇴"
end
it "`1F1E8 1F1F5` (fully-qualified) should match `flag: Clipperton Island` (🇨🇵)" do
  "🇨🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇵"
end
it "`1F1E8 1F1F7` (fully-qualified) should match `flag: Costa Rica` (🇨🇷)" do
  "🇨🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇷"
end
it "`1F1E8 1F1FA` (fully-qualified) should match `flag: Cuba` (🇨🇺)" do
  "🇨🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇺"
end
it "`1F1E8 1F1FB` (fully-qualified) should match `flag: Cape Verde` (🇨🇻)" do
  "🇨🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇻"
end
it "`1F1E8 1F1FC` (fully-qualified) should match `flag: Curaçao` (🇨🇼)" do
  "🇨🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇼"
end
it "`1F1E8 1F1FD` (fully-qualified) should match `flag: Christmas Island` (🇨🇽)" do
  "🇨🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇽"
end
it "`1F1E8 1F1FE` (fully-qualified) should match `flag: Cyprus` (🇨🇾)" do
  "🇨🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇾"
end
it "`1F1E8 1F1FF` (fully-qualified) should match `flag: Czechia` (🇨🇿)" do
  "🇨🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇿"
end
it "`1F1E9 1F1EA` (fully-qualified) should match `flag: Germany` (🇩🇪)" do
  "🇩🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇪"
end
it "`1F1E9 1F1EC` (fully-qualified) should match `flag: Diego Garcia` (🇩🇬)" do
  "🇩🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇬"
end
it "`1F1E9 1F1EF` (fully-qualified) should match `flag: Djibouti` (🇩🇯)" do
  "🇩🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇯"
end
it "`1F1E9 1F1F0` (fully-qualified) should match `flag: Denmark` (🇩🇰)" do
  "🇩🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇰"
end
it "`1F1E9 1F1F2` (fully-qualified) should match `flag: Dominica` (🇩🇲)" do
  "🇩🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇲"
end
it "`1F1E9 1F1F4` (fully-qualified) should match `flag: Dominican Republic` (🇩🇴)" do
  "🇩🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇴"
end
it "`1F1E9 1F1FF` (fully-qualified) should match `flag: Algeria` (🇩🇿)" do
  "🇩🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇿"
end
it "`1F1EA 1F1E6` (fully-qualified) should match `flag: Ceuta & Melilla` (🇪🇦)" do
  "🇪🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇦"
end
it "`1F1EA 1F1E8` (fully-qualified) should match `flag: Ecuador` (🇪🇨)" do
  "🇪🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇨"
end
it "`1F1EA 1F1EA` (fully-qualified) should match `flag: Estonia` (🇪🇪)" do
  "🇪🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇪"
end
it "`1F1EA 1F1EC` (fully-qualified) should match `flag: Egypt` (🇪🇬)" do
  "🇪🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇬"
end
it "`1F1EA 1F1ED` (fully-qualified) should match `flag: Western Sahara` (🇪🇭)" do
  "🇪🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇭"
end
it "`1F1EA 1F1F7` (fully-qualified) should match `flag: Eritrea` (🇪🇷)" do
  "🇪🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇷"
end
it "`1F1EA 1F1F8` (fully-qualified) should match `flag: Spain` (🇪🇸)" do
  "🇪🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇸"
end
it "`1F1EA 1F1F9` (fully-qualified) should match `flag: Ethiopia` (🇪🇹)" do
  "🇪🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇹"
end
it "`1F1EA 1F1FA` (fully-qualified) should match `flag: European Union` (🇪🇺)" do
  "🇪🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇺"
end
it "`1F1EB 1F1EE` (fully-qualified) should match `flag: Finland` (🇫🇮)" do
  "🇫🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇮"
end
it "`1F1EB 1F1EF` (fully-qualified) should match `flag: Fiji` (🇫🇯)" do
  "🇫🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇯"
end
it "`1F1EB 1F1F0` (fully-qualified) should match `flag: Falkland Islands` (🇫🇰)" do
  "🇫🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇰"
end
it "`1F1EB 1F1F2` (fully-qualified) should match `flag: Micronesia` (🇫🇲)" do
  "🇫🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇲"
end
it "`1F1EB 1F1F4` (fully-qualified) should match `flag: Faroe Islands` (🇫🇴)" do
  "🇫🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇴"
end
it "`1F1EB 1F1F7` (fully-qualified) should match `flag: France` (🇫🇷)" do
  "🇫🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇷"
end
it "`1F1EC 1F1E6` (fully-qualified) should match `flag: Gabon` (🇬🇦)" do
  "🇬🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇦"
end
it "`1F1EC 1F1E7` (fully-qualified) should match `flag: United Kingdom` (🇬🇧)" do
  "🇬🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇧"
end
it "`1F1EC 1F1E9` (fully-qualified) should match `flag: Grenada` (🇬🇩)" do
  "🇬🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇩"
end
it "`1F1EC 1F1EA` (fully-qualified) should match `flag: Georgia` (🇬🇪)" do
  "🇬🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇪"
end
it "`1F1EC 1F1EB` (fully-qualified) should match `flag: French Guiana` (🇬🇫)" do
  "🇬🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇫"
end
it "`1F1EC 1F1EC` (fully-qualified) should match `flag: Guernsey` (🇬🇬)" do
  "🇬🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇬"
end
it "`1F1EC 1F1ED` (fully-qualified) should match `flag: Ghana` (🇬🇭)" do
  "🇬🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇭"
end
it "`1F1EC 1F1EE` (fully-qualified) should match `flag: Gibraltar` (🇬🇮)" do
  "🇬🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇮"
end
it "`1F1EC 1F1F1` (fully-qualified) should match `flag: Greenland` (🇬🇱)" do
  "🇬🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇱"
end
it "`1F1EC 1F1F2` (fully-qualified) should match `flag: Gambia` (🇬🇲)" do
  "🇬🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇲"
end
it "`1F1EC 1F1F3` (fully-qualified) should match `flag: Guinea` (🇬🇳)" do
  "🇬🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇳"
end
it "`1F1EC 1F1F5` (fully-qualified) should match `flag: Guadeloupe` (🇬🇵)" do
  "🇬🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇵"
end
it "`1F1EC 1F1F6` (fully-qualified) should match `flag: Equatorial Guinea` (🇬🇶)" do
  "🇬🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇶"
end
it "`1F1EC 1F1F7` (fully-qualified) should match `flag: Greece` (🇬🇷)" do
  "🇬🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇷"
end
it "`1F1EC 1F1F8` (fully-qualified) should match `flag: South Georgia & South Sandwich Islands` (🇬🇸)" do
  "🇬🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇸"
end
it "`1F1EC 1F1F9` (fully-qualified) should match `flag: Guatemala` (🇬🇹)" do
  "🇬🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇹"
end
it "`1F1EC 1F1FA` (fully-qualified) should match `flag: Guam` (🇬🇺)" do
  "🇬🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇺"
end
it "`1F1EC 1F1FC` (fully-qualified) should match `flag: Guinea-Bissau` (🇬🇼)" do
  "🇬🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇼"
end
it "`1F1EC 1F1FE` (fully-qualified) should match `flag: Guyana` (🇬🇾)" do
  "🇬🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇾"
end
it "`1F1ED 1F1F0` (fully-qualified) should match `flag: Hong Kong SAR China` (🇭🇰)" do
  "🇭🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇰"
end
it "`1F1ED 1F1F2` (fully-qualified) should match `flag: Heard & McDonald Islands` (🇭🇲)" do
  "🇭🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇲"
end
it "`1F1ED 1F1F3` (fully-qualified) should match `flag: Honduras` (🇭🇳)" do
  "🇭🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇳"
end
it "`1F1ED 1F1F7` (fully-qualified) should match `flag: Croatia` (🇭🇷)" do
  "🇭🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇷"
end
it "`1F1ED 1F1F9` (fully-qualified) should match `flag: Haiti` (🇭🇹)" do
  "🇭🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇹"
end
it "`1F1ED 1F1FA` (fully-qualified) should match `flag: Hungary` (🇭🇺)" do
  "🇭🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇺"
end
it "`1F1EE 1F1E8` (fully-qualified) should match `flag: Canary Islands` (🇮🇨)" do
  "🇮🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇨"
end
it "`1F1EE 1F1E9` (fully-qualified) should match `flag: Indonesia` (🇮🇩)" do
  "🇮🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇩"
end
it "`1F1EE 1F1EA` (fully-qualified) should match `flag: Ireland` (🇮🇪)" do
  "🇮🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇪"
end
it "`1F1EE 1F1F1` (fully-qualified) should match `flag: Israel` (🇮🇱)" do
  "🇮🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇱"
end
it "`1F1EE 1F1F2` (fully-qualified) should match `flag: Isle of Man` (🇮🇲)" do
  "🇮🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇲"
end
it "`1F1EE 1F1F3` (fully-qualified) should match `flag: India` (🇮🇳)" do
  "🇮🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇳"
end
it "`1F1EE 1F1F4` (fully-qualified) should match `flag: British Indian Ocean Territory` (🇮🇴)" do
  "🇮🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇴"
end
it "`1F1EE 1F1F6` (fully-qualified) should match `flag: Iraq` (🇮🇶)" do
  "🇮🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇶"
end
it "`1F1EE 1F1F7` (fully-qualified) should match `flag: Iran` (🇮🇷)" do
  "🇮🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇷"
end
it "`1F1EE 1F1F8` (fully-qualified) should match `flag: Iceland` (🇮🇸)" do
  "🇮🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇸"
end
it "`1F1EE 1F1F9` (fully-qualified) should match `flag: Italy` (🇮🇹)" do
  "🇮🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇹"
end
it "`1F1EF 1F1EA` (fully-qualified) should match `flag: Jersey` (🇯🇪)" do
  "🇯🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇪"
end
it "`1F1EF 1F1F2` (fully-qualified) should match `flag: Jamaica` (🇯🇲)" do
  "🇯🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇲"
end
it "`1F1EF 1F1F4` (fully-qualified) should match `flag: Jordan` (🇯🇴)" do
  "🇯🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇴"
end
it "`1F1EF 1F1F5` (fully-qualified) should match `flag: Japan` (🇯🇵)" do
  "🇯🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇵"
end
it "`1F1F0 1F1EA` (fully-qualified) should match `flag: Kenya` (🇰🇪)" do
  "🇰🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇪"
end
it "`1F1F0 1F1EC` (fully-qualified) should match `flag: Kyrgyzstan` (🇰🇬)" do
  "🇰🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇬"
end
it "`1F1F0 1F1ED` (fully-qualified) should match `flag: Cambodia` (🇰🇭)" do
  "🇰🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇭"
end
it "`1F1F0 1F1EE` (fully-qualified) should match `flag: Kiribati` (🇰🇮)" do
  "🇰🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇮"
end
it "`1F1F0 1F1F2` (fully-qualified) should match `flag: Comoros` (🇰🇲)" do
  "🇰🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇲"
end
it "`1F1F0 1F1F3` (fully-qualified) should match `flag: St. Kitts & Nevis` (🇰🇳)" do
  "🇰🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇳"
end
it "`1F1F0 1F1F5` (fully-qualified) should match `flag: North Korea` (🇰🇵)" do
  "🇰🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇵"
end
it "`1F1F0 1F1F7` (fully-qualified) should match `flag: South Korea` (🇰🇷)" do
  "🇰🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇷"
end
it "`1F1F0 1F1FC` (fully-qualified) should match `flag: Kuwait` (🇰🇼)" do
  "🇰🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇼"
end
it "`1F1F0 1F1FE` (fully-qualified) should match `flag: Cayman Islands` (🇰🇾)" do
  "🇰🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇾"
end
it "`1F1F0 1F1FF` (fully-qualified) should match `flag: Kazakhstan` (🇰🇿)" do
  "🇰🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇿"
end
it "`1F1F1 1F1E6` (fully-qualified) should match `flag: Laos` (🇱🇦)" do
  "🇱🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇦"
end
it "`1F1F1 1F1E7` (fully-qualified) should match `flag: Lebanon` (🇱🇧)" do
  "🇱🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇧"
end
it "`1F1F1 1F1E8` (fully-qualified) should match `flag: St. Lucia` (🇱🇨)" do
  "🇱🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇨"
end
it "`1F1F1 1F1EE` (fully-qualified) should match `flag: Liechtenstein` (🇱🇮)" do
  "🇱🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇮"
end
it "`1F1F1 1F1F0` (fully-qualified) should match `flag: Sri Lanka` (🇱🇰)" do
  "🇱🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇰"
end
it "`1F1F1 1F1F7` (fully-qualified) should match `flag: Liberia` (🇱🇷)" do
  "🇱🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇷"
end
it "`1F1F1 1F1F8` (fully-qualified) should match `flag: Lesotho` (🇱🇸)" do
  "🇱🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇸"
end
it "`1F1F1 1F1F9` (fully-qualified) should match `flag: Lithuania` (🇱🇹)" do
  "🇱🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇹"
end
it "`1F1F1 1F1FA` (fully-qualified) should match `flag: Luxembourg` (🇱🇺)" do
  "🇱🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇺"
end
it "`1F1F1 1F1FB` (fully-qualified) should match `flag: Latvia` (🇱🇻)" do
  "🇱🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇻"
end
it "`1F1F1 1F1FE` (fully-qualified) should match `flag: Libya` (🇱🇾)" do
  "🇱🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇾"
end
it "`1F1F2 1F1E6` (fully-qualified) should match `flag: Morocco` (🇲🇦)" do
  "🇲🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇦"
end
it "`1F1F2 1F1E8` (fully-qualified) should match `flag: Monaco` (🇲🇨)" do
  "🇲🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇨"
end
it "`1F1F2 1F1E9` (fully-qualified) should match `flag: Moldova` (🇲🇩)" do
  "🇲🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇩"
end
it "`1F1F2 1F1EA` (fully-qualified) should match `flag: Montenegro` (🇲🇪)" do
  "🇲🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇪"
end
it "`1F1F2 1F1EB` (fully-qualified) should match `flag: St. Martin` (🇲🇫)" do
  "🇲🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇫"
end
it "`1F1F2 1F1EC` (fully-qualified) should match `flag: Madagascar` (🇲🇬)" do
  "🇲🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇬"
end
it "`1F1F2 1F1ED` (fully-qualified) should match `flag: Marshall Islands` (🇲🇭)" do
  "🇲🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇭"
end
it "`1F1F2 1F1F0` (fully-qualified) should match `flag: Macedonia` (🇲🇰)" do
  "🇲🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇰"
end
it "`1F1F2 1F1F1` (fully-qualified) should match `flag: Mali` (🇲🇱)" do
  "🇲🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇱"
end
it "`1F1F2 1F1F2` (fully-qualified) should match `flag: Myanmar (Burma)` (🇲🇲)" do
  "🇲🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇲"
end
it "`1F1F2 1F1F3` (fully-qualified) should match `flag: Mongolia` (🇲🇳)" do
  "🇲🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇳"
end
it "`1F1F2 1F1F4` (fully-qualified) should match `flag: Macao SAR China` (🇲🇴)" do
  "🇲🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇴"
end
it "`1F1F2 1F1F5` (fully-qualified) should match `flag: Northern Mariana Islands` (🇲🇵)" do
  "🇲🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇵"
end
it "`1F1F2 1F1F6` (fully-qualified) should match `flag: Martinique` (🇲🇶)" do
  "🇲🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇶"
end
it "`1F1F2 1F1F7` (fully-qualified) should match `flag: Mauritania` (🇲🇷)" do
  "🇲🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇷"
end
it "`1F1F2 1F1F8` (fully-qualified) should match `flag: Montserrat` (🇲🇸)" do
  "🇲🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇸"
end
it "`1F1F2 1F1F9` (fully-qualified) should match `flag: Malta` (🇲🇹)" do
  "🇲🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇹"
end
it "`1F1F2 1F1FA` (fully-qualified) should match `flag: Mauritius` (🇲🇺)" do
  "🇲🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇺"
end
it "`1F1F2 1F1FB` (fully-qualified) should match `flag: Maldives` (🇲🇻)" do
  "🇲🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇻"
end
it "`1F1F2 1F1FC` (fully-qualified) should match `flag: Malawi` (🇲🇼)" do
  "🇲🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇼"
end
it "`1F1F2 1F1FD` (fully-qualified) should match `flag: Mexico` (🇲🇽)" do
  "🇲🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇽"
end
it "`1F1F2 1F1FE` (fully-qualified) should match `flag: Malaysia` (🇲🇾)" do
  "🇲🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇾"
end
it "`1F1F2 1F1FF` (fully-qualified) should match `flag: Mozambique` (🇲🇿)" do
  "🇲🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇿"
end
it "`1F1F3 1F1E6` (fully-qualified) should match `flag: Namibia` (🇳🇦)" do
  "🇳🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇦"
end
it "`1F1F3 1F1E8` (fully-qualified) should match `flag: New Caledonia` (🇳🇨)" do
  "🇳🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇨"
end
it "`1F1F3 1F1EA` (fully-qualified) should match `flag: Niger` (🇳🇪)" do
  "🇳🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇪"
end
it "`1F1F3 1F1EB` (fully-qualified) should match `flag: Norfolk Island` (🇳🇫)" do
  "🇳🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇫"
end
it "`1F1F3 1F1EC` (fully-qualified) should match `flag: Nigeria` (🇳🇬)" do
  "🇳🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇬"
end
it "`1F1F3 1F1EE` (fully-qualified) should match `flag: Nicaragua` (🇳🇮)" do
  "🇳🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇮"
end
it "`1F1F3 1F1F1` (fully-qualified) should match `flag: Netherlands` (🇳🇱)" do
  "🇳🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇱"
end
it "`1F1F3 1F1F4` (fully-qualified) should match `flag: Norway` (🇳🇴)" do
  "🇳🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇴"
end
it "`1F1F3 1F1F5` (fully-qualified) should match `flag: Nepal` (🇳🇵)" do
  "🇳🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇵"
end
it "`1F1F3 1F1F7` (fully-qualified) should match `flag: Nauru` (🇳🇷)" do
  "🇳🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇷"
end
it "`1F1F3 1F1FA` (fully-qualified) should match `flag: Niue` (🇳🇺)" do
  "🇳🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇺"
end
it "`1F1F3 1F1FF` (fully-qualified) should match `flag: New Zealand` (🇳🇿)" do
  "🇳🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇿"
end
it "`1F1F4 1F1F2` (fully-qualified) should match `flag: Oman` (🇴🇲)" do
  "🇴🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇴🇲"
end
it "`1F1F5 1F1E6` (fully-qualified) should match `flag: Panama` (🇵🇦)" do
  "🇵🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇦"
end
it "`1F1F5 1F1EA` (fully-qualified) should match `flag: Peru` (🇵🇪)" do
  "🇵🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇪"
end
it "`1F1F5 1F1EB` (fully-qualified) should match `flag: French Polynesia` (🇵🇫)" do
  "🇵🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇫"
end
it "`1F1F5 1F1EC` (fully-qualified) should match `flag: Papua New Guinea` (🇵🇬)" do
  "🇵🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇬"
end
it "`1F1F5 1F1ED` (fully-qualified) should match `flag: Philippines` (🇵🇭)" do
  "🇵🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇭"
end
it "`1F1F5 1F1F0` (fully-qualified) should match `flag: Pakistan` (🇵🇰)" do
  "🇵🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇰"
end
it "`1F1F5 1F1F1` (fully-qualified) should match `flag: Poland` (🇵🇱)" do
  "🇵🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇱"
end
it "`1F1F5 1F1F2` (fully-qualified) should match `flag: St. Pierre & Miquelon` (🇵🇲)" do
  "🇵🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇲"
end
it "`1F1F5 1F1F3` (fully-qualified) should match `flag: Pitcairn Islands` (🇵🇳)" do
  "🇵🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇳"
end
it "`1F1F5 1F1F7` (fully-qualified) should match `flag: Puerto Rico` (🇵🇷)" do
  "🇵🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇷"
end
it "`1F1F5 1F1F8` (fully-qualified) should match `flag: Palestinian Territories` (🇵🇸)" do
  "🇵🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇸"
end
it "`1F1F5 1F1F9` (fully-qualified) should match `flag: Portugal` (🇵🇹)" do
  "🇵🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇹"
end
it "`1F1F5 1F1FC` (fully-qualified) should match `flag: Palau` (🇵🇼)" do
  "🇵🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇼"
end
it "`1F1F5 1F1FE` (fully-qualified) should match `flag: Paraguay` (🇵🇾)" do
  "🇵🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇾"
end
it "`1F1F6 1F1E6` (fully-qualified) should match `flag: Qatar` (🇶🇦)" do
  "🇶🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇶🇦"
end
it "`1F1F7 1F1EA` (fully-qualified) should match `flag: Réunion` (🇷🇪)" do
  "🇷🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇪"
end
it "`1F1F7 1F1F4` (fully-qualified) should match `flag: Romania` (🇷🇴)" do
  "🇷🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇴"
end
it "`1F1F7 1F1F8` (fully-qualified) should match `flag: Serbia` (🇷🇸)" do
  "🇷🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇸"
end
it "`1F1F7 1F1FA` (fully-qualified) should match `flag: Russia` (🇷🇺)" do
  "🇷🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇺"
end
it "`1F1F7 1F1FC` (fully-qualified) should match `flag: Rwanda` (🇷🇼)" do
  "🇷🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇼"
end
it "`1F1F8 1F1E6` (fully-qualified) should match `flag: Saudi Arabia` (🇸🇦)" do
  "🇸🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇦"
end
it "`1F1F8 1F1E7` (fully-qualified) should match `flag: Solomon Islands` (🇸🇧)" do
  "🇸🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇧"
end
it "`1F1F8 1F1E8` (fully-qualified) should match `flag: Seychelles` (🇸🇨)" do
  "🇸🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇨"
end
it "`1F1F8 1F1E9` (fully-qualified) should match `flag: Sudan` (🇸🇩)" do
  "🇸🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇩"
end
it "`1F1F8 1F1EA` (fully-qualified) should match `flag: Sweden` (🇸🇪)" do
  "🇸🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇪"
end
it "`1F1F8 1F1EC` (fully-qualified) should match `flag: Singapore` (🇸🇬)" do
  "🇸🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇬"
end
it "`1F1F8 1F1ED` (fully-qualified) should match `flag: St. Helena` (🇸🇭)" do
  "🇸🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇭"
end
it "`1F1F8 1F1EE` (fully-qualified) should match `flag: Slovenia` (🇸🇮)" do
  "🇸🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇮"
end
it "`1F1F8 1F1EF` (fully-qualified) should match `flag: Svalbard & Jan Mayen` (🇸🇯)" do
  "🇸🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇯"
end
it "`1F1F8 1F1F0` (fully-qualified) should match `flag: Slovakia` (🇸🇰)" do
  "🇸🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇰"
end
it "`1F1F8 1F1F1` (fully-qualified) should match `flag: Sierra Leone` (🇸🇱)" do
  "🇸🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇱"
end
it "`1F1F8 1F1F2` (fully-qualified) should match `flag: San Marino` (🇸🇲)" do
  "🇸🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇲"
end
it "`1F1F8 1F1F3` (fully-qualified) should match `flag: Senegal` (🇸🇳)" do
  "🇸🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇳"
end
it "`1F1F8 1F1F4` (fully-qualified) should match `flag: Somalia` (🇸🇴)" do
  "🇸🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇴"
end
it "`1F1F8 1F1F7` (fully-qualified) should match `flag: Suriname` (🇸🇷)" do
  "🇸🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇷"
end
it "`1F1F8 1F1F8` (fully-qualified) should match `flag: South Sudan` (🇸🇸)" do
  "🇸🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇸"
end
it "`1F1F8 1F1F9` (fully-qualified) should match `flag: São Tomé & Príncipe` (🇸🇹)" do
  "🇸🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇹"
end
it "`1F1F8 1F1FB` (fully-qualified) should match `flag: El Salvador` (🇸🇻)" do
  "🇸🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇻"
end
it "`1F1F8 1F1FD` (fully-qualified) should match `flag: Sint Maarten` (🇸🇽)" do
  "🇸🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇽"
end
it "`1F1F8 1F1FE` (fully-qualified) should match `flag: Syria` (🇸🇾)" do
  "🇸🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇾"
end
it "`1F1F8 1F1FF` (fully-qualified) should match `flag: Eswatini` (🇸🇿)" do
  "🇸🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇿"
end
it "`1F1F9 1F1E6` (fully-qualified) should match `flag: Tristan da Cunha` (🇹🇦)" do
  "🇹🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇦"
end
it "`1F1F9 1F1E8` (fully-qualified) should match `flag: Turks & Caicos Islands` (🇹🇨)" do
  "🇹🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇨"
end
it "`1F1F9 1F1E9` (fully-qualified) should match `flag: Chad` (🇹🇩)" do
  "🇹🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇩"
end
it "`1F1F9 1F1EB` (fully-qualified) should match `flag: French Southern Territories` (🇹🇫)" do
  "🇹🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇫"
end
it "`1F1F9 1F1EC` (fully-qualified) should match `flag: Togo` (🇹🇬)" do
  "🇹🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇬"
end
it "`1F1F9 1F1ED` (fully-qualified) should match `flag: Thailand` (🇹🇭)" do
  "🇹🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇭"
end
it "`1F1F9 1F1EF` (fully-qualified) should match `flag: Tajikistan` (🇹🇯)" do
  "🇹🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇯"
end
it "`1F1F9 1F1F0` (fully-qualified) should match `flag: Tokelau` (🇹🇰)" do
  "🇹🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇰"
end
it "`1F1F9 1F1F1` (fully-qualified) should match `flag: Timor-Leste` (🇹🇱)" do
  "🇹🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇱"
end
it "`1F1F9 1F1F2` (fully-qualified) should match `flag: Turkmenistan` (🇹🇲)" do
  "🇹🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇲"
end
it "`1F1F9 1F1F3` (fully-qualified) should match `flag: Tunisia` (🇹🇳)" do
  "🇹🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇳"
end
it "`1F1F9 1F1F4` (fully-qualified) should match `flag: Tonga` (🇹🇴)" do
  "🇹🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇴"
end
it "`1F1F9 1F1F7` (fully-qualified) should match `flag: Turkey` (🇹🇷)" do
  "🇹🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇷"
end
it "`1F1F9 1F1F9` (fully-qualified) should match `flag: Trinidad & Tobago` (🇹🇹)" do
  "🇹🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇹"
end
it "`1F1F9 1F1FB` (fully-qualified) should match `flag: Tuvalu` (🇹🇻)" do
  "🇹🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇻"
end
it "`1F1F9 1F1FC` (fully-qualified) should match `flag: Taiwan` (🇹🇼)" do
  "🇹🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇼"
end
it "`1F1F9 1F1FF` (fully-qualified) should match `flag: Tanzania` (🇹🇿)" do
  "🇹🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇿"
end
it "`1F1FA 1F1E6` (fully-qualified) should match `flag: Ukraine` (🇺🇦)" do
  "🇺🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇦"
end
it "`1F1FA 1F1EC` (fully-qualified) should match `flag: Uganda` (🇺🇬)" do
  "🇺🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇬"
end
it "`1F1FA 1F1F2` (fully-qualified) should match `flag: U.S. Outlying Islands` (🇺🇲)" do
  "🇺🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇲"
end
it "`1F1FA 1F1F3` (fully-qualified) should match `flag: United Nations` (🇺🇳)" do
  "🇺🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇳"
end
it "`1F1FA 1F1F8` (fully-qualified) should match `flag: United States` (🇺🇸)" do
  "🇺🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇸"
end
it "`1F1FA 1F1FE` (fully-qualified) should match `flag: Uruguay` (🇺🇾)" do
  "🇺🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇾"
end
it "`1F1FA 1F1FF` (fully-qualified) should match `flag: Uzbekistan` (🇺🇿)" do
  "🇺🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇿"
end
it "`1F1FB 1F1E6` (fully-qualified) should match `flag: Vatican City` (🇻🇦)" do
  "🇻🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇦"
end
it "`1F1FB 1F1E8` (fully-qualified) should match `flag: St. Vincent & Grenadines` (🇻🇨)" do
  "🇻🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇨"
end
it "`1F1FB 1F1EA` (fully-qualified) should match `flag: Venezuela` (🇻🇪)" do
  "🇻🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇪"
end
it "`1F1FB 1F1EC` (fully-qualified) should match `flag: British Virgin Islands` (🇻🇬)" do
  "🇻🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇬"
end
it "`1F1FB 1F1EE` (fully-qualified) should match `flag: U.S. Virgin Islands` (🇻🇮)" do
  "🇻🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇮"
end
it "`1F1FB 1F1F3` (fully-qualified) should match `flag: Vietnam` (🇻🇳)" do
  "🇻🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇳"
end
it "`1F1FB 1F1FA` (fully-qualified) should match `flag: Vanuatu` (🇻🇺)" do
  "🇻🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇺"
end
it "`1F1FC 1F1EB` (fully-qualified) should match `flag: Wallis & Futuna` (🇼🇫)" do
  "🇼🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇼🇫"
end
it "`1F1FC 1F1F8` (fully-qualified) should match `flag: Samoa` (🇼🇸)" do
  "🇼🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇼🇸"
end
it "`1F1FD 1F1F0` (fully-qualified) should match `flag: Kosovo` (🇽🇰)" do
  "🇽🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇽🇰"
end
it "`1F1FE 1F1EA` (fully-qualified) should match `flag: Yemen` (🇾🇪)" do
  "🇾🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇾🇪"
end
it "`1F1FE 1F1F9` (fully-qualified) should match `flag: Mayotte` (🇾🇹)" do
  "🇾🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇾🇹"
end
it "`1F1FF 1F1E6` (fully-qualified) should match `flag: South Africa` (🇿🇦)" do
  "🇿🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇿🇦"
end
it "`1F1FF 1F1F2` (fully-qualified) should match `flag: Zambia` (🇿🇲)" do
  "🇿🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇿🇲"
end
it "`1F1FF 1F1FC` (fully-qualified) should match `flag: Zimbabwe` (🇿🇼)" do
  "🇿🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇿🇼"
end
it "`1F3F4 E0067 E0062 E0065 E006E E0067 E007F` (fully-qualified) should match `flag: England` (🏴󠁧󠁢󠁥󠁮󠁧󠁿)" do
  "🏴󠁧󠁢󠁥󠁮󠁧󠁿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴󠁧󠁢󠁥󠁮󠁧󠁿"
end
it "`1F3F4 E0067 E0062 E0073 E0063 E0074 E007F` (fully-qualified) should match `flag: Scotland` (🏴󠁧󠁢󠁳󠁣󠁴󠁿)" do
  "🏴󠁧󠁢󠁳󠁣󠁴󠁿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴󠁧󠁢󠁳󠁣󠁴󠁿"
end
it "`1F3F4 E0067 E0062 E0077 E006C E0073 E007F` (fully-qualified) should match `flag: Wales` (🏴󠁧󠁢󠁷󠁬󠁳󠁿)" do
  "🏴󠁧󠁢󠁷󠁬󠁳󠁿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴󠁧󠁢󠁷󠁬󠁳󠁿"
end
