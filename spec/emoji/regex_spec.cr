# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT !

require "../spec_helper"

it "`1F600` (fully-qualified) should match `grinning face` (😀)" do
  if m = "😀".match(Emoji::EMOJI_REGEX)
    "😀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😀"
  else
    fail("`1F600` doesn't match `grinning face` (😀)")
  end
end

it "`1F603` (fully-qualified) should match `grinning face with big eyes` (😃)" do
  if m = "😃".match(Emoji::EMOJI_REGEX)
    "😃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😃"
  else
    fail("`1F603` doesn't match `grinning face with big eyes` (😃)")
  end
end

it "`1F604` (fully-qualified) should match `grinning face with smiling eyes` (😄)" do
  if m = "😄".match(Emoji::EMOJI_REGEX)
    "😄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😄"
  else
    fail("`1F604` doesn't match `grinning face with smiling eyes` (😄)")
  end
end

it "`1F601` (fully-qualified) should match `beaming face with smiling eyes` (😁)" do
  if m = "😁".match(Emoji::EMOJI_REGEX)
    "😁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😁"
  else
    fail("`1F601` doesn't match `beaming face with smiling eyes` (😁)")
  end
end

it "`1F606` (fully-qualified) should match `grinning squinting face` (😆)" do
  if m = "😆".match(Emoji::EMOJI_REGEX)
    "😆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😆"
  else
    fail("`1F606` doesn't match `grinning squinting face` (😆)")
  end
end

it "`1F605` (fully-qualified) should match `grinning face with sweat` (😅)" do
  if m = "😅".match(Emoji::EMOJI_REGEX)
    "😅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😅"
  else
    fail("`1F605` doesn't match `grinning face with sweat` (😅)")
  end
end

it "`1F923` (fully-qualified) should match `rolling on the floor laughing` (🤣)" do
  if m = "🤣".match(Emoji::EMOJI_REGEX)
    "🤣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤣"
  else
    fail("`1F923` doesn't match `rolling on the floor laughing` (🤣)")
  end
end

it "`1F602` (fully-qualified) should match `face with tears of joy` (😂)" do
  if m = "😂".match(Emoji::EMOJI_REGEX)
    "😂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😂"
  else
    fail("`1F602` doesn't match `face with tears of joy` (😂)")
  end
end

it "`1F642` (fully-qualified) should match `slightly smiling face` (🙂)" do
  if m = "🙂".match(Emoji::EMOJI_REGEX)
    "🙂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙂"
  else
    fail("`1F642` doesn't match `slightly smiling face` (🙂)")
  end
end

it "`1F643` (fully-qualified) should match `upside-down face` (🙃)" do
  if m = "🙃".match(Emoji::EMOJI_REGEX)
    "🙃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙃"
  else
    fail("`1F643` doesn't match `upside-down face` (🙃)")
  end
end

it "`1F609` (fully-qualified) should match `winking face` (😉)" do
  if m = "😉".match(Emoji::EMOJI_REGEX)
    "😉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😉"
  else
    fail("`1F609` doesn't match `winking face` (😉)")
  end
end

it "`1F60A` (fully-qualified) should match `smiling face with smiling eyes` (😊)" do
  if m = "😊".match(Emoji::EMOJI_REGEX)
    "😊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😊"
  else
    fail("`1F60A` doesn't match `smiling face with smiling eyes` (😊)")
  end
end

it "`1F607` (fully-qualified) should match `smiling face with halo` (😇)" do
  if m = "😇".match(Emoji::EMOJI_REGEX)
    "😇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😇"
  else
    fail("`1F607` doesn't match `smiling face with halo` (😇)")
  end
end

it "`1F970` (fully-qualified) should match `smiling face with hearts` (🥰)" do
  if m = "🥰".match(Emoji::EMOJI_REGEX)
    "🥰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥰"
  else
    fail("`1F970` doesn't match `smiling face with hearts` (🥰)")
  end
end

it "`1F60D` (fully-qualified) should match `smiling face with heart-eyes` (😍)" do
  if m = "😍".match(Emoji::EMOJI_REGEX)
    "😍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😍"
  else
    fail("`1F60D` doesn't match `smiling face with heart-eyes` (😍)")
  end
end

it "`1F929` (fully-qualified) should match `star-struck` (🤩)" do
  if m = "🤩".match(Emoji::EMOJI_REGEX)
    "🤩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤩"
  else
    fail("`1F929` doesn't match `star-struck` (🤩)")
  end
end

it "`1F618` (fully-qualified) should match `face blowing a kiss` (😘)" do
  if m = "😘".match(Emoji::EMOJI_REGEX)
    "😘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😘"
  else
    fail("`1F618` doesn't match `face blowing a kiss` (😘)")
  end
end

it "`1F617` (fully-qualified) should match `kissing face` (😗)" do
  if m = "😗".match(Emoji::EMOJI_REGEX)
    "😗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😗"
  else
    fail("`1F617` doesn't match `kissing face` (😗)")
  end
end

it "`263A FE0F` (fully-qualified) should match `smiling face` (☺️)" do
  if m = "☺️".match(Emoji::EMOJI_REGEX)
    "☺️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☺️"
  else
    fail("`263A FE0F` doesn't match `smiling face` (☺️)")
  end
end

it "`263A` (unqualified) should match `smiling face` (☺)" do
  if m = "☺".match(Emoji::EMOJI_REGEX)
    "☺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☺"
  else
    fail("`263A` doesn't match `smiling face` (☺)")
  end
end

it "`1F61A` (fully-qualified) should match `kissing face with closed eyes` (😚)" do
  if m = "😚".match(Emoji::EMOJI_REGEX)
    "😚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😚"
  else
    fail("`1F61A` doesn't match `kissing face with closed eyes` (😚)")
  end
end

it "`1F619` (fully-qualified) should match `kissing face with smiling eyes` (😙)" do
  if m = "😙".match(Emoji::EMOJI_REGEX)
    "😙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😙"
  else
    fail("`1F619` doesn't match `kissing face with smiling eyes` (😙)")
  end
end

it "`1F60B` (fully-qualified) should match `face savoring food` (😋)" do
  if m = "😋".match(Emoji::EMOJI_REGEX)
    "😋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😋"
  else
    fail("`1F60B` doesn't match `face savoring food` (😋)")
  end
end

it "`1F61B` (fully-qualified) should match `face with tongue` (😛)" do
  if m = "😛".match(Emoji::EMOJI_REGEX)
    "😛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😛"
  else
    fail("`1F61B` doesn't match `face with tongue` (😛)")
  end
end

it "`1F61C` (fully-qualified) should match `winking face with tongue` (😜)" do
  if m = "😜".match(Emoji::EMOJI_REGEX)
    "😜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😜"
  else
    fail("`1F61C` doesn't match `winking face with tongue` (😜)")
  end
end

it "`1F92A` (fully-qualified) should match `zany face` (🤪)" do
  if m = "🤪".match(Emoji::EMOJI_REGEX)
    "🤪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤪"
  else
    fail("`1F92A` doesn't match `zany face` (🤪)")
  end
end

it "`1F61D` (fully-qualified) should match `squinting face with tongue` (😝)" do
  if m = "😝".match(Emoji::EMOJI_REGEX)
    "😝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😝"
  else
    fail("`1F61D` doesn't match `squinting face with tongue` (😝)")
  end
end

it "`1F911` (fully-qualified) should match `money-mouth face` (🤑)" do
  if m = "🤑".match(Emoji::EMOJI_REGEX)
    "🤑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤑"
  else
    fail("`1F911` doesn't match `money-mouth face` (🤑)")
  end
end

it "`1F917` (fully-qualified) should match `hugging face` (🤗)" do
  if m = "🤗".match(Emoji::EMOJI_REGEX)
    "🤗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤗"
  else
    fail("`1F917` doesn't match `hugging face` (🤗)")
  end
end

it "`1F92D` (fully-qualified) should match `face with hand over mouth` (🤭)" do
  if m = "🤭".match(Emoji::EMOJI_REGEX)
    "🤭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤭"
  else
    fail("`1F92D` doesn't match `face with hand over mouth` (🤭)")
  end
end

it "`1F92B` (fully-qualified) should match `shushing face` (🤫)" do
  if m = "🤫".match(Emoji::EMOJI_REGEX)
    "🤫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤫"
  else
    fail("`1F92B` doesn't match `shushing face` (🤫)")
  end
end

it "`1F914` (fully-qualified) should match `thinking face` (🤔)" do
  if m = "🤔".match(Emoji::EMOJI_REGEX)
    "🤔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤔"
  else
    fail("`1F914` doesn't match `thinking face` (🤔)")
  end
end

it "`1F910` (fully-qualified) should match `zipper-mouth face` (🤐)" do
  if m = "🤐".match(Emoji::EMOJI_REGEX)
    "🤐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤐"
  else
    fail("`1F910` doesn't match `zipper-mouth face` (🤐)")
  end
end

it "`1F928` (fully-qualified) should match `face with raised eyebrow` (🤨)" do
  if m = "🤨".match(Emoji::EMOJI_REGEX)
    "🤨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤨"
  else
    fail("`1F928` doesn't match `face with raised eyebrow` (🤨)")
  end
end

it "`1F610` (fully-qualified) should match `neutral face` (😐)" do
  if m = "😐".match(Emoji::EMOJI_REGEX)
    "😐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😐"
  else
    fail("`1F610` doesn't match `neutral face` (😐)")
  end
end

it "`1F611` (fully-qualified) should match `expressionless face` (😑)" do
  if m = "😑".match(Emoji::EMOJI_REGEX)
    "😑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😑"
  else
    fail("`1F611` doesn't match `expressionless face` (😑)")
  end
end

it "`1F636` (fully-qualified) should match `face without mouth` (😶)" do
  if m = "😶".match(Emoji::EMOJI_REGEX)
    "😶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😶"
  else
    fail("`1F636` doesn't match `face without mouth` (😶)")
  end
end

it "`1F60F` (fully-qualified) should match `smirking face` (😏)" do
  if m = "😏".match(Emoji::EMOJI_REGEX)
    "😏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😏"
  else
    fail("`1F60F` doesn't match `smirking face` (😏)")
  end
end

it "`1F612` (fully-qualified) should match `unamused face` (😒)" do
  if m = "😒".match(Emoji::EMOJI_REGEX)
    "😒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😒"
  else
    fail("`1F612` doesn't match `unamused face` (😒)")
  end
end

it "`1F644` (fully-qualified) should match `face with rolling eyes` (🙄)" do
  if m = "🙄".match(Emoji::EMOJI_REGEX)
    "🙄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙄"
  else
    fail("`1F644` doesn't match `face with rolling eyes` (🙄)")
  end
end

it "`1F62C` (fully-qualified) should match `grimacing face` (😬)" do
  if m = "😬".match(Emoji::EMOJI_REGEX)
    "😬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😬"
  else
    fail("`1F62C` doesn't match `grimacing face` (😬)")
  end
end

it "`1F925` (fully-qualified) should match `lying face` (🤥)" do
  if m = "🤥".match(Emoji::EMOJI_REGEX)
    "🤥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤥"
  else
    fail("`1F925` doesn't match `lying face` (🤥)")
  end
end

it "`1F60C` (fully-qualified) should match `relieved face` (😌)" do
  if m = "😌".match(Emoji::EMOJI_REGEX)
    "😌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😌"
  else
    fail("`1F60C` doesn't match `relieved face` (😌)")
  end
end

it "`1F614` (fully-qualified) should match `pensive face` (😔)" do
  if m = "😔".match(Emoji::EMOJI_REGEX)
    "😔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😔"
  else
    fail("`1F614` doesn't match `pensive face` (😔)")
  end
end

it "`1F62A` (fully-qualified) should match `sleepy face` (😪)" do
  if m = "😪".match(Emoji::EMOJI_REGEX)
    "😪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😪"
  else
    fail("`1F62A` doesn't match `sleepy face` (😪)")
  end
end

it "`1F924` (fully-qualified) should match `drooling face` (🤤)" do
  if m = "🤤".match(Emoji::EMOJI_REGEX)
    "🤤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤤"
  else
    fail("`1F924` doesn't match `drooling face` (🤤)")
  end
end

it "`1F634` (fully-qualified) should match `sleeping face` (😴)" do
  if m = "😴".match(Emoji::EMOJI_REGEX)
    "😴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😴"
  else
    fail("`1F634` doesn't match `sleeping face` (😴)")
  end
end

it "`1F637` (fully-qualified) should match `face with medical mask` (😷)" do
  if m = "😷".match(Emoji::EMOJI_REGEX)
    "😷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😷"
  else
    fail("`1F637` doesn't match `face with medical mask` (😷)")
  end
end

it "`1F912` (fully-qualified) should match `face with thermometer` (🤒)" do
  if m = "🤒".match(Emoji::EMOJI_REGEX)
    "🤒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤒"
  else
    fail("`1F912` doesn't match `face with thermometer` (🤒)")
  end
end

it "`1F915` (fully-qualified) should match `face with head-bandage` (🤕)" do
  if m = "🤕".match(Emoji::EMOJI_REGEX)
    "🤕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤕"
  else
    fail("`1F915` doesn't match `face with head-bandage` (🤕)")
  end
end

it "`1F922` (fully-qualified) should match `nauseated face` (🤢)" do
  if m = "🤢".match(Emoji::EMOJI_REGEX)
    "🤢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤢"
  else
    fail("`1F922` doesn't match `nauseated face` (🤢)")
  end
end

it "`1F92E` (fully-qualified) should match `face vomiting` (🤮)" do
  if m = "🤮".match(Emoji::EMOJI_REGEX)
    "🤮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤮"
  else
    fail("`1F92E` doesn't match `face vomiting` (🤮)")
  end
end

it "`1F927` (fully-qualified) should match `sneezing face` (🤧)" do
  if m = "🤧".match(Emoji::EMOJI_REGEX)
    "🤧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤧"
  else
    fail("`1F927` doesn't match `sneezing face` (🤧)")
  end
end

it "`1F975` (fully-qualified) should match `hot face` (🥵)" do
  if m = "🥵".match(Emoji::EMOJI_REGEX)
    "🥵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥵"
  else
    fail("`1F975` doesn't match `hot face` (🥵)")
  end
end

it "`1F976` (fully-qualified) should match `cold face` (🥶)" do
  if m = "🥶".match(Emoji::EMOJI_REGEX)
    "🥶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥶"
  else
    fail("`1F976` doesn't match `cold face` (🥶)")
  end
end

it "`1F974` (fully-qualified) should match `woozy face` (🥴)" do
  if m = "🥴".match(Emoji::EMOJI_REGEX)
    "🥴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥴"
  else
    fail("`1F974` doesn't match `woozy face` (🥴)")
  end
end

it "`1F635` (fully-qualified) should match `dizzy face` (😵)" do
  if m = "😵".match(Emoji::EMOJI_REGEX)
    "😵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😵"
  else
    fail("`1F635` doesn't match `dizzy face` (😵)")
  end
end

it "`1F92F` (fully-qualified) should match `exploding head` (🤯)" do
  if m = "🤯".match(Emoji::EMOJI_REGEX)
    "🤯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤯"
  else
    fail("`1F92F` doesn't match `exploding head` (🤯)")
  end
end

it "`1F920` (fully-qualified) should match `cowboy hat face` (🤠)" do
  if m = "🤠".match(Emoji::EMOJI_REGEX)
    "🤠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤠"
  else
    fail("`1F920` doesn't match `cowboy hat face` (🤠)")
  end
end

it "`1F973` (fully-qualified) should match `partying face` (🥳)" do
  if m = "🥳".match(Emoji::EMOJI_REGEX)
    "🥳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥳"
  else
    fail("`1F973` doesn't match `partying face` (🥳)")
  end
end

it "`1F60E` (fully-qualified) should match `smiling face with sunglasses` (😎)" do
  if m = "😎".match(Emoji::EMOJI_REGEX)
    "😎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😎"
  else
    fail("`1F60E` doesn't match `smiling face with sunglasses` (😎)")
  end
end

it "`1F913` (fully-qualified) should match `nerd face` (🤓)" do
  if m = "🤓".match(Emoji::EMOJI_REGEX)
    "🤓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤓"
  else
    fail("`1F913` doesn't match `nerd face` (🤓)")
  end
end

it "`1F9D0` (fully-qualified) should match `face with monocle` (🧐)" do
  if m = "🧐".match(Emoji::EMOJI_REGEX)
    "🧐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧐"
  else
    fail("`1F9D0` doesn't match `face with monocle` (🧐)")
  end
end

it "`1F615` (fully-qualified) should match `confused face` (😕)" do
  if m = "😕".match(Emoji::EMOJI_REGEX)
    "😕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😕"
  else
    fail("`1F615` doesn't match `confused face` (😕)")
  end
end

it "`1F61F` (fully-qualified) should match `worried face` (😟)" do
  if m = "😟".match(Emoji::EMOJI_REGEX)
    "😟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😟"
  else
    fail("`1F61F` doesn't match `worried face` (😟)")
  end
end

it "`1F641` (fully-qualified) should match `slightly frowning face` (🙁)" do
  if m = "🙁".match(Emoji::EMOJI_REGEX)
    "🙁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙁"
  else
    fail("`1F641` doesn't match `slightly frowning face` (🙁)")
  end
end

it "`2639 FE0F` (fully-qualified) should match `frowning face` (☹️)" do
  if m = "☹️".match(Emoji::EMOJI_REGEX)
    "☹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☹️"
  else
    fail("`2639 FE0F` doesn't match `frowning face` (☹️)")
  end
end

it "`2639` (unqualified) should match `frowning face` (☹)" do
  if m = "☹".match(Emoji::EMOJI_REGEX)
    "☹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☹"
  else
    fail("`2639` doesn't match `frowning face` (☹)")
  end
end

it "`1F62E` (fully-qualified) should match `face with open mouth` (😮)" do
  if m = "😮".match(Emoji::EMOJI_REGEX)
    "😮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😮"
  else
    fail("`1F62E` doesn't match `face with open mouth` (😮)")
  end
end

it "`1F62F` (fully-qualified) should match `hushed face` (😯)" do
  if m = "😯".match(Emoji::EMOJI_REGEX)
    "😯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😯"
  else
    fail("`1F62F` doesn't match `hushed face` (😯)")
  end
end

it "`1F632` (fully-qualified) should match `astonished face` (😲)" do
  if m = "😲".match(Emoji::EMOJI_REGEX)
    "😲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😲"
  else
    fail("`1F632` doesn't match `astonished face` (😲)")
  end
end

it "`1F633` (fully-qualified) should match `flushed face` (😳)" do
  if m = "😳".match(Emoji::EMOJI_REGEX)
    "😳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😳"
  else
    fail("`1F633` doesn't match `flushed face` (😳)")
  end
end

it "`1F97A` (fully-qualified) should match `pleading face` (🥺)" do
  if m = "🥺".match(Emoji::EMOJI_REGEX)
    "🥺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥺"
  else
    fail("`1F97A` doesn't match `pleading face` (🥺)")
  end
end

it "`1F626` (fully-qualified) should match `frowning face with open mouth` (😦)" do
  if m = "😦".match(Emoji::EMOJI_REGEX)
    "😦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😦"
  else
    fail("`1F626` doesn't match `frowning face with open mouth` (😦)")
  end
end

it "`1F627` (fully-qualified) should match `anguished face` (😧)" do
  if m = "😧".match(Emoji::EMOJI_REGEX)
    "😧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😧"
  else
    fail("`1F627` doesn't match `anguished face` (😧)")
  end
end

it "`1F628` (fully-qualified) should match `fearful face` (😨)" do
  if m = "😨".match(Emoji::EMOJI_REGEX)
    "😨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😨"
  else
    fail("`1F628` doesn't match `fearful face` (😨)")
  end
end

it "`1F630` (fully-qualified) should match `anxious face with sweat` (😰)" do
  if m = "😰".match(Emoji::EMOJI_REGEX)
    "😰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😰"
  else
    fail("`1F630` doesn't match `anxious face with sweat` (😰)")
  end
end

it "`1F625` (fully-qualified) should match `sad but relieved face` (😥)" do
  if m = "😥".match(Emoji::EMOJI_REGEX)
    "😥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😥"
  else
    fail("`1F625` doesn't match `sad but relieved face` (😥)")
  end
end

it "`1F622` (fully-qualified) should match `crying face` (😢)" do
  if m = "😢".match(Emoji::EMOJI_REGEX)
    "😢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😢"
  else
    fail("`1F622` doesn't match `crying face` (😢)")
  end
end

it "`1F62D` (fully-qualified) should match `loudly crying face` (😭)" do
  if m = "😭".match(Emoji::EMOJI_REGEX)
    "😭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😭"
  else
    fail("`1F62D` doesn't match `loudly crying face` (😭)")
  end
end

it "`1F631` (fully-qualified) should match `face screaming in fear` (😱)" do
  if m = "😱".match(Emoji::EMOJI_REGEX)
    "😱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😱"
  else
    fail("`1F631` doesn't match `face screaming in fear` (😱)")
  end
end

it "`1F616` (fully-qualified) should match `confounded face` (😖)" do
  if m = "😖".match(Emoji::EMOJI_REGEX)
    "😖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😖"
  else
    fail("`1F616` doesn't match `confounded face` (😖)")
  end
end

it "`1F623` (fully-qualified) should match `persevering face` (😣)" do
  if m = "😣".match(Emoji::EMOJI_REGEX)
    "😣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😣"
  else
    fail("`1F623` doesn't match `persevering face` (😣)")
  end
end

it "`1F61E` (fully-qualified) should match `disappointed face` (😞)" do
  if m = "😞".match(Emoji::EMOJI_REGEX)
    "😞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😞"
  else
    fail("`1F61E` doesn't match `disappointed face` (😞)")
  end
end

it "`1F613` (fully-qualified) should match `downcast face with sweat` (😓)" do
  if m = "😓".match(Emoji::EMOJI_REGEX)
    "😓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😓"
  else
    fail("`1F613` doesn't match `downcast face with sweat` (😓)")
  end
end

it "`1F629` (fully-qualified) should match `weary face` (😩)" do
  if m = "😩".match(Emoji::EMOJI_REGEX)
    "😩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😩"
  else
    fail("`1F629` doesn't match `weary face` (😩)")
  end
end

it "`1F62B` (fully-qualified) should match `tired face` (😫)" do
  if m = "😫".match(Emoji::EMOJI_REGEX)
    "😫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😫"
  else
    fail("`1F62B` doesn't match `tired face` (😫)")
  end
end

it "`1F971` (fully-qualified) should match `yawning face` (🥱)" do
  if m = "🥱".match(Emoji::EMOJI_REGEX)
    "🥱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥱"
  else
    fail("`1F971` doesn't match `yawning face` (🥱)")
  end
end

it "`1F624` (fully-qualified) should match `face with steam from nose` (😤)" do
  if m = "😤".match(Emoji::EMOJI_REGEX)
    "😤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😤"
  else
    fail("`1F624` doesn't match `face with steam from nose` (😤)")
  end
end

it "`1F621` (fully-qualified) should match `pouting face` (😡)" do
  if m = "😡".match(Emoji::EMOJI_REGEX)
    "😡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😡"
  else
    fail("`1F621` doesn't match `pouting face` (😡)")
  end
end

it "`1F620` (fully-qualified) should match `angry face` (😠)" do
  if m = "😠".match(Emoji::EMOJI_REGEX)
    "😠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😠"
  else
    fail("`1F620` doesn't match `angry face` (😠)")
  end
end

it "`1F92C` (fully-qualified) should match `face with symbols on mouth` (🤬)" do
  if m = "🤬".match(Emoji::EMOJI_REGEX)
    "🤬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤬"
  else
    fail("`1F92C` doesn't match `face with symbols on mouth` (🤬)")
  end
end

it "`1F608` (fully-qualified) should match `smiling face with horns` (😈)" do
  if m = "😈".match(Emoji::EMOJI_REGEX)
    "😈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😈"
  else
    fail("`1F608` doesn't match `smiling face with horns` (😈)")
  end
end

it "`1F47F` (fully-qualified) should match `angry face with horns` (👿)" do
  if m = "👿".match(Emoji::EMOJI_REGEX)
    "👿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👿"
  else
    fail("`1F47F` doesn't match `angry face with horns` (👿)")
  end
end

it "`1F480` (fully-qualified) should match `skull` (💀)" do
  if m = "💀".match(Emoji::EMOJI_REGEX)
    "💀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💀"
  else
    fail("`1F480` doesn't match `skull` (💀)")
  end
end

it "`2620 FE0F` (fully-qualified) should match `skull and crossbones` (☠️)" do
  if m = "☠️".match(Emoji::EMOJI_REGEX)
    "☠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☠️"
  else
    fail("`2620 FE0F` doesn't match `skull and crossbones` (☠️)")
  end
end

it "`2620` (unqualified) should match `skull and crossbones` (☠)" do
  if m = "☠".match(Emoji::EMOJI_REGEX)
    "☠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☠"
  else
    fail("`2620` doesn't match `skull and crossbones` (☠)")
  end
end

it "`1F4A9` (fully-qualified) should match `pile of poo` (💩)" do
  if m = "💩".match(Emoji::EMOJI_REGEX)
    "💩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💩"
  else
    fail("`1F4A9` doesn't match `pile of poo` (💩)")
  end
end

it "`1F921` (fully-qualified) should match `clown face` (🤡)" do
  if m = "🤡".match(Emoji::EMOJI_REGEX)
    "🤡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤡"
  else
    fail("`1F921` doesn't match `clown face` (🤡)")
  end
end

it "`1F479` (fully-qualified) should match `ogre` (👹)" do
  if m = "👹".match(Emoji::EMOJI_REGEX)
    "👹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👹"
  else
    fail("`1F479` doesn't match `ogre` (👹)")
  end
end

it "`1F47A` (fully-qualified) should match `goblin` (👺)" do
  if m = "👺".match(Emoji::EMOJI_REGEX)
    "👺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👺"
  else
    fail("`1F47A` doesn't match `goblin` (👺)")
  end
end

it "`1F47B` (fully-qualified) should match `ghost` (👻)" do
  if m = "👻".match(Emoji::EMOJI_REGEX)
    "👻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👻"
  else
    fail("`1F47B` doesn't match `ghost` (👻)")
  end
end

it "`1F47D` (fully-qualified) should match `alien` (👽)" do
  if m = "👽".match(Emoji::EMOJI_REGEX)
    "👽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👽"
  else
    fail("`1F47D` doesn't match `alien` (👽)")
  end
end

it "`1F47E` (fully-qualified) should match `alien monster` (👾)" do
  if m = "👾".match(Emoji::EMOJI_REGEX)
    "👾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👾"
  else
    fail("`1F47E` doesn't match `alien monster` (👾)")
  end
end

it "`1F916` (fully-qualified) should match `robot` (🤖)" do
  if m = "🤖".match(Emoji::EMOJI_REGEX)
    "🤖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤖"
  else
    fail("`1F916` doesn't match `robot` (🤖)")
  end
end

it "`1F63A` (fully-qualified) should match `grinning cat` (😺)" do
  if m = "😺".match(Emoji::EMOJI_REGEX)
    "😺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😺"
  else
    fail("`1F63A` doesn't match `grinning cat` (😺)")
  end
end

it "`1F638` (fully-qualified) should match `grinning cat with smiling eyes` (😸)" do
  if m = "😸".match(Emoji::EMOJI_REGEX)
    "😸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😸"
  else
    fail("`1F638` doesn't match `grinning cat with smiling eyes` (😸)")
  end
end

it "`1F639` (fully-qualified) should match `cat with tears of joy` (😹)" do
  if m = "😹".match(Emoji::EMOJI_REGEX)
    "😹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😹"
  else
    fail("`1F639` doesn't match `cat with tears of joy` (😹)")
  end
end

it "`1F63B` (fully-qualified) should match `smiling cat with heart-eyes` (😻)" do
  if m = "😻".match(Emoji::EMOJI_REGEX)
    "😻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😻"
  else
    fail("`1F63B` doesn't match `smiling cat with heart-eyes` (😻)")
  end
end

it "`1F63C` (fully-qualified) should match `cat with wry smile` (😼)" do
  if m = "😼".match(Emoji::EMOJI_REGEX)
    "😼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😼"
  else
    fail("`1F63C` doesn't match `cat with wry smile` (😼)")
  end
end

it "`1F63D` (fully-qualified) should match `kissing cat` (😽)" do
  if m = "😽".match(Emoji::EMOJI_REGEX)
    "😽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😽"
  else
    fail("`1F63D` doesn't match `kissing cat` (😽)")
  end
end

it "`1F640` (fully-qualified) should match `weary cat` (🙀)" do
  if m = "🙀".match(Emoji::EMOJI_REGEX)
    "🙀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙀"
  else
    fail("`1F640` doesn't match `weary cat` (🙀)")
  end
end

it "`1F63F` (fully-qualified) should match `crying cat` (😿)" do
  if m = "😿".match(Emoji::EMOJI_REGEX)
    "😿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😿"
  else
    fail("`1F63F` doesn't match `crying cat` (😿)")
  end
end

it "`1F63E` (fully-qualified) should match `pouting cat` (😾)" do
  if m = "😾".match(Emoji::EMOJI_REGEX)
    "😾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "😾"
  else
    fail("`1F63E` doesn't match `pouting cat` (😾)")
  end
end

it "`1F648` (fully-qualified) should match `see-no-evil monkey` (🙈)" do
  if m = "🙈".match(Emoji::EMOJI_REGEX)
    "🙈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙈"
  else
    fail("`1F648` doesn't match `see-no-evil monkey` (🙈)")
  end
end

it "`1F649` (fully-qualified) should match `hear-no-evil monkey` (🙉)" do
  if m = "🙉".match(Emoji::EMOJI_REGEX)
    "🙉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙉"
  else
    fail("`1F649` doesn't match `hear-no-evil monkey` (🙉)")
  end
end

it "`1F64A` (fully-qualified) should match `speak-no-evil monkey` (🙊)" do
  if m = "🙊".match(Emoji::EMOJI_REGEX)
    "🙊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙊"
  else
    fail("`1F64A` doesn't match `speak-no-evil monkey` (🙊)")
  end
end

it "`1F48B` (fully-qualified) should match `kiss mark` (💋)" do
  if m = "💋".match(Emoji::EMOJI_REGEX)
    "💋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💋"
  else
    fail("`1F48B` doesn't match `kiss mark` (💋)")
  end
end

it "`1F48C` (fully-qualified) should match `love letter` (💌)" do
  if m = "💌".match(Emoji::EMOJI_REGEX)
    "💌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💌"
  else
    fail("`1F48C` doesn't match `love letter` (💌)")
  end
end

it "`1F498` (fully-qualified) should match `heart with arrow` (💘)" do
  if m = "💘".match(Emoji::EMOJI_REGEX)
    "💘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💘"
  else
    fail("`1F498` doesn't match `heart with arrow` (💘)")
  end
end

it "`1F49D` (fully-qualified) should match `heart with ribbon` (💝)" do
  if m = "💝".match(Emoji::EMOJI_REGEX)
    "💝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💝"
  else
    fail("`1F49D` doesn't match `heart with ribbon` (💝)")
  end
end

it "`1F496` (fully-qualified) should match `sparkling heart` (💖)" do
  if m = "💖".match(Emoji::EMOJI_REGEX)
    "💖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💖"
  else
    fail("`1F496` doesn't match `sparkling heart` (💖)")
  end
end

it "`1F497` (fully-qualified) should match `growing heart` (💗)" do
  if m = "💗".match(Emoji::EMOJI_REGEX)
    "💗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💗"
  else
    fail("`1F497` doesn't match `growing heart` (💗)")
  end
end

it "`1F493` (fully-qualified) should match `beating heart` (💓)" do
  if m = "💓".match(Emoji::EMOJI_REGEX)
    "💓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💓"
  else
    fail("`1F493` doesn't match `beating heart` (💓)")
  end
end

it "`1F49E` (fully-qualified) should match `revolving hearts` (💞)" do
  if m = "💞".match(Emoji::EMOJI_REGEX)
    "💞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💞"
  else
    fail("`1F49E` doesn't match `revolving hearts` (💞)")
  end
end

it "`1F495` (fully-qualified) should match `two hearts` (💕)" do
  if m = "💕".match(Emoji::EMOJI_REGEX)
    "💕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💕"
  else
    fail("`1F495` doesn't match `two hearts` (💕)")
  end
end

it "`1F49F` (fully-qualified) should match `heart decoration` (💟)" do
  if m = "💟".match(Emoji::EMOJI_REGEX)
    "💟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💟"
  else
    fail("`1F49F` doesn't match `heart decoration` (💟)")
  end
end

it "`2763 FE0F` (fully-qualified) should match `heart exclamation` (❣️)" do
  if m = "❣️".match(Emoji::EMOJI_REGEX)
    "❣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❣️"
  else
    fail("`2763 FE0F` doesn't match `heart exclamation` (❣️)")
  end
end

it "`2763` (unqualified) should match `heart exclamation` (❣)" do
  if m = "❣".match(Emoji::EMOJI_REGEX)
    "❣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❣"
  else
    fail("`2763` doesn't match `heart exclamation` (❣)")
  end
end

it "`1F494` (fully-qualified) should match `broken heart` (💔)" do
  if m = "💔".match(Emoji::EMOJI_REGEX)
    "💔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💔"
  else
    fail("`1F494` doesn't match `broken heart` (💔)")
  end
end

it "`2764 FE0F` (fully-qualified) should match `red heart` (❤️)" do
  if m = "❤️".match(Emoji::EMOJI_REGEX)
    "❤️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❤️"
  else
    fail("`2764 FE0F` doesn't match `red heart` (❤️)")
  end
end

it "`2764` (unqualified) should match `red heart` (❤)" do
  if m = "❤".match(Emoji::EMOJI_REGEX)
    "❤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❤"
  else
    fail("`2764` doesn't match `red heart` (❤)")
  end
end

it "`1F9E1` (fully-qualified) should match `orange heart` (🧡)" do
  if m = "🧡".match(Emoji::EMOJI_REGEX)
    "🧡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧡"
  else
    fail("`1F9E1` doesn't match `orange heart` (🧡)")
  end
end

it "`1F49B` (fully-qualified) should match `yellow heart` (💛)" do
  if m = "💛".match(Emoji::EMOJI_REGEX)
    "💛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💛"
  else
    fail("`1F49B` doesn't match `yellow heart` (💛)")
  end
end

it "`1F49A` (fully-qualified) should match `green heart` (💚)" do
  if m = "💚".match(Emoji::EMOJI_REGEX)
    "💚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💚"
  else
    fail("`1F49A` doesn't match `green heart` (💚)")
  end
end

it "`1F499` (fully-qualified) should match `blue heart` (💙)" do
  if m = "💙".match(Emoji::EMOJI_REGEX)
    "💙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💙"
  else
    fail("`1F499` doesn't match `blue heart` (💙)")
  end
end

it "`1F49C` (fully-qualified) should match `purple heart` (💜)" do
  if m = "💜".match(Emoji::EMOJI_REGEX)
    "💜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💜"
  else
    fail("`1F49C` doesn't match `purple heart` (💜)")
  end
end

it "`1F90E` (fully-qualified) should match `brown heart` (🤎)" do
  if m = "🤎".match(Emoji::EMOJI_REGEX)
    "🤎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤎"
  else
    fail("`1F90E` doesn't match `brown heart` (🤎)")
  end
end

it "`1F5A4` (fully-qualified) should match `black heart` (🖤)" do
  if m = "🖤".match(Emoji::EMOJI_REGEX)
    "🖤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖤"
  else
    fail("`1F5A4` doesn't match `black heart` (🖤)")
  end
end

it "`1F90D` (fully-qualified) should match `white heart` (🤍)" do
  if m = "🤍".match(Emoji::EMOJI_REGEX)
    "🤍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤍"
  else
    fail("`1F90D` doesn't match `white heart` (🤍)")
  end
end

it "`1F4AF` (fully-qualified) should match `hundred points` (💯)" do
  if m = "💯".match(Emoji::EMOJI_REGEX)
    "💯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💯"
  else
    fail("`1F4AF` doesn't match `hundred points` (💯)")
  end
end

it "`1F4A2` (fully-qualified) should match `anger symbol` (💢)" do
  if m = "💢".match(Emoji::EMOJI_REGEX)
    "💢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💢"
  else
    fail("`1F4A2` doesn't match `anger symbol` (💢)")
  end
end

it "`1F4A5` (fully-qualified) should match `collision` (💥)" do
  if m = "💥".match(Emoji::EMOJI_REGEX)
    "💥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💥"
  else
    fail("`1F4A5` doesn't match `collision` (💥)")
  end
end

it "`1F4AB` (fully-qualified) should match `dizzy` (💫)" do
  if m = "💫".match(Emoji::EMOJI_REGEX)
    "💫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💫"
  else
    fail("`1F4AB` doesn't match `dizzy` (💫)")
  end
end

it "`1F4A6` (fully-qualified) should match `sweat droplets` (💦)" do
  if m = "💦".match(Emoji::EMOJI_REGEX)
    "💦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💦"
  else
    fail("`1F4A6` doesn't match `sweat droplets` (💦)")
  end
end

it "`1F4A8` (fully-qualified) should match `dashing away` (💨)" do
  if m = "💨".match(Emoji::EMOJI_REGEX)
    "💨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💨"
  else
    fail("`1F4A8` doesn't match `dashing away` (💨)")
  end
end

it "`1F573 FE0F` (fully-qualified) should match `hole` (🕳️)" do
  if m = "🕳️".match(Emoji::EMOJI_REGEX)
    "🕳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕳️"
  else
    fail("`1F573 FE0F` doesn't match `hole` (🕳️)")
  end
end

it "`1F573` (unqualified) should match `hole` (🕳)" do
  if m = "🕳".match(Emoji::EMOJI_REGEX)
    "🕳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕳"
  else
    fail("`1F573` doesn't match `hole` (🕳)")
  end
end

it "`1F4A3` (fully-qualified) should match `bomb` (💣)" do
  if m = "💣".match(Emoji::EMOJI_REGEX)
    "💣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💣"
  else
    fail("`1F4A3` doesn't match `bomb` (💣)")
  end
end

it "`1F4AC` (fully-qualified) should match `speech balloon` (💬)" do
  if m = "💬".match(Emoji::EMOJI_REGEX)
    "💬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💬"
  else
    fail("`1F4AC` doesn't match `speech balloon` (💬)")
  end
end

it "`1F441 FE0F 200D 1F5E8 FE0F` (fully-qualified) should match `eye in speech bubble` (👁️‍🗨️)" do
  if m = "👁️‍🗨️".match(Emoji::EMOJI_REGEX)
    "👁️‍🗨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁️‍🗨️"
  else
    fail("`1F441 FE0F 200D 1F5E8 FE0F` doesn't match `eye in speech bubble` (👁️‍🗨️)")
  end
end

it "`1F441 200D 1F5E8 FE0F` (unqualified) should match `eye in speech bubble` (👁‍🗨️)" do
  if m = "👁‍🗨️".match(Emoji::EMOJI_REGEX)
    "👁‍🗨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁‍🗨️"
  else
    fail("`1F441 200D 1F5E8 FE0F` doesn't match `eye in speech bubble` (👁‍🗨️)")
  end
end

it "`1F441 FE0F 200D 1F5E8` (unqualified) should match `eye in speech bubble` (👁️‍🗨)" do
  if m = "👁️‍🗨".match(Emoji::EMOJI_REGEX)
    "👁️‍🗨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁️‍🗨"
  else
    fail("`1F441 FE0F 200D 1F5E8` doesn't match `eye in speech bubble` (👁️‍🗨)")
  end
end

it "`1F441 200D 1F5E8` (unqualified) should match `eye in speech bubble` (👁‍🗨)" do
  if m = "👁‍🗨".match(Emoji::EMOJI_REGEX)
    "👁‍🗨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁‍🗨"
  else
    fail("`1F441 200D 1F5E8` doesn't match `eye in speech bubble` (👁‍🗨)")
  end
end

it "`1F5E8 FE0F` (fully-qualified) should match `left speech bubble` (🗨️)" do
  if m = "🗨️".match(Emoji::EMOJI_REGEX)
    "🗨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗨️"
  else
    fail("`1F5E8 FE0F` doesn't match `left speech bubble` (🗨️)")
  end
end

it "`1F5E8` (unqualified) should match `left speech bubble` (🗨)" do
  if m = "🗨".match(Emoji::EMOJI_REGEX)
    "🗨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗨"
  else
    fail("`1F5E8` doesn't match `left speech bubble` (🗨)")
  end
end

it "`1F5EF FE0F` (fully-qualified) should match `right anger bubble` (🗯️)" do
  if m = "🗯️".match(Emoji::EMOJI_REGEX)
    "🗯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗯️"
  else
    fail("`1F5EF FE0F` doesn't match `right anger bubble` (🗯️)")
  end
end

it "`1F5EF` (unqualified) should match `right anger bubble` (🗯)" do
  if m = "🗯".match(Emoji::EMOJI_REGEX)
    "🗯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗯"
  else
    fail("`1F5EF` doesn't match `right anger bubble` (🗯)")
  end
end

it "`1F4AD` (fully-qualified) should match `thought balloon` (💭)" do
  if m = "💭".match(Emoji::EMOJI_REGEX)
    "💭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💭"
  else
    fail("`1F4AD` doesn't match `thought balloon` (💭)")
  end
end

it "`1F4A4` (fully-qualified) should match `zzz` (💤)" do
  if m = "💤".match(Emoji::EMOJI_REGEX)
    "💤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💤"
  else
    fail("`1F4A4` doesn't match `zzz` (💤)")
  end
end

it "`1F44B` (fully-qualified) should match `waving hand` (👋)" do
  if m = "👋".match(Emoji::EMOJI_REGEX)
    "👋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋"
  else
    fail("`1F44B` doesn't match `waving hand` (👋)")
  end
end

it "`1F44B 1F3FB` (fully-qualified) should match `waving hand: light skin tone` (👋🏻)" do
  if m = "👋🏻".match(Emoji::EMOJI_REGEX)
    "👋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏻"
  else
    fail("`1F44B 1F3FB` doesn't match `waving hand: light skin tone` (👋🏻)")
  end
end

it "`1F44B 1F3FC` (fully-qualified) should match `waving hand: medium-light skin tone` (👋🏼)" do
  if m = "👋🏼".match(Emoji::EMOJI_REGEX)
    "👋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏼"
  else
    fail("`1F44B 1F3FC` doesn't match `waving hand: medium-light skin tone` (👋🏼)")
  end
end

it "`1F44B 1F3FD` (fully-qualified) should match `waving hand: medium skin tone` (👋🏽)" do
  if m = "👋🏽".match(Emoji::EMOJI_REGEX)
    "👋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏽"
  else
    fail("`1F44B 1F3FD` doesn't match `waving hand: medium skin tone` (👋🏽)")
  end
end

it "`1F44B 1F3FE` (fully-qualified) should match `waving hand: medium-dark skin tone` (👋🏾)" do
  if m = "👋🏾".match(Emoji::EMOJI_REGEX)
    "👋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏾"
  else
    fail("`1F44B 1F3FE` doesn't match `waving hand: medium-dark skin tone` (👋🏾)")
  end
end

it "`1F44B 1F3FF` (fully-qualified) should match `waving hand: dark skin tone` (👋🏿)" do
  if m = "👋🏿".match(Emoji::EMOJI_REGEX)
    "👋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👋🏿"
  else
    fail("`1F44B 1F3FF` doesn't match `waving hand: dark skin tone` (👋🏿)")
  end
end

it "`1F91A` (fully-qualified) should match `raised back of hand` (🤚)" do
  if m = "🤚".match(Emoji::EMOJI_REGEX)
    "🤚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚"
  else
    fail("`1F91A` doesn't match `raised back of hand` (🤚)")
  end
end

it "`1F91A 1F3FB` (fully-qualified) should match `raised back of hand: light skin tone` (🤚🏻)" do
  if m = "🤚🏻".match(Emoji::EMOJI_REGEX)
    "🤚🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏻"
  else
    fail("`1F91A 1F3FB` doesn't match `raised back of hand: light skin tone` (🤚🏻)")
  end
end

it "`1F91A 1F3FC` (fully-qualified) should match `raised back of hand: medium-light skin tone` (🤚🏼)" do
  if m = "🤚🏼".match(Emoji::EMOJI_REGEX)
    "🤚🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏼"
  else
    fail("`1F91A 1F3FC` doesn't match `raised back of hand: medium-light skin tone` (🤚🏼)")
  end
end

it "`1F91A 1F3FD` (fully-qualified) should match `raised back of hand: medium skin tone` (🤚🏽)" do
  if m = "🤚🏽".match(Emoji::EMOJI_REGEX)
    "🤚🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏽"
  else
    fail("`1F91A 1F3FD` doesn't match `raised back of hand: medium skin tone` (🤚🏽)")
  end
end

it "`1F91A 1F3FE` (fully-qualified) should match `raised back of hand: medium-dark skin tone` (🤚🏾)" do
  if m = "🤚🏾".match(Emoji::EMOJI_REGEX)
    "🤚🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏾"
  else
    fail("`1F91A 1F3FE` doesn't match `raised back of hand: medium-dark skin tone` (🤚🏾)")
  end
end

it "`1F91A 1F3FF` (fully-qualified) should match `raised back of hand: dark skin tone` (🤚🏿)" do
  if m = "🤚🏿".match(Emoji::EMOJI_REGEX)
    "🤚🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤚🏿"
  else
    fail("`1F91A 1F3FF` doesn't match `raised back of hand: dark skin tone` (🤚🏿)")
  end
end

it "`1F590 FE0F` (fully-qualified) should match `hand with fingers splayed` (🖐️)" do
  if m = "🖐️".match(Emoji::EMOJI_REGEX)
    "🖐️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐️"
  else
    fail("`1F590 FE0F` doesn't match `hand with fingers splayed` (🖐️)")
  end
end

it "`1F590` (unqualified) should match `hand with fingers splayed` (🖐)" do
  if m = "🖐".match(Emoji::EMOJI_REGEX)
    "🖐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐"
  else
    fail("`1F590` doesn't match `hand with fingers splayed` (🖐)")
  end
end

it "`1F590 1F3FB` (fully-qualified) should match `hand with fingers splayed: light skin tone` (🖐🏻)" do
  if m = "🖐🏻".match(Emoji::EMOJI_REGEX)
    "🖐🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏻"
  else
    fail("`1F590 1F3FB` doesn't match `hand with fingers splayed: light skin tone` (🖐🏻)")
  end
end

it "`1F590 1F3FC` (fully-qualified) should match `hand with fingers splayed: medium-light skin tone` (🖐🏼)" do
  if m = "🖐🏼".match(Emoji::EMOJI_REGEX)
    "🖐🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏼"
  else
    fail("`1F590 1F3FC` doesn't match `hand with fingers splayed: medium-light skin tone` (🖐🏼)")
  end
end

it "`1F590 1F3FD` (fully-qualified) should match `hand with fingers splayed: medium skin tone` (🖐🏽)" do
  if m = "🖐🏽".match(Emoji::EMOJI_REGEX)
    "🖐🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏽"
  else
    fail("`1F590 1F3FD` doesn't match `hand with fingers splayed: medium skin tone` (🖐🏽)")
  end
end

it "`1F590 1F3FE` (fully-qualified) should match `hand with fingers splayed: medium-dark skin tone` (🖐🏾)" do
  if m = "🖐🏾".match(Emoji::EMOJI_REGEX)
    "🖐🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏾"
  else
    fail("`1F590 1F3FE` doesn't match `hand with fingers splayed: medium-dark skin tone` (🖐🏾)")
  end
end

it "`1F590 1F3FF` (fully-qualified) should match `hand with fingers splayed: dark skin tone` (🖐🏿)" do
  if m = "🖐🏿".match(Emoji::EMOJI_REGEX)
    "🖐🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖐🏿"
  else
    fail("`1F590 1F3FF` doesn't match `hand with fingers splayed: dark skin tone` (🖐🏿)")
  end
end

it "`270B` (fully-qualified) should match `raised hand` (✋)" do
  if m = "✋".match(Emoji::EMOJI_REGEX)
    "✋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋"
  else
    fail("`270B` doesn't match `raised hand` (✋)")
  end
end

it "`270B 1F3FB` (fully-qualified) should match `raised hand: light skin tone` (✋🏻)" do
  if m = "✋🏻".match(Emoji::EMOJI_REGEX)
    "✋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏻"
  else
    fail("`270B 1F3FB` doesn't match `raised hand: light skin tone` (✋🏻)")
  end
end

it "`270B 1F3FC` (fully-qualified) should match `raised hand: medium-light skin tone` (✋🏼)" do
  if m = "✋🏼".match(Emoji::EMOJI_REGEX)
    "✋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏼"
  else
    fail("`270B 1F3FC` doesn't match `raised hand: medium-light skin tone` (✋🏼)")
  end
end

it "`270B 1F3FD` (fully-qualified) should match `raised hand: medium skin tone` (✋🏽)" do
  if m = "✋🏽".match(Emoji::EMOJI_REGEX)
    "✋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏽"
  else
    fail("`270B 1F3FD` doesn't match `raised hand: medium skin tone` (✋🏽)")
  end
end

it "`270B 1F3FE` (fully-qualified) should match `raised hand: medium-dark skin tone` (✋🏾)" do
  if m = "✋🏾".match(Emoji::EMOJI_REGEX)
    "✋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏾"
  else
    fail("`270B 1F3FE` doesn't match `raised hand: medium-dark skin tone` (✋🏾)")
  end
end

it "`270B 1F3FF` (fully-qualified) should match `raised hand: dark skin tone` (✋🏿)" do
  if m = "✋🏿".match(Emoji::EMOJI_REGEX)
    "✋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✋🏿"
  else
    fail("`270B 1F3FF` doesn't match `raised hand: dark skin tone` (✋🏿)")
  end
end

it "`1F596` (fully-qualified) should match `vulcan salute` (🖖)" do
  if m = "🖖".match(Emoji::EMOJI_REGEX)
    "🖖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖"
  else
    fail("`1F596` doesn't match `vulcan salute` (🖖)")
  end
end

it "`1F596 1F3FB` (fully-qualified) should match `vulcan salute: light skin tone` (🖖🏻)" do
  if m = "🖖🏻".match(Emoji::EMOJI_REGEX)
    "🖖🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏻"
  else
    fail("`1F596 1F3FB` doesn't match `vulcan salute: light skin tone` (🖖🏻)")
  end
end

it "`1F596 1F3FC` (fully-qualified) should match `vulcan salute: medium-light skin tone` (🖖🏼)" do
  if m = "🖖🏼".match(Emoji::EMOJI_REGEX)
    "🖖🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏼"
  else
    fail("`1F596 1F3FC` doesn't match `vulcan salute: medium-light skin tone` (🖖🏼)")
  end
end

it "`1F596 1F3FD` (fully-qualified) should match `vulcan salute: medium skin tone` (🖖🏽)" do
  if m = "🖖🏽".match(Emoji::EMOJI_REGEX)
    "🖖🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏽"
  else
    fail("`1F596 1F3FD` doesn't match `vulcan salute: medium skin tone` (🖖🏽)")
  end
end

it "`1F596 1F3FE` (fully-qualified) should match `vulcan salute: medium-dark skin tone` (🖖🏾)" do
  if m = "🖖🏾".match(Emoji::EMOJI_REGEX)
    "🖖🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏾"
  else
    fail("`1F596 1F3FE` doesn't match `vulcan salute: medium-dark skin tone` (🖖🏾)")
  end
end

it "`1F596 1F3FF` (fully-qualified) should match `vulcan salute: dark skin tone` (🖖🏿)" do
  if m = "🖖🏿".match(Emoji::EMOJI_REGEX)
    "🖖🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖖🏿"
  else
    fail("`1F596 1F3FF` doesn't match `vulcan salute: dark skin tone` (🖖🏿)")
  end
end

it "`1F44C` (fully-qualified) should match `OK hand` (👌)" do
  if m = "👌".match(Emoji::EMOJI_REGEX)
    "👌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌"
  else
    fail("`1F44C` doesn't match `OK hand` (👌)")
  end
end

it "`1F44C 1F3FB` (fully-qualified) should match `OK hand: light skin tone` (👌🏻)" do
  if m = "👌🏻".match(Emoji::EMOJI_REGEX)
    "👌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏻"
  else
    fail("`1F44C 1F3FB` doesn't match `OK hand: light skin tone` (👌🏻)")
  end
end

it "`1F44C 1F3FC` (fully-qualified) should match `OK hand: medium-light skin tone` (👌🏼)" do
  if m = "👌🏼".match(Emoji::EMOJI_REGEX)
    "👌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏼"
  else
    fail("`1F44C 1F3FC` doesn't match `OK hand: medium-light skin tone` (👌🏼)")
  end
end

it "`1F44C 1F3FD` (fully-qualified) should match `OK hand: medium skin tone` (👌🏽)" do
  if m = "👌🏽".match(Emoji::EMOJI_REGEX)
    "👌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏽"
  else
    fail("`1F44C 1F3FD` doesn't match `OK hand: medium skin tone` (👌🏽)")
  end
end

it "`1F44C 1F3FE` (fully-qualified) should match `OK hand: medium-dark skin tone` (👌🏾)" do
  if m = "👌🏾".match(Emoji::EMOJI_REGEX)
    "👌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏾"
  else
    fail("`1F44C 1F3FE` doesn't match `OK hand: medium-dark skin tone` (👌🏾)")
  end
end

it "`1F44C 1F3FF` (fully-qualified) should match `OK hand: dark skin tone` (👌🏿)" do
  if m = "👌🏿".match(Emoji::EMOJI_REGEX)
    "👌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👌🏿"
  else
    fail("`1F44C 1F3FF` doesn't match `OK hand: dark skin tone` (👌🏿)")
  end
end

it "`1F90F` (fully-qualified) should match `pinching hand` (🤏)" do
  if m = "🤏".match(Emoji::EMOJI_REGEX)
    "🤏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏"
  else
    fail("`1F90F` doesn't match `pinching hand` (🤏)")
  end
end

it "`1F90F 1F3FB` (fully-qualified) should match `pinching hand: light skin tone` (🤏🏻)" do
  if m = "🤏🏻".match(Emoji::EMOJI_REGEX)
    "🤏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏻"
  else
    fail("`1F90F 1F3FB` doesn't match `pinching hand: light skin tone` (🤏🏻)")
  end
end

it "`1F90F 1F3FC` (fully-qualified) should match `pinching hand: medium-light skin tone` (🤏🏼)" do
  if m = "🤏🏼".match(Emoji::EMOJI_REGEX)
    "🤏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏼"
  else
    fail("`1F90F 1F3FC` doesn't match `pinching hand: medium-light skin tone` (🤏🏼)")
  end
end

it "`1F90F 1F3FD` (fully-qualified) should match `pinching hand: medium skin tone` (🤏🏽)" do
  if m = "🤏🏽".match(Emoji::EMOJI_REGEX)
    "🤏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏽"
  else
    fail("`1F90F 1F3FD` doesn't match `pinching hand: medium skin tone` (🤏🏽)")
  end
end

it "`1F90F 1F3FE` (fully-qualified) should match `pinching hand: medium-dark skin tone` (🤏🏾)" do
  if m = "🤏🏾".match(Emoji::EMOJI_REGEX)
    "🤏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏾"
  else
    fail("`1F90F 1F3FE` doesn't match `pinching hand: medium-dark skin tone` (🤏🏾)")
  end
end

it "`1F90F 1F3FF` (fully-qualified) should match `pinching hand: dark skin tone` (🤏🏿)" do
  if m = "🤏🏿".match(Emoji::EMOJI_REGEX)
    "🤏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤏🏿"
  else
    fail("`1F90F 1F3FF` doesn't match `pinching hand: dark skin tone` (🤏🏿)")
  end
end

it "`270C FE0F` (fully-qualified) should match `victory hand` (✌️)" do
  if m = "✌️".match(Emoji::EMOJI_REGEX)
    "✌️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌️"
  else
    fail("`270C FE0F` doesn't match `victory hand` (✌️)")
  end
end

it "`270C` (unqualified) should match `victory hand` (✌)" do
  if m = "✌".match(Emoji::EMOJI_REGEX)
    "✌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌"
  else
    fail("`270C` doesn't match `victory hand` (✌)")
  end
end

it "`270C 1F3FB` (fully-qualified) should match `victory hand: light skin tone` (✌🏻)" do
  if m = "✌🏻".match(Emoji::EMOJI_REGEX)
    "✌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏻"
  else
    fail("`270C 1F3FB` doesn't match `victory hand: light skin tone` (✌🏻)")
  end
end

it "`270C 1F3FC` (fully-qualified) should match `victory hand: medium-light skin tone` (✌🏼)" do
  if m = "✌🏼".match(Emoji::EMOJI_REGEX)
    "✌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏼"
  else
    fail("`270C 1F3FC` doesn't match `victory hand: medium-light skin tone` (✌🏼)")
  end
end

it "`270C 1F3FD` (fully-qualified) should match `victory hand: medium skin tone` (✌🏽)" do
  if m = "✌🏽".match(Emoji::EMOJI_REGEX)
    "✌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏽"
  else
    fail("`270C 1F3FD` doesn't match `victory hand: medium skin tone` (✌🏽)")
  end
end

it "`270C 1F3FE` (fully-qualified) should match `victory hand: medium-dark skin tone` (✌🏾)" do
  if m = "✌🏾".match(Emoji::EMOJI_REGEX)
    "✌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏾"
  else
    fail("`270C 1F3FE` doesn't match `victory hand: medium-dark skin tone` (✌🏾)")
  end
end

it "`270C 1F3FF` (fully-qualified) should match `victory hand: dark skin tone` (✌🏿)" do
  if m = "✌🏿".match(Emoji::EMOJI_REGEX)
    "✌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✌🏿"
  else
    fail("`270C 1F3FF` doesn't match `victory hand: dark skin tone` (✌🏿)")
  end
end

it "`1F91E` (fully-qualified) should match `crossed fingers` (🤞)" do
  if m = "🤞".match(Emoji::EMOJI_REGEX)
    "🤞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞"
  else
    fail("`1F91E` doesn't match `crossed fingers` (🤞)")
  end
end

it "`1F91E 1F3FB` (fully-qualified) should match `crossed fingers: light skin tone` (🤞🏻)" do
  if m = "🤞🏻".match(Emoji::EMOJI_REGEX)
    "🤞🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏻"
  else
    fail("`1F91E 1F3FB` doesn't match `crossed fingers: light skin tone` (🤞🏻)")
  end
end

it "`1F91E 1F3FC` (fully-qualified) should match `crossed fingers: medium-light skin tone` (🤞🏼)" do
  if m = "🤞🏼".match(Emoji::EMOJI_REGEX)
    "🤞🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏼"
  else
    fail("`1F91E 1F3FC` doesn't match `crossed fingers: medium-light skin tone` (🤞🏼)")
  end
end

it "`1F91E 1F3FD` (fully-qualified) should match `crossed fingers: medium skin tone` (🤞🏽)" do
  if m = "🤞🏽".match(Emoji::EMOJI_REGEX)
    "🤞🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏽"
  else
    fail("`1F91E 1F3FD` doesn't match `crossed fingers: medium skin tone` (🤞🏽)")
  end
end

it "`1F91E 1F3FE` (fully-qualified) should match `crossed fingers: medium-dark skin tone` (🤞🏾)" do
  if m = "🤞🏾".match(Emoji::EMOJI_REGEX)
    "🤞🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏾"
  else
    fail("`1F91E 1F3FE` doesn't match `crossed fingers: medium-dark skin tone` (🤞🏾)")
  end
end

it "`1F91E 1F3FF` (fully-qualified) should match `crossed fingers: dark skin tone` (🤞🏿)" do
  if m = "🤞🏿".match(Emoji::EMOJI_REGEX)
    "🤞🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤞🏿"
  else
    fail("`1F91E 1F3FF` doesn't match `crossed fingers: dark skin tone` (🤞🏿)")
  end
end

it "`1F91F` (fully-qualified) should match `love-you gesture` (🤟)" do
  if m = "🤟".match(Emoji::EMOJI_REGEX)
    "🤟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟"
  else
    fail("`1F91F` doesn't match `love-you gesture` (🤟)")
  end
end

it "`1F91F 1F3FB` (fully-qualified) should match `love-you gesture: light skin tone` (🤟🏻)" do
  if m = "🤟🏻".match(Emoji::EMOJI_REGEX)
    "🤟🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏻"
  else
    fail("`1F91F 1F3FB` doesn't match `love-you gesture: light skin tone` (🤟🏻)")
  end
end

it "`1F91F 1F3FC` (fully-qualified) should match `love-you gesture: medium-light skin tone` (🤟🏼)" do
  if m = "🤟🏼".match(Emoji::EMOJI_REGEX)
    "🤟🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏼"
  else
    fail("`1F91F 1F3FC` doesn't match `love-you gesture: medium-light skin tone` (🤟🏼)")
  end
end

it "`1F91F 1F3FD` (fully-qualified) should match `love-you gesture: medium skin tone` (🤟🏽)" do
  if m = "🤟🏽".match(Emoji::EMOJI_REGEX)
    "🤟🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏽"
  else
    fail("`1F91F 1F3FD` doesn't match `love-you gesture: medium skin tone` (🤟🏽)")
  end
end

it "`1F91F 1F3FE` (fully-qualified) should match `love-you gesture: medium-dark skin tone` (🤟🏾)" do
  if m = "🤟🏾".match(Emoji::EMOJI_REGEX)
    "🤟🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏾"
  else
    fail("`1F91F 1F3FE` doesn't match `love-you gesture: medium-dark skin tone` (🤟🏾)")
  end
end

it "`1F91F 1F3FF` (fully-qualified) should match `love-you gesture: dark skin tone` (🤟🏿)" do
  if m = "🤟🏿".match(Emoji::EMOJI_REGEX)
    "🤟🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤟🏿"
  else
    fail("`1F91F 1F3FF` doesn't match `love-you gesture: dark skin tone` (🤟🏿)")
  end
end

it "`1F918` (fully-qualified) should match `sign of the horns` (🤘)" do
  if m = "🤘".match(Emoji::EMOJI_REGEX)
    "🤘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘"
  else
    fail("`1F918` doesn't match `sign of the horns` (🤘)")
  end
end

it "`1F918 1F3FB` (fully-qualified) should match `sign of the horns: light skin tone` (🤘🏻)" do
  if m = "🤘🏻".match(Emoji::EMOJI_REGEX)
    "🤘🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏻"
  else
    fail("`1F918 1F3FB` doesn't match `sign of the horns: light skin tone` (🤘🏻)")
  end
end

it "`1F918 1F3FC` (fully-qualified) should match `sign of the horns: medium-light skin tone` (🤘🏼)" do
  if m = "🤘🏼".match(Emoji::EMOJI_REGEX)
    "🤘🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏼"
  else
    fail("`1F918 1F3FC` doesn't match `sign of the horns: medium-light skin tone` (🤘🏼)")
  end
end

it "`1F918 1F3FD` (fully-qualified) should match `sign of the horns: medium skin tone` (🤘🏽)" do
  if m = "🤘🏽".match(Emoji::EMOJI_REGEX)
    "🤘🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏽"
  else
    fail("`1F918 1F3FD` doesn't match `sign of the horns: medium skin tone` (🤘🏽)")
  end
end

it "`1F918 1F3FE` (fully-qualified) should match `sign of the horns: medium-dark skin tone` (🤘🏾)" do
  if m = "🤘🏾".match(Emoji::EMOJI_REGEX)
    "🤘🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏾"
  else
    fail("`1F918 1F3FE` doesn't match `sign of the horns: medium-dark skin tone` (🤘🏾)")
  end
end

it "`1F918 1F3FF` (fully-qualified) should match `sign of the horns: dark skin tone` (🤘🏿)" do
  if m = "🤘🏿".match(Emoji::EMOJI_REGEX)
    "🤘🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤘🏿"
  else
    fail("`1F918 1F3FF` doesn't match `sign of the horns: dark skin tone` (🤘🏿)")
  end
end

it "`1F919` (fully-qualified) should match `call me hand` (🤙)" do
  if m = "🤙".match(Emoji::EMOJI_REGEX)
    "🤙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙"
  else
    fail("`1F919` doesn't match `call me hand` (🤙)")
  end
end

it "`1F919 1F3FB` (fully-qualified) should match `call me hand: light skin tone` (🤙🏻)" do
  if m = "🤙🏻".match(Emoji::EMOJI_REGEX)
    "🤙🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏻"
  else
    fail("`1F919 1F3FB` doesn't match `call me hand: light skin tone` (🤙🏻)")
  end
end

it "`1F919 1F3FC` (fully-qualified) should match `call me hand: medium-light skin tone` (🤙🏼)" do
  if m = "🤙🏼".match(Emoji::EMOJI_REGEX)
    "🤙🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏼"
  else
    fail("`1F919 1F3FC` doesn't match `call me hand: medium-light skin tone` (🤙🏼)")
  end
end

it "`1F919 1F3FD` (fully-qualified) should match `call me hand: medium skin tone` (🤙🏽)" do
  if m = "🤙🏽".match(Emoji::EMOJI_REGEX)
    "🤙🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏽"
  else
    fail("`1F919 1F3FD` doesn't match `call me hand: medium skin tone` (🤙🏽)")
  end
end

it "`1F919 1F3FE` (fully-qualified) should match `call me hand: medium-dark skin tone` (🤙🏾)" do
  if m = "🤙🏾".match(Emoji::EMOJI_REGEX)
    "🤙🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏾"
  else
    fail("`1F919 1F3FE` doesn't match `call me hand: medium-dark skin tone` (🤙🏾)")
  end
end

it "`1F919 1F3FF` (fully-qualified) should match `call me hand: dark skin tone` (🤙🏿)" do
  if m = "🤙🏿".match(Emoji::EMOJI_REGEX)
    "🤙🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤙🏿"
  else
    fail("`1F919 1F3FF` doesn't match `call me hand: dark skin tone` (🤙🏿)")
  end
end

it "`1F448` (fully-qualified) should match `backhand index pointing left` (👈)" do
  if m = "👈".match(Emoji::EMOJI_REGEX)
    "👈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈"
  else
    fail("`1F448` doesn't match `backhand index pointing left` (👈)")
  end
end

it "`1F448 1F3FB` (fully-qualified) should match `backhand index pointing left: light skin tone` (👈🏻)" do
  if m = "👈🏻".match(Emoji::EMOJI_REGEX)
    "👈🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏻"
  else
    fail("`1F448 1F3FB` doesn't match `backhand index pointing left: light skin tone` (👈🏻)")
  end
end

it "`1F448 1F3FC` (fully-qualified) should match `backhand index pointing left: medium-light skin tone` (👈🏼)" do
  if m = "👈🏼".match(Emoji::EMOJI_REGEX)
    "👈🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏼"
  else
    fail("`1F448 1F3FC` doesn't match `backhand index pointing left: medium-light skin tone` (👈🏼)")
  end
end

it "`1F448 1F3FD` (fully-qualified) should match `backhand index pointing left: medium skin tone` (👈🏽)" do
  if m = "👈🏽".match(Emoji::EMOJI_REGEX)
    "👈🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏽"
  else
    fail("`1F448 1F3FD` doesn't match `backhand index pointing left: medium skin tone` (👈🏽)")
  end
end

it "`1F448 1F3FE` (fully-qualified) should match `backhand index pointing left: medium-dark skin tone` (👈🏾)" do
  if m = "👈🏾".match(Emoji::EMOJI_REGEX)
    "👈🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏾"
  else
    fail("`1F448 1F3FE` doesn't match `backhand index pointing left: medium-dark skin tone` (👈🏾)")
  end
end

it "`1F448 1F3FF` (fully-qualified) should match `backhand index pointing left: dark skin tone` (👈🏿)" do
  if m = "👈🏿".match(Emoji::EMOJI_REGEX)
    "👈🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👈🏿"
  else
    fail("`1F448 1F3FF` doesn't match `backhand index pointing left: dark skin tone` (👈🏿)")
  end
end

it "`1F449` (fully-qualified) should match `backhand index pointing right` (👉)" do
  if m = "👉".match(Emoji::EMOJI_REGEX)
    "👉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉"
  else
    fail("`1F449` doesn't match `backhand index pointing right` (👉)")
  end
end

it "`1F449 1F3FB` (fully-qualified) should match `backhand index pointing right: light skin tone` (👉🏻)" do
  if m = "👉🏻".match(Emoji::EMOJI_REGEX)
    "👉🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏻"
  else
    fail("`1F449 1F3FB` doesn't match `backhand index pointing right: light skin tone` (👉🏻)")
  end
end

it "`1F449 1F3FC` (fully-qualified) should match `backhand index pointing right: medium-light skin tone` (👉🏼)" do
  if m = "👉🏼".match(Emoji::EMOJI_REGEX)
    "👉🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏼"
  else
    fail("`1F449 1F3FC` doesn't match `backhand index pointing right: medium-light skin tone` (👉🏼)")
  end
end

it "`1F449 1F3FD` (fully-qualified) should match `backhand index pointing right: medium skin tone` (👉🏽)" do
  if m = "👉🏽".match(Emoji::EMOJI_REGEX)
    "👉🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏽"
  else
    fail("`1F449 1F3FD` doesn't match `backhand index pointing right: medium skin tone` (👉🏽)")
  end
end

it "`1F449 1F3FE` (fully-qualified) should match `backhand index pointing right: medium-dark skin tone` (👉🏾)" do
  if m = "👉🏾".match(Emoji::EMOJI_REGEX)
    "👉🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏾"
  else
    fail("`1F449 1F3FE` doesn't match `backhand index pointing right: medium-dark skin tone` (👉🏾)")
  end
end

it "`1F449 1F3FF` (fully-qualified) should match `backhand index pointing right: dark skin tone` (👉🏿)" do
  if m = "👉🏿".match(Emoji::EMOJI_REGEX)
    "👉🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👉🏿"
  else
    fail("`1F449 1F3FF` doesn't match `backhand index pointing right: dark skin tone` (👉🏿)")
  end
end

it "`1F446` (fully-qualified) should match `backhand index pointing up` (👆)" do
  if m = "👆".match(Emoji::EMOJI_REGEX)
    "👆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆"
  else
    fail("`1F446` doesn't match `backhand index pointing up` (👆)")
  end
end

it "`1F446 1F3FB` (fully-qualified) should match `backhand index pointing up: light skin tone` (👆🏻)" do
  if m = "👆🏻".match(Emoji::EMOJI_REGEX)
    "👆🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏻"
  else
    fail("`1F446 1F3FB` doesn't match `backhand index pointing up: light skin tone` (👆🏻)")
  end
end

it "`1F446 1F3FC` (fully-qualified) should match `backhand index pointing up: medium-light skin tone` (👆🏼)" do
  if m = "👆🏼".match(Emoji::EMOJI_REGEX)
    "👆🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏼"
  else
    fail("`1F446 1F3FC` doesn't match `backhand index pointing up: medium-light skin tone` (👆🏼)")
  end
end

it "`1F446 1F3FD` (fully-qualified) should match `backhand index pointing up: medium skin tone` (👆🏽)" do
  if m = "👆🏽".match(Emoji::EMOJI_REGEX)
    "👆🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏽"
  else
    fail("`1F446 1F3FD` doesn't match `backhand index pointing up: medium skin tone` (👆🏽)")
  end
end

it "`1F446 1F3FE` (fully-qualified) should match `backhand index pointing up: medium-dark skin tone` (👆🏾)" do
  if m = "👆🏾".match(Emoji::EMOJI_REGEX)
    "👆🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏾"
  else
    fail("`1F446 1F3FE` doesn't match `backhand index pointing up: medium-dark skin tone` (👆🏾)")
  end
end

it "`1F446 1F3FF` (fully-qualified) should match `backhand index pointing up: dark skin tone` (👆🏿)" do
  if m = "👆🏿".match(Emoji::EMOJI_REGEX)
    "👆🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👆🏿"
  else
    fail("`1F446 1F3FF` doesn't match `backhand index pointing up: dark skin tone` (👆🏿)")
  end
end

it "`1F595` (fully-qualified) should match `middle finger` (🖕)" do
  if m = "🖕".match(Emoji::EMOJI_REGEX)
    "🖕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕"
  else
    fail("`1F595` doesn't match `middle finger` (🖕)")
  end
end

it "`1F595 1F3FB` (fully-qualified) should match `middle finger: light skin tone` (🖕🏻)" do
  if m = "🖕🏻".match(Emoji::EMOJI_REGEX)
    "🖕🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏻"
  else
    fail("`1F595 1F3FB` doesn't match `middle finger: light skin tone` (🖕🏻)")
  end
end

it "`1F595 1F3FC` (fully-qualified) should match `middle finger: medium-light skin tone` (🖕🏼)" do
  if m = "🖕🏼".match(Emoji::EMOJI_REGEX)
    "🖕🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏼"
  else
    fail("`1F595 1F3FC` doesn't match `middle finger: medium-light skin tone` (🖕🏼)")
  end
end

it "`1F595 1F3FD` (fully-qualified) should match `middle finger: medium skin tone` (🖕🏽)" do
  if m = "🖕🏽".match(Emoji::EMOJI_REGEX)
    "🖕🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏽"
  else
    fail("`1F595 1F3FD` doesn't match `middle finger: medium skin tone` (🖕🏽)")
  end
end

it "`1F595 1F3FE` (fully-qualified) should match `middle finger: medium-dark skin tone` (🖕🏾)" do
  if m = "🖕🏾".match(Emoji::EMOJI_REGEX)
    "🖕🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏾"
  else
    fail("`1F595 1F3FE` doesn't match `middle finger: medium-dark skin tone` (🖕🏾)")
  end
end

it "`1F595 1F3FF` (fully-qualified) should match `middle finger: dark skin tone` (🖕🏿)" do
  if m = "🖕🏿".match(Emoji::EMOJI_REGEX)
    "🖕🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖕🏿"
  else
    fail("`1F595 1F3FF` doesn't match `middle finger: dark skin tone` (🖕🏿)")
  end
end

it "`1F447` (fully-qualified) should match `backhand index pointing down` (👇)" do
  if m = "👇".match(Emoji::EMOJI_REGEX)
    "👇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇"
  else
    fail("`1F447` doesn't match `backhand index pointing down` (👇)")
  end
end

it "`1F447 1F3FB` (fully-qualified) should match `backhand index pointing down: light skin tone` (👇🏻)" do
  if m = "👇🏻".match(Emoji::EMOJI_REGEX)
    "👇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏻"
  else
    fail("`1F447 1F3FB` doesn't match `backhand index pointing down: light skin tone` (👇🏻)")
  end
end

it "`1F447 1F3FC` (fully-qualified) should match `backhand index pointing down: medium-light skin tone` (👇🏼)" do
  if m = "👇🏼".match(Emoji::EMOJI_REGEX)
    "👇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏼"
  else
    fail("`1F447 1F3FC` doesn't match `backhand index pointing down: medium-light skin tone` (👇🏼)")
  end
end

it "`1F447 1F3FD` (fully-qualified) should match `backhand index pointing down: medium skin tone` (👇🏽)" do
  if m = "👇🏽".match(Emoji::EMOJI_REGEX)
    "👇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏽"
  else
    fail("`1F447 1F3FD` doesn't match `backhand index pointing down: medium skin tone` (👇🏽)")
  end
end

it "`1F447 1F3FE` (fully-qualified) should match `backhand index pointing down: medium-dark skin tone` (👇🏾)" do
  if m = "👇🏾".match(Emoji::EMOJI_REGEX)
    "👇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏾"
  else
    fail("`1F447 1F3FE` doesn't match `backhand index pointing down: medium-dark skin tone` (👇🏾)")
  end
end

it "`1F447 1F3FF` (fully-qualified) should match `backhand index pointing down: dark skin tone` (👇🏿)" do
  if m = "👇🏿".match(Emoji::EMOJI_REGEX)
    "👇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👇🏿"
  else
    fail("`1F447 1F3FF` doesn't match `backhand index pointing down: dark skin tone` (👇🏿)")
  end
end

it "`261D FE0F` (fully-qualified) should match `index pointing up` (☝️)" do
  if m = "☝️".match(Emoji::EMOJI_REGEX)
    "☝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝️"
  else
    fail("`261D FE0F` doesn't match `index pointing up` (☝️)")
  end
end

it "`261D` (unqualified) should match `index pointing up` (☝)" do
  if m = "☝".match(Emoji::EMOJI_REGEX)
    "☝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝"
  else
    fail("`261D` doesn't match `index pointing up` (☝)")
  end
end

it "`261D 1F3FB` (fully-qualified) should match `index pointing up: light skin tone` (☝🏻)" do
  if m = "☝🏻".match(Emoji::EMOJI_REGEX)
    "☝🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏻"
  else
    fail("`261D 1F3FB` doesn't match `index pointing up: light skin tone` (☝🏻)")
  end
end

it "`261D 1F3FC` (fully-qualified) should match `index pointing up: medium-light skin tone` (☝🏼)" do
  if m = "☝🏼".match(Emoji::EMOJI_REGEX)
    "☝🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏼"
  else
    fail("`261D 1F3FC` doesn't match `index pointing up: medium-light skin tone` (☝🏼)")
  end
end

it "`261D 1F3FD` (fully-qualified) should match `index pointing up: medium skin tone` (☝🏽)" do
  if m = "☝🏽".match(Emoji::EMOJI_REGEX)
    "☝🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏽"
  else
    fail("`261D 1F3FD` doesn't match `index pointing up: medium skin tone` (☝🏽)")
  end
end

it "`261D 1F3FE` (fully-qualified) should match `index pointing up: medium-dark skin tone` (☝🏾)" do
  if m = "☝🏾".match(Emoji::EMOJI_REGEX)
    "☝🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏾"
  else
    fail("`261D 1F3FE` doesn't match `index pointing up: medium-dark skin tone` (☝🏾)")
  end
end

it "`261D 1F3FF` (fully-qualified) should match `index pointing up: dark skin tone` (☝🏿)" do
  if m = "☝🏿".match(Emoji::EMOJI_REGEX)
    "☝🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☝🏿"
  else
    fail("`261D 1F3FF` doesn't match `index pointing up: dark skin tone` (☝🏿)")
  end
end

it "`1F44D` (fully-qualified) should match `thumbs up` (👍)" do
  if m = "👍".match(Emoji::EMOJI_REGEX)
    "👍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍"
  else
    fail("`1F44D` doesn't match `thumbs up` (👍)")
  end
end

it "`1F44D 1F3FB` (fully-qualified) should match `thumbs up: light skin tone` (👍🏻)" do
  if m = "👍🏻".match(Emoji::EMOJI_REGEX)
    "👍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏻"
  else
    fail("`1F44D 1F3FB` doesn't match `thumbs up: light skin tone` (👍🏻)")
  end
end

it "`1F44D 1F3FC` (fully-qualified) should match `thumbs up: medium-light skin tone` (👍🏼)" do
  if m = "👍🏼".match(Emoji::EMOJI_REGEX)
    "👍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏼"
  else
    fail("`1F44D 1F3FC` doesn't match `thumbs up: medium-light skin tone` (👍🏼)")
  end
end

it "`1F44D 1F3FD` (fully-qualified) should match `thumbs up: medium skin tone` (👍🏽)" do
  if m = "👍🏽".match(Emoji::EMOJI_REGEX)
    "👍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏽"
  else
    fail("`1F44D 1F3FD` doesn't match `thumbs up: medium skin tone` (👍🏽)")
  end
end

it "`1F44D 1F3FE` (fully-qualified) should match `thumbs up: medium-dark skin tone` (👍🏾)" do
  if m = "👍🏾".match(Emoji::EMOJI_REGEX)
    "👍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏾"
  else
    fail("`1F44D 1F3FE` doesn't match `thumbs up: medium-dark skin tone` (👍🏾)")
  end
end

it "`1F44D 1F3FF` (fully-qualified) should match `thumbs up: dark skin tone` (👍🏿)" do
  if m = "👍🏿".match(Emoji::EMOJI_REGEX)
    "👍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👍🏿"
  else
    fail("`1F44D 1F3FF` doesn't match `thumbs up: dark skin tone` (👍🏿)")
  end
end

it "`1F44E` (fully-qualified) should match `thumbs down` (👎)" do
  if m = "👎".match(Emoji::EMOJI_REGEX)
    "👎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎"
  else
    fail("`1F44E` doesn't match `thumbs down` (👎)")
  end
end

it "`1F44E 1F3FB` (fully-qualified) should match `thumbs down: light skin tone` (👎🏻)" do
  if m = "👎🏻".match(Emoji::EMOJI_REGEX)
    "👎🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏻"
  else
    fail("`1F44E 1F3FB` doesn't match `thumbs down: light skin tone` (👎🏻)")
  end
end

it "`1F44E 1F3FC` (fully-qualified) should match `thumbs down: medium-light skin tone` (👎🏼)" do
  if m = "👎🏼".match(Emoji::EMOJI_REGEX)
    "👎🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏼"
  else
    fail("`1F44E 1F3FC` doesn't match `thumbs down: medium-light skin tone` (👎🏼)")
  end
end

it "`1F44E 1F3FD` (fully-qualified) should match `thumbs down: medium skin tone` (👎🏽)" do
  if m = "👎🏽".match(Emoji::EMOJI_REGEX)
    "👎🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏽"
  else
    fail("`1F44E 1F3FD` doesn't match `thumbs down: medium skin tone` (👎🏽)")
  end
end

it "`1F44E 1F3FE` (fully-qualified) should match `thumbs down: medium-dark skin tone` (👎🏾)" do
  if m = "👎🏾".match(Emoji::EMOJI_REGEX)
    "👎🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏾"
  else
    fail("`1F44E 1F3FE` doesn't match `thumbs down: medium-dark skin tone` (👎🏾)")
  end
end

it "`1F44E 1F3FF` (fully-qualified) should match `thumbs down: dark skin tone` (👎🏿)" do
  if m = "👎🏿".match(Emoji::EMOJI_REGEX)
    "👎🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👎🏿"
  else
    fail("`1F44E 1F3FF` doesn't match `thumbs down: dark skin tone` (👎🏿)")
  end
end

it "`270A` (fully-qualified) should match `raised fist` (✊)" do
  if m = "✊".match(Emoji::EMOJI_REGEX)
    "✊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊"
  else
    fail("`270A` doesn't match `raised fist` (✊)")
  end
end

it "`270A 1F3FB` (fully-qualified) should match `raised fist: light skin tone` (✊🏻)" do
  if m = "✊🏻".match(Emoji::EMOJI_REGEX)
    "✊🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏻"
  else
    fail("`270A 1F3FB` doesn't match `raised fist: light skin tone` (✊🏻)")
  end
end

it "`270A 1F3FC` (fully-qualified) should match `raised fist: medium-light skin tone` (✊🏼)" do
  if m = "✊🏼".match(Emoji::EMOJI_REGEX)
    "✊🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏼"
  else
    fail("`270A 1F3FC` doesn't match `raised fist: medium-light skin tone` (✊🏼)")
  end
end

it "`270A 1F3FD` (fully-qualified) should match `raised fist: medium skin tone` (✊🏽)" do
  if m = "✊🏽".match(Emoji::EMOJI_REGEX)
    "✊🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏽"
  else
    fail("`270A 1F3FD` doesn't match `raised fist: medium skin tone` (✊🏽)")
  end
end

it "`270A 1F3FE` (fully-qualified) should match `raised fist: medium-dark skin tone` (✊🏾)" do
  if m = "✊🏾".match(Emoji::EMOJI_REGEX)
    "✊🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏾"
  else
    fail("`270A 1F3FE` doesn't match `raised fist: medium-dark skin tone` (✊🏾)")
  end
end

it "`270A 1F3FF` (fully-qualified) should match `raised fist: dark skin tone` (✊🏿)" do
  if m = "✊🏿".match(Emoji::EMOJI_REGEX)
    "✊🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✊🏿"
  else
    fail("`270A 1F3FF` doesn't match `raised fist: dark skin tone` (✊🏿)")
  end
end

it "`1F44A` (fully-qualified) should match `oncoming fist` (👊)" do
  if m = "👊".match(Emoji::EMOJI_REGEX)
    "👊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊"
  else
    fail("`1F44A` doesn't match `oncoming fist` (👊)")
  end
end

it "`1F44A 1F3FB` (fully-qualified) should match `oncoming fist: light skin tone` (👊🏻)" do
  if m = "👊🏻".match(Emoji::EMOJI_REGEX)
    "👊🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏻"
  else
    fail("`1F44A 1F3FB` doesn't match `oncoming fist: light skin tone` (👊🏻)")
  end
end

it "`1F44A 1F3FC` (fully-qualified) should match `oncoming fist: medium-light skin tone` (👊🏼)" do
  if m = "👊🏼".match(Emoji::EMOJI_REGEX)
    "👊🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏼"
  else
    fail("`1F44A 1F3FC` doesn't match `oncoming fist: medium-light skin tone` (👊🏼)")
  end
end

it "`1F44A 1F3FD` (fully-qualified) should match `oncoming fist: medium skin tone` (👊🏽)" do
  if m = "👊🏽".match(Emoji::EMOJI_REGEX)
    "👊🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏽"
  else
    fail("`1F44A 1F3FD` doesn't match `oncoming fist: medium skin tone` (👊🏽)")
  end
end

it "`1F44A 1F3FE` (fully-qualified) should match `oncoming fist: medium-dark skin tone` (👊🏾)" do
  if m = "👊🏾".match(Emoji::EMOJI_REGEX)
    "👊🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏾"
  else
    fail("`1F44A 1F3FE` doesn't match `oncoming fist: medium-dark skin tone` (👊🏾)")
  end
end

it "`1F44A 1F3FF` (fully-qualified) should match `oncoming fist: dark skin tone` (👊🏿)" do
  if m = "👊🏿".match(Emoji::EMOJI_REGEX)
    "👊🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👊🏿"
  else
    fail("`1F44A 1F3FF` doesn't match `oncoming fist: dark skin tone` (👊🏿)")
  end
end

it "`1F91B` (fully-qualified) should match `left-facing fist` (🤛)" do
  if m = "🤛".match(Emoji::EMOJI_REGEX)
    "🤛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛"
  else
    fail("`1F91B` doesn't match `left-facing fist` (🤛)")
  end
end

it "`1F91B 1F3FB` (fully-qualified) should match `left-facing fist: light skin tone` (🤛🏻)" do
  if m = "🤛🏻".match(Emoji::EMOJI_REGEX)
    "🤛🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏻"
  else
    fail("`1F91B 1F3FB` doesn't match `left-facing fist: light skin tone` (🤛🏻)")
  end
end

it "`1F91B 1F3FC` (fully-qualified) should match `left-facing fist: medium-light skin tone` (🤛🏼)" do
  if m = "🤛🏼".match(Emoji::EMOJI_REGEX)
    "🤛🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏼"
  else
    fail("`1F91B 1F3FC` doesn't match `left-facing fist: medium-light skin tone` (🤛🏼)")
  end
end

it "`1F91B 1F3FD` (fully-qualified) should match `left-facing fist: medium skin tone` (🤛🏽)" do
  if m = "🤛🏽".match(Emoji::EMOJI_REGEX)
    "🤛🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏽"
  else
    fail("`1F91B 1F3FD` doesn't match `left-facing fist: medium skin tone` (🤛🏽)")
  end
end

it "`1F91B 1F3FE` (fully-qualified) should match `left-facing fist: medium-dark skin tone` (🤛🏾)" do
  if m = "🤛🏾".match(Emoji::EMOJI_REGEX)
    "🤛🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏾"
  else
    fail("`1F91B 1F3FE` doesn't match `left-facing fist: medium-dark skin tone` (🤛🏾)")
  end
end

it "`1F91B 1F3FF` (fully-qualified) should match `left-facing fist: dark skin tone` (🤛🏿)" do
  if m = "🤛🏿".match(Emoji::EMOJI_REGEX)
    "🤛🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤛🏿"
  else
    fail("`1F91B 1F3FF` doesn't match `left-facing fist: dark skin tone` (🤛🏿)")
  end
end

it "`1F91C` (fully-qualified) should match `right-facing fist` (🤜)" do
  if m = "🤜".match(Emoji::EMOJI_REGEX)
    "🤜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜"
  else
    fail("`1F91C` doesn't match `right-facing fist` (🤜)")
  end
end

it "`1F91C 1F3FB` (fully-qualified) should match `right-facing fist: light skin tone` (🤜🏻)" do
  if m = "🤜🏻".match(Emoji::EMOJI_REGEX)
    "🤜🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏻"
  else
    fail("`1F91C 1F3FB` doesn't match `right-facing fist: light skin tone` (🤜🏻)")
  end
end

it "`1F91C 1F3FC` (fully-qualified) should match `right-facing fist: medium-light skin tone` (🤜🏼)" do
  if m = "🤜🏼".match(Emoji::EMOJI_REGEX)
    "🤜🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏼"
  else
    fail("`1F91C 1F3FC` doesn't match `right-facing fist: medium-light skin tone` (🤜🏼)")
  end
end

it "`1F91C 1F3FD` (fully-qualified) should match `right-facing fist: medium skin tone` (🤜🏽)" do
  if m = "🤜🏽".match(Emoji::EMOJI_REGEX)
    "🤜🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏽"
  else
    fail("`1F91C 1F3FD` doesn't match `right-facing fist: medium skin tone` (🤜🏽)")
  end
end

it "`1F91C 1F3FE` (fully-qualified) should match `right-facing fist: medium-dark skin tone` (🤜🏾)" do
  if m = "🤜🏾".match(Emoji::EMOJI_REGEX)
    "🤜🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏾"
  else
    fail("`1F91C 1F3FE` doesn't match `right-facing fist: medium-dark skin tone` (🤜🏾)")
  end
end

it "`1F91C 1F3FF` (fully-qualified) should match `right-facing fist: dark skin tone` (🤜🏿)" do
  if m = "🤜🏿".match(Emoji::EMOJI_REGEX)
    "🤜🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤜🏿"
  else
    fail("`1F91C 1F3FF` doesn't match `right-facing fist: dark skin tone` (🤜🏿)")
  end
end

it "`1F44F` (fully-qualified) should match `clapping hands` (👏)" do
  if m = "👏".match(Emoji::EMOJI_REGEX)
    "👏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏"
  else
    fail("`1F44F` doesn't match `clapping hands` (👏)")
  end
end

it "`1F44F 1F3FB` (fully-qualified) should match `clapping hands: light skin tone` (👏🏻)" do
  if m = "👏🏻".match(Emoji::EMOJI_REGEX)
    "👏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏻"
  else
    fail("`1F44F 1F3FB` doesn't match `clapping hands: light skin tone` (👏🏻)")
  end
end

it "`1F44F 1F3FC` (fully-qualified) should match `clapping hands: medium-light skin tone` (👏🏼)" do
  if m = "👏🏼".match(Emoji::EMOJI_REGEX)
    "👏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏼"
  else
    fail("`1F44F 1F3FC` doesn't match `clapping hands: medium-light skin tone` (👏🏼)")
  end
end

it "`1F44F 1F3FD` (fully-qualified) should match `clapping hands: medium skin tone` (👏🏽)" do
  if m = "👏🏽".match(Emoji::EMOJI_REGEX)
    "👏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏽"
  else
    fail("`1F44F 1F3FD` doesn't match `clapping hands: medium skin tone` (👏🏽)")
  end
end

it "`1F44F 1F3FE` (fully-qualified) should match `clapping hands: medium-dark skin tone` (👏🏾)" do
  if m = "👏🏾".match(Emoji::EMOJI_REGEX)
    "👏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏾"
  else
    fail("`1F44F 1F3FE` doesn't match `clapping hands: medium-dark skin tone` (👏🏾)")
  end
end

it "`1F44F 1F3FF` (fully-qualified) should match `clapping hands: dark skin tone` (👏🏿)" do
  if m = "👏🏿".match(Emoji::EMOJI_REGEX)
    "👏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👏🏿"
  else
    fail("`1F44F 1F3FF` doesn't match `clapping hands: dark skin tone` (👏🏿)")
  end
end

it "`1F64C` (fully-qualified) should match `raising hands` (🙌)" do
  if m = "🙌".match(Emoji::EMOJI_REGEX)
    "🙌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌"
  else
    fail("`1F64C` doesn't match `raising hands` (🙌)")
  end
end

it "`1F64C 1F3FB` (fully-qualified) should match `raising hands: light skin tone` (🙌🏻)" do
  if m = "🙌🏻".match(Emoji::EMOJI_REGEX)
    "🙌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏻"
  else
    fail("`1F64C 1F3FB` doesn't match `raising hands: light skin tone` (🙌🏻)")
  end
end

it "`1F64C 1F3FC` (fully-qualified) should match `raising hands: medium-light skin tone` (🙌🏼)" do
  if m = "🙌🏼".match(Emoji::EMOJI_REGEX)
    "🙌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏼"
  else
    fail("`1F64C 1F3FC` doesn't match `raising hands: medium-light skin tone` (🙌🏼)")
  end
end

it "`1F64C 1F3FD` (fully-qualified) should match `raising hands: medium skin tone` (🙌🏽)" do
  if m = "🙌🏽".match(Emoji::EMOJI_REGEX)
    "🙌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏽"
  else
    fail("`1F64C 1F3FD` doesn't match `raising hands: medium skin tone` (🙌🏽)")
  end
end

it "`1F64C 1F3FE` (fully-qualified) should match `raising hands: medium-dark skin tone` (🙌🏾)" do
  if m = "🙌🏾".match(Emoji::EMOJI_REGEX)
    "🙌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏾"
  else
    fail("`1F64C 1F3FE` doesn't match `raising hands: medium-dark skin tone` (🙌🏾)")
  end
end

it "`1F64C 1F3FF` (fully-qualified) should match `raising hands: dark skin tone` (🙌🏿)" do
  if m = "🙌🏿".match(Emoji::EMOJI_REGEX)
    "🙌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙌🏿"
  else
    fail("`1F64C 1F3FF` doesn't match `raising hands: dark skin tone` (🙌🏿)")
  end
end

it "`1F450` (fully-qualified) should match `open hands` (👐)" do
  if m = "👐".match(Emoji::EMOJI_REGEX)
    "👐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐"
  else
    fail("`1F450` doesn't match `open hands` (👐)")
  end
end

it "`1F450 1F3FB` (fully-qualified) should match `open hands: light skin tone` (👐🏻)" do
  if m = "👐🏻".match(Emoji::EMOJI_REGEX)
    "👐🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏻"
  else
    fail("`1F450 1F3FB` doesn't match `open hands: light skin tone` (👐🏻)")
  end
end

it "`1F450 1F3FC` (fully-qualified) should match `open hands: medium-light skin tone` (👐🏼)" do
  if m = "👐🏼".match(Emoji::EMOJI_REGEX)
    "👐🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏼"
  else
    fail("`1F450 1F3FC` doesn't match `open hands: medium-light skin tone` (👐🏼)")
  end
end

it "`1F450 1F3FD` (fully-qualified) should match `open hands: medium skin tone` (👐🏽)" do
  if m = "👐🏽".match(Emoji::EMOJI_REGEX)
    "👐🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏽"
  else
    fail("`1F450 1F3FD` doesn't match `open hands: medium skin tone` (👐🏽)")
  end
end

it "`1F450 1F3FE` (fully-qualified) should match `open hands: medium-dark skin tone` (👐🏾)" do
  if m = "👐🏾".match(Emoji::EMOJI_REGEX)
    "👐🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏾"
  else
    fail("`1F450 1F3FE` doesn't match `open hands: medium-dark skin tone` (👐🏾)")
  end
end

it "`1F450 1F3FF` (fully-qualified) should match `open hands: dark skin tone` (👐🏿)" do
  if m = "👐🏿".match(Emoji::EMOJI_REGEX)
    "👐🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👐🏿"
  else
    fail("`1F450 1F3FF` doesn't match `open hands: dark skin tone` (👐🏿)")
  end
end

it "`1F932` (fully-qualified) should match `palms up together` (🤲)" do
  if m = "🤲".match(Emoji::EMOJI_REGEX)
    "🤲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲"
  else
    fail("`1F932` doesn't match `palms up together` (🤲)")
  end
end

it "`1F932 1F3FB` (fully-qualified) should match `palms up together: light skin tone` (🤲🏻)" do
  if m = "🤲🏻".match(Emoji::EMOJI_REGEX)
    "🤲🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏻"
  else
    fail("`1F932 1F3FB` doesn't match `palms up together: light skin tone` (🤲🏻)")
  end
end

it "`1F932 1F3FC` (fully-qualified) should match `palms up together: medium-light skin tone` (🤲🏼)" do
  if m = "🤲🏼".match(Emoji::EMOJI_REGEX)
    "🤲🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏼"
  else
    fail("`1F932 1F3FC` doesn't match `palms up together: medium-light skin tone` (🤲🏼)")
  end
end

it "`1F932 1F3FD` (fully-qualified) should match `palms up together: medium skin tone` (🤲🏽)" do
  if m = "🤲🏽".match(Emoji::EMOJI_REGEX)
    "🤲🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏽"
  else
    fail("`1F932 1F3FD` doesn't match `palms up together: medium skin tone` (🤲🏽)")
  end
end

it "`1F932 1F3FE` (fully-qualified) should match `palms up together: medium-dark skin tone` (🤲🏾)" do
  if m = "🤲🏾".match(Emoji::EMOJI_REGEX)
    "🤲🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏾"
  else
    fail("`1F932 1F3FE` doesn't match `palms up together: medium-dark skin tone` (🤲🏾)")
  end
end

it "`1F932 1F3FF` (fully-qualified) should match `palms up together: dark skin tone` (🤲🏿)" do
  if m = "🤲🏿".match(Emoji::EMOJI_REGEX)
    "🤲🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤲🏿"
  else
    fail("`1F932 1F3FF` doesn't match `palms up together: dark skin tone` (🤲🏿)")
  end
end

it "`1F91D` (fully-qualified) should match `handshake` (🤝)" do
  if m = "🤝".match(Emoji::EMOJI_REGEX)
    "🤝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤝"
  else
    fail("`1F91D` doesn't match `handshake` (🤝)")
  end
end

it "`1F64F` (fully-qualified) should match `folded hands` (🙏)" do
  if m = "🙏".match(Emoji::EMOJI_REGEX)
    "🙏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏"
  else
    fail("`1F64F` doesn't match `folded hands` (🙏)")
  end
end

it "`1F64F 1F3FB` (fully-qualified) should match `folded hands: light skin tone` (🙏🏻)" do
  if m = "🙏🏻".match(Emoji::EMOJI_REGEX)
    "🙏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏻"
  else
    fail("`1F64F 1F3FB` doesn't match `folded hands: light skin tone` (🙏🏻)")
  end
end

it "`1F64F 1F3FC` (fully-qualified) should match `folded hands: medium-light skin tone` (🙏🏼)" do
  if m = "🙏🏼".match(Emoji::EMOJI_REGEX)
    "🙏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏼"
  else
    fail("`1F64F 1F3FC` doesn't match `folded hands: medium-light skin tone` (🙏🏼)")
  end
end

it "`1F64F 1F3FD` (fully-qualified) should match `folded hands: medium skin tone` (🙏🏽)" do
  if m = "🙏🏽".match(Emoji::EMOJI_REGEX)
    "🙏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏽"
  else
    fail("`1F64F 1F3FD` doesn't match `folded hands: medium skin tone` (🙏🏽)")
  end
end

it "`1F64F 1F3FE` (fully-qualified) should match `folded hands: medium-dark skin tone` (🙏🏾)" do
  if m = "🙏🏾".match(Emoji::EMOJI_REGEX)
    "🙏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏾"
  else
    fail("`1F64F 1F3FE` doesn't match `folded hands: medium-dark skin tone` (🙏🏾)")
  end
end

it "`1F64F 1F3FF` (fully-qualified) should match `folded hands: dark skin tone` (🙏🏿)" do
  if m = "🙏🏿".match(Emoji::EMOJI_REGEX)
    "🙏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙏🏿"
  else
    fail("`1F64F 1F3FF` doesn't match `folded hands: dark skin tone` (🙏🏿)")
  end
end

it "`270D FE0F` (fully-qualified) should match `writing hand` (✍️)" do
  if m = "✍️".match(Emoji::EMOJI_REGEX)
    "✍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍️"
  else
    fail("`270D FE0F` doesn't match `writing hand` (✍️)")
  end
end

it "`270D` (unqualified) should match `writing hand` (✍)" do
  if m = "✍".match(Emoji::EMOJI_REGEX)
    "✍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍"
  else
    fail("`270D` doesn't match `writing hand` (✍)")
  end
end

it "`270D 1F3FB` (fully-qualified) should match `writing hand: light skin tone` (✍🏻)" do
  if m = "✍🏻".match(Emoji::EMOJI_REGEX)
    "✍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏻"
  else
    fail("`270D 1F3FB` doesn't match `writing hand: light skin tone` (✍🏻)")
  end
end

it "`270D 1F3FC` (fully-qualified) should match `writing hand: medium-light skin tone` (✍🏼)" do
  if m = "✍🏼".match(Emoji::EMOJI_REGEX)
    "✍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏼"
  else
    fail("`270D 1F3FC` doesn't match `writing hand: medium-light skin tone` (✍🏼)")
  end
end

it "`270D 1F3FD` (fully-qualified) should match `writing hand: medium skin tone` (✍🏽)" do
  if m = "✍🏽".match(Emoji::EMOJI_REGEX)
    "✍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏽"
  else
    fail("`270D 1F3FD` doesn't match `writing hand: medium skin tone` (✍🏽)")
  end
end

it "`270D 1F3FE` (fully-qualified) should match `writing hand: medium-dark skin tone` (✍🏾)" do
  if m = "✍🏾".match(Emoji::EMOJI_REGEX)
    "✍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏾"
  else
    fail("`270D 1F3FE` doesn't match `writing hand: medium-dark skin tone` (✍🏾)")
  end
end

it "`270D 1F3FF` (fully-qualified) should match `writing hand: dark skin tone` (✍🏿)" do
  if m = "✍🏿".match(Emoji::EMOJI_REGEX)
    "✍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✍🏿"
  else
    fail("`270D 1F3FF` doesn't match `writing hand: dark skin tone` (✍🏿)")
  end
end

it "`1F485` (fully-qualified) should match `nail polish` (💅)" do
  if m = "💅".match(Emoji::EMOJI_REGEX)
    "💅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅"
  else
    fail("`1F485` doesn't match `nail polish` (💅)")
  end
end

it "`1F485 1F3FB` (fully-qualified) should match `nail polish: light skin tone` (💅🏻)" do
  if m = "💅🏻".match(Emoji::EMOJI_REGEX)
    "💅🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏻"
  else
    fail("`1F485 1F3FB` doesn't match `nail polish: light skin tone` (💅🏻)")
  end
end

it "`1F485 1F3FC` (fully-qualified) should match `nail polish: medium-light skin tone` (💅🏼)" do
  if m = "💅🏼".match(Emoji::EMOJI_REGEX)
    "💅🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏼"
  else
    fail("`1F485 1F3FC` doesn't match `nail polish: medium-light skin tone` (💅🏼)")
  end
end

it "`1F485 1F3FD` (fully-qualified) should match `nail polish: medium skin tone` (💅🏽)" do
  if m = "💅🏽".match(Emoji::EMOJI_REGEX)
    "💅🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏽"
  else
    fail("`1F485 1F3FD` doesn't match `nail polish: medium skin tone` (💅🏽)")
  end
end

it "`1F485 1F3FE` (fully-qualified) should match `nail polish: medium-dark skin tone` (💅🏾)" do
  if m = "💅🏾".match(Emoji::EMOJI_REGEX)
    "💅🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏾"
  else
    fail("`1F485 1F3FE` doesn't match `nail polish: medium-dark skin tone` (💅🏾)")
  end
end

it "`1F485 1F3FF` (fully-qualified) should match `nail polish: dark skin tone` (💅🏿)" do
  if m = "💅🏿".match(Emoji::EMOJI_REGEX)
    "💅🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💅🏿"
  else
    fail("`1F485 1F3FF` doesn't match `nail polish: dark skin tone` (💅🏿)")
  end
end

it "`1F933` (fully-qualified) should match `selfie` (🤳)" do
  if m = "🤳".match(Emoji::EMOJI_REGEX)
    "🤳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳"
  else
    fail("`1F933` doesn't match `selfie` (🤳)")
  end
end

it "`1F933 1F3FB` (fully-qualified) should match `selfie: light skin tone` (🤳🏻)" do
  if m = "🤳🏻".match(Emoji::EMOJI_REGEX)
    "🤳🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏻"
  else
    fail("`1F933 1F3FB` doesn't match `selfie: light skin tone` (🤳🏻)")
  end
end

it "`1F933 1F3FC` (fully-qualified) should match `selfie: medium-light skin tone` (🤳🏼)" do
  if m = "🤳🏼".match(Emoji::EMOJI_REGEX)
    "🤳🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏼"
  else
    fail("`1F933 1F3FC` doesn't match `selfie: medium-light skin tone` (🤳🏼)")
  end
end

it "`1F933 1F3FD` (fully-qualified) should match `selfie: medium skin tone` (🤳🏽)" do
  if m = "🤳🏽".match(Emoji::EMOJI_REGEX)
    "🤳🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏽"
  else
    fail("`1F933 1F3FD` doesn't match `selfie: medium skin tone` (🤳🏽)")
  end
end

it "`1F933 1F3FE` (fully-qualified) should match `selfie: medium-dark skin tone` (🤳🏾)" do
  if m = "🤳🏾".match(Emoji::EMOJI_REGEX)
    "🤳🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏾"
  else
    fail("`1F933 1F3FE` doesn't match `selfie: medium-dark skin tone` (🤳🏾)")
  end
end

it "`1F933 1F3FF` (fully-qualified) should match `selfie: dark skin tone` (🤳🏿)" do
  if m = "🤳🏿".match(Emoji::EMOJI_REGEX)
    "🤳🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤳🏿"
  else
    fail("`1F933 1F3FF` doesn't match `selfie: dark skin tone` (🤳🏿)")
  end
end

it "`1F4AA` (fully-qualified) should match `flexed biceps` (💪)" do
  if m = "💪".match(Emoji::EMOJI_REGEX)
    "💪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪"
  else
    fail("`1F4AA` doesn't match `flexed biceps` (💪)")
  end
end

it "`1F4AA 1F3FB` (fully-qualified) should match `flexed biceps: light skin tone` (💪🏻)" do
  if m = "💪🏻".match(Emoji::EMOJI_REGEX)
    "💪🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏻"
  else
    fail("`1F4AA 1F3FB` doesn't match `flexed biceps: light skin tone` (💪🏻)")
  end
end

it "`1F4AA 1F3FC` (fully-qualified) should match `flexed biceps: medium-light skin tone` (💪🏼)" do
  if m = "💪🏼".match(Emoji::EMOJI_REGEX)
    "💪🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏼"
  else
    fail("`1F4AA 1F3FC` doesn't match `flexed biceps: medium-light skin tone` (💪🏼)")
  end
end

it "`1F4AA 1F3FD` (fully-qualified) should match `flexed biceps: medium skin tone` (💪🏽)" do
  if m = "💪🏽".match(Emoji::EMOJI_REGEX)
    "💪🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏽"
  else
    fail("`1F4AA 1F3FD` doesn't match `flexed biceps: medium skin tone` (💪🏽)")
  end
end

it "`1F4AA 1F3FE` (fully-qualified) should match `flexed biceps: medium-dark skin tone` (💪🏾)" do
  if m = "💪🏾".match(Emoji::EMOJI_REGEX)
    "💪🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏾"
  else
    fail("`1F4AA 1F3FE` doesn't match `flexed biceps: medium-dark skin tone` (💪🏾)")
  end
end

it "`1F4AA 1F3FF` (fully-qualified) should match `flexed biceps: dark skin tone` (💪🏿)" do
  if m = "💪🏿".match(Emoji::EMOJI_REGEX)
    "💪🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💪🏿"
  else
    fail("`1F4AA 1F3FF` doesn't match `flexed biceps: dark skin tone` (💪🏿)")
  end
end

it "`1F9BE` (fully-qualified) should match `mechanical arm` (🦾)" do
  if m = "🦾".match(Emoji::EMOJI_REGEX)
    "🦾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦾"
  else
    fail("`1F9BE` doesn't match `mechanical arm` (🦾)")
  end
end

it "`1F9BF` (fully-qualified) should match `mechanical leg` (🦿)" do
  if m = "🦿".match(Emoji::EMOJI_REGEX)
    "🦿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦿"
  else
    fail("`1F9BF` doesn't match `mechanical leg` (🦿)")
  end
end

it "`1F9B5` (fully-qualified) should match `leg` (🦵)" do
  if m = "🦵".match(Emoji::EMOJI_REGEX)
    "🦵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵"
  else
    fail("`1F9B5` doesn't match `leg` (🦵)")
  end
end

it "`1F9B5 1F3FB` (fully-qualified) should match `leg: light skin tone` (🦵🏻)" do
  if m = "🦵🏻".match(Emoji::EMOJI_REGEX)
    "🦵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏻"
  else
    fail("`1F9B5 1F3FB` doesn't match `leg: light skin tone` (🦵🏻)")
  end
end

it "`1F9B5 1F3FC` (fully-qualified) should match `leg: medium-light skin tone` (🦵🏼)" do
  if m = "🦵🏼".match(Emoji::EMOJI_REGEX)
    "🦵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏼"
  else
    fail("`1F9B5 1F3FC` doesn't match `leg: medium-light skin tone` (🦵🏼)")
  end
end

it "`1F9B5 1F3FD` (fully-qualified) should match `leg: medium skin tone` (🦵🏽)" do
  if m = "🦵🏽".match(Emoji::EMOJI_REGEX)
    "🦵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏽"
  else
    fail("`1F9B5 1F3FD` doesn't match `leg: medium skin tone` (🦵🏽)")
  end
end

it "`1F9B5 1F3FE` (fully-qualified) should match `leg: medium-dark skin tone` (🦵🏾)" do
  if m = "🦵🏾".match(Emoji::EMOJI_REGEX)
    "🦵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏾"
  else
    fail("`1F9B5 1F3FE` doesn't match `leg: medium-dark skin tone` (🦵🏾)")
  end
end

it "`1F9B5 1F3FF` (fully-qualified) should match `leg: dark skin tone` (🦵🏿)" do
  if m = "🦵🏿".match(Emoji::EMOJI_REGEX)
    "🦵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦵🏿"
  else
    fail("`1F9B5 1F3FF` doesn't match `leg: dark skin tone` (🦵🏿)")
  end
end

it "`1F9B6` (fully-qualified) should match `foot` (🦶)" do
  if m = "🦶".match(Emoji::EMOJI_REGEX)
    "🦶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶"
  else
    fail("`1F9B6` doesn't match `foot` (🦶)")
  end
end

it "`1F9B6 1F3FB` (fully-qualified) should match `foot: light skin tone` (🦶🏻)" do
  if m = "🦶🏻".match(Emoji::EMOJI_REGEX)
    "🦶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏻"
  else
    fail("`1F9B6 1F3FB` doesn't match `foot: light skin tone` (🦶🏻)")
  end
end

it "`1F9B6 1F3FC` (fully-qualified) should match `foot: medium-light skin tone` (🦶🏼)" do
  if m = "🦶🏼".match(Emoji::EMOJI_REGEX)
    "🦶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏼"
  else
    fail("`1F9B6 1F3FC` doesn't match `foot: medium-light skin tone` (🦶🏼)")
  end
end

it "`1F9B6 1F3FD` (fully-qualified) should match `foot: medium skin tone` (🦶🏽)" do
  if m = "🦶🏽".match(Emoji::EMOJI_REGEX)
    "🦶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏽"
  else
    fail("`1F9B6 1F3FD` doesn't match `foot: medium skin tone` (🦶🏽)")
  end
end

it "`1F9B6 1F3FE` (fully-qualified) should match `foot: medium-dark skin tone` (🦶🏾)" do
  if m = "🦶🏾".match(Emoji::EMOJI_REGEX)
    "🦶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏾"
  else
    fail("`1F9B6 1F3FE` doesn't match `foot: medium-dark skin tone` (🦶🏾)")
  end
end

it "`1F9B6 1F3FF` (fully-qualified) should match `foot: dark skin tone` (🦶🏿)" do
  if m = "🦶🏿".match(Emoji::EMOJI_REGEX)
    "🦶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦶🏿"
  else
    fail("`1F9B6 1F3FF` doesn't match `foot: dark skin tone` (🦶🏿)")
  end
end

it "`1F442` (fully-qualified) should match `ear` (👂)" do
  if m = "👂".match(Emoji::EMOJI_REGEX)
    "👂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂"
  else
    fail("`1F442` doesn't match `ear` (👂)")
  end
end

it "`1F442 1F3FB` (fully-qualified) should match `ear: light skin tone` (👂🏻)" do
  if m = "👂🏻".match(Emoji::EMOJI_REGEX)
    "👂🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏻"
  else
    fail("`1F442 1F3FB` doesn't match `ear: light skin tone` (👂🏻)")
  end
end

it "`1F442 1F3FC` (fully-qualified) should match `ear: medium-light skin tone` (👂🏼)" do
  if m = "👂🏼".match(Emoji::EMOJI_REGEX)
    "👂🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏼"
  else
    fail("`1F442 1F3FC` doesn't match `ear: medium-light skin tone` (👂🏼)")
  end
end

it "`1F442 1F3FD` (fully-qualified) should match `ear: medium skin tone` (👂🏽)" do
  if m = "👂🏽".match(Emoji::EMOJI_REGEX)
    "👂🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏽"
  else
    fail("`1F442 1F3FD` doesn't match `ear: medium skin tone` (👂🏽)")
  end
end

it "`1F442 1F3FE` (fully-qualified) should match `ear: medium-dark skin tone` (👂🏾)" do
  if m = "👂🏾".match(Emoji::EMOJI_REGEX)
    "👂🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏾"
  else
    fail("`1F442 1F3FE` doesn't match `ear: medium-dark skin tone` (👂🏾)")
  end
end

it "`1F442 1F3FF` (fully-qualified) should match `ear: dark skin tone` (👂🏿)" do
  if m = "👂🏿".match(Emoji::EMOJI_REGEX)
    "👂🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👂🏿"
  else
    fail("`1F442 1F3FF` doesn't match `ear: dark skin tone` (👂🏿)")
  end
end

it "`1F9BB` (fully-qualified) should match `ear with hearing aid` (🦻)" do
  if m = "🦻".match(Emoji::EMOJI_REGEX)
    "🦻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻"
  else
    fail("`1F9BB` doesn't match `ear with hearing aid` (🦻)")
  end
end

it "`1F9BB 1F3FB` (fully-qualified) should match `ear with hearing aid: light skin tone` (🦻🏻)" do
  if m = "🦻🏻".match(Emoji::EMOJI_REGEX)
    "🦻🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏻"
  else
    fail("`1F9BB 1F3FB` doesn't match `ear with hearing aid: light skin tone` (🦻🏻)")
  end
end

it "`1F9BB 1F3FC` (fully-qualified) should match `ear with hearing aid: medium-light skin tone` (🦻🏼)" do
  if m = "🦻🏼".match(Emoji::EMOJI_REGEX)
    "🦻🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏼"
  else
    fail("`1F9BB 1F3FC` doesn't match `ear with hearing aid: medium-light skin tone` (🦻🏼)")
  end
end

it "`1F9BB 1F3FD` (fully-qualified) should match `ear with hearing aid: medium skin tone` (🦻🏽)" do
  if m = "🦻🏽".match(Emoji::EMOJI_REGEX)
    "🦻🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏽"
  else
    fail("`1F9BB 1F3FD` doesn't match `ear with hearing aid: medium skin tone` (🦻🏽)")
  end
end

it "`1F9BB 1F3FE` (fully-qualified) should match `ear with hearing aid: medium-dark skin tone` (🦻🏾)" do
  if m = "🦻🏾".match(Emoji::EMOJI_REGEX)
    "🦻🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏾"
  else
    fail("`1F9BB 1F3FE` doesn't match `ear with hearing aid: medium-dark skin tone` (🦻🏾)")
  end
end

it "`1F9BB 1F3FF` (fully-qualified) should match `ear with hearing aid: dark skin tone` (🦻🏿)" do
  if m = "🦻🏿".match(Emoji::EMOJI_REGEX)
    "🦻🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦻🏿"
  else
    fail("`1F9BB 1F3FF` doesn't match `ear with hearing aid: dark skin tone` (🦻🏿)")
  end
end

it "`1F443` (fully-qualified) should match `nose` (👃)" do
  if m = "👃".match(Emoji::EMOJI_REGEX)
    "👃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃"
  else
    fail("`1F443` doesn't match `nose` (👃)")
  end
end

it "`1F443 1F3FB` (fully-qualified) should match `nose: light skin tone` (👃🏻)" do
  if m = "👃🏻".match(Emoji::EMOJI_REGEX)
    "👃🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏻"
  else
    fail("`1F443 1F3FB` doesn't match `nose: light skin tone` (👃🏻)")
  end
end

it "`1F443 1F3FC` (fully-qualified) should match `nose: medium-light skin tone` (👃🏼)" do
  if m = "👃🏼".match(Emoji::EMOJI_REGEX)
    "👃🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏼"
  else
    fail("`1F443 1F3FC` doesn't match `nose: medium-light skin tone` (👃🏼)")
  end
end

it "`1F443 1F3FD` (fully-qualified) should match `nose: medium skin tone` (👃🏽)" do
  if m = "👃🏽".match(Emoji::EMOJI_REGEX)
    "👃🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏽"
  else
    fail("`1F443 1F3FD` doesn't match `nose: medium skin tone` (👃🏽)")
  end
end

it "`1F443 1F3FE` (fully-qualified) should match `nose: medium-dark skin tone` (👃🏾)" do
  if m = "👃🏾".match(Emoji::EMOJI_REGEX)
    "👃🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏾"
  else
    fail("`1F443 1F3FE` doesn't match `nose: medium-dark skin tone` (👃🏾)")
  end
end

it "`1F443 1F3FF` (fully-qualified) should match `nose: dark skin tone` (👃🏿)" do
  if m = "👃🏿".match(Emoji::EMOJI_REGEX)
    "👃🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👃🏿"
  else
    fail("`1F443 1F3FF` doesn't match `nose: dark skin tone` (👃🏿)")
  end
end

it "`1F9E0` (fully-qualified) should match `brain` (🧠)" do
  if m = "🧠".match(Emoji::EMOJI_REGEX)
    "🧠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧠"
  else
    fail("`1F9E0` doesn't match `brain` (🧠)")
  end
end

it "`1F9B7` (fully-qualified) should match `tooth` (🦷)" do
  if m = "🦷".match(Emoji::EMOJI_REGEX)
    "🦷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦷"
  else
    fail("`1F9B7` doesn't match `tooth` (🦷)")
  end
end

it "`1F9B4` (fully-qualified) should match `bone` (🦴)" do
  if m = "🦴".match(Emoji::EMOJI_REGEX)
    "🦴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦴"
  else
    fail("`1F9B4` doesn't match `bone` (🦴)")
  end
end

it "`1F440` (fully-qualified) should match `eyes` (👀)" do
  if m = "👀".match(Emoji::EMOJI_REGEX)
    "👀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👀"
  else
    fail("`1F440` doesn't match `eyes` (👀)")
  end
end

it "`1F441 FE0F` (fully-qualified) should match `eye` (👁️)" do
  if m = "👁️".match(Emoji::EMOJI_REGEX)
    "👁️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁️"
  else
    fail("`1F441 FE0F` doesn't match `eye` (👁️)")
  end
end

it "`1F441` (unqualified) should match `eye` (👁)" do
  if m = "👁".match(Emoji::EMOJI_REGEX)
    "👁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👁"
  else
    fail("`1F441` doesn't match `eye` (👁)")
  end
end

it "`1F445` (fully-qualified) should match `tongue` (👅)" do
  if m = "👅".match(Emoji::EMOJI_REGEX)
    "👅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👅"
  else
    fail("`1F445` doesn't match `tongue` (👅)")
  end
end

it "`1F444` (fully-qualified) should match `mouth` (👄)" do
  if m = "👄".match(Emoji::EMOJI_REGEX)
    "👄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👄"
  else
    fail("`1F444` doesn't match `mouth` (👄)")
  end
end

it "`1F476` (fully-qualified) should match `baby` (👶)" do
  if m = "👶".match(Emoji::EMOJI_REGEX)
    "👶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶"
  else
    fail("`1F476` doesn't match `baby` (👶)")
  end
end

it "`1F476 1F3FB` (fully-qualified) should match `baby: light skin tone` (👶🏻)" do
  if m = "👶🏻".match(Emoji::EMOJI_REGEX)
    "👶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏻"
  else
    fail("`1F476 1F3FB` doesn't match `baby: light skin tone` (👶🏻)")
  end
end

it "`1F476 1F3FC` (fully-qualified) should match `baby: medium-light skin tone` (👶🏼)" do
  if m = "👶🏼".match(Emoji::EMOJI_REGEX)
    "👶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏼"
  else
    fail("`1F476 1F3FC` doesn't match `baby: medium-light skin tone` (👶🏼)")
  end
end

it "`1F476 1F3FD` (fully-qualified) should match `baby: medium skin tone` (👶🏽)" do
  if m = "👶🏽".match(Emoji::EMOJI_REGEX)
    "👶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏽"
  else
    fail("`1F476 1F3FD` doesn't match `baby: medium skin tone` (👶🏽)")
  end
end

it "`1F476 1F3FE` (fully-qualified) should match `baby: medium-dark skin tone` (👶🏾)" do
  if m = "👶🏾".match(Emoji::EMOJI_REGEX)
    "👶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏾"
  else
    fail("`1F476 1F3FE` doesn't match `baby: medium-dark skin tone` (👶🏾)")
  end
end

it "`1F476 1F3FF` (fully-qualified) should match `baby: dark skin tone` (👶🏿)" do
  if m = "👶🏿".match(Emoji::EMOJI_REGEX)
    "👶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👶🏿"
  else
    fail("`1F476 1F3FF` doesn't match `baby: dark skin tone` (👶🏿)")
  end
end

it "`1F9D2` (fully-qualified) should match `child` (🧒)" do
  if m = "🧒".match(Emoji::EMOJI_REGEX)
    "🧒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒"
  else
    fail("`1F9D2` doesn't match `child` (🧒)")
  end
end

it "`1F9D2 1F3FB` (fully-qualified) should match `child: light skin tone` (🧒🏻)" do
  if m = "🧒🏻".match(Emoji::EMOJI_REGEX)
    "🧒🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏻"
  else
    fail("`1F9D2 1F3FB` doesn't match `child: light skin tone` (🧒🏻)")
  end
end

it "`1F9D2 1F3FC` (fully-qualified) should match `child: medium-light skin tone` (🧒🏼)" do
  if m = "🧒🏼".match(Emoji::EMOJI_REGEX)
    "🧒🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏼"
  else
    fail("`1F9D2 1F3FC` doesn't match `child: medium-light skin tone` (🧒🏼)")
  end
end

it "`1F9D2 1F3FD` (fully-qualified) should match `child: medium skin tone` (🧒🏽)" do
  if m = "🧒🏽".match(Emoji::EMOJI_REGEX)
    "🧒🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏽"
  else
    fail("`1F9D2 1F3FD` doesn't match `child: medium skin tone` (🧒🏽)")
  end
end

it "`1F9D2 1F3FE` (fully-qualified) should match `child: medium-dark skin tone` (🧒🏾)" do
  if m = "🧒🏾".match(Emoji::EMOJI_REGEX)
    "🧒🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏾"
  else
    fail("`1F9D2 1F3FE` doesn't match `child: medium-dark skin tone` (🧒🏾)")
  end
end

it "`1F9D2 1F3FF` (fully-qualified) should match `child: dark skin tone` (🧒🏿)" do
  if m = "🧒🏿".match(Emoji::EMOJI_REGEX)
    "🧒🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧒🏿"
  else
    fail("`1F9D2 1F3FF` doesn't match `child: dark skin tone` (🧒🏿)")
  end
end

it "`1F466` (fully-qualified) should match `boy` (👦)" do
  if m = "👦".match(Emoji::EMOJI_REGEX)
    "👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦"
  else
    fail("`1F466` doesn't match `boy` (👦)")
  end
end

it "`1F466 1F3FB` (fully-qualified) should match `boy: light skin tone` (👦🏻)" do
  if m = "👦🏻".match(Emoji::EMOJI_REGEX)
    "👦🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏻"
  else
    fail("`1F466 1F3FB` doesn't match `boy: light skin tone` (👦🏻)")
  end
end

it "`1F466 1F3FC` (fully-qualified) should match `boy: medium-light skin tone` (👦🏼)" do
  if m = "👦🏼".match(Emoji::EMOJI_REGEX)
    "👦🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏼"
  else
    fail("`1F466 1F3FC` doesn't match `boy: medium-light skin tone` (👦🏼)")
  end
end

it "`1F466 1F3FD` (fully-qualified) should match `boy: medium skin tone` (👦🏽)" do
  if m = "👦🏽".match(Emoji::EMOJI_REGEX)
    "👦🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏽"
  else
    fail("`1F466 1F3FD` doesn't match `boy: medium skin tone` (👦🏽)")
  end
end

it "`1F466 1F3FE` (fully-qualified) should match `boy: medium-dark skin tone` (👦🏾)" do
  if m = "👦🏾".match(Emoji::EMOJI_REGEX)
    "👦🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏾"
  else
    fail("`1F466 1F3FE` doesn't match `boy: medium-dark skin tone` (👦🏾)")
  end
end

it "`1F466 1F3FF` (fully-qualified) should match `boy: dark skin tone` (👦🏿)" do
  if m = "👦🏿".match(Emoji::EMOJI_REGEX)
    "👦🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👦🏿"
  else
    fail("`1F466 1F3FF` doesn't match `boy: dark skin tone` (👦🏿)")
  end
end

it "`1F467` (fully-qualified) should match `girl` (👧)" do
  if m = "👧".match(Emoji::EMOJI_REGEX)
    "👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧"
  else
    fail("`1F467` doesn't match `girl` (👧)")
  end
end

it "`1F467 1F3FB` (fully-qualified) should match `girl: light skin tone` (👧🏻)" do
  if m = "👧🏻".match(Emoji::EMOJI_REGEX)
    "👧🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏻"
  else
    fail("`1F467 1F3FB` doesn't match `girl: light skin tone` (👧🏻)")
  end
end

it "`1F467 1F3FC` (fully-qualified) should match `girl: medium-light skin tone` (👧🏼)" do
  if m = "👧🏼".match(Emoji::EMOJI_REGEX)
    "👧🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏼"
  else
    fail("`1F467 1F3FC` doesn't match `girl: medium-light skin tone` (👧🏼)")
  end
end

it "`1F467 1F3FD` (fully-qualified) should match `girl: medium skin tone` (👧🏽)" do
  if m = "👧🏽".match(Emoji::EMOJI_REGEX)
    "👧🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏽"
  else
    fail("`1F467 1F3FD` doesn't match `girl: medium skin tone` (👧🏽)")
  end
end

it "`1F467 1F3FE` (fully-qualified) should match `girl: medium-dark skin tone` (👧🏾)" do
  if m = "👧🏾".match(Emoji::EMOJI_REGEX)
    "👧🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏾"
  else
    fail("`1F467 1F3FE` doesn't match `girl: medium-dark skin tone` (👧🏾)")
  end
end

it "`1F467 1F3FF` (fully-qualified) should match `girl: dark skin tone` (👧🏿)" do
  if m = "👧🏿".match(Emoji::EMOJI_REGEX)
    "👧🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👧🏿"
  else
    fail("`1F467 1F3FF` doesn't match `girl: dark skin tone` (👧🏿)")
  end
end

it "`1F9D1` (fully-qualified) should match `person` (🧑)" do
  if m = "🧑".match(Emoji::EMOJI_REGEX)
    "🧑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑"
  else
    fail("`1F9D1` doesn't match `person` (🧑)")
  end
end

it "`1F9D1 1F3FB` (fully-qualified) should match `person: light skin tone` (🧑🏻)" do
  if m = "🧑🏻".match(Emoji::EMOJI_REGEX)
    "🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏻"
  else
    fail("`1F9D1 1F3FB` doesn't match `person: light skin tone` (🧑🏻)")
  end
end

it "`1F9D1 1F3FC` (fully-qualified) should match `person: medium-light skin tone` (🧑🏼)" do
  if m = "🧑🏼".match(Emoji::EMOJI_REGEX)
    "🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏼"
  else
    fail("`1F9D1 1F3FC` doesn't match `person: medium-light skin tone` (🧑🏼)")
  end
end

it "`1F9D1 1F3FD` (fully-qualified) should match `person: medium skin tone` (🧑🏽)" do
  if m = "🧑🏽".match(Emoji::EMOJI_REGEX)
    "🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽"
  else
    fail("`1F9D1 1F3FD` doesn't match `person: medium skin tone` (🧑🏽)")
  end
end

it "`1F9D1 1F3FE` (fully-qualified) should match `person: medium-dark skin tone` (🧑🏾)" do
  if m = "🧑🏾".match(Emoji::EMOJI_REGEX)
    "🧑🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾"
  else
    fail("`1F9D1 1F3FE` doesn't match `person: medium-dark skin tone` (🧑🏾)")
  end
end

it "`1F9D1 1F3FF` (fully-qualified) should match `person: dark skin tone` (🧑🏿)" do
  if m = "🧑🏿".match(Emoji::EMOJI_REGEX)
    "🧑🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿"
  else
    fail("`1F9D1 1F3FF` doesn't match `person: dark skin tone` (🧑🏿)")
  end
end

it "`1F471` (fully-qualified) should match `person: blond hair` (👱)" do
  if m = "👱".match(Emoji::EMOJI_REGEX)
    "👱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱"
  else
    fail("`1F471` doesn't match `person: blond hair` (👱)")
  end
end

it "`1F471 1F3FB` (fully-qualified) should match `person: light skin tone, blond hair` (👱🏻)" do
  if m = "👱🏻".match(Emoji::EMOJI_REGEX)
    "👱🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻"
  else
    fail("`1F471 1F3FB` doesn't match `person: light skin tone, blond hair` (👱🏻)")
  end
end

it "`1F471 1F3FC` (fully-qualified) should match `person: medium-light skin tone, blond hair` (👱🏼)" do
  if m = "👱🏼".match(Emoji::EMOJI_REGEX)
    "👱🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼"
  else
    fail("`1F471 1F3FC` doesn't match `person: medium-light skin tone, blond hair` (👱🏼)")
  end
end

it "`1F471 1F3FD` (fully-qualified) should match `person: medium skin tone, blond hair` (👱🏽)" do
  if m = "👱🏽".match(Emoji::EMOJI_REGEX)
    "👱🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽"
  else
    fail("`1F471 1F3FD` doesn't match `person: medium skin tone, blond hair` (👱🏽)")
  end
end

it "`1F471 1F3FE` (fully-qualified) should match `person: medium-dark skin tone, blond hair` (👱🏾)" do
  if m = "👱🏾".match(Emoji::EMOJI_REGEX)
    "👱🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾"
  else
    fail("`1F471 1F3FE` doesn't match `person: medium-dark skin tone, blond hair` (👱🏾)")
  end
end

it "`1F471 1F3FF` (fully-qualified) should match `person: dark skin tone, blond hair` (👱🏿)" do
  if m = "👱🏿".match(Emoji::EMOJI_REGEX)
    "👱🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿"
  else
    fail("`1F471 1F3FF` doesn't match `person: dark skin tone, blond hair` (👱🏿)")
  end
end

it "`1F468` (fully-qualified) should match `man` (👨)" do
  if m = "👨".match(Emoji::EMOJI_REGEX)
    "👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨"
  else
    fail("`1F468` doesn't match `man` (👨)")
  end
end

it "`1F468 1F3FB` (fully-qualified) should match `man: light skin tone` (👨🏻)" do
  if m = "👨🏻".match(Emoji::EMOJI_REGEX)
    "👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻"
  else
    fail("`1F468 1F3FB` doesn't match `man: light skin tone` (👨🏻)")
  end
end

it "`1F468 1F3FC` (fully-qualified) should match `man: medium-light skin tone` (👨🏼)" do
  if m = "👨🏼".match(Emoji::EMOJI_REGEX)
    "👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼"
  else
    fail("`1F468 1F3FC` doesn't match `man: medium-light skin tone` (👨🏼)")
  end
end

it "`1F468 1F3FD` (fully-qualified) should match `man: medium skin tone` (👨🏽)" do
  if m = "👨🏽".match(Emoji::EMOJI_REGEX)
    "👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽"
  else
    fail("`1F468 1F3FD` doesn't match `man: medium skin tone` (👨🏽)")
  end
end

it "`1F468 1F3FE` (fully-qualified) should match `man: medium-dark skin tone` (👨🏾)" do
  if m = "👨🏾".match(Emoji::EMOJI_REGEX)
    "👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾"
  else
    fail("`1F468 1F3FE` doesn't match `man: medium-dark skin tone` (👨🏾)")
  end
end

it "`1F468 1F3FF` (fully-qualified) should match `man: dark skin tone` (👨🏿)" do
  if m = "👨🏿".match(Emoji::EMOJI_REGEX)
    "👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿"
  else
    fail("`1F468 1F3FF` doesn't match `man: dark skin tone` (👨🏿)")
  end
end

it "`1F9D4` (fully-qualified) should match `man: beard` (🧔)" do
  if m = "🧔".match(Emoji::EMOJI_REGEX)
    "🧔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔"
  else
    fail("`1F9D4` doesn't match `man: beard` (🧔)")
  end
end

it "`1F9D4 1F3FB` (fully-qualified) should match `man: light skin tone, beard` (🧔🏻)" do
  if m = "🧔🏻".match(Emoji::EMOJI_REGEX)
    "🧔🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏻"
  else
    fail("`1F9D4 1F3FB` doesn't match `man: light skin tone, beard` (🧔🏻)")
  end
end

it "`1F9D4 1F3FC` (fully-qualified) should match `man: medium-light skin tone, beard` (🧔🏼)" do
  if m = "🧔🏼".match(Emoji::EMOJI_REGEX)
    "🧔🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏼"
  else
    fail("`1F9D4 1F3FC` doesn't match `man: medium-light skin tone, beard` (🧔🏼)")
  end
end

it "`1F9D4 1F3FD` (fully-qualified) should match `man: medium skin tone, beard` (🧔🏽)" do
  if m = "🧔🏽".match(Emoji::EMOJI_REGEX)
    "🧔🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏽"
  else
    fail("`1F9D4 1F3FD` doesn't match `man: medium skin tone, beard` (🧔🏽)")
  end
end

it "`1F9D4 1F3FE` (fully-qualified) should match `man: medium-dark skin tone, beard` (🧔🏾)" do
  if m = "🧔🏾".match(Emoji::EMOJI_REGEX)
    "🧔🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏾"
  else
    fail("`1F9D4 1F3FE` doesn't match `man: medium-dark skin tone, beard` (🧔🏾)")
  end
end

it "`1F9D4 1F3FF` (fully-qualified) should match `man: dark skin tone, beard` (🧔🏿)" do
  if m = "🧔🏿".match(Emoji::EMOJI_REGEX)
    "🧔🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧔🏿"
  else
    fail("`1F9D4 1F3FF` doesn't match `man: dark skin tone, beard` (🧔🏿)")
  end
end

it "`1F471 200D 2642 FE0F` (fully-qualified) should match `man: blond hair` (👱‍♂️)" do
  if m = "👱‍♂️".match(Emoji::EMOJI_REGEX)
    "👱‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♂️"
  else
    fail("`1F471 200D 2642 FE0F` doesn't match `man: blond hair` (👱‍♂️)")
  end
end

it "`1F471 200D 2642` (minimally-qualified) should match `man: blond hair` (👱‍♂)" do
  if m = "👱‍♂".match(Emoji::EMOJI_REGEX)
    "👱‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♂"
  else
    fail("`1F471 200D 2642` doesn't match `man: blond hair` (👱‍♂)")
  end
end

it "`1F471 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man: light skin tone, blond hair` (👱🏻‍♂️)" do
  if m = "👱🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "👱🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♂️"
  else
    fail("`1F471 1F3FB 200D 2642 FE0F` doesn't match `man: light skin tone, blond hair` (👱🏻‍♂️)")
  end
end

it "`1F471 1F3FB 200D 2642` (minimally-qualified) should match `man: light skin tone, blond hair` (👱🏻‍♂)" do
  if m = "👱🏻‍♂".match(Emoji::EMOJI_REGEX)
    "👱🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♂"
  else
    fail("`1F471 1F3FB 200D 2642` doesn't match `man: light skin tone, blond hair` (👱🏻‍♂)")
  end
end

it "`1F471 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man: medium-light skin tone, blond hair` (👱🏼‍♂️)" do
  if m = "👱🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "👱🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♂️"
  else
    fail("`1F471 1F3FC 200D 2642 FE0F` doesn't match `man: medium-light skin tone, blond hair` (👱🏼‍♂️)")
  end
end

it "`1F471 1F3FC 200D 2642` (minimally-qualified) should match `man: medium-light skin tone, blond hair` (👱🏼‍♂)" do
  if m = "👱🏼‍♂".match(Emoji::EMOJI_REGEX)
    "👱🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♂"
  else
    fail("`1F471 1F3FC 200D 2642` doesn't match `man: medium-light skin tone, blond hair` (👱🏼‍♂)")
  end
end

it "`1F471 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man: medium skin tone, blond hair` (👱🏽‍♂️)" do
  if m = "👱🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "👱🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♂️"
  else
    fail("`1F471 1F3FD 200D 2642 FE0F` doesn't match `man: medium skin tone, blond hair` (👱🏽‍♂️)")
  end
end

it "`1F471 1F3FD 200D 2642` (minimally-qualified) should match `man: medium skin tone, blond hair` (👱🏽‍♂)" do
  if m = "👱🏽‍♂".match(Emoji::EMOJI_REGEX)
    "👱🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♂"
  else
    fail("`1F471 1F3FD 200D 2642` doesn't match `man: medium skin tone, blond hair` (👱🏽‍♂)")
  end
end

it "`1F471 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man: medium-dark skin tone, blond hair` (👱🏾‍♂️)" do
  if m = "👱🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "👱🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♂️"
  else
    fail("`1F471 1F3FE 200D 2642 FE0F` doesn't match `man: medium-dark skin tone, blond hair` (👱🏾‍♂️)")
  end
end

it "`1F471 1F3FE 200D 2642` (minimally-qualified) should match `man: medium-dark skin tone, blond hair` (👱🏾‍♂)" do
  if m = "👱🏾‍♂".match(Emoji::EMOJI_REGEX)
    "👱🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♂"
  else
    fail("`1F471 1F3FE 200D 2642` doesn't match `man: medium-dark skin tone, blond hair` (👱🏾‍♂)")
  end
end

it "`1F471 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man: dark skin tone, blond hair` (👱🏿‍♂️)" do
  if m = "👱🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "👱🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♂️"
  else
    fail("`1F471 1F3FF 200D 2642 FE0F` doesn't match `man: dark skin tone, blond hair` (👱🏿‍♂️)")
  end
end

it "`1F471 1F3FF 200D 2642` (minimally-qualified) should match `man: dark skin tone, blond hair` (👱🏿‍♂)" do
  if m = "👱🏿‍♂".match(Emoji::EMOJI_REGEX)
    "👱🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♂"
  else
    fail("`1F471 1F3FF 200D 2642` doesn't match `man: dark skin tone, blond hair` (👱🏿‍♂)")
  end
end

it "`1F468 200D 1F9B0` (fully-qualified) should match `man: red hair` (👨‍🦰)" do
  if m = "👨‍🦰".match(Emoji::EMOJI_REGEX)
    "👨‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦰"
  else
    fail("`1F468 200D 1F9B0` doesn't match `man: red hair` (👨‍🦰)")
  end
end

it "`1F468 1F3FB 200D 1F9B0` (fully-qualified) should match `man: light skin tone, red hair` (👨🏻‍🦰)" do
  if m = "👨🏻‍🦰".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦰"
  else
    fail("`1F468 1F3FB 200D 1F9B0` doesn't match `man: light skin tone, red hair` (👨🏻‍🦰)")
  end
end

it "`1F468 1F3FC 200D 1F9B0` (fully-qualified) should match `man: medium-light skin tone, red hair` (👨🏼‍🦰)" do
  if m = "👨🏼‍🦰".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦰"
  else
    fail("`1F468 1F3FC 200D 1F9B0` doesn't match `man: medium-light skin tone, red hair` (👨🏼‍🦰)")
  end
end

it "`1F468 1F3FD 200D 1F9B0` (fully-qualified) should match `man: medium skin tone, red hair` (👨🏽‍🦰)" do
  if m = "👨🏽‍🦰".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦰"
  else
    fail("`1F468 1F3FD 200D 1F9B0` doesn't match `man: medium skin tone, red hair` (👨🏽‍🦰)")
  end
end

it "`1F468 1F3FE 200D 1F9B0` (fully-qualified) should match `man: medium-dark skin tone, red hair` (👨🏾‍🦰)" do
  if m = "👨🏾‍🦰".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦰"
  else
    fail("`1F468 1F3FE 200D 1F9B0` doesn't match `man: medium-dark skin tone, red hair` (👨🏾‍🦰)")
  end
end

it "`1F468 1F3FF 200D 1F9B0` (fully-qualified) should match `man: dark skin tone, red hair` (👨🏿‍🦰)" do
  if m = "👨🏿‍🦰".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦰"
  else
    fail("`1F468 1F3FF 200D 1F9B0` doesn't match `man: dark skin tone, red hair` (👨🏿‍🦰)")
  end
end

it "`1F468 200D 1F9B1` (fully-qualified) should match `man: curly hair` (👨‍🦱)" do
  if m = "👨‍🦱".match(Emoji::EMOJI_REGEX)
    "👨‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦱"
  else
    fail("`1F468 200D 1F9B1` doesn't match `man: curly hair` (👨‍🦱)")
  end
end

it "`1F468 1F3FB 200D 1F9B1` (fully-qualified) should match `man: light skin tone, curly hair` (👨🏻‍🦱)" do
  if m = "👨🏻‍🦱".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦱"
  else
    fail("`1F468 1F3FB 200D 1F9B1` doesn't match `man: light skin tone, curly hair` (👨🏻‍🦱)")
  end
end

it "`1F468 1F3FC 200D 1F9B1` (fully-qualified) should match `man: medium-light skin tone, curly hair` (👨🏼‍🦱)" do
  if m = "👨🏼‍🦱".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦱"
  else
    fail("`1F468 1F3FC 200D 1F9B1` doesn't match `man: medium-light skin tone, curly hair` (👨🏼‍🦱)")
  end
end

it "`1F468 1F3FD 200D 1F9B1` (fully-qualified) should match `man: medium skin tone, curly hair` (👨🏽‍🦱)" do
  if m = "👨🏽‍🦱".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦱"
  else
    fail("`1F468 1F3FD 200D 1F9B1` doesn't match `man: medium skin tone, curly hair` (👨🏽‍🦱)")
  end
end

it "`1F468 1F3FE 200D 1F9B1` (fully-qualified) should match `man: medium-dark skin tone, curly hair` (👨🏾‍🦱)" do
  if m = "👨🏾‍🦱".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦱"
  else
    fail("`1F468 1F3FE 200D 1F9B1` doesn't match `man: medium-dark skin tone, curly hair` (👨🏾‍🦱)")
  end
end

it "`1F468 1F3FF 200D 1F9B1` (fully-qualified) should match `man: dark skin tone, curly hair` (👨🏿‍🦱)" do
  if m = "👨🏿‍🦱".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦱"
  else
    fail("`1F468 1F3FF 200D 1F9B1` doesn't match `man: dark skin tone, curly hair` (👨🏿‍🦱)")
  end
end

it "`1F468 200D 1F9B3` (fully-qualified) should match `man: white hair` (👨‍🦳)" do
  if m = "👨‍🦳".match(Emoji::EMOJI_REGEX)
    "👨‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦳"
  else
    fail("`1F468 200D 1F9B3` doesn't match `man: white hair` (👨‍🦳)")
  end
end

it "`1F468 1F3FB 200D 1F9B3` (fully-qualified) should match `man: light skin tone, white hair` (👨🏻‍🦳)" do
  if m = "👨🏻‍🦳".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦳"
  else
    fail("`1F468 1F3FB 200D 1F9B3` doesn't match `man: light skin tone, white hair` (👨🏻‍🦳)")
  end
end

it "`1F468 1F3FC 200D 1F9B3` (fully-qualified) should match `man: medium-light skin tone, white hair` (👨🏼‍🦳)" do
  if m = "👨🏼‍🦳".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦳"
  else
    fail("`1F468 1F3FC 200D 1F9B3` doesn't match `man: medium-light skin tone, white hair` (👨🏼‍🦳)")
  end
end

it "`1F468 1F3FD 200D 1F9B3` (fully-qualified) should match `man: medium skin tone, white hair` (👨🏽‍🦳)" do
  if m = "👨🏽‍🦳".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦳"
  else
    fail("`1F468 1F3FD 200D 1F9B3` doesn't match `man: medium skin tone, white hair` (👨🏽‍🦳)")
  end
end

it "`1F468 1F3FE 200D 1F9B3` (fully-qualified) should match `man: medium-dark skin tone, white hair` (👨🏾‍🦳)" do
  if m = "👨🏾‍🦳".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦳"
  else
    fail("`1F468 1F3FE 200D 1F9B3` doesn't match `man: medium-dark skin tone, white hair` (👨🏾‍🦳)")
  end
end

it "`1F468 1F3FF 200D 1F9B3` (fully-qualified) should match `man: dark skin tone, white hair` (👨🏿‍🦳)" do
  if m = "👨🏿‍🦳".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦳"
  else
    fail("`1F468 1F3FF 200D 1F9B3` doesn't match `man: dark skin tone, white hair` (👨🏿‍🦳)")
  end
end

it "`1F468 200D 1F9B2` (fully-qualified) should match `man: bald` (👨‍🦲)" do
  if m = "👨‍🦲".match(Emoji::EMOJI_REGEX)
    "👨‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦲"
  else
    fail("`1F468 200D 1F9B2` doesn't match `man: bald` (👨‍🦲)")
  end
end

it "`1F468 1F3FB 200D 1F9B2` (fully-qualified) should match `man: light skin tone, bald` (👨🏻‍🦲)" do
  if m = "👨🏻‍🦲".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦲"
  else
    fail("`1F468 1F3FB 200D 1F9B2` doesn't match `man: light skin tone, bald` (👨🏻‍🦲)")
  end
end

it "`1F468 1F3FC 200D 1F9B2` (fully-qualified) should match `man: medium-light skin tone, bald` (👨🏼‍🦲)" do
  if m = "👨🏼‍🦲".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦲"
  else
    fail("`1F468 1F3FC 200D 1F9B2` doesn't match `man: medium-light skin tone, bald` (👨🏼‍🦲)")
  end
end

it "`1F468 1F3FD 200D 1F9B2` (fully-qualified) should match `man: medium skin tone, bald` (👨🏽‍🦲)" do
  if m = "👨🏽‍🦲".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦲"
  else
    fail("`1F468 1F3FD 200D 1F9B2` doesn't match `man: medium skin tone, bald` (👨🏽‍🦲)")
  end
end

it "`1F468 1F3FE 200D 1F9B2` (fully-qualified) should match `man: medium-dark skin tone, bald` (👨🏾‍🦲)" do
  if m = "👨🏾‍🦲".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦲"
  else
    fail("`1F468 1F3FE 200D 1F9B2` doesn't match `man: medium-dark skin tone, bald` (👨🏾‍🦲)")
  end
end

it "`1F468 1F3FF 200D 1F9B2` (fully-qualified) should match `man: dark skin tone, bald` (👨🏿‍🦲)" do
  if m = "👨🏿‍🦲".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦲"
  else
    fail("`1F468 1F3FF 200D 1F9B2` doesn't match `man: dark skin tone, bald` (👨🏿‍🦲)")
  end
end

it "`1F469` (fully-qualified) should match `woman` (👩)" do
  if m = "👩".match(Emoji::EMOJI_REGEX)
    "👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩"
  else
    fail("`1F469` doesn't match `woman` (👩)")
  end
end

it "`1F469 1F3FB` (fully-qualified) should match `woman: light skin tone` (👩🏻)" do
  if m = "👩🏻".match(Emoji::EMOJI_REGEX)
    "👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻"
  else
    fail("`1F469 1F3FB` doesn't match `woman: light skin tone` (👩🏻)")
  end
end

it "`1F469 1F3FC` (fully-qualified) should match `woman: medium-light skin tone` (👩🏼)" do
  if m = "👩🏼".match(Emoji::EMOJI_REGEX)
    "👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼"
  else
    fail("`1F469 1F3FC` doesn't match `woman: medium-light skin tone` (👩🏼)")
  end
end

it "`1F469 1F3FD` (fully-qualified) should match `woman: medium skin tone` (👩🏽)" do
  if m = "👩🏽".match(Emoji::EMOJI_REGEX)
    "👩🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽"
  else
    fail("`1F469 1F3FD` doesn't match `woman: medium skin tone` (👩🏽)")
  end
end

it "`1F469 1F3FE` (fully-qualified) should match `woman: medium-dark skin tone` (👩🏾)" do
  if m = "👩🏾".match(Emoji::EMOJI_REGEX)
    "👩🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾"
  else
    fail("`1F469 1F3FE` doesn't match `woman: medium-dark skin tone` (👩🏾)")
  end
end

it "`1F469 1F3FF` (fully-qualified) should match `woman: dark skin tone` (👩🏿)" do
  if m = "👩🏿".match(Emoji::EMOJI_REGEX)
    "👩🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿"
  else
    fail("`1F469 1F3FF` doesn't match `woman: dark skin tone` (👩🏿)")
  end
end

it "`1F471 200D 2640 FE0F` (fully-qualified) should match `woman: blond hair` (👱‍♀️)" do
  if m = "👱‍♀️".match(Emoji::EMOJI_REGEX)
    "👱‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♀️"
  else
    fail("`1F471 200D 2640 FE0F` doesn't match `woman: blond hair` (👱‍♀️)")
  end
end

it "`1F471 200D 2640` (minimally-qualified) should match `woman: blond hair` (👱‍♀)" do
  if m = "👱‍♀".match(Emoji::EMOJI_REGEX)
    "👱‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱‍♀"
  else
    fail("`1F471 200D 2640` doesn't match `woman: blond hair` (👱‍♀)")
  end
end

it "`1F471 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman: light skin tone, blond hair` (👱🏻‍♀️)" do
  if m = "👱🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "👱🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♀️"
  else
    fail("`1F471 1F3FB 200D 2640 FE0F` doesn't match `woman: light skin tone, blond hair` (👱🏻‍♀️)")
  end
end

it "`1F471 1F3FB 200D 2640` (minimally-qualified) should match `woman: light skin tone, blond hair` (👱🏻‍♀)" do
  if m = "👱🏻‍♀".match(Emoji::EMOJI_REGEX)
    "👱🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏻‍♀"
  else
    fail("`1F471 1F3FB 200D 2640` doesn't match `woman: light skin tone, blond hair` (👱🏻‍♀)")
  end
end

it "`1F471 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman: medium-light skin tone, blond hair` (👱🏼‍♀️)" do
  if m = "👱🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "👱🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♀️"
  else
    fail("`1F471 1F3FC 200D 2640 FE0F` doesn't match `woman: medium-light skin tone, blond hair` (👱🏼‍♀️)")
  end
end

it "`1F471 1F3FC 200D 2640` (minimally-qualified) should match `woman: medium-light skin tone, blond hair` (👱🏼‍♀)" do
  if m = "👱🏼‍♀".match(Emoji::EMOJI_REGEX)
    "👱🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏼‍♀"
  else
    fail("`1F471 1F3FC 200D 2640` doesn't match `woman: medium-light skin tone, blond hair` (👱🏼‍♀)")
  end
end

it "`1F471 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman: medium skin tone, blond hair` (👱🏽‍♀️)" do
  if m = "👱🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "👱🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♀️"
  else
    fail("`1F471 1F3FD 200D 2640 FE0F` doesn't match `woman: medium skin tone, blond hair` (👱🏽‍♀️)")
  end
end

it "`1F471 1F3FD 200D 2640` (minimally-qualified) should match `woman: medium skin tone, blond hair` (👱🏽‍♀)" do
  if m = "👱🏽‍♀".match(Emoji::EMOJI_REGEX)
    "👱🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏽‍♀"
  else
    fail("`1F471 1F3FD 200D 2640` doesn't match `woman: medium skin tone, blond hair` (👱🏽‍♀)")
  end
end

it "`1F471 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman: medium-dark skin tone, blond hair` (👱🏾‍♀️)" do
  if m = "👱🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "👱🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♀️"
  else
    fail("`1F471 1F3FE 200D 2640 FE0F` doesn't match `woman: medium-dark skin tone, blond hair` (👱🏾‍♀️)")
  end
end

it "`1F471 1F3FE 200D 2640` (minimally-qualified) should match `woman: medium-dark skin tone, blond hair` (👱🏾‍♀)" do
  if m = "👱🏾‍♀".match(Emoji::EMOJI_REGEX)
    "👱🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏾‍♀"
  else
    fail("`1F471 1F3FE 200D 2640` doesn't match `woman: medium-dark skin tone, blond hair` (👱🏾‍♀)")
  end
end

it "`1F471 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman: dark skin tone, blond hair` (👱🏿‍♀️)" do
  if m = "👱🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "👱🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♀️"
  else
    fail("`1F471 1F3FF 200D 2640 FE0F` doesn't match `woman: dark skin tone, blond hair` (👱🏿‍♀️)")
  end
end

it "`1F471 1F3FF 200D 2640` (minimally-qualified) should match `woman: dark skin tone, blond hair` (👱🏿‍♀)" do
  if m = "👱🏿‍♀".match(Emoji::EMOJI_REGEX)
    "👱🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👱🏿‍♀"
  else
    fail("`1F471 1F3FF 200D 2640` doesn't match `woman: dark skin tone, blond hair` (👱🏿‍♀)")
  end
end

it "`1F469 200D 1F9B0` (fully-qualified) should match `woman: red hair` (👩‍🦰)" do
  if m = "👩‍🦰".match(Emoji::EMOJI_REGEX)
    "👩‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦰"
  else
    fail("`1F469 200D 1F9B0` doesn't match `woman: red hair` (👩‍🦰)")
  end
end

it "`1F469 1F3FB 200D 1F9B0` (fully-qualified) should match `woman: light skin tone, red hair` (👩🏻‍🦰)" do
  if m = "👩🏻‍🦰".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦰"
  else
    fail("`1F469 1F3FB 200D 1F9B0` doesn't match `woman: light skin tone, red hair` (👩🏻‍🦰)")
  end
end

it "`1F469 1F3FC 200D 1F9B0` (fully-qualified) should match `woman: medium-light skin tone, red hair` (👩🏼‍🦰)" do
  if m = "👩🏼‍🦰".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦰"
  else
    fail("`1F469 1F3FC 200D 1F9B0` doesn't match `woman: medium-light skin tone, red hair` (👩🏼‍🦰)")
  end
end

it "`1F469 1F3FD 200D 1F9B0` (fully-qualified) should match `woman: medium skin tone, red hair` (👩🏽‍🦰)" do
  if m = "👩🏽‍🦰".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦰"
  else
    fail("`1F469 1F3FD 200D 1F9B0` doesn't match `woman: medium skin tone, red hair` (👩🏽‍🦰)")
  end
end

it "`1F469 1F3FE 200D 1F9B0` (fully-qualified) should match `woman: medium-dark skin tone, red hair` (👩🏾‍🦰)" do
  if m = "👩🏾‍🦰".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦰"
  else
    fail("`1F469 1F3FE 200D 1F9B0` doesn't match `woman: medium-dark skin tone, red hair` (👩🏾‍🦰)")
  end
end

it "`1F469 1F3FF 200D 1F9B0` (fully-qualified) should match `woman: dark skin tone, red hair` (👩🏿‍🦰)" do
  if m = "👩🏿‍🦰".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦰"
  else
    fail("`1F469 1F3FF 200D 1F9B0` doesn't match `woman: dark skin tone, red hair` (👩🏿‍🦰)")
  end
end

it "`1F469 200D 1F9B1` (fully-qualified) should match `woman: curly hair` (👩‍🦱)" do
  if m = "👩‍🦱".match(Emoji::EMOJI_REGEX)
    "👩‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦱"
  else
    fail("`1F469 200D 1F9B1` doesn't match `woman: curly hair` (👩‍🦱)")
  end
end

it "`1F469 1F3FB 200D 1F9B1` (fully-qualified) should match `woman: light skin tone, curly hair` (👩🏻‍🦱)" do
  if m = "👩🏻‍🦱".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦱"
  else
    fail("`1F469 1F3FB 200D 1F9B1` doesn't match `woman: light skin tone, curly hair` (👩🏻‍🦱)")
  end
end

it "`1F469 1F3FC 200D 1F9B1` (fully-qualified) should match `woman: medium-light skin tone, curly hair` (👩🏼‍🦱)" do
  if m = "👩🏼‍🦱".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦱"
  else
    fail("`1F469 1F3FC 200D 1F9B1` doesn't match `woman: medium-light skin tone, curly hair` (👩🏼‍🦱)")
  end
end

it "`1F469 1F3FD 200D 1F9B1` (fully-qualified) should match `woman: medium skin tone, curly hair` (👩🏽‍🦱)" do
  if m = "👩🏽‍🦱".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦱"
  else
    fail("`1F469 1F3FD 200D 1F9B1` doesn't match `woman: medium skin tone, curly hair` (👩🏽‍🦱)")
  end
end

it "`1F469 1F3FE 200D 1F9B1` (fully-qualified) should match `woman: medium-dark skin tone, curly hair` (👩🏾‍🦱)" do
  if m = "👩🏾‍🦱".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦱"
  else
    fail("`1F469 1F3FE 200D 1F9B1` doesn't match `woman: medium-dark skin tone, curly hair` (👩🏾‍🦱)")
  end
end

it "`1F469 1F3FF 200D 1F9B1` (fully-qualified) should match `woman: dark skin tone, curly hair` (👩🏿‍🦱)" do
  if m = "👩🏿‍🦱".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦱"
  else
    fail("`1F469 1F3FF 200D 1F9B1` doesn't match `woman: dark skin tone, curly hair` (👩🏿‍🦱)")
  end
end

it "`1F469 200D 1F9B3` (fully-qualified) should match `woman: white hair` (👩‍🦳)" do
  if m = "👩‍🦳".match(Emoji::EMOJI_REGEX)
    "👩‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦳"
  else
    fail("`1F469 200D 1F9B3` doesn't match `woman: white hair` (👩‍🦳)")
  end
end

it "`1F469 1F3FB 200D 1F9B3` (fully-qualified) should match `woman: light skin tone, white hair` (👩🏻‍🦳)" do
  if m = "👩🏻‍🦳".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦳"
  else
    fail("`1F469 1F3FB 200D 1F9B3` doesn't match `woman: light skin tone, white hair` (👩🏻‍🦳)")
  end
end

it "`1F469 1F3FC 200D 1F9B3` (fully-qualified) should match `woman: medium-light skin tone, white hair` (👩🏼‍🦳)" do
  if m = "👩🏼‍🦳".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦳"
  else
    fail("`1F469 1F3FC 200D 1F9B3` doesn't match `woman: medium-light skin tone, white hair` (👩🏼‍🦳)")
  end
end

it "`1F469 1F3FD 200D 1F9B3` (fully-qualified) should match `woman: medium skin tone, white hair` (👩🏽‍🦳)" do
  if m = "👩🏽‍🦳".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦳"
  else
    fail("`1F469 1F3FD 200D 1F9B3` doesn't match `woman: medium skin tone, white hair` (👩🏽‍🦳)")
  end
end

it "`1F469 1F3FE 200D 1F9B3` (fully-qualified) should match `woman: medium-dark skin tone, white hair` (👩🏾‍🦳)" do
  if m = "👩🏾‍🦳".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦳"
  else
    fail("`1F469 1F3FE 200D 1F9B3` doesn't match `woman: medium-dark skin tone, white hair` (👩🏾‍🦳)")
  end
end

it "`1F469 1F3FF 200D 1F9B3` (fully-qualified) should match `woman: dark skin tone, white hair` (👩🏿‍🦳)" do
  if m = "👩🏿‍🦳".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦳"
  else
    fail("`1F469 1F3FF 200D 1F9B3` doesn't match `woman: dark skin tone, white hair` (👩🏿‍🦳)")
  end
end

it "`1F469 200D 1F9B2` (fully-qualified) should match `woman: bald` (👩‍🦲)" do
  if m = "👩‍🦲".match(Emoji::EMOJI_REGEX)
    "👩‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦲"
  else
    fail("`1F469 200D 1F9B2` doesn't match `woman: bald` (👩‍🦲)")
  end
end

it "`1F469 1F3FB 200D 1F9B2` (fully-qualified) should match `woman: light skin tone, bald` (👩🏻‍🦲)" do
  if m = "👩🏻‍🦲".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦲"
  else
    fail("`1F469 1F3FB 200D 1F9B2` doesn't match `woman: light skin tone, bald` (👩🏻‍🦲)")
  end
end

it "`1F469 1F3FC 200D 1F9B2` (fully-qualified) should match `woman: medium-light skin tone, bald` (👩🏼‍🦲)" do
  if m = "👩🏼‍🦲".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦲"
  else
    fail("`1F469 1F3FC 200D 1F9B2` doesn't match `woman: medium-light skin tone, bald` (👩🏼‍🦲)")
  end
end

it "`1F469 1F3FD 200D 1F9B2` (fully-qualified) should match `woman: medium skin tone, bald` (👩🏽‍🦲)" do
  if m = "👩🏽‍🦲".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦲"
  else
    fail("`1F469 1F3FD 200D 1F9B2` doesn't match `woman: medium skin tone, bald` (👩🏽‍🦲)")
  end
end

it "`1F469 1F3FE 200D 1F9B2` (fully-qualified) should match `woman: medium-dark skin tone, bald` (👩🏾‍🦲)" do
  if m = "👩🏾‍🦲".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦲"
  else
    fail("`1F469 1F3FE 200D 1F9B2` doesn't match `woman: medium-dark skin tone, bald` (👩🏾‍🦲)")
  end
end

it "`1F469 1F3FF 200D 1F9B2` (fully-qualified) should match `woman: dark skin tone, bald` (👩🏿‍🦲)" do
  if m = "👩🏿‍🦲".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦲"
  else
    fail("`1F469 1F3FF 200D 1F9B2` doesn't match `woman: dark skin tone, bald` (👩🏿‍🦲)")
  end
end

it "`1F9D3` (fully-qualified) should match `older person` (🧓)" do
  if m = "🧓".match(Emoji::EMOJI_REGEX)
    "🧓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓"
  else
    fail("`1F9D3` doesn't match `older person` (🧓)")
  end
end

it "`1F9D3 1F3FB` (fully-qualified) should match `older person: light skin tone` (🧓🏻)" do
  if m = "🧓🏻".match(Emoji::EMOJI_REGEX)
    "🧓🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏻"
  else
    fail("`1F9D3 1F3FB` doesn't match `older person: light skin tone` (🧓🏻)")
  end
end

it "`1F9D3 1F3FC` (fully-qualified) should match `older person: medium-light skin tone` (🧓🏼)" do
  if m = "🧓🏼".match(Emoji::EMOJI_REGEX)
    "🧓🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏼"
  else
    fail("`1F9D3 1F3FC` doesn't match `older person: medium-light skin tone` (🧓🏼)")
  end
end

it "`1F9D3 1F3FD` (fully-qualified) should match `older person: medium skin tone` (🧓🏽)" do
  if m = "🧓🏽".match(Emoji::EMOJI_REGEX)
    "🧓🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏽"
  else
    fail("`1F9D3 1F3FD` doesn't match `older person: medium skin tone` (🧓🏽)")
  end
end

it "`1F9D3 1F3FE` (fully-qualified) should match `older person: medium-dark skin tone` (🧓🏾)" do
  if m = "🧓🏾".match(Emoji::EMOJI_REGEX)
    "🧓🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏾"
  else
    fail("`1F9D3 1F3FE` doesn't match `older person: medium-dark skin tone` (🧓🏾)")
  end
end

it "`1F9D3 1F3FF` (fully-qualified) should match `older person: dark skin tone` (🧓🏿)" do
  if m = "🧓🏿".match(Emoji::EMOJI_REGEX)
    "🧓🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧓🏿"
  else
    fail("`1F9D3 1F3FF` doesn't match `older person: dark skin tone` (🧓🏿)")
  end
end

it "`1F474` (fully-qualified) should match `old man` (👴)" do
  if m = "👴".match(Emoji::EMOJI_REGEX)
    "👴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴"
  else
    fail("`1F474` doesn't match `old man` (👴)")
  end
end

it "`1F474 1F3FB` (fully-qualified) should match `old man: light skin tone` (👴🏻)" do
  if m = "👴🏻".match(Emoji::EMOJI_REGEX)
    "👴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏻"
  else
    fail("`1F474 1F3FB` doesn't match `old man: light skin tone` (👴🏻)")
  end
end

it "`1F474 1F3FC` (fully-qualified) should match `old man: medium-light skin tone` (👴🏼)" do
  if m = "👴🏼".match(Emoji::EMOJI_REGEX)
    "👴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏼"
  else
    fail("`1F474 1F3FC` doesn't match `old man: medium-light skin tone` (👴🏼)")
  end
end

it "`1F474 1F3FD` (fully-qualified) should match `old man: medium skin tone` (👴🏽)" do
  if m = "👴🏽".match(Emoji::EMOJI_REGEX)
    "👴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏽"
  else
    fail("`1F474 1F3FD` doesn't match `old man: medium skin tone` (👴🏽)")
  end
end

it "`1F474 1F3FE` (fully-qualified) should match `old man: medium-dark skin tone` (👴🏾)" do
  if m = "👴🏾".match(Emoji::EMOJI_REGEX)
    "👴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏾"
  else
    fail("`1F474 1F3FE` doesn't match `old man: medium-dark skin tone` (👴🏾)")
  end
end

it "`1F474 1F3FF` (fully-qualified) should match `old man: dark skin tone` (👴🏿)" do
  if m = "👴🏿".match(Emoji::EMOJI_REGEX)
    "👴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👴🏿"
  else
    fail("`1F474 1F3FF` doesn't match `old man: dark skin tone` (👴🏿)")
  end
end

it "`1F475` (fully-qualified) should match `old woman` (👵)" do
  if m = "👵".match(Emoji::EMOJI_REGEX)
    "👵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵"
  else
    fail("`1F475` doesn't match `old woman` (👵)")
  end
end

it "`1F475 1F3FB` (fully-qualified) should match `old woman: light skin tone` (👵🏻)" do
  if m = "👵🏻".match(Emoji::EMOJI_REGEX)
    "👵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏻"
  else
    fail("`1F475 1F3FB` doesn't match `old woman: light skin tone` (👵🏻)")
  end
end

it "`1F475 1F3FC` (fully-qualified) should match `old woman: medium-light skin tone` (👵🏼)" do
  if m = "👵🏼".match(Emoji::EMOJI_REGEX)
    "👵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏼"
  else
    fail("`1F475 1F3FC` doesn't match `old woman: medium-light skin tone` (👵🏼)")
  end
end

it "`1F475 1F3FD` (fully-qualified) should match `old woman: medium skin tone` (👵🏽)" do
  if m = "👵🏽".match(Emoji::EMOJI_REGEX)
    "👵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏽"
  else
    fail("`1F475 1F3FD` doesn't match `old woman: medium skin tone` (👵🏽)")
  end
end

it "`1F475 1F3FE` (fully-qualified) should match `old woman: medium-dark skin tone` (👵🏾)" do
  if m = "👵🏾".match(Emoji::EMOJI_REGEX)
    "👵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏾"
  else
    fail("`1F475 1F3FE` doesn't match `old woman: medium-dark skin tone` (👵🏾)")
  end
end

it "`1F475 1F3FF` (fully-qualified) should match `old woman: dark skin tone` (👵🏿)" do
  if m = "👵🏿".match(Emoji::EMOJI_REGEX)
    "👵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👵🏿"
  else
    fail("`1F475 1F3FF` doesn't match `old woman: dark skin tone` (👵🏿)")
  end
end

it "`1F64D` (fully-qualified) should match `person frowning` (🙍)" do
  if m = "🙍".match(Emoji::EMOJI_REGEX)
    "🙍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍"
  else
    fail("`1F64D` doesn't match `person frowning` (🙍)")
  end
end

it "`1F64D 1F3FB` (fully-qualified) should match `person frowning: light skin tone` (🙍🏻)" do
  if m = "🙍🏻".match(Emoji::EMOJI_REGEX)
    "🙍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻"
  else
    fail("`1F64D 1F3FB` doesn't match `person frowning: light skin tone` (🙍🏻)")
  end
end

it "`1F64D 1F3FC` (fully-qualified) should match `person frowning: medium-light skin tone` (🙍🏼)" do
  if m = "🙍🏼".match(Emoji::EMOJI_REGEX)
    "🙍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼"
  else
    fail("`1F64D 1F3FC` doesn't match `person frowning: medium-light skin tone` (🙍🏼)")
  end
end

it "`1F64D 1F3FD` (fully-qualified) should match `person frowning: medium skin tone` (🙍🏽)" do
  if m = "🙍🏽".match(Emoji::EMOJI_REGEX)
    "🙍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽"
  else
    fail("`1F64D 1F3FD` doesn't match `person frowning: medium skin tone` (🙍🏽)")
  end
end

it "`1F64D 1F3FE` (fully-qualified) should match `person frowning: medium-dark skin tone` (🙍🏾)" do
  if m = "🙍🏾".match(Emoji::EMOJI_REGEX)
    "🙍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾"
  else
    fail("`1F64D 1F3FE` doesn't match `person frowning: medium-dark skin tone` (🙍🏾)")
  end
end

it "`1F64D 1F3FF` (fully-qualified) should match `person frowning: dark skin tone` (🙍🏿)" do
  if m = "🙍🏿".match(Emoji::EMOJI_REGEX)
    "🙍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿"
  else
    fail("`1F64D 1F3FF` doesn't match `person frowning: dark skin tone` (🙍🏿)")
  end
end

it "`1F64D 200D 2642 FE0F` (fully-qualified) should match `man frowning` (🙍‍♂️)" do
  if m = "🙍‍♂️".match(Emoji::EMOJI_REGEX)
    "🙍‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♂️"
  else
    fail("`1F64D 200D 2642 FE0F` doesn't match `man frowning` (🙍‍♂️)")
  end
end

it "`1F64D 200D 2642` (minimally-qualified) should match `man frowning` (🙍‍♂)" do
  if m = "🙍‍♂".match(Emoji::EMOJI_REGEX)
    "🙍‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♂"
  else
    fail("`1F64D 200D 2642` doesn't match `man frowning` (🙍‍♂)")
  end
end

it "`1F64D 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man frowning: light skin tone` (🙍🏻‍♂️)" do
  if m = "🙍🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🙍🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♂️"
  else
    fail("`1F64D 1F3FB 200D 2642 FE0F` doesn't match `man frowning: light skin tone` (🙍🏻‍♂️)")
  end
end

it "`1F64D 1F3FB 200D 2642` (minimally-qualified) should match `man frowning: light skin tone` (🙍🏻‍♂)" do
  if m = "🙍🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🙍🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♂"
  else
    fail("`1F64D 1F3FB 200D 2642` doesn't match `man frowning: light skin tone` (🙍🏻‍♂)")
  end
end

it "`1F64D 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man frowning: medium-light skin tone` (🙍🏼‍♂️)" do
  if m = "🙍🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🙍🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♂️"
  else
    fail("`1F64D 1F3FC 200D 2642 FE0F` doesn't match `man frowning: medium-light skin tone` (🙍🏼‍♂️)")
  end
end

it "`1F64D 1F3FC 200D 2642` (minimally-qualified) should match `man frowning: medium-light skin tone` (🙍🏼‍♂)" do
  if m = "🙍🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🙍🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♂"
  else
    fail("`1F64D 1F3FC 200D 2642` doesn't match `man frowning: medium-light skin tone` (🙍🏼‍♂)")
  end
end

it "`1F64D 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man frowning: medium skin tone` (🙍🏽‍♂️)" do
  if m = "🙍🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🙍🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♂️"
  else
    fail("`1F64D 1F3FD 200D 2642 FE0F` doesn't match `man frowning: medium skin tone` (🙍🏽‍♂️)")
  end
end

it "`1F64D 1F3FD 200D 2642` (minimally-qualified) should match `man frowning: medium skin tone` (🙍🏽‍♂)" do
  if m = "🙍🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🙍🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♂"
  else
    fail("`1F64D 1F3FD 200D 2642` doesn't match `man frowning: medium skin tone` (🙍🏽‍♂)")
  end
end

it "`1F64D 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man frowning: medium-dark skin tone` (🙍🏾‍♂️)" do
  if m = "🙍🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🙍🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♂️"
  else
    fail("`1F64D 1F3FE 200D 2642 FE0F` doesn't match `man frowning: medium-dark skin tone` (🙍🏾‍♂️)")
  end
end

it "`1F64D 1F3FE 200D 2642` (minimally-qualified) should match `man frowning: medium-dark skin tone` (🙍🏾‍♂)" do
  if m = "🙍🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🙍🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♂"
  else
    fail("`1F64D 1F3FE 200D 2642` doesn't match `man frowning: medium-dark skin tone` (🙍🏾‍♂)")
  end
end

it "`1F64D 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man frowning: dark skin tone` (🙍🏿‍♂️)" do
  if m = "🙍🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🙍🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♂️"
  else
    fail("`1F64D 1F3FF 200D 2642 FE0F` doesn't match `man frowning: dark skin tone` (🙍🏿‍♂️)")
  end
end

it "`1F64D 1F3FF 200D 2642` (minimally-qualified) should match `man frowning: dark skin tone` (🙍🏿‍♂)" do
  if m = "🙍🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🙍🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♂"
  else
    fail("`1F64D 1F3FF 200D 2642` doesn't match `man frowning: dark skin tone` (🙍🏿‍♂)")
  end
end

it "`1F64D 200D 2640 FE0F` (fully-qualified) should match `woman frowning` (🙍‍♀️)" do
  if m = "🙍‍♀️".match(Emoji::EMOJI_REGEX)
    "🙍‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♀️"
  else
    fail("`1F64D 200D 2640 FE0F` doesn't match `woman frowning` (🙍‍♀️)")
  end
end

it "`1F64D 200D 2640` (minimally-qualified) should match `woman frowning` (🙍‍♀)" do
  if m = "🙍‍♀".match(Emoji::EMOJI_REGEX)
    "🙍‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍‍♀"
  else
    fail("`1F64D 200D 2640` doesn't match `woman frowning` (🙍‍♀)")
  end
end

it "`1F64D 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman frowning: light skin tone` (🙍🏻‍♀️)" do
  if m = "🙍🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🙍🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♀️"
  else
    fail("`1F64D 1F3FB 200D 2640 FE0F` doesn't match `woman frowning: light skin tone` (🙍🏻‍♀️)")
  end
end

it "`1F64D 1F3FB 200D 2640` (minimally-qualified) should match `woman frowning: light skin tone` (🙍🏻‍♀)" do
  if m = "🙍🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🙍🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏻‍♀"
  else
    fail("`1F64D 1F3FB 200D 2640` doesn't match `woman frowning: light skin tone` (🙍🏻‍♀)")
  end
end

it "`1F64D 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman frowning: medium-light skin tone` (🙍🏼‍♀️)" do
  if m = "🙍🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🙍🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♀️"
  else
    fail("`1F64D 1F3FC 200D 2640 FE0F` doesn't match `woman frowning: medium-light skin tone` (🙍🏼‍♀️)")
  end
end

it "`1F64D 1F3FC 200D 2640` (minimally-qualified) should match `woman frowning: medium-light skin tone` (🙍🏼‍♀)" do
  if m = "🙍🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🙍🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏼‍♀"
  else
    fail("`1F64D 1F3FC 200D 2640` doesn't match `woman frowning: medium-light skin tone` (🙍🏼‍♀)")
  end
end

it "`1F64D 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman frowning: medium skin tone` (🙍🏽‍♀️)" do
  if m = "🙍🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🙍🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♀️"
  else
    fail("`1F64D 1F3FD 200D 2640 FE0F` doesn't match `woman frowning: medium skin tone` (🙍🏽‍♀️)")
  end
end

it "`1F64D 1F3FD 200D 2640` (minimally-qualified) should match `woman frowning: medium skin tone` (🙍🏽‍♀)" do
  if m = "🙍🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🙍🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏽‍♀"
  else
    fail("`1F64D 1F3FD 200D 2640` doesn't match `woman frowning: medium skin tone` (🙍🏽‍♀)")
  end
end

it "`1F64D 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman frowning: medium-dark skin tone` (🙍🏾‍♀️)" do
  if m = "🙍🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🙍🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♀️"
  else
    fail("`1F64D 1F3FE 200D 2640 FE0F` doesn't match `woman frowning: medium-dark skin tone` (🙍🏾‍♀️)")
  end
end

it "`1F64D 1F3FE 200D 2640` (minimally-qualified) should match `woman frowning: medium-dark skin tone` (🙍🏾‍♀)" do
  if m = "🙍🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🙍🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏾‍♀"
  else
    fail("`1F64D 1F3FE 200D 2640` doesn't match `woman frowning: medium-dark skin tone` (🙍🏾‍♀)")
  end
end

it "`1F64D 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman frowning: dark skin tone` (🙍🏿‍♀️)" do
  if m = "🙍🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🙍🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♀️"
  else
    fail("`1F64D 1F3FF 200D 2640 FE0F` doesn't match `woman frowning: dark skin tone` (🙍🏿‍♀️)")
  end
end

it "`1F64D 1F3FF 200D 2640` (minimally-qualified) should match `woman frowning: dark skin tone` (🙍🏿‍♀)" do
  if m = "🙍🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🙍🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙍🏿‍♀"
  else
    fail("`1F64D 1F3FF 200D 2640` doesn't match `woman frowning: dark skin tone` (🙍🏿‍♀)")
  end
end

it "`1F64E` (fully-qualified) should match `person pouting` (🙎)" do
  if m = "🙎".match(Emoji::EMOJI_REGEX)
    "🙎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎"
  else
    fail("`1F64E` doesn't match `person pouting` (🙎)")
  end
end

it "`1F64E 1F3FB` (fully-qualified) should match `person pouting: light skin tone` (🙎🏻)" do
  if m = "🙎🏻".match(Emoji::EMOJI_REGEX)
    "🙎🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻"
  else
    fail("`1F64E 1F3FB` doesn't match `person pouting: light skin tone` (🙎🏻)")
  end
end

it "`1F64E 1F3FC` (fully-qualified) should match `person pouting: medium-light skin tone` (🙎🏼)" do
  if m = "🙎🏼".match(Emoji::EMOJI_REGEX)
    "🙎🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼"
  else
    fail("`1F64E 1F3FC` doesn't match `person pouting: medium-light skin tone` (🙎🏼)")
  end
end

it "`1F64E 1F3FD` (fully-qualified) should match `person pouting: medium skin tone` (🙎🏽)" do
  if m = "🙎🏽".match(Emoji::EMOJI_REGEX)
    "🙎🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽"
  else
    fail("`1F64E 1F3FD` doesn't match `person pouting: medium skin tone` (🙎🏽)")
  end
end

it "`1F64E 1F3FE` (fully-qualified) should match `person pouting: medium-dark skin tone` (🙎🏾)" do
  if m = "🙎🏾".match(Emoji::EMOJI_REGEX)
    "🙎🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾"
  else
    fail("`1F64E 1F3FE` doesn't match `person pouting: medium-dark skin tone` (🙎🏾)")
  end
end

it "`1F64E 1F3FF` (fully-qualified) should match `person pouting: dark skin tone` (🙎🏿)" do
  if m = "🙎🏿".match(Emoji::EMOJI_REGEX)
    "🙎🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿"
  else
    fail("`1F64E 1F3FF` doesn't match `person pouting: dark skin tone` (🙎🏿)")
  end
end

it "`1F64E 200D 2642 FE0F` (fully-qualified) should match `man pouting` (🙎‍♂️)" do
  if m = "🙎‍♂️".match(Emoji::EMOJI_REGEX)
    "🙎‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♂️"
  else
    fail("`1F64E 200D 2642 FE0F` doesn't match `man pouting` (🙎‍♂️)")
  end
end

it "`1F64E 200D 2642` (minimally-qualified) should match `man pouting` (🙎‍♂)" do
  if m = "🙎‍♂".match(Emoji::EMOJI_REGEX)
    "🙎‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♂"
  else
    fail("`1F64E 200D 2642` doesn't match `man pouting` (🙎‍♂)")
  end
end

it "`1F64E 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man pouting: light skin tone` (🙎🏻‍♂️)" do
  if m = "🙎🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🙎🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♂️"
  else
    fail("`1F64E 1F3FB 200D 2642 FE0F` doesn't match `man pouting: light skin tone` (🙎🏻‍♂️)")
  end
end

it "`1F64E 1F3FB 200D 2642` (minimally-qualified) should match `man pouting: light skin tone` (🙎🏻‍♂)" do
  if m = "🙎🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🙎🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♂"
  else
    fail("`1F64E 1F3FB 200D 2642` doesn't match `man pouting: light skin tone` (🙎🏻‍♂)")
  end
end

it "`1F64E 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man pouting: medium-light skin tone` (🙎🏼‍♂️)" do
  if m = "🙎🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🙎🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♂️"
  else
    fail("`1F64E 1F3FC 200D 2642 FE0F` doesn't match `man pouting: medium-light skin tone` (🙎🏼‍♂️)")
  end
end

it "`1F64E 1F3FC 200D 2642` (minimally-qualified) should match `man pouting: medium-light skin tone` (🙎🏼‍♂)" do
  if m = "🙎🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🙎🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♂"
  else
    fail("`1F64E 1F3FC 200D 2642` doesn't match `man pouting: medium-light skin tone` (🙎🏼‍♂)")
  end
end

it "`1F64E 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man pouting: medium skin tone` (🙎🏽‍♂️)" do
  if m = "🙎🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🙎🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♂️"
  else
    fail("`1F64E 1F3FD 200D 2642 FE0F` doesn't match `man pouting: medium skin tone` (🙎🏽‍♂️)")
  end
end

it "`1F64E 1F3FD 200D 2642` (minimally-qualified) should match `man pouting: medium skin tone` (🙎🏽‍♂)" do
  if m = "🙎🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🙎🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♂"
  else
    fail("`1F64E 1F3FD 200D 2642` doesn't match `man pouting: medium skin tone` (🙎🏽‍♂)")
  end
end

it "`1F64E 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man pouting: medium-dark skin tone` (🙎🏾‍♂️)" do
  if m = "🙎🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🙎🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♂️"
  else
    fail("`1F64E 1F3FE 200D 2642 FE0F` doesn't match `man pouting: medium-dark skin tone` (🙎🏾‍♂️)")
  end
end

it "`1F64E 1F3FE 200D 2642` (minimally-qualified) should match `man pouting: medium-dark skin tone` (🙎🏾‍♂)" do
  if m = "🙎🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🙎🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♂"
  else
    fail("`1F64E 1F3FE 200D 2642` doesn't match `man pouting: medium-dark skin tone` (🙎🏾‍♂)")
  end
end

it "`1F64E 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man pouting: dark skin tone` (🙎🏿‍♂️)" do
  if m = "🙎🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🙎🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♂️"
  else
    fail("`1F64E 1F3FF 200D 2642 FE0F` doesn't match `man pouting: dark skin tone` (🙎🏿‍♂️)")
  end
end

it "`1F64E 1F3FF 200D 2642` (minimally-qualified) should match `man pouting: dark skin tone` (🙎🏿‍♂)" do
  if m = "🙎🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🙎🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♂"
  else
    fail("`1F64E 1F3FF 200D 2642` doesn't match `man pouting: dark skin tone` (🙎🏿‍♂)")
  end
end

it "`1F64E 200D 2640 FE0F` (fully-qualified) should match `woman pouting` (🙎‍♀️)" do
  if m = "🙎‍♀️".match(Emoji::EMOJI_REGEX)
    "🙎‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♀️"
  else
    fail("`1F64E 200D 2640 FE0F` doesn't match `woman pouting` (🙎‍♀️)")
  end
end

it "`1F64E 200D 2640` (minimally-qualified) should match `woman pouting` (🙎‍♀)" do
  if m = "🙎‍♀".match(Emoji::EMOJI_REGEX)
    "🙎‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎‍♀"
  else
    fail("`1F64E 200D 2640` doesn't match `woman pouting` (🙎‍♀)")
  end
end

it "`1F64E 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman pouting: light skin tone` (🙎🏻‍♀️)" do
  if m = "🙎🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🙎🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♀️"
  else
    fail("`1F64E 1F3FB 200D 2640 FE0F` doesn't match `woman pouting: light skin tone` (🙎🏻‍♀️)")
  end
end

it "`1F64E 1F3FB 200D 2640` (minimally-qualified) should match `woman pouting: light skin tone` (🙎🏻‍♀)" do
  if m = "🙎🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🙎🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏻‍♀"
  else
    fail("`1F64E 1F3FB 200D 2640` doesn't match `woman pouting: light skin tone` (🙎🏻‍♀)")
  end
end

it "`1F64E 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman pouting: medium-light skin tone` (🙎🏼‍♀️)" do
  if m = "🙎🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🙎🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♀️"
  else
    fail("`1F64E 1F3FC 200D 2640 FE0F` doesn't match `woman pouting: medium-light skin tone` (🙎🏼‍♀️)")
  end
end

it "`1F64E 1F3FC 200D 2640` (minimally-qualified) should match `woman pouting: medium-light skin tone` (🙎🏼‍♀)" do
  if m = "🙎🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🙎🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏼‍♀"
  else
    fail("`1F64E 1F3FC 200D 2640` doesn't match `woman pouting: medium-light skin tone` (🙎🏼‍♀)")
  end
end

it "`1F64E 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman pouting: medium skin tone` (🙎🏽‍♀️)" do
  if m = "🙎🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🙎🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♀️"
  else
    fail("`1F64E 1F3FD 200D 2640 FE0F` doesn't match `woman pouting: medium skin tone` (🙎🏽‍♀️)")
  end
end

it "`1F64E 1F3FD 200D 2640` (minimally-qualified) should match `woman pouting: medium skin tone` (🙎🏽‍♀)" do
  if m = "🙎🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🙎🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏽‍♀"
  else
    fail("`1F64E 1F3FD 200D 2640` doesn't match `woman pouting: medium skin tone` (🙎🏽‍♀)")
  end
end

it "`1F64E 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman pouting: medium-dark skin tone` (🙎🏾‍♀️)" do
  if m = "🙎🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🙎🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♀️"
  else
    fail("`1F64E 1F3FE 200D 2640 FE0F` doesn't match `woman pouting: medium-dark skin tone` (🙎🏾‍♀️)")
  end
end

it "`1F64E 1F3FE 200D 2640` (minimally-qualified) should match `woman pouting: medium-dark skin tone` (🙎🏾‍♀)" do
  if m = "🙎🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🙎🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏾‍♀"
  else
    fail("`1F64E 1F3FE 200D 2640` doesn't match `woman pouting: medium-dark skin tone` (🙎🏾‍♀)")
  end
end

it "`1F64E 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman pouting: dark skin tone` (🙎🏿‍♀️)" do
  if m = "🙎🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🙎🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♀️"
  else
    fail("`1F64E 1F3FF 200D 2640 FE0F` doesn't match `woman pouting: dark skin tone` (🙎🏿‍♀️)")
  end
end

it "`1F64E 1F3FF 200D 2640` (minimally-qualified) should match `woman pouting: dark skin tone` (🙎🏿‍♀)" do
  if m = "🙎🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🙎🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙎🏿‍♀"
  else
    fail("`1F64E 1F3FF 200D 2640` doesn't match `woman pouting: dark skin tone` (🙎🏿‍♀)")
  end
end

it "`1F645` (fully-qualified) should match `person gesturing NO` (🙅)" do
  if m = "🙅".match(Emoji::EMOJI_REGEX)
    "🙅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅"
  else
    fail("`1F645` doesn't match `person gesturing NO` (🙅)")
  end
end

it "`1F645 1F3FB` (fully-qualified) should match `person gesturing NO: light skin tone` (🙅🏻)" do
  if m = "🙅🏻".match(Emoji::EMOJI_REGEX)
    "🙅🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻"
  else
    fail("`1F645 1F3FB` doesn't match `person gesturing NO: light skin tone` (🙅🏻)")
  end
end

it "`1F645 1F3FC` (fully-qualified) should match `person gesturing NO: medium-light skin tone` (🙅🏼)" do
  if m = "🙅🏼".match(Emoji::EMOJI_REGEX)
    "🙅🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼"
  else
    fail("`1F645 1F3FC` doesn't match `person gesturing NO: medium-light skin tone` (🙅🏼)")
  end
end

it "`1F645 1F3FD` (fully-qualified) should match `person gesturing NO: medium skin tone` (🙅🏽)" do
  if m = "🙅🏽".match(Emoji::EMOJI_REGEX)
    "🙅🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽"
  else
    fail("`1F645 1F3FD` doesn't match `person gesturing NO: medium skin tone` (🙅🏽)")
  end
end

it "`1F645 1F3FE` (fully-qualified) should match `person gesturing NO: medium-dark skin tone` (🙅🏾)" do
  if m = "🙅🏾".match(Emoji::EMOJI_REGEX)
    "🙅🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾"
  else
    fail("`1F645 1F3FE` doesn't match `person gesturing NO: medium-dark skin tone` (🙅🏾)")
  end
end

it "`1F645 1F3FF` (fully-qualified) should match `person gesturing NO: dark skin tone` (🙅🏿)" do
  if m = "🙅🏿".match(Emoji::EMOJI_REGEX)
    "🙅🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿"
  else
    fail("`1F645 1F3FF` doesn't match `person gesturing NO: dark skin tone` (🙅🏿)")
  end
end

it "`1F645 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO` (🙅‍♂️)" do
  if m = "🙅‍♂️".match(Emoji::EMOJI_REGEX)
    "🙅‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♂️"
  else
    fail("`1F645 200D 2642 FE0F` doesn't match `man gesturing NO` (🙅‍♂️)")
  end
end

it "`1F645 200D 2642` (minimally-qualified) should match `man gesturing NO` (🙅‍♂)" do
  if m = "🙅‍♂".match(Emoji::EMOJI_REGEX)
    "🙅‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♂"
  else
    fail("`1F645 200D 2642` doesn't match `man gesturing NO` (🙅‍♂)")
  end
end

it "`1F645 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: light skin tone` (🙅🏻‍♂️)" do
  if m = "🙅🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🙅🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♂️"
  else
    fail("`1F645 1F3FB 200D 2642 FE0F` doesn't match `man gesturing NO: light skin tone` (🙅🏻‍♂️)")
  end
end

it "`1F645 1F3FB 200D 2642` (minimally-qualified) should match `man gesturing NO: light skin tone` (🙅🏻‍♂)" do
  if m = "🙅🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🙅🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♂"
  else
    fail("`1F645 1F3FB 200D 2642` doesn't match `man gesturing NO: light skin tone` (🙅🏻‍♂)")
  end
end

it "`1F645 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: medium-light skin tone` (🙅🏼‍♂️)" do
  if m = "🙅🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🙅🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♂️"
  else
    fail("`1F645 1F3FC 200D 2642 FE0F` doesn't match `man gesturing NO: medium-light skin tone` (🙅🏼‍♂️)")
  end
end

it "`1F645 1F3FC 200D 2642` (minimally-qualified) should match `man gesturing NO: medium-light skin tone` (🙅🏼‍♂)" do
  if m = "🙅🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🙅🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♂"
  else
    fail("`1F645 1F3FC 200D 2642` doesn't match `man gesturing NO: medium-light skin tone` (🙅🏼‍♂)")
  end
end

it "`1F645 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: medium skin tone` (🙅🏽‍♂️)" do
  if m = "🙅🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🙅🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♂️"
  else
    fail("`1F645 1F3FD 200D 2642 FE0F` doesn't match `man gesturing NO: medium skin tone` (🙅🏽‍♂️)")
  end
end

it "`1F645 1F3FD 200D 2642` (minimally-qualified) should match `man gesturing NO: medium skin tone` (🙅🏽‍♂)" do
  if m = "🙅🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🙅🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♂"
  else
    fail("`1F645 1F3FD 200D 2642` doesn't match `man gesturing NO: medium skin tone` (🙅🏽‍♂)")
  end
end

it "`1F645 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: medium-dark skin tone` (🙅🏾‍♂️)" do
  if m = "🙅🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🙅🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♂️"
  else
    fail("`1F645 1F3FE 200D 2642 FE0F` doesn't match `man gesturing NO: medium-dark skin tone` (🙅🏾‍♂️)")
  end
end

it "`1F645 1F3FE 200D 2642` (minimally-qualified) should match `man gesturing NO: medium-dark skin tone` (🙅🏾‍♂)" do
  if m = "🙅🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🙅🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♂"
  else
    fail("`1F645 1F3FE 200D 2642` doesn't match `man gesturing NO: medium-dark skin tone` (🙅🏾‍♂)")
  end
end

it "`1F645 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man gesturing NO: dark skin tone` (🙅🏿‍♂️)" do
  if m = "🙅🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🙅🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♂️"
  else
    fail("`1F645 1F3FF 200D 2642 FE0F` doesn't match `man gesturing NO: dark skin tone` (🙅🏿‍♂️)")
  end
end

it "`1F645 1F3FF 200D 2642` (minimally-qualified) should match `man gesturing NO: dark skin tone` (🙅🏿‍♂)" do
  if m = "🙅🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🙅🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♂"
  else
    fail("`1F645 1F3FF 200D 2642` doesn't match `man gesturing NO: dark skin tone` (🙅🏿‍♂)")
  end
end

it "`1F645 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO` (🙅‍♀️)" do
  if m = "🙅‍♀️".match(Emoji::EMOJI_REGEX)
    "🙅‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♀️"
  else
    fail("`1F645 200D 2640 FE0F` doesn't match `woman gesturing NO` (🙅‍♀️)")
  end
end

it "`1F645 200D 2640` (minimally-qualified) should match `woman gesturing NO` (🙅‍♀)" do
  if m = "🙅‍♀".match(Emoji::EMOJI_REGEX)
    "🙅‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅‍♀"
  else
    fail("`1F645 200D 2640` doesn't match `woman gesturing NO` (🙅‍♀)")
  end
end

it "`1F645 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: light skin tone` (🙅🏻‍♀️)" do
  if m = "🙅🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🙅🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♀️"
  else
    fail("`1F645 1F3FB 200D 2640 FE0F` doesn't match `woman gesturing NO: light skin tone` (🙅🏻‍♀️)")
  end
end

it "`1F645 1F3FB 200D 2640` (minimally-qualified) should match `woman gesturing NO: light skin tone` (🙅🏻‍♀)" do
  if m = "🙅🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🙅🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏻‍♀"
  else
    fail("`1F645 1F3FB 200D 2640` doesn't match `woman gesturing NO: light skin tone` (🙅🏻‍♀)")
  end
end

it "`1F645 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: medium-light skin tone` (🙅🏼‍♀️)" do
  if m = "🙅🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🙅🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♀️"
  else
    fail("`1F645 1F3FC 200D 2640 FE0F` doesn't match `woman gesturing NO: medium-light skin tone` (🙅🏼‍♀️)")
  end
end

it "`1F645 1F3FC 200D 2640` (minimally-qualified) should match `woman gesturing NO: medium-light skin tone` (🙅🏼‍♀)" do
  if m = "🙅🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🙅🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏼‍♀"
  else
    fail("`1F645 1F3FC 200D 2640` doesn't match `woman gesturing NO: medium-light skin tone` (🙅🏼‍♀)")
  end
end

it "`1F645 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: medium skin tone` (🙅🏽‍♀️)" do
  if m = "🙅🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🙅🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♀️"
  else
    fail("`1F645 1F3FD 200D 2640 FE0F` doesn't match `woman gesturing NO: medium skin tone` (🙅🏽‍♀️)")
  end
end

it "`1F645 1F3FD 200D 2640` (minimally-qualified) should match `woman gesturing NO: medium skin tone` (🙅🏽‍♀)" do
  if m = "🙅🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🙅🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏽‍♀"
  else
    fail("`1F645 1F3FD 200D 2640` doesn't match `woman gesturing NO: medium skin tone` (🙅🏽‍♀)")
  end
end

it "`1F645 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: medium-dark skin tone` (🙅🏾‍♀️)" do
  if m = "🙅🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🙅🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♀️"
  else
    fail("`1F645 1F3FE 200D 2640 FE0F` doesn't match `woman gesturing NO: medium-dark skin tone` (🙅🏾‍♀️)")
  end
end

it "`1F645 1F3FE 200D 2640` (minimally-qualified) should match `woman gesturing NO: medium-dark skin tone` (🙅🏾‍♀)" do
  if m = "🙅🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🙅🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏾‍♀"
  else
    fail("`1F645 1F3FE 200D 2640` doesn't match `woman gesturing NO: medium-dark skin tone` (🙅🏾‍♀)")
  end
end

it "`1F645 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman gesturing NO: dark skin tone` (🙅🏿‍♀️)" do
  if m = "🙅🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🙅🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♀️"
  else
    fail("`1F645 1F3FF 200D 2640 FE0F` doesn't match `woman gesturing NO: dark skin tone` (🙅🏿‍♀️)")
  end
end

it "`1F645 1F3FF 200D 2640` (minimally-qualified) should match `woman gesturing NO: dark skin tone` (🙅🏿‍♀)" do
  if m = "🙅🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🙅🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙅🏿‍♀"
  else
    fail("`1F645 1F3FF 200D 2640` doesn't match `woman gesturing NO: dark skin tone` (🙅🏿‍♀)")
  end
end

it "`1F646` (fully-qualified) should match `person gesturing OK` (🙆)" do
  if m = "🙆".match(Emoji::EMOJI_REGEX)
    "🙆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆"
  else
    fail("`1F646` doesn't match `person gesturing OK` (🙆)")
  end
end

it "`1F646 1F3FB` (fully-qualified) should match `person gesturing OK: light skin tone` (🙆🏻)" do
  if m = "🙆🏻".match(Emoji::EMOJI_REGEX)
    "🙆🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻"
  else
    fail("`1F646 1F3FB` doesn't match `person gesturing OK: light skin tone` (🙆🏻)")
  end
end

it "`1F646 1F3FC` (fully-qualified) should match `person gesturing OK: medium-light skin tone` (🙆🏼)" do
  if m = "🙆🏼".match(Emoji::EMOJI_REGEX)
    "🙆🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼"
  else
    fail("`1F646 1F3FC` doesn't match `person gesturing OK: medium-light skin tone` (🙆🏼)")
  end
end

it "`1F646 1F3FD` (fully-qualified) should match `person gesturing OK: medium skin tone` (🙆🏽)" do
  if m = "🙆🏽".match(Emoji::EMOJI_REGEX)
    "🙆🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽"
  else
    fail("`1F646 1F3FD` doesn't match `person gesturing OK: medium skin tone` (🙆🏽)")
  end
end

it "`1F646 1F3FE` (fully-qualified) should match `person gesturing OK: medium-dark skin tone` (🙆🏾)" do
  if m = "🙆🏾".match(Emoji::EMOJI_REGEX)
    "🙆🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾"
  else
    fail("`1F646 1F3FE` doesn't match `person gesturing OK: medium-dark skin tone` (🙆🏾)")
  end
end

it "`1F646 1F3FF` (fully-qualified) should match `person gesturing OK: dark skin tone` (🙆🏿)" do
  if m = "🙆🏿".match(Emoji::EMOJI_REGEX)
    "🙆🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿"
  else
    fail("`1F646 1F3FF` doesn't match `person gesturing OK: dark skin tone` (🙆🏿)")
  end
end

it "`1F646 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK` (🙆‍♂️)" do
  if m = "🙆‍♂️".match(Emoji::EMOJI_REGEX)
    "🙆‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♂️"
  else
    fail("`1F646 200D 2642 FE0F` doesn't match `man gesturing OK` (🙆‍♂️)")
  end
end

it "`1F646 200D 2642` (minimally-qualified) should match `man gesturing OK` (🙆‍♂)" do
  if m = "🙆‍♂".match(Emoji::EMOJI_REGEX)
    "🙆‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♂"
  else
    fail("`1F646 200D 2642` doesn't match `man gesturing OK` (🙆‍♂)")
  end
end

it "`1F646 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: light skin tone` (🙆🏻‍♂️)" do
  if m = "🙆🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🙆🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♂️"
  else
    fail("`1F646 1F3FB 200D 2642 FE0F` doesn't match `man gesturing OK: light skin tone` (🙆🏻‍♂️)")
  end
end

it "`1F646 1F3FB 200D 2642` (minimally-qualified) should match `man gesturing OK: light skin tone` (🙆🏻‍♂)" do
  if m = "🙆🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🙆🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♂"
  else
    fail("`1F646 1F3FB 200D 2642` doesn't match `man gesturing OK: light skin tone` (🙆🏻‍♂)")
  end
end

it "`1F646 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: medium-light skin tone` (🙆🏼‍♂️)" do
  if m = "🙆🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🙆🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♂️"
  else
    fail("`1F646 1F3FC 200D 2642 FE0F` doesn't match `man gesturing OK: medium-light skin tone` (🙆🏼‍♂️)")
  end
end

it "`1F646 1F3FC 200D 2642` (minimally-qualified) should match `man gesturing OK: medium-light skin tone` (🙆🏼‍♂)" do
  if m = "🙆🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🙆🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♂"
  else
    fail("`1F646 1F3FC 200D 2642` doesn't match `man gesturing OK: medium-light skin tone` (🙆🏼‍♂)")
  end
end

it "`1F646 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: medium skin tone` (🙆🏽‍♂️)" do
  if m = "🙆🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🙆🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♂️"
  else
    fail("`1F646 1F3FD 200D 2642 FE0F` doesn't match `man gesturing OK: medium skin tone` (🙆🏽‍♂️)")
  end
end

it "`1F646 1F3FD 200D 2642` (minimally-qualified) should match `man gesturing OK: medium skin tone` (🙆🏽‍♂)" do
  if m = "🙆🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🙆🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♂"
  else
    fail("`1F646 1F3FD 200D 2642` doesn't match `man gesturing OK: medium skin tone` (🙆🏽‍♂)")
  end
end

it "`1F646 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: medium-dark skin tone` (🙆🏾‍♂️)" do
  if m = "🙆🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🙆🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♂️"
  else
    fail("`1F646 1F3FE 200D 2642 FE0F` doesn't match `man gesturing OK: medium-dark skin tone` (🙆🏾‍♂️)")
  end
end

it "`1F646 1F3FE 200D 2642` (minimally-qualified) should match `man gesturing OK: medium-dark skin tone` (🙆🏾‍♂)" do
  if m = "🙆🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🙆🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♂"
  else
    fail("`1F646 1F3FE 200D 2642` doesn't match `man gesturing OK: medium-dark skin tone` (🙆🏾‍♂)")
  end
end

it "`1F646 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man gesturing OK: dark skin tone` (🙆🏿‍♂️)" do
  if m = "🙆🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🙆🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♂️"
  else
    fail("`1F646 1F3FF 200D 2642 FE0F` doesn't match `man gesturing OK: dark skin tone` (🙆🏿‍♂️)")
  end
end

it "`1F646 1F3FF 200D 2642` (minimally-qualified) should match `man gesturing OK: dark skin tone` (🙆🏿‍♂)" do
  if m = "🙆🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🙆🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♂"
  else
    fail("`1F646 1F3FF 200D 2642` doesn't match `man gesturing OK: dark skin tone` (🙆🏿‍♂)")
  end
end

it "`1F646 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK` (🙆‍♀️)" do
  if m = "🙆‍♀️".match(Emoji::EMOJI_REGEX)
    "🙆‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♀️"
  else
    fail("`1F646 200D 2640 FE0F` doesn't match `woman gesturing OK` (🙆‍♀️)")
  end
end

it "`1F646 200D 2640` (minimally-qualified) should match `woman gesturing OK` (🙆‍♀)" do
  if m = "🙆‍♀".match(Emoji::EMOJI_REGEX)
    "🙆‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆‍♀"
  else
    fail("`1F646 200D 2640` doesn't match `woman gesturing OK` (🙆‍♀)")
  end
end

it "`1F646 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: light skin tone` (🙆🏻‍♀️)" do
  if m = "🙆🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🙆🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♀️"
  else
    fail("`1F646 1F3FB 200D 2640 FE0F` doesn't match `woman gesturing OK: light skin tone` (🙆🏻‍♀️)")
  end
end

it "`1F646 1F3FB 200D 2640` (minimally-qualified) should match `woman gesturing OK: light skin tone` (🙆🏻‍♀)" do
  if m = "🙆🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🙆🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏻‍♀"
  else
    fail("`1F646 1F3FB 200D 2640` doesn't match `woman gesturing OK: light skin tone` (🙆🏻‍♀)")
  end
end

it "`1F646 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: medium-light skin tone` (🙆🏼‍♀️)" do
  if m = "🙆🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🙆🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♀️"
  else
    fail("`1F646 1F3FC 200D 2640 FE0F` doesn't match `woman gesturing OK: medium-light skin tone` (🙆🏼‍♀️)")
  end
end

it "`1F646 1F3FC 200D 2640` (minimally-qualified) should match `woman gesturing OK: medium-light skin tone` (🙆🏼‍♀)" do
  if m = "🙆🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🙆🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏼‍♀"
  else
    fail("`1F646 1F3FC 200D 2640` doesn't match `woman gesturing OK: medium-light skin tone` (🙆🏼‍♀)")
  end
end

it "`1F646 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: medium skin tone` (🙆🏽‍♀️)" do
  if m = "🙆🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🙆🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♀️"
  else
    fail("`1F646 1F3FD 200D 2640 FE0F` doesn't match `woman gesturing OK: medium skin tone` (🙆🏽‍♀️)")
  end
end

it "`1F646 1F3FD 200D 2640` (minimally-qualified) should match `woman gesturing OK: medium skin tone` (🙆🏽‍♀)" do
  if m = "🙆🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🙆🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏽‍♀"
  else
    fail("`1F646 1F3FD 200D 2640` doesn't match `woman gesturing OK: medium skin tone` (🙆🏽‍♀)")
  end
end

it "`1F646 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: medium-dark skin tone` (🙆🏾‍♀️)" do
  if m = "🙆🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🙆🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♀️"
  else
    fail("`1F646 1F3FE 200D 2640 FE0F` doesn't match `woman gesturing OK: medium-dark skin tone` (🙆🏾‍♀️)")
  end
end

it "`1F646 1F3FE 200D 2640` (minimally-qualified) should match `woman gesturing OK: medium-dark skin tone` (🙆🏾‍♀)" do
  if m = "🙆🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🙆🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏾‍♀"
  else
    fail("`1F646 1F3FE 200D 2640` doesn't match `woman gesturing OK: medium-dark skin tone` (🙆🏾‍♀)")
  end
end

it "`1F646 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman gesturing OK: dark skin tone` (🙆🏿‍♀️)" do
  if m = "🙆🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🙆🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♀️"
  else
    fail("`1F646 1F3FF 200D 2640 FE0F` doesn't match `woman gesturing OK: dark skin tone` (🙆🏿‍♀️)")
  end
end

it "`1F646 1F3FF 200D 2640` (minimally-qualified) should match `woman gesturing OK: dark skin tone` (🙆🏿‍♀)" do
  if m = "🙆🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🙆🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙆🏿‍♀"
  else
    fail("`1F646 1F3FF 200D 2640` doesn't match `woman gesturing OK: dark skin tone` (🙆🏿‍♀)")
  end
end

it "`1F481` (fully-qualified) should match `person tipping hand` (💁)" do
  if m = "💁".match(Emoji::EMOJI_REGEX)
    "💁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁"
  else
    fail("`1F481` doesn't match `person tipping hand` (💁)")
  end
end

it "`1F481 1F3FB` (fully-qualified) should match `person tipping hand: light skin tone` (💁🏻)" do
  if m = "💁🏻".match(Emoji::EMOJI_REGEX)
    "💁🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻"
  else
    fail("`1F481 1F3FB` doesn't match `person tipping hand: light skin tone` (💁🏻)")
  end
end

it "`1F481 1F3FC` (fully-qualified) should match `person tipping hand: medium-light skin tone` (💁🏼)" do
  if m = "💁🏼".match(Emoji::EMOJI_REGEX)
    "💁🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼"
  else
    fail("`1F481 1F3FC` doesn't match `person tipping hand: medium-light skin tone` (💁🏼)")
  end
end

it "`1F481 1F3FD` (fully-qualified) should match `person tipping hand: medium skin tone` (💁🏽)" do
  if m = "💁🏽".match(Emoji::EMOJI_REGEX)
    "💁🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽"
  else
    fail("`1F481 1F3FD` doesn't match `person tipping hand: medium skin tone` (💁🏽)")
  end
end

it "`1F481 1F3FE` (fully-qualified) should match `person tipping hand: medium-dark skin tone` (💁🏾)" do
  if m = "💁🏾".match(Emoji::EMOJI_REGEX)
    "💁🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾"
  else
    fail("`1F481 1F3FE` doesn't match `person tipping hand: medium-dark skin tone` (💁🏾)")
  end
end

it "`1F481 1F3FF` (fully-qualified) should match `person tipping hand: dark skin tone` (💁🏿)" do
  if m = "💁🏿".match(Emoji::EMOJI_REGEX)
    "💁🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿"
  else
    fail("`1F481 1F3FF` doesn't match `person tipping hand: dark skin tone` (💁🏿)")
  end
end

it "`1F481 200D 2642 FE0F` (fully-qualified) should match `man tipping hand` (💁‍♂️)" do
  if m = "💁‍♂️".match(Emoji::EMOJI_REGEX)
    "💁‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♂️"
  else
    fail("`1F481 200D 2642 FE0F` doesn't match `man tipping hand` (💁‍♂️)")
  end
end

it "`1F481 200D 2642` (minimally-qualified) should match `man tipping hand` (💁‍♂)" do
  if m = "💁‍♂".match(Emoji::EMOJI_REGEX)
    "💁‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♂"
  else
    fail("`1F481 200D 2642` doesn't match `man tipping hand` (💁‍♂)")
  end
end

it "`1F481 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: light skin tone` (💁🏻‍♂️)" do
  if m = "💁🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "💁🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♂️"
  else
    fail("`1F481 1F3FB 200D 2642 FE0F` doesn't match `man tipping hand: light skin tone` (💁🏻‍♂️)")
  end
end

it "`1F481 1F3FB 200D 2642` (minimally-qualified) should match `man tipping hand: light skin tone` (💁🏻‍♂)" do
  if m = "💁🏻‍♂".match(Emoji::EMOJI_REGEX)
    "💁🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♂"
  else
    fail("`1F481 1F3FB 200D 2642` doesn't match `man tipping hand: light skin tone` (💁🏻‍♂)")
  end
end

it "`1F481 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: medium-light skin tone` (💁🏼‍♂️)" do
  if m = "💁🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "💁🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♂️"
  else
    fail("`1F481 1F3FC 200D 2642 FE0F` doesn't match `man tipping hand: medium-light skin tone` (💁🏼‍♂️)")
  end
end

it "`1F481 1F3FC 200D 2642` (minimally-qualified) should match `man tipping hand: medium-light skin tone` (💁🏼‍♂)" do
  if m = "💁🏼‍♂".match(Emoji::EMOJI_REGEX)
    "💁🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♂"
  else
    fail("`1F481 1F3FC 200D 2642` doesn't match `man tipping hand: medium-light skin tone` (💁🏼‍♂)")
  end
end

it "`1F481 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: medium skin tone` (💁🏽‍♂️)" do
  if m = "💁🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "💁🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♂️"
  else
    fail("`1F481 1F3FD 200D 2642 FE0F` doesn't match `man tipping hand: medium skin tone` (💁🏽‍♂️)")
  end
end

it "`1F481 1F3FD 200D 2642` (minimally-qualified) should match `man tipping hand: medium skin tone` (💁🏽‍♂)" do
  if m = "💁🏽‍♂".match(Emoji::EMOJI_REGEX)
    "💁🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♂"
  else
    fail("`1F481 1F3FD 200D 2642` doesn't match `man tipping hand: medium skin tone` (💁🏽‍♂)")
  end
end

it "`1F481 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: medium-dark skin tone` (💁🏾‍♂️)" do
  if m = "💁🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "💁🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♂️"
  else
    fail("`1F481 1F3FE 200D 2642 FE0F` doesn't match `man tipping hand: medium-dark skin tone` (💁🏾‍♂️)")
  end
end

it "`1F481 1F3FE 200D 2642` (minimally-qualified) should match `man tipping hand: medium-dark skin tone` (💁🏾‍♂)" do
  if m = "💁🏾‍♂".match(Emoji::EMOJI_REGEX)
    "💁🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♂"
  else
    fail("`1F481 1F3FE 200D 2642` doesn't match `man tipping hand: medium-dark skin tone` (💁🏾‍♂)")
  end
end

it "`1F481 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man tipping hand: dark skin tone` (💁🏿‍♂️)" do
  if m = "💁🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "💁🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♂️"
  else
    fail("`1F481 1F3FF 200D 2642 FE0F` doesn't match `man tipping hand: dark skin tone` (💁🏿‍♂️)")
  end
end

it "`1F481 1F3FF 200D 2642` (minimally-qualified) should match `man tipping hand: dark skin tone` (💁🏿‍♂)" do
  if m = "💁🏿‍♂".match(Emoji::EMOJI_REGEX)
    "💁🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♂"
  else
    fail("`1F481 1F3FF 200D 2642` doesn't match `man tipping hand: dark skin tone` (💁🏿‍♂)")
  end
end

it "`1F481 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand` (💁‍♀️)" do
  if m = "💁‍♀️".match(Emoji::EMOJI_REGEX)
    "💁‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♀️"
  else
    fail("`1F481 200D 2640 FE0F` doesn't match `woman tipping hand` (💁‍♀️)")
  end
end

it "`1F481 200D 2640` (minimally-qualified) should match `woman tipping hand` (💁‍♀)" do
  if m = "💁‍♀".match(Emoji::EMOJI_REGEX)
    "💁‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁‍♀"
  else
    fail("`1F481 200D 2640` doesn't match `woman tipping hand` (💁‍♀)")
  end
end

it "`1F481 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: light skin tone` (💁🏻‍♀️)" do
  if m = "💁🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "💁🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♀️"
  else
    fail("`1F481 1F3FB 200D 2640 FE0F` doesn't match `woman tipping hand: light skin tone` (💁🏻‍♀️)")
  end
end

it "`1F481 1F3FB 200D 2640` (minimally-qualified) should match `woman tipping hand: light skin tone` (💁🏻‍♀)" do
  if m = "💁🏻‍♀".match(Emoji::EMOJI_REGEX)
    "💁🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏻‍♀"
  else
    fail("`1F481 1F3FB 200D 2640` doesn't match `woman tipping hand: light skin tone` (💁🏻‍♀)")
  end
end

it "`1F481 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: medium-light skin tone` (💁🏼‍♀️)" do
  if m = "💁🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "💁🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♀️"
  else
    fail("`1F481 1F3FC 200D 2640 FE0F` doesn't match `woman tipping hand: medium-light skin tone` (💁🏼‍♀️)")
  end
end

it "`1F481 1F3FC 200D 2640` (minimally-qualified) should match `woman tipping hand: medium-light skin tone` (💁🏼‍♀)" do
  if m = "💁🏼‍♀".match(Emoji::EMOJI_REGEX)
    "💁🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏼‍♀"
  else
    fail("`1F481 1F3FC 200D 2640` doesn't match `woman tipping hand: medium-light skin tone` (💁🏼‍♀)")
  end
end

it "`1F481 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: medium skin tone` (💁🏽‍♀️)" do
  if m = "💁🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "💁🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♀️"
  else
    fail("`1F481 1F3FD 200D 2640 FE0F` doesn't match `woman tipping hand: medium skin tone` (💁🏽‍♀️)")
  end
end

it "`1F481 1F3FD 200D 2640` (minimally-qualified) should match `woman tipping hand: medium skin tone` (💁🏽‍♀)" do
  if m = "💁🏽‍♀".match(Emoji::EMOJI_REGEX)
    "💁🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏽‍♀"
  else
    fail("`1F481 1F3FD 200D 2640` doesn't match `woman tipping hand: medium skin tone` (💁🏽‍♀)")
  end
end

it "`1F481 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: medium-dark skin tone` (💁🏾‍♀️)" do
  if m = "💁🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "💁🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♀️"
  else
    fail("`1F481 1F3FE 200D 2640 FE0F` doesn't match `woman tipping hand: medium-dark skin tone` (💁🏾‍♀️)")
  end
end

it "`1F481 1F3FE 200D 2640` (minimally-qualified) should match `woman tipping hand: medium-dark skin tone` (💁🏾‍♀)" do
  if m = "💁🏾‍♀".match(Emoji::EMOJI_REGEX)
    "💁🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏾‍♀"
  else
    fail("`1F481 1F3FE 200D 2640` doesn't match `woman tipping hand: medium-dark skin tone` (💁🏾‍♀)")
  end
end

it "`1F481 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman tipping hand: dark skin tone` (💁🏿‍♀️)" do
  if m = "💁🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "💁🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♀️"
  else
    fail("`1F481 1F3FF 200D 2640 FE0F` doesn't match `woman tipping hand: dark skin tone` (💁🏿‍♀️)")
  end
end

it "`1F481 1F3FF 200D 2640` (minimally-qualified) should match `woman tipping hand: dark skin tone` (💁🏿‍♀)" do
  if m = "💁🏿‍♀".match(Emoji::EMOJI_REGEX)
    "💁🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💁🏿‍♀"
  else
    fail("`1F481 1F3FF 200D 2640` doesn't match `woman tipping hand: dark skin tone` (💁🏿‍♀)")
  end
end

it "`1F64B` (fully-qualified) should match `person raising hand` (🙋)" do
  if m = "🙋".match(Emoji::EMOJI_REGEX)
    "🙋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋"
  else
    fail("`1F64B` doesn't match `person raising hand` (🙋)")
  end
end

it "`1F64B 1F3FB` (fully-qualified) should match `person raising hand: light skin tone` (🙋🏻)" do
  if m = "🙋🏻".match(Emoji::EMOJI_REGEX)
    "🙋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻"
  else
    fail("`1F64B 1F3FB` doesn't match `person raising hand: light skin tone` (🙋🏻)")
  end
end

it "`1F64B 1F3FC` (fully-qualified) should match `person raising hand: medium-light skin tone` (🙋🏼)" do
  if m = "🙋🏼".match(Emoji::EMOJI_REGEX)
    "🙋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼"
  else
    fail("`1F64B 1F3FC` doesn't match `person raising hand: medium-light skin tone` (🙋🏼)")
  end
end

it "`1F64B 1F3FD` (fully-qualified) should match `person raising hand: medium skin tone` (🙋🏽)" do
  if m = "🙋🏽".match(Emoji::EMOJI_REGEX)
    "🙋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽"
  else
    fail("`1F64B 1F3FD` doesn't match `person raising hand: medium skin tone` (🙋🏽)")
  end
end

it "`1F64B 1F3FE` (fully-qualified) should match `person raising hand: medium-dark skin tone` (🙋🏾)" do
  if m = "🙋🏾".match(Emoji::EMOJI_REGEX)
    "🙋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾"
  else
    fail("`1F64B 1F3FE` doesn't match `person raising hand: medium-dark skin tone` (🙋🏾)")
  end
end

it "`1F64B 1F3FF` (fully-qualified) should match `person raising hand: dark skin tone` (🙋🏿)" do
  if m = "🙋🏿".match(Emoji::EMOJI_REGEX)
    "🙋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿"
  else
    fail("`1F64B 1F3FF` doesn't match `person raising hand: dark skin tone` (🙋🏿)")
  end
end

it "`1F64B 200D 2642 FE0F` (fully-qualified) should match `man raising hand` (🙋‍♂️)" do
  if m = "🙋‍♂️".match(Emoji::EMOJI_REGEX)
    "🙋‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♂️"
  else
    fail("`1F64B 200D 2642 FE0F` doesn't match `man raising hand` (🙋‍♂️)")
  end
end

it "`1F64B 200D 2642` (minimally-qualified) should match `man raising hand` (🙋‍♂)" do
  if m = "🙋‍♂".match(Emoji::EMOJI_REGEX)
    "🙋‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♂"
  else
    fail("`1F64B 200D 2642` doesn't match `man raising hand` (🙋‍♂)")
  end
end

it "`1F64B 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man raising hand: light skin tone` (🙋🏻‍♂️)" do
  if m = "🙋🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🙋🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♂️"
  else
    fail("`1F64B 1F3FB 200D 2642 FE0F` doesn't match `man raising hand: light skin tone` (🙋🏻‍♂️)")
  end
end

it "`1F64B 1F3FB 200D 2642` (minimally-qualified) should match `man raising hand: light skin tone` (🙋🏻‍♂)" do
  if m = "🙋🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🙋🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♂"
  else
    fail("`1F64B 1F3FB 200D 2642` doesn't match `man raising hand: light skin tone` (🙋🏻‍♂)")
  end
end

it "`1F64B 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man raising hand: medium-light skin tone` (🙋🏼‍♂️)" do
  if m = "🙋🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🙋🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♂️"
  else
    fail("`1F64B 1F3FC 200D 2642 FE0F` doesn't match `man raising hand: medium-light skin tone` (🙋🏼‍♂️)")
  end
end

it "`1F64B 1F3FC 200D 2642` (minimally-qualified) should match `man raising hand: medium-light skin tone` (🙋🏼‍♂)" do
  if m = "🙋🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🙋🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♂"
  else
    fail("`1F64B 1F3FC 200D 2642` doesn't match `man raising hand: medium-light skin tone` (🙋🏼‍♂)")
  end
end

it "`1F64B 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man raising hand: medium skin tone` (🙋🏽‍♂️)" do
  if m = "🙋🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🙋🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♂️"
  else
    fail("`1F64B 1F3FD 200D 2642 FE0F` doesn't match `man raising hand: medium skin tone` (🙋🏽‍♂️)")
  end
end

it "`1F64B 1F3FD 200D 2642` (minimally-qualified) should match `man raising hand: medium skin tone` (🙋🏽‍♂)" do
  if m = "🙋🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🙋🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♂"
  else
    fail("`1F64B 1F3FD 200D 2642` doesn't match `man raising hand: medium skin tone` (🙋🏽‍♂)")
  end
end

it "`1F64B 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man raising hand: medium-dark skin tone` (🙋🏾‍♂️)" do
  if m = "🙋🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🙋🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♂️"
  else
    fail("`1F64B 1F3FE 200D 2642 FE0F` doesn't match `man raising hand: medium-dark skin tone` (🙋🏾‍♂️)")
  end
end

it "`1F64B 1F3FE 200D 2642` (minimally-qualified) should match `man raising hand: medium-dark skin tone` (🙋🏾‍♂)" do
  if m = "🙋🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🙋🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♂"
  else
    fail("`1F64B 1F3FE 200D 2642` doesn't match `man raising hand: medium-dark skin tone` (🙋🏾‍♂)")
  end
end

it "`1F64B 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man raising hand: dark skin tone` (🙋🏿‍♂️)" do
  if m = "🙋🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🙋🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♂️"
  else
    fail("`1F64B 1F3FF 200D 2642 FE0F` doesn't match `man raising hand: dark skin tone` (🙋🏿‍♂️)")
  end
end

it "`1F64B 1F3FF 200D 2642` (minimally-qualified) should match `man raising hand: dark skin tone` (🙋🏿‍♂)" do
  if m = "🙋🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🙋🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♂"
  else
    fail("`1F64B 1F3FF 200D 2642` doesn't match `man raising hand: dark skin tone` (🙋🏿‍♂)")
  end
end

it "`1F64B 200D 2640 FE0F` (fully-qualified) should match `woman raising hand` (🙋‍♀️)" do
  if m = "🙋‍♀️".match(Emoji::EMOJI_REGEX)
    "🙋‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♀️"
  else
    fail("`1F64B 200D 2640 FE0F` doesn't match `woman raising hand` (🙋‍♀️)")
  end
end

it "`1F64B 200D 2640` (minimally-qualified) should match `woman raising hand` (🙋‍♀)" do
  if m = "🙋‍♀".match(Emoji::EMOJI_REGEX)
    "🙋‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋‍♀"
  else
    fail("`1F64B 200D 2640` doesn't match `woman raising hand` (🙋‍♀)")
  end
end

it "`1F64B 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: light skin tone` (🙋🏻‍♀️)" do
  if m = "🙋🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🙋🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♀️"
  else
    fail("`1F64B 1F3FB 200D 2640 FE0F` doesn't match `woman raising hand: light skin tone` (🙋🏻‍♀️)")
  end
end

it "`1F64B 1F3FB 200D 2640` (minimally-qualified) should match `woman raising hand: light skin tone` (🙋🏻‍♀)" do
  if m = "🙋🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🙋🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏻‍♀"
  else
    fail("`1F64B 1F3FB 200D 2640` doesn't match `woman raising hand: light skin tone` (🙋🏻‍♀)")
  end
end

it "`1F64B 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: medium-light skin tone` (🙋🏼‍♀️)" do
  if m = "🙋🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🙋🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♀️"
  else
    fail("`1F64B 1F3FC 200D 2640 FE0F` doesn't match `woman raising hand: medium-light skin tone` (🙋🏼‍♀️)")
  end
end

it "`1F64B 1F3FC 200D 2640` (minimally-qualified) should match `woman raising hand: medium-light skin tone` (🙋🏼‍♀)" do
  if m = "🙋🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🙋🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏼‍♀"
  else
    fail("`1F64B 1F3FC 200D 2640` doesn't match `woman raising hand: medium-light skin tone` (🙋🏼‍♀)")
  end
end

it "`1F64B 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: medium skin tone` (🙋🏽‍♀️)" do
  if m = "🙋🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🙋🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♀️"
  else
    fail("`1F64B 1F3FD 200D 2640 FE0F` doesn't match `woman raising hand: medium skin tone` (🙋🏽‍♀️)")
  end
end

it "`1F64B 1F3FD 200D 2640` (minimally-qualified) should match `woman raising hand: medium skin tone` (🙋🏽‍♀)" do
  if m = "🙋🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🙋🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏽‍♀"
  else
    fail("`1F64B 1F3FD 200D 2640` doesn't match `woman raising hand: medium skin tone` (🙋🏽‍♀)")
  end
end

it "`1F64B 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: medium-dark skin tone` (🙋🏾‍♀️)" do
  if m = "🙋🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🙋🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♀️"
  else
    fail("`1F64B 1F3FE 200D 2640 FE0F` doesn't match `woman raising hand: medium-dark skin tone` (🙋🏾‍♀️)")
  end
end

it "`1F64B 1F3FE 200D 2640` (minimally-qualified) should match `woman raising hand: medium-dark skin tone` (🙋🏾‍♀)" do
  if m = "🙋🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🙋🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏾‍♀"
  else
    fail("`1F64B 1F3FE 200D 2640` doesn't match `woman raising hand: medium-dark skin tone` (🙋🏾‍♀)")
  end
end

it "`1F64B 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman raising hand: dark skin tone` (🙋🏿‍♀️)" do
  if m = "🙋🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🙋🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♀️"
  else
    fail("`1F64B 1F3FF 200D 2640 FE0F` doesn't match `woman raising hand: dark skin tone` (🙋🏿‍♀️)")
  end
end

it "`1F64B 1F3FF 200D 2640` (minimally-qualified) should match `woman raising hand: dark skin tone` (🙋🏿‍♀)" do
  if m = "🙋🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🙋🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙋🏿‍♀"
  else
    fail("`1F64B 1F3FF 200D 2640` doesn't match `woman raising hand: dark skin tone` (🙋🏿‍♀)")
  end
end

it "`1F9CF` (fully-qualified) should match `deaf person` (🧏)" do
  if m = "🧏".match(Emoji::EMOJI_REGEX)
    "🧏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏"
  else
    fail("`1F9CF` doesn't match `deaf person` (🧏)")
  end
end

it "`1F9CF 1F3FB` (fully-qualified) should match `deaf person: light skin tone` (🧏🏻)" do
  if m = "🧏🏻".match(Emoji::EMOJI_REGEX)
    "🧏🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻"
  else
    fail("`1F9CF 1F3FB` doesn't match `deaf person: light skin tone` (🧏🏻)")
  end
end

it "`1F9CF 1F3FC` (fully-qualified) should match `deaf person: medium-light skin tone` (🧏🏼)" do
  if m = "🧏🏼".match(Emoji::EMOJI_REGEX)
    "🧏🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼"
  else
    fail("`1F9CF 1F3FC` doesn't match `deaf person: medium-light skin tone` (🧏🏼)")
  end
end

it "`1F9CF 1F3FD` (fully-qualified) should match `deaf person: medium skin tone` (🧏🏽)" do
  if m = "🧏🏽".match(Emoji::EMOJI_REGEX)
    "🧏🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽"
  else
    fail("`1F9CF 1F3FD` doesn't match `deaf person: medium skin tone` (🧏🏽)")
  end
end

it "`1F9CF 1F3FE` (fully-qualified) should match `deaf person: medium-dark skin tone` (🧏🏾)" do
  if m = "🧏🏾".match(Emoji::EMOJI_REGEX)
    "🧏🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾"
  else
    fail("`1F9CF 1F3FE` doesn't match `deaf person: medium-dark skin tone` (🧏🏾)")
  end
end

it "`1F9CF 1F3FF` (fully-qualified) should match `deaf person: dark skin tone` (🧏🏿)" do
  if m = "🧏🏿".match(Emoji::EMOJI_REGEX)
    "🧏🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿"
  else
    fail("`1F9CF 1F3FF` doesn't match `deaf person: dark skin tone` (🧏🏿)")
  end
end

it "`1F9CF 200D 2642 FE0F` (fully-qualified) should match `deaf man` (🧏‍♂️)" do
  if m = "🧏‍♂️".match(Emoji::EMOJI_REGEX)
    "🧏‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♂️"
  else
    fail("`1F9CF 200D 2642 FE0F` doesn't match `deaf man` (🧏‍♂️)")
  end
end

it "`1F9CF 200D 2642` (minimally-qualified) should match `deaf man` (🧏‍♂)" do
  if m = "🧏‍♂".match(Emoji::EMOJI_REGEX)
    "🧏‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♂"
  else
    fail("`1F9CF 200D 2642` doesn't match `deaf man` (🧏‍♂)")
  end
end

it "`1F9CF 1F3FB 200D 2642 FE0F` (fully-qualified) should match `deaf man: light skin tone` (🧏🏻‍♂️)" do
  if m = "🧏🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧏🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♂️"
  else
    fail("`1F9CF 1F3FB 200D 2642 FE0F` doesn't match `deaf man: light skin tone` (🧏🏻‍♂️)")
  end
end

it "`1F9CF 1F3FB 200D 2642` (minimally-qualified) should match `deaf man: light skin tone` (🧏🏻‍♂)" do
  if m = "🧏🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧏🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♂"
  else
    fail("`1F9CF 1F3FB 200D 2642` doesn't match `deaf man: light skin tone` (🧏🏻‍♂)")
  end
end

it "`1F9CF 1F3FC 200D 2642 FE0F` (fully-qualified) should match `deaf man: medium-light skin tone` (🧏🏼‍♂️)" do
  if m = "🧏🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧏🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♂️"
  else
    fail("`1F9CF 1F3FC 200D 2642 FE0F` doesn't match `deaf man: medium-light skin tone` (🧏🏼‍♂️)")
  end
end

it "`1F9CF 1F3FC 200D 2642` (minimally-qualified) should match `deaf man: medium-light skin tone` (🧏🏼‍♂)" do
  if m = "🧏🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧏🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♂"
  else
    fail("`1F9CF 1F3FC 200D 2642` doesn't match `deaf man: medium-light skin tone` (🧏🏼‍♂)")
  end
end

it "`1F9CF 1F3FD 200D 2642 FE0F` (fully-qualified) should match `deaf man: medium skin tone` (🧏🏽‍♂️)" do
  if m = "🧏🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧏🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♂️"
  else
    fail("`1F9CF 1F3FD 200D 2642 FE0F` doesn't match `deaf man: medium skin tone` (🧏🏽‍♂️)")
  end
end

it "`1F9CF 1F3FD 200D 2642` (minimally-qualified) should match `deaf man: medium skin tone` (🧏🏽‍♂)" do
  if m = "🧏🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧏🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♂"
  else
    fail("`1F9CF 1F3FD 200D 2642` doesn't match `deaf man: medium skin tone` (🧏🏽‍♂)")
  end
end

it "`1F9CF 1F3FE 200D 2642 FE0F` (fully-qualified) should match `deaf man: medium-dark skin tone` (🧏🏾‍♂️)" do
  if m = "🧏🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧏🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♂️"
  else
    fail("`1F9CF 1F3FE 200D 2642 FE0F` doesn't match `deaf man: medium-dark skin tone` (🧏🏾‍♂️)")
  end
end

it "`1F9CF 1F3FE 200D 2642` (minimally-qualified) should match `deaf man: medium-dark skin tone` (🧏🏾‍♂)" do
  if m = "🧏🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧏🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♂"
  else
    fail("`1F9CF 1F3FE 200D 2642` doesn't match `deaf man: medium-dark skin tone` (🧏🏾‍♂)")
  end
end

it "`1F9CF 1F3FF 200D 2642 FE0F` (fully-qualified) should match `deaf man: dark skin tone` (🧏🏿‍♂️)" do
  if m = "🧏🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧏🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♂️"
  else
    fail("`1F9CF 1F3FF 200D 2642 FE0F` doesn't match `deaf man: dark skin tone` (🧏🏿‍♂️)")
  end
end

it "`1F9CF 1F3FF 200D 2642` (minimally-qualified) should match `deaf man: dark skin tone` (🧏🏿‍♂)" do
  if m = "🧏🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧏🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♂"
  else
    fail("`1F9CF 1F3FF 200D 2642` doesn't match `deaf man: dark skin tone` (🧏🏿‍♂)")
  end
end

it "`1F9CF 200D 2640 FE0F` (fully-qualified) should match `deaf woman` (🧏‍♀️)" do
  if m = "🧏‍♀️".match(Emoji::EMOJI_REGEX)
    "🧏‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♀️"
  else
    fail("`1F9CF 200D 2640 FE0F` doesn't match `deaf woman` (🧏‍♀️)")
  end
end

it "`1F9CF 200D 2640` (minimally-qualified) should match `deaf woman` (🧏‍♀)" do
  if m = "🧏‍♀".match(Emoji::EMOJI_REGEX)
    "🧏‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏‍♀"
  else
    fail("`1F9CF 200D 2640` doesn't match `deaf woman` (🧏‍♀)")
  end
end

it "`1F9CF 1F3FB 200D 2640 FE0F` (fully-qualified) should match `deaf woman: light skin tone` (🧏🏻‍♀️)" do
  if m = "🧏🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧏🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♀️"
  else
    fail("`1F9CF 1F3FB 200D 2640 FE0F` doesn't match `deaf woman: light skin tone` (🧏🏻‍♀️)")
  end
end

it "`1F9CF 1F3FB 200D 2640` (minimally-qualified) should match `deaf woman: light skin tone` (🧏🏻‍♀)" do
  if m = "🧏🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧏🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏻‍♀"
  else
    fail("`1F9CF 1F3FB 200D 2640` doesn't match `deaf woman: light skin tone` (🧏🏻‍♀)")
  end
end

it "`1F9CF 1F3FC 200D 2640 FE0F` (fully-qualified) should match `deaf woman: medium-light skin tone` (🧏🏼‍♀️)" do
  if m = "🧏🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧏🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♀️"
  else
    fail("`1F9CF 1F3FC 200D 2640 FE0F` doesn't match `deaf woman: medium-light skin tone` (🧏🏼‍♀️)")
  end
end

it "`1F9CF 1F3FC 200D 2640` (minimally-qualified) should match `deaf woman: medium-light skin tone` (🧏🏼‍♀)" do
  if m = "🧏🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧏🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏼‍♀"
  else
    fail("`1F9CF 1F3FC 200D 2640` doesn't match `deaf woman: medium-light skin tone` (🧏🏼‍♀)")
  end
end

it "`1F9CF 1F3FD 200D 2640 FE0F` (fully-qualified) should match `deaf woman: medium skin tone` (🧏🏽‍♀️)" do
  if m = "🧏🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧏🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♀️"
  else
    fail("`1F9CF 1F3FD 200D 2640 FE0F` doesn't match `deaf woman: medium skin tone` (🧏🏽‍♀️)")
  end
end

it "`1F9CF 1F3FD 200D 2640` (minimally-qualified) should match `deaf woman: medium skin tone` (🧏🏽‍♀)" do
  if m = "🧏🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧏🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏽‍♀"
  else
    fail("`1F9CF 1F3FD 200D 2640` doesn't match `deaf woman: medium skin tone` (🧏🏽‍♀)")
  end
end

it "`1F9CF 1F3FE 200D 2640 FE0F` (fully-qualified) should match `deaf woman: medium-dark skin tone` (🧏🏾‍♀️)" do
  if m = "🧏🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧏🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♀️"
  else
    fail("`1F9CF 1F3FE 200D 2640 FE0F` doesn't match `deaf woman: medium-dark skin tone` (🧏🏾‍♀️)")
  end
end

it "`1F9CF 1F3FE 200D 2640` (minimally-qualified) should match `deaf woman: medium-dark skin tone` (🧏🏾‍♀)" do
  if m = "🧏🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧏🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏾‍♀"
  else
    fail("`1F9CF 1F3FE 200D 2640` doesn't match `deaf woman: medium-dark skin tone` (🧏🏾‍♀)")
  end
end

it "`1F9CF 1F3FF 200D 2640 FE0F` (fully-qualified) should match `deaf woman: dark skin tone` (🧏🏿‍♀️)" do
  if m = "🧏🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧏🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♀️"
  else
    fail("`1F9CF 1F3FF 200D 2640 FE0F` doesn't match `deaf woman: dark skin tone` (🧏🏿‍♀️)")
  end
end

it "`1F9CF 1F3FF 200D 2640` (minimally-qualified) should match `deaf woman: dark skin tone` (🧏🏿‍♀)" do
  if m = "🧏🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧏🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧏🏿‍♀"
  else
    fail("`1F9CF 1F3FF 200D 2640` doesn't match `deaf woman: dark skin tone` (🧏🏿‍♀)")
  end
end

it "`1F647` (fully-qualified) should match `person bowing` (🙇)" do
  if m = "🙇".match(Emoji::EMOJI_REGEX)
    "🙇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇"
  else
    fail("`1F647` doesn't match `person bowing` (🙇)")
  end
end

it "`1F647 1F3FB` (fully-qualified) should match `person bowing: light skin tone` (🙇🏻)" do
  if m = "🙇🏻".match(Emoji::EMOJI_REGEX)
    "🙇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻"
  else
    fail("`1F647 1F3FB` doesn't match `person bowing: light skin tone` (🙇🏻)")
  end
end

it "`1F647 1F3FC` (fully-qualified) should match `person bowing: medium-light skin tone` (🙇🏼)" do
  if m = "🙇🏼".match(Emoji::EMOJI_REGEX)
    "🙇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼"
  else
    fail("`1F647 1F3FC` doesn't match `person bowing: medium-light skin tone` (🙇🏼)")
  end
end

it "`1F647 1F3FD` (fully-qualified) should match `person bowing: medium skin tone` (🙇🏽)" do
  if m = "🙇🏽".match(Emoji::EMOJI_REGEX)
    "🙇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽"
  else
    fail("`1F647 1F3FD` doesn't match `person bowing: medium skin tone` (🙇🏽)")
  end
end

it "`1F647 1F3FE` (fully-qualified) should match `person bowing: medium-dark skin tone` (🙇🏾)" do
  if m = "🙇🏾".match(Emoji::EMOJI_REGEX)
    "🙇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾"
  else
    fail("`1F647 1F3FE` doesn't match `person bowing: medium-dark skin tone` (🙇🏾)")
  end
end

it "`1F647 1F3FF` (fully-qualified) should match `person bowing: dark skin tone` (🙇🏿)" do
  if m = "🙇🏿".match(Emoji::EMOJI_REGEX)
    "🙇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿"
  else
    fail("`1F647 1F3FF` doesn't match `person bowing: dark skin tone` (🙇🏿)")
  end
end

it "`1F647 200D 2642 FE0F` (fully-qualified) should match `man bowing` (🙇‍♂️)" do
  if m = "🙇‍♂️".match(Emoji::EMOJI_REGEX)
    "🙇‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♂️"
  else
    fail("`1F647 200D 2642 FE0F` doesn't match `man bowing` (🙇‍♂️)")
  end
end

it "`1F647 200D 2642` (minimally-qualified) should match `man bowing` (🙇‍♂)" do
  if m = "🙇‍♂".match(Emoji::EMOJI_REGEX)
    "🙇‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♂"
  else
    fail("`1F647 200D 2642` doesn't match `man bowing` (🙇‍♂)")
  end
end

it "`1F647 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man bowing: light skin tone` (🙇🏻‍♂️)" do
  if m = "🙇🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🙇🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♂️"
  else
    fail("`1F647 1F3FB 200D 2642 FE0F` doesn't match `man bowing: light skin tone` (🙇🏻‍♂️)")
  end
end

it "`1F647 1F3FB 200D 2642` (minimally-qualified) should match `man bowing: light skin tone` (🙇🏻‍♂)" do
  if m = "🙇🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🙇🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♂"
  else
    fail("`1F647 1F3FB 200D 2642` doesn't match `man bowing: light skin tone` (🙇🏻‍♂)")
  end
end

it "`1F647 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man bowing: medium-light skin tone` (🙇🏼‍♂️)" do
  if m = "🙇🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🙇🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♂️"
  else
    fail("`1F647 1F3FC 200D 2642 FE0F` doesn't match `man bowing: medium-light skin tone` (🙇🏼‍♂️)")
  end
end

it "`1F647 1F3FC 200D 2642` (minimally-qualified) should match `man bowing: medium-light skin tone` (🙇🏼‍♂)" do
  if m = "🙇🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🙇🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♂"
  else
    fail("`1F647 1F3FC 200D 2642` doesn't match `man bowing: medium-light skin tone` (🙇🏼‍♂)")
  end
end

it "`1F647 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man bowing: medium skin tone` (🙇🏽‍♂️)" do
  if m = "🙇🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🙇🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♂️"
  else
    fail("`1F647 1F3FD 200D 2642 FE0F` doesn't match `man bowing: medium skin tone` (🙇🏽‍♂️)")
  end
end

it "`1F647 1F3FD 200D 2642` (minimally-qualified) should match `man bowing: medium skin tone` (🙇🏽‍♂)" do
  if m = "🙇🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🙇🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♂"
  else
    fail("`1F647 1F3FD 200D 2642` doesn't match `man bowing: medium skin tone` (🙇🏽‍♂)")
  end
end

it "`1F647 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man bowing: medium-dark skin tone` (🙇🏾‍♂️)" do
  if m = "🙇🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🙇🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♂️"
  else
    fail("`1F647 1F3FE 200D 2642 FE0F` doesn't match `man bowing: medium-dark skin tone` (🙇🏾‍♂️)")
  end
end

it "`1F647 1F3FE 200D 2642` (minimally-qualified) should match `man bowing: medium-dark skin tone` (🙇🏾‍♂)" do
  if m = "🙇🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🙇🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♂"
  else
    fail("`1F647 1F3FE 200D 2642` doesn't match `man bowing: medium-dark skin tone` (🙇🏾‍♂)")
  end
end

it "`1F647 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man bowing: dark skin tone` (🙇🏿‍♂️)" do
  if m = "🙇🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🙇🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♂️"
  else
    fail("`1F647 1F3FF 200D 2642 FE0F` doesn't match `man bowing: dark skin tone` (🙇🏿‍♂️)")
  end
end

it "`1F647 1F3FF 200D 2642` (minimally-qualified) should match `man bowing: dark skin tone` (🙇🏿‍♂)" do
  if m = "🙇🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🙇🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♂"
  else
    fail("`1F647 1F3FF 200D 2642` doesn't match `man bowing: dark skin tone` (🙇🏿‍♂)")
  end
end

it "`1F647 200D 2640 FE0F` (fully-qualified) should match `woman bowing` (🙇‍♀️)" do
  if m = "🙇‍♀️".match(Emoji::EMOJI_REGEX)
    "🙇‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♀️"
  else
    fail("`1F647 200D 2640 FE0F` doesn't match `woman bowing` (🙇‍♀️)")
  end
end

it "`1F647 200D 2640` (minimally-qualified) should match `woman bowing` (🙇‍♀)" do
  if m = "🙇‍♀".match(Emoji::EMOJI_REGEX)
    "🙇‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇‍♀"
  else
    fail("`1F647 200D 2640` doesn't match `woman bowing` (🙇‍♀)")
  end
end

it "`1F647 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman bowing: light skin tone` (🙇🏻‍♀️)" do
  if m = "🙇🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🙇🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♀️"
  else
    fail("`1F647 1F3FB 200D 2640 FE0F` doesn't match `woman bowing: light skin tone` (🙇🏻‍♀️)")
  end
end

it "`1F647 1F3FB 200D 2640` (minimally-qualified) should match `woman bowing: light skin tone` (🙇🏻‍♀)" do
  if m = "🙇🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🙇🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏻‍♀"
  else
    fail("`1F647 1F3FB 200D 2640` doesn't match `woman bowing: light skin tone` (🙇🏻‍♀)")
  end
end

it "`1F647 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman bowing: medium-light skin tone` (🙇🏼‍♀️)" do
  if m = "🙇🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🙇🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♀️"
  else
    fail("`1F647 1F3FC 200D 2640 FE0F` doesn't match `woman bowing: medium-light skin tone` (🙇🏼‍♀️)")
  end
end

it "`1F647 1F3FC 200D 2640` (minimally-qualified) should match `woman bowing: medium-light skin tone` (🙇🏼‍♀)" do
  if m = "🙇🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🙇🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏼‍♀"
  else
    fail("`1F647 1F3FC 200D 2640` doesn't match `woman bowing: medium-light skin tone` (🙇🏼‍♀)")
  end
end

it "`1F647 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman bowing: medium skin tone` (🙇🏽‍♀️)" do
  if m = "🙇🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🙇🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♀️"
  else
    fail("`1F647 1F3FD 200D 2640 FE0F` doesn't match `woman bowing: medium skin tone` (🙇🏽‍♀️)")
  end
end

it "`1F647 1F3FD 200D 2640` (minimally-qualified) should match `woman bowing: medium skin tone` (🙇🏽‍♀)" do
  if m = "🙇🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🙇🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏽‍♀"
  else
    fail("`1F647 1F3FD 200D 2640` doesn't match `woman bowing: medium skin tone` (🙇🏽‍♀)")
  end
end

it "`1F647 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman bowing: medium-dark skin tone` (🙇🏾‍♀️)" do
  if m = "🙇🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🙇🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♀️"
  else
    fail("`1F647 1F3FE 200D 2640 FE0F` doesn't match `woman bowing: medium-dark skin tone` (🙇🏾‍♀️)")
  end
end

it "`1F647 1F3FE 200D 2640` (minimally-qualified) should match `woman bowing: medium-dark skin tone` (🙇🏾‍♀)" do
  if m = "🙇🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🙇🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏾‍♀"
  else
    fail("`1F647 1F3FE 200D 2640` doesn't match `woman bowing: medium-dark skin tone` (🙇🏾‍♀)")
  end
end

it "`1F647 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman bowing: dark skin tone` (🙇🏿‍♀️)" do
  if m = "🙇🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🙇🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♀️"
  else
    fail("`1F647 1F3FF 200D 2640 FE0F` doesn't match `woman bowing: dark skin tone` (🙇🏿‍♀️)")
  end
end

it "`1F647 1F3FF 200D 2640` (minimally-qualified) should match `woman bowing: dark skin tone` (🙇🏿‍♀)" do
  if m = "🙇🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🙇🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🙇🏿‍♀"
  else
    fail("`1F647 1F3FF 200D 2640` doesn't match `woman bowing: dark skin tone` (🙇🏿‍♀)")
  end
end

it "`1F926` (fully-qualified) should match `person facepalming` (🤦)" do
  if m = "🤦".match(Emoji::EMOJI_REGEX)
    "🤦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦"
  else
    fail("`1F926` doesn't match `person facepalming` (🤦)")
  end
end

it "`1F926 1F3FB` (fully-qualified) should match `person facepalming: light skin tone` (🤦🏻)" do
  if m = "🤦🏻".match(Emoji::EMOJI_REGEX)
    "🤦🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻"
  else
    fail("`1F926 1F3FB` doesn't match `person facepalming: light skin tone` (🤦🏻)")
  end
end

it "`1F926 1F3FC` (fully-qualified) should match `person facepalming: medium-light skin tone` (🤦🏼)" do
  if m = "🤦🏼".match(Emoji::EMOJI_REGEX)
    "🤦🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼"
  else
    fail("`1F926 1F3FC` doesn't match `person facepalming: medium-light skin tone` (🤦🏼)")
  end
end

it "`1F926 1F3FD` (fully-qualified) should match `person facepalming: medium skin tone` (🤦🏽)" do
  if m = "🤦🏽".match(Emoji::EMOJI_REGEX)
    "🤦🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽"
  else
    fail("`1F926 1F3FD` doesn't match `person facepalming: medium skin tone` (🤦🏽)")
  end
end

it "`1F926 1F3FE` (fully-qualified) should match `person facepalming: medium-dark skin tone` (🤦🏾)" do
  if m = "🤦🏾".match(Emoji::EMOJI_REGEX)
    "🤦🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾"
  else
    fail("`1F926 1F3FE` doesn't match `person facepalming: medium-dark skin tone` (🤦🏾)")
  end
end

it "`1F926 1F3FF` (fully-qualified) should match `person facepalming: dark skin tone` (🤦🏿)" do
  if m = "🤦🏿".match(Emoji::EMOJI_REGEX)
    "🤦🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿"
  else
    fail("`1F926 1F3FF` doesn't match `person facepalming: dark skin tone` (🤦🏿)")
  end
end

it "`1F926 200D 2642 FE0F` (fully-qualified) should match `man facepalming` (🤦‍♂️)" do
  if m = "🤦‍♂️".match(Emoji::EMOJI_REGEX)
    "🤦‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♂️"
  else
    fail("`1F926 200D 2642 FE0F` doesn't match `man facepalming` (🤦‍♂️)")
  end
end

it "`1F926 200D 2642` (minimally-qualified) should match `man facepalming` (🤦‍♂)" do
  if m = "🤦‍♂".match(Emoji::EMOJI_REGEX)
    "🤦‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♂"
  else
    fail("`1F926 200D 2642` doesn't match `man facepalming` (🤦‍♂)")
  end
end

it "`1F926 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man facepalming: light skin tone` (🤦🏻‍♂️)" do
  if m = "🤦🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🤦🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♂️"
  else
    fail("`1F926 1F3FB 200D 2642 FE0F` doesn't match `man facepalming: light skin tone` (🤦🏻‍♂️)")
  end
end

it "`1F926 1F3FB 200D 2642` (minimally-qualified) should match `man facepalming: light skin tone` (🤦🏻‍♂)" do
  if m = "🤦🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🤦🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♂"
  else
    fail("`1F926 1F3FB 200D 2642` doesn't match `man facepalming: light skin tone` (🤦🏻‍♂)")
  end
end

it "`1F926 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man facepalming: medium-light skin tone` (🤦🏼‍♂️)" do
  if m = "🤦🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🤦🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♂️"
  else
    fail("`1F926 1F3FC 200D 2642 FE0F` doesn't match `man facepalming: medium-light skin tone` (🤦🏼‍♂️)")
  end
end

it "`1F926 1F3FC 200D 2642` (minimally-qualified) should match `man facepalming: medium-light skin tone` (🤦🏼‍♂)" do
  if m = "🤦🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🤦🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♂"
  else
    fail("`1F926 1F3FC 200D 2642` doesn't match `man facepalming: medium-light skin tone` (🤦🏼‍♂)")
  end
end

it "`1F926 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man facepalming: medium skin tone` (🤦🏽‍♂️)" do
  if m = "🤦🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🤦🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♂️"
  else
    fail("`1F926 1F3FD 200D 2642 FE0F` doesn't match `man facepalming: medium skin tone` (🤦🏽‍♂️)")
  end
end

it "`1F926 1F3FD 200D 2642` (minimally-qualified) should match `man facepalming: medium skin tone` (🤦🏽‍♂)" do
  if m = "🤦🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🤦🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♂"
  else
    fail("`1F926 1F3FD 200D 2642` doesn't match `man facepalming: medium skin tone` (🤦🏽‍♂)")
  end
end

it "`1F926 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man facepalming: medium-dark skin tone` (🤦🏾‍♂️)" do
  if m = "🤦🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🤦🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♂️"
  else
    fail("`1F926 1F3FE 200D 2642 FE0F` doesn't match `man facepalming: medium-dark skin tone` (🤦🏾‍♂️)")
  end
end

it "`1F926 1F3FE 200D 2642` (minimally-qualified) should match `man facepalming: medium-dark skin tone` (🤦🏾‍♂)" do
  if m = "🤦🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🤦🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♂"
  else
    fail("`1F926 1F3FE 200D 2642` doesn't match `man facepalming: medium-dark skin tone` (🤦🏾‍♂)")
  end
end

it "`1F926 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man facepalming: dark skin tone` (🤦🏿‍♂️)" do
  if m = "🤦🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🤦🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♂️"
  else
    fail("`1F926 1F3FF 200D 2642 FE0F` doesn't match `man facepalming: dark skin tone` (🤦🏿‍♂️)")
  end
end

it "`1F926 1F3FF 200D 2642` (minimally-qualified) should match `man facepalming: dark skin tone` (🤦🏿‍♂)" do
  if m = "🤦🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🤦🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♂"
  else
    fail("`1F926 1F3FF 200D 2642` doesn't match `man facepalming: dark skin tone` (🤦🏿‍♂)")
  end
end

it "`1F926 200D 2640 FE0F` (fully-qualified) should match `woman facepalming` (🤦‍♀️)" do
  if m = "🤦‍♀️".match(Emoji::EMOJI_REGEX)
    "🤦‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♀️"
  else
    fail("`1F926 200D 2640 FE0F` doesn't match `woman facepalming` (🤦‍♀️)")
  end
end

it "`1F926 200D 2640` (minimally-qualified) should match `woman facepalming` (🤦‍♀)" do
  if m = "🤦‍♀".match(Emoji::EMOJI_REGEX)
    "🤦‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦‍♀"
  else
    fail("`1F926 200D 2640` doesn't match `woman facepalming` (🤦‍♀)")
  end
end

it "`1F926 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: light skin tone` (🤦🏻‍♀️)" do
  if m = "🤦🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🤦🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♀️"
  else
    fail("`1F926 1F3FB 200D 2640 FE0F` doesn't match `woman facepalming: light skin tone` (🤦🏻‍♀️)")
  end
end

it "`1F926 1F3FB 200D 2640` (minimally-qualified) should match `woman facepalming: light skin tone` (🤦🏻‍♀)" do
  if m = "🤦🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🤦🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏻‍♀"
  else
    fail("`1F926 1F3FB 200D 2640` doesn't match `woman facepalming: light skin tone` (🤦🏻‍♀)")
  end
end

it "`1F926 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: medium-light skin tone` (🤦🏼‍♀️)" do
  if m = "🤦🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🤦🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♀️"
  else
    fail("`1F926 1F3FC 200D 2640 FE0F` doesn't match `woman facepalming: medium-light skin tone` (🤦🏼‍♀️)")
  end
end

it "`1F926 1F3FC 200D 2640` (minimally-qualified) should match `woman facepalming: medium-light skin tone` (🤦🏼‍♀)" do
  if m = "🤦🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🤦🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏼‍♀"
  else
    fail("`1F926 1F3FC 200D 2640` doesn't match `woman facepalming: medium-light skin tone` (🤦🏼‍♀)")
  end
end

it "`1F926 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: medium skin tone` (🤦🏽‍♀️)" do
  if m = "🤦🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🤦🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♀️"
  else
    fail("`1F926 1F3FD 200D 2640 FE0F` doesn't match `woman facepalming: medium skin tone` (🤦🏽‍♀️)")
  end
end

it "`1F926 1F3FD 200D 2640` (minimally-qualified) should match `woman facepalming: medium skin tone` (🤦🏽‍♀)" do
  if m = "🤦🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🤦🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏽‍♀"
  else
    fail("`1F926 1F3FD 200D 2640` doesn't match `woman facepalming: medium skin tone` (🤦🏽‍♀)")
  end
end

it "`1F926 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: medium-dark skin tone` (🤦🏾‍♀️)" do
  if m = "🤦🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🤦🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♀️"
  else
    fail("`1F926 1F3FE 200D 2640 FE0F` doesn't match `woman facepalming: medium-dark skin tone` (🤦🏾‍♀️)")
  end
end

it "`1F926 1F3FE 200D 2640` (minimally-qualified) should match `woman facepalming: medium-dark skin tone` (🤦🏾‍♀)" do
  if m = "🤦🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🤦🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏾‍♀"
  else
    fail("`1F926 1F3FE 200D 2640` doesn't match `woman facepalming: medium-dark skin tone` (🤦🏾‍♀)")
  end
end

it "`1F926 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman facepalming: dark skin tone` (🤦🏿‍♀️)" do
  if m = "🤦🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🤦🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♀️"
  else
    fail("`1F926 1F3FF 200D 2640 FE0F` doesn't match `woman facepalming: dark skin tone` (🤦🏿‍♀️)")
  end
end

it "`1F926 1F3FF 200D 2640` (minimally-qualified) should match `woman facepalming: dark skin tone` (🤦🏿‍♀)" do
  if m = "🤦🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🤦🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤦🏿‍♀"
  else
    fail("`1F926 1F3FF 200D 2640` doesn't match `woman facepalming: dark skin tone` (🤦🏿‍♀)")
  end
end

it "`1F937` (fully-qualified) should match `person shrugging` (🤷)" do
  if m = "🤷".match(Emoji::EMOJI_REGEX)
    "🤷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷"
  else
    fail("`1F937` doesn't match `person shrugging` (🤷)")
  end
end

it "`1F937 1F3FB` (fully-qualified) should match `person shrugging: light skin tone` (🤷🏻)" do
  if m = "🤷🏻".match(Emoji::EMOJI_REGEX)
    "🤷🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻"
  else
    fail("`1F937 1F3FB` doesn't match `person shrugging: light skin tone` (🤷🏻)")
  end
end

it "`1F937 1F3FC` (fully-qualified) should match `person shrugging: medium-light skin tone` (🤷🏼)" do
  if m = "🤷🏼".match(Emoji::EMOJI_REGEX)
    "🤷🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼"
  else
    fail("`1F937 1F3FC` doesn't match `person shrugging: medium-light skin tone` (🤷🏼)")
  end
end

it "`1F937 1F3FD` (fully-qualified) should match `person shrugging: medium skin tone` (🤷🏽)" do
  if m = "🤷🏽".match(Emoji::EMOJI_REGEX)
    "🤷🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽"
  else
    fail("`1F937 1F3FD` doesn't match `person shrugging: medium skin tone` (🤷🏽)")
  end
end

it "`1F937 1F3FE` (fully-qualified) should match `person shrugging: medium-dark skin tone` (🤷🏾)" do
  if m = "🤷🏾".match(Emoji::EMOJI_REGEX)
    "🤷🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾"
  else
    fail("`1F937 1F3FE` doesn't match `person shrugging: medium-dark skin tone` (🤷🏾)")
  end
end

it "`1F937 1F3FF` (fully-qualified) should match `person shrugging: dark skin tone` (🤷🏿)" do
  if m = "🤷🏿".match(Emoji::EMOJI_REGEX)
    "🤷🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿"
  else
    fail("`1F937 1F3FF` doesn't match `person shrugging: dark skin tone` (🤷🏿)")
  end
end

it "`1F937 200D 2642 FE0F` (fully-qualified) should match `man shrugging` (🤷‍♂️)" do
  if m = "🤷‍♂️".match(Emoji::EMOJI_REGEX)
    "🤷‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♂️"
  else
    fail("`1F937 200D 2642 FE0F` doesn't match `man shrugging` (🤷‍♂️)")
  end
end

it "`1F937 200D 2642` (minimally-qualified) should match `man shrugging` (🤷‍♂)" do
  if m = "🤷‍♂".match(Emoji::EMOJI_REGEX)
    "🤷‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♂"
  else
    fail("`1F937 200D 2642` doesn't match `man shrugging` (🤷‍♂)")
  end
end

it "`1F937 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man shrugging: light skin tone` (🤷🏻‍♂️)" do
  if m = "🤷🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🤷🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♂️"
  else
    fail("`1F937 1F3FB 200D 2642 FE0F` doesn't match `man shrugging: light skin tone` (🤷🏻‍♂️)")
  end
end

it "`1F937 1F3FB 200D 2642` (minimally-qualified) should match `man shrugging: light skin tone` (🤷🏻‍♂)" do
  if m = "🤷🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🤷🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♂"
  else
    fail("`1F937 1F3FB 200D 2642` doesn't match `man shrugging: light skin tone` (🤷🏻‍♂)")
  end
end

it "`1F937 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man shrugging: medium-light skin tone` (🤷🏼‍♂️)" do
  if m = "🤷🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🤷🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♂️"
  else
    fail("`1F937 1F3FC 200D 2642 FE0F` doesn't match `man shrugging: medium-light skin tone` (🤷🏼‍♂️)")
  end
end

it "`1F937 1F3FC 200D 2642` (minimally-qualified) should match `man shrugging: medium-light skin tone` (🤷🏼‍♂)" do
  if m = "🤷🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🤷🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♂"
  else
    fail("`1F937 1F3FC 200D 2642` doesn't match `man shrugging: medium-light skin tone` (🤷🏼‍♂)")
  end
end

it "`1F937 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man shrugging: medium skin tone` (🤷🏽‍♂️)" do
  if m = "🤷🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🤷🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♂️"
  else
    fail("`1F937 1F3FD 200D 2642 FE0F` doesn't match `man shrugging: medium skin tone` (🤷🏽‍♂️)")
  end
end

it "`1F937 1F3FD 200D 2642` (minimally-qualified) should match `man shrugging: medium skin tone` (🤷🏽‍♂)" do
  if m = "🤷🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🤷🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♂"
  else
    fail("`1F937 1F3FD 200D 2642` doesn't match `man shrugging: medium skin tone` (🤷🏽‍♂)")
  end
end

it "`1F937 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man shrugging: medium-dark skin tone` (🤷🏾‍♂️)" do
  if m = "🤷🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🤷🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♂️"
  else
    fail("`1F937 1F3FE 200D 2642 FE0F` doesn't match `man shrugging: medium-dark skin tone` (🤷🏾‍♂️)")
  end
end

it "`1F937 1F3FE 200D 2642` (minimally-qualified) should match `man shrugging: medium-dark skin tone` (🤷🏾‍♂)" do
  if m = "🤷🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🤷🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♂"
  else
    fail("`1F937 1F3FE 200D 2642` doesn't match `man shrugging: medium-dark skin tone` (🤷🏾‍♂)")
  end
end

it "`1F937 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man shrugging: dark skin tone` (🤷🏿‍♂️)" do
  if m = "🤷🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🤷🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♂️"
  else
    fail("`1F937 1F3FF 200D 2642 FE0F` doesn't match `man shrugging: dark skin tone` (🤷🏿‍♂️)")
  end
end

it "`1F937 1F3FF 200D 2642` (minimally-qualified) should match `man shrugging: dark skin tone` (🤷🏿‍♂)" do
  if m = "🤷🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🤷🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♂"
  else
    fail("`1F937 1F3FF 200D 2642` doesn't match `man shrugging: dark skin tone` (🤷🏿‍♂)")
  end
end

it "`1F937 200D 2640 FE0F` (fully-qualified) should match `woman shrugging` (🤷‍♀️)" do
  if m = "🤷‍♀️".match(Emoji::EMOJI_REGEX)
    "🤷‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♀️"
  else
    fail("`1F937 200D 2640 FE0F` doesn't match `woman shrugging` (🤷‍♀️)")
  end
end

it "`1F937 200D 2640` (minimally-qualified) should match `woman shrugging` (🤷‍♀)" do
  if m = "🤷‍♀".match(Emoji::EMOJI_REGEX)
    "🤷‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷‍♀"
  else
    fail("`1F937 200D 2640` doesn't match `woman shrugging` (🤷‍♀)")
  end
end

it "`1F937 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: light skin tone` (🤷🏻‍♀️)" do
  if m = "🤷🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🤷🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♀️"
  else
    fail("`1F937 1F3FB 200D 2640 FE0F` doesn't match `woman shrugging: light skin tone` (🤷🏻‍♀️)")
  end
end

it "`1F937 1F3FB 200D 2640` (minimally-qualified) should match `woman shrugging: light skin tone` (🤷🏻‍♀)" do
  if m = "🤷🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🤷🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏻‍♀"
  else
    fail("`1F937 1F3FB 200D 2640` doesn't match `woman shrugging: light skin tone` (🤷🏻‍♀)")
  end
end

it "`1F937 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: medium-light skin tone` (🤷🏼‍♀️)" do
  if m = "🤷🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🤷🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♀️"
  else
    fail("`1F937 1F3FC 200D 2640 FE0F` doesn't match `woman shrugging: medium-light skin tone` (🤷🏼‍♀️)")
  end
end

it "`1F937 1F3FC 200D 2640` (minimally-qualified) should match `woman shrugging: medium-light skin tone` (🤷🏼‍♀)" do
  if m = "🤷🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🤷🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏼‍♀"
  else
    fail("`1F937 1F3FC 200D 2640` doesn't match `woman shrugging: medium-light skin tone` (🤷🏼‍♀)")
  end
end

it "`1F937 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: medium skin tone` (🤷🏽‍♀️)" do
  if m = "🤷🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🤷🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♀️"
  else
    fail("`1F937 1F3FD 200D 2640 FE0F` doesn't match `woman shrugging: medium skin tone` (🤷🏽‍♀️)")
  end
end

it "`1F937 1F3FD 200D 2640` (minimally-qualified) should match `woman shrugging: medium skin tone` (🤷🏽‍♀)" do
  if m = "🤷🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🤷🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏽‍♀"
  else
    fail("`1F937 1F3FD 200D 2640` doesn't match `woman shrugging: medium skin tone` (🤷🏽‍♀)")
  end
end

it "`1F937 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: medium-dark skin tone` (🤷🏾‍♀️)" do
  if m = "🤷🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🤷🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♀️"
  else
    fail("`1F937 1F3FE 200D 2640 FE0F` doesn't match `woman shrugging: medium-dark skin tone` (🤷🏾‍♀️)")
  end
end

it "`1F937 1F3FE 200D 2640` (minimally-qualified) should match `woman shrugging: medium-dark skin tone` (🤷🏾‍♀)" do
  if m = "🤷🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🤷🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏾‍♀"
  else
    fail("`1F937 1F3FE 200D 2640` doesn't match `woman shrugging: medium-dark skin tone` (🤷🏾‍♀)")
  end
end

it "`1F937 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman shrugging: dark skin tone` (🤷🏿‍♀️)" do
  if m = "🤷🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🤷🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♀️"
  else
    fail("`1F937 1F3FF 200D 2640 FE0F` doesn't match `woman shrugging: dark skin tone` (🤷🏿‍♀️)")
  end
end

it "`1F937 1F3FF 200D 2640` (minimally-qualified) should match `woman shrugging: dark skin tone` (🤷🏿‍♀)" do
  if m = "🤷🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🤷🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤷🏿‍♀"
  else
    fail("`1F937 1F3FF 200D 2640` doesn't match `woman shrugging: dark skin tone` (🤷🏿‍♀)")
  end
end

it "`1F468 200D 2695 FE0F` (fully-qualified) should match `man health worker` (👨‍⚕️)" do
  if m = "👨‍⚕️".match(Emoji::EMOJI_REGEX)
    "👨‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚕️"
  else
    fail("`1F468 200D 2695 FE0F` doesn't match `man health worker` (👨‍⚕️)")
  end
end

it "`1F468 200D 2695` (minimally-qualified) should match `man health worker` (👨‍⚕)" do
  if m = "👨‍⚕".match(Emoji::EMOJI_REGEX)
    "👨‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚕"
  else
    fail("`1F468 200D 2695` doesn't match `man health worker` (👨‍⚕)")
  end
end

it "`1F468 1F3FB 200D 2695 FE0F` (fully-qualified) should match `man health worker: light skin tone` (👨🏻‍⚕️)" do
  if m = "👨🏻‍⚕️".match(Emoji::EMOJI_REGEX)
    "👨🏻‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚕️"
  else
    fail("`1F468 1F3FB 200D 2695 FE0F` doesn't match `man health worker: light skin tone` (👨🏻‍⚕️)")
  end
end

it "`1F468 1F3FB 200D 2695` (minimally-qualified) should match `man health worker: light skin tone` (👨🏻‍⚕)" do
  if m = "👨🏻‍⚕".match(Emoji::EMOJI_REGEX)
    "👨🏻‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚕"
  else
    fail("`1F468 1F3FB 200D 2695` doesn't match `man health worker: light skin tone` (👨🏻‍⚕)")
  end
end

it "`1F468 1F3FC 200D 2695 FE0F` (fully-qualified) should match `man health worker: medium-light skin tone` (👨🏼‍⚕️)" do
  if m = "👨🏼‍⚕️".match(Emoji::EMOJI_REGEX)
    "👨🏼‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚕️"
  else
    fail("`1F468 1F3FC 200D 2695 FE0F` doesn't match `man health worker: medium-light skin tone` (👨🏼‍⚕️)")
  end
end

it "`1F468 1F3FC 200D 2695` (minimally-qualified) should match `man health worker: medium-light skin tone` (👨🏼‍⚕)" do
  if m = "👨🏼‍⚕".match(Emoji::EMOJI_REGEX)
    "👨🏼‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚕"
  else
    fail("`1F468 1F3FC 200D 2695` doesn't match `man health worker: medium-light skin tone` (👨🏼‍⚕)")
  end
end

it "`1F468 1F3FD 200D 2695 FE0F` (fully-qualified) should match `man health worker: medium skin tone` (👨🏽‍⚕️)" do
  if m = "👨🏽‍⚕️".match(Emoji::EMOJI_REGEX)
    "👨🏽‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚕️"
  else
    fail("`1F468 1F3FD 200D 2695 FE0F` doesn't match `man health worker: medium skin tone` (👨🏽‍⚕️)")
  end
end

it "`1F468 1F3FD 200D 2695` (minimally-qualified) should match `man health worker: medium skin tone` (👨🏽‍⚕)" do
  if m = "👨🏽‍⚕".match(Emoji::EMOJI_REGEX)
    "👨🏽‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚕"
  else
    fail("`1F468 1F3FD 200D 2695` doesn't match `man health worker: medium skin tone` (👨🏽‍⚕)")
  end
end

it "`1F468 1F3FE 200D 2695 FE0F` (fully-qualified) should match `man health worker: medium-dark skin tone` (👨🏾‍⚕️)" do
  if m = "👨🏾‍⚕️".match(Emoji::EMOJI_REGEX)
    "👨🏾‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚕️"
  else
    fail("`1F468 1F3FE 200D 2695 FE0F` doesn't match `man health worker: medium-dark skin tone` (👨🏾‍⚕️)")
  end
end

it "`1F468 1F3FE 200D 2695` (minimally-qualified) should match `man health worker: medium-dark skin tone` (👨🏾‍⚕)" do
  if m = "👨🏾‍⚕".match(Emoji::EMOJI_REGEX)
    "👨🏾‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚕"
  else
    fail("`1F468 1F3FE 200D 2695` doesn't match `man health worker: medium-dark skin tone` (👨🏾‍⚕)")
  end
end

it "`1F468 1F3FF 200D 2695 FE0F` (fully-qualified) should match `man health worker: dark skin tone` (👨🏿‍⚕️)" do
  if m = "👨🏿‍⚕️".match(Emoji::EMOJI_REGEX)
    "👨🏿‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚕️"
  else
    fail("`1F468 1F3FF 200D 2695 FE0F` doesn't match `man health worker: dark skin tone` (👨🏿‍⚕️)")
  end
end

it "`1F468 1F3FF 200D 2695` (minimally-qualified) should match `man health worker: dark skin tone` (👨🏿‍⚕)" do
  if m = "👨🏿‍⚕".match(Emoji::EMOJI_REGEX)
    "👨🏿‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚕"
  else
    fail("`1F468 1F3FF 200D 2695` doesn't match `man health worker: dark skin tone` (👨🏿‍⚕)")
  end
end

it "`1F469 200D 2695 FE0F` (fully-qualified) should match `woman health worker` (👩‍⚕️)" do
  if m = "👩‍⚕️".match(Emoji::EMOJI_REGEX)
    "👩‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚕️"
  else
    fail("`1F469 200D 2695 FE0F` doesn't match `woman health worker` (👩‍⚕️)")
  end
end

it "`1F469 200D 2695` (minimally-qualified) should match `woman health worker` (👩‍⚕)" do
  if m = "👩‍⚕".match(Emoji::EMOJI_REGEX)
    "👩‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚕"
  else
    fail("`1F469 200D 2695` doesn't match `woman health worker` (👩‍⚕)")
  end
end

it "`1F469 1F3FB 200D 2695 FE0F` (fully-qualified) should match `woman health worker: light skin tone` (👩🏻‍⚕️)" do
  if m = "👩🏻‍⚕️".match(Emoji::EMOJI_REGEX)
    "👩🏻‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚕️"
  else
    fail("`1F469 1F3FB 200D 2695 FE0F` doesn't match `woman health worker: light skin tone` (👩🏻‍⚕️)")
  end
end

it "`1F469 1F3FB 200D 2695` (minimally-qualified) should match `woman health worker: light skin tone` (👩🏻‍⚕)" do
  if m = "👩🏻‍⚕".match(Emoji::EMOJI_REGEX)
    "👩🏻‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚕"
  else
    fail("`1F469 1F3FB 200D 2695` doesn't match `woman health worker: light skin tone` (👩🏻‍⚕)")
  end
end

it "`1F469 1F3FC 200D 2695 FE0F` (fully-qualified) should match `woman health worker: medium-light skin tone` (👩🏼‍⚕️)" do
  if m = "👩🏼‍⚕️".match(Emoji::EMOJI_REGEX)
    "👩🏼‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚕️"
  else
    fail("`1F469 1F3FC 200D 2695 FE0F` doesn't match `woman health worker: medium-light skin tone` (👩🏼‍⚕️)")
  end
end

it "`1F469 1F3FC 200D 2695` (minimally-qualified) should match `woman health worker: medium-light skin tone` (👩🏼‍⚕)" do
  if m = "👩🏼‍⚕".match(Emoji::EMOJI_REGEX)
    "👩🏼‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚕"
  else
    fail("`1F469 1F3FC 200D 2695` doesn't match `woman health worker: medium-light skin tone` (👩🏼‍⚕)")
  end
end

it "`1F469 1F3FD 200D 2695 FE0F` (fully-qualified) should match `woman health worker: medium skin tone` (👩🏽‍⚕️)" do
  if m = "👩🏽‍⚕️".match(Emoji::EMOJI_REGEX)
    "👩🏽‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚕️"
  else
    fail("`1F469 1F3FD 200D 2695 FE0F` doesn't match `woman health worker: medium skin tone` (👩🏽‍⚕️)")
  end
end

it "`1F469 1F3FD 200D 2695` (minimally-qualified) should match `woman health worker: medium skin tone` (👩🏽‍⚕)" do
  if m = "👩🏽‍⚕".match(Emoji::EMOJI_REGEX)
    "👩🏽‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚕"
  else
    fail("`1F469 1F3FD 200D 2695` doesn't match `woman health worker: medium skin tone` (👩🏽‍⚕)")
  end
end

it "`1F469 1F3FE 200D 2695 FE0F` (fully-qualified) should match `woman health worker: medium-dark skin tone` (👩🏾‍⚕️)" do
  if m = "👩🏾‍⚕️".match(Emoji::EMOJI_REGEX)
    "👩🏾‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚕️"
  else
    fail("`1F469 1F3FE 200D 2695 FE0F` doesn't match `woman health worker: medium-dark skin tone` (👩🏾‍⚕️)")
  end
end

it "`1F469 1F3FE 200D 2695` (minimally-qualified) should match `woman health worker: medium-dark skin tone` (👩🏾‍⚕)" do
  if m = "👩🏾‍⚕".match(Emoji::EMOJI_REGEX)
    "👩🏾‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚕"
  else
    fail("`1F469 1F3FE 200D 2695` doesn't match `woman health worker: medium-dark skin tone` (👩🏾‍⚕)")
  end
end

it "`1F469 1F3FF 200D 2695 FE0F` (fully-qualified) should match `woman health worker: dark skin tone` (👩🏿‍⚕️)" do
  if m = "👩🏿‍⚕️".match(Emoji::EMOJI_REGEX)
    "👩🏿‍⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚕️"
  else
    fail("`1F469 1F3FF 200D 2695 FE0F` doesn't match `woman health worker: dark skin tone` (👩🏿‍⚕️)")
  end
end

it "`1F469 1F3FF 200D 2695` (minimally-qualified) should match `woman health worker: dark skin tone` (👩🏿‍⚕)" do
  if m = "👩🏿‍⚕".match(Emoji::EMOJI_REGEX)
    "👩🏿‍⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚕"
  else
    fail("`1F469 1F3FF 200D 2695` doesn't match `woman health worker: dark skin tone` (👩🏿‍⚕)")
  end
end

it "`1F468 200D 1F393` (fully-qualified) should match `man student` (👨‍🎓)" do
  if m = "👨‍🎓".match(Emoji::EMOJI_REGEX)
    "👨‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🎓"
  else
    fail("`1F468 200D 1F393` doesn't match `man student` (👨‍🎓)")
  end
end

it "`1F468 1F3FB 200D 1F393` (fully-qualified) should match `man student: light skin tone` (👨🏻‍🎓)" do
  if m = "👨🏻‍🎓".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🎓"
  else
    fail("`1F468 1F3FB 200D 1F393` doesn't match `man student: light skin tone` (👨🏻‍🎓)")
  end
end

it "`1F468 1F3FC 200D 1F393` (fully-qualified) should match `man student: medium-light skin tone` (👨🏼‍🎓)" do
  if m = "👨🏼‍🎓".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🎓"
  else
    fail("`1F468 1F3FC 200D 1F393` doesn't match `man student: medium-light skin tone` (👨🏼‍🎓)")
  end
end

it "`1F468 1F3FD 200D 1F393` (fully-qualified) should match `man student: medium skin tone` (👨🏽‍🎓)" do
  if m = "👨🏽‍🎓".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🎓"
  else
    fail("`1F468 1F3FD 200D 1F393` doesn't match `man student: medium skin tone` (👨🏽‍🎓)")
  end
end

it "`1F468 1F3FE 200D 1F393` (fully-qualified) should match `man student: medium-dark skin tone` (👨🏾‍🎓)" do
  if m = "👨🏾‍🎓".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🎓"
  else
    fail("`1F468 1F3FE 200D 1F393` doesn't match `man student: medium-dark skin tone` (👨🏾‍🎓)")
  end
end

it "`1F468 1F3FF 200D 1F393` (fully-qualified) should match `man student: dark skin tone` (👨🏿‍🎓)" do
  if m = "👨🏿‍🎓".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🎓"
  else
    fail("`1F468 1F3FF 200D 1F393` doesn't match `man student: dark skin tone` (👨🏿‍🎓)")
  end
end

it "`1F469 200D 1F393` (fully-qualified) should match `woman student` (👩‍🎓)" do
  if m = "👩‍🎓".match(Emoji::EMOJI_REGEX)
    "👩‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🎓"
  else
    fail("`1F469 200D 1F393` doesn't match `woman student` (👩‍🎓)")
  end
end

it "`1F469 1F3FB 200D 1F393` (fully-qualified) should match `woman student: light skin tone` (👩🏻‍🎓)" do
  if m = "👩🏻‍🎓".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🎓"
  else
    fail("`1F469 1F3FB 200D 1F393` doesn't match `woman student: light skin tone` (👩🏻‍🎓)")
  end
end

it "`1F469 1F3FC 200D 1F393` (fully-qualified) should match `woman student: medium-light skin tone` (👩🏼‍🎓)" do
  if m = "👩🏼‍🎓".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🎓"
  else
    fail("`1F469 1F3FC 200D 1F393` doesn't match `woman student: medium-light skin tone` (👩🏼‍🎓)")
  end
end

it "`1F469 1F3FD 200D 1F393` (fully-qualified) should match `woman student: medium skin tone` (👩🏽‍🎓)" do
  if m = "👩🏽‍🎓".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🎓"
  else
    fail("`1F469 1F3FD 200D 1F393` doesn't match `woman student: medium skin tone` (👩🏽‍🎓)")
  end
end

it "`1F469 1F3FE 200D 1F393` (fully-qualified) should match `woman student: medium-dark skin tone` (👩🏾‍🎓)" do
  if m = "👩🏾‍🎓".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🎓"
  else
    fail("`1F469 1F3FE 200D 1F393` doesn't match `woman student: medium-dark skin tone` (👩🏾‍🎓)")
  end
end

it "`1F469 1F3FF 200D 1F393` (fully-qualified) should match `woman student: dark skin tone` (👩🏿‍🎓)" do
  if m = "👩🏿‍🎓".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🎓"
  else
    fail("`1F469 1F3FF 200D 1F393` doesn't match `woman student: dark skin tone` (👩🏿‍🎓)")
  end
end

it "`1F468 200D 1F3EB` (fully-qualified) should match `man teacher` (👨‍🏫)" do
  if m = "👨‍🏫".match(Emoji::EMOJI_REGEX)
    "👨‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🏫"
  else
    fail("`1F468 200D 1F3EB` doesn't match `man teacher` (👨‍🏫)")
  end
end

it "`1F468 1F3FB 200D 1F3EB` (fully-qualified) should match `man teacher: light skin tone` (👨🏻‍🏫)" do
  if m = "👨🏻‍🏫".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🏫"
  else
    fail("`1F468 1F3FB 200D 1F3EB` doesn't match `man teacher: light skin tone` (👨🏻‍🏫)")
  end
end

it "`1F468 1F3FC 200D 1F3EB` (fully-qualified) should match `man teacher: medium-light skin tone` (👨🏼‍🏫)" do
  if m = "👨🏼‍🏫".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🏫"
  else
    fail("`1F468 1F3FC 200D 1F3EB` doesn't match `man teacher: medium-light skin tone` (👨🏼‍🏫)")
  end
end

it "`1F468 1F3FD 200D 1F3EB` (fully-qualified) should match `man teacher: medium skin tone` (👨🏽‍🏫)" do
  if m = "👨🏽‍🏫".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🏫"
  else
    fail("`1F468 1F3FD 200D 1F3EB` doesn't match `man teacher: medium skin tone` (👨🏽‍🏫)")
  end
end

it "`1F468 1F3FE 200D 1F3EB` (fully-qualified) should match `man teacher: medium-dark skin tone` (👨🏾‍🏫)" do
  if m = "👨🏾‍🏫".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🏫"
  else
    fail("`1F468 1F3FE 200D 1F3EB` doesn't match `man teacher: medium-dark skin tone` (👨🏾‍🏫)")
  end
end

it "`1F468 1F3FF 200D 1F3EB` (fully-qualified) should match `man teacher: dark skin tone` (👨🏿‍🏫)" do
  if m = "👨🏿‍🏫".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🏫"
  else
    fail("`1F468 1F3FF 200D 1F3EB` doesn't match `man teacher: dark skin tone` (👨🏿‍🏫)")
  end
end

it "`1F469 200D 1F3EB` (fully-qualified) should match `woman teacher` (👩‍🏫)" do
  if m = "👩‍🏫".match(Emoji::EMOJI_REGEX)
    "👩‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🏫"
  else
    fail("`1F469 200D 1F3EB` doesn't match `woman teacher` (👩‍🏫)")
  end
end

it "`1F469 1F3FB 200D 1F3EB` (fully-qualified) should match `woman teacher: light skin tone` (👩🏻‍🏫)" do
  if m = "👩🏻‍🏫".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🏫"
  else
    fail("`1F469 1F3FB 200D 1F3EB` doesn't match `woman teacher: light skin tone` (👩🏻‍🏫)")
  end
end

it "`1F469 1F3FC 200D 1F3EB` (fully-qualified) should match `woman teacher: medium-light skin tone` (👩🏼‍🏫)" do
  if m = "👩🏼‍🏫".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🏫"
  else
    fail("`1F469 1F3FC 200D 1F3EB` doesn't match `woman teacher: medium-light skin tone` (👩🏼‍🏫)")
  end
end

it "`1F469 1F3FD 200D 1F3EB` (fully-qualified) should match `woman teacher: medium skin tone` (👩🏽‍🏫)" do
  if m = "👩🏽‍🏫".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🏫"
  else
    fail("`1F469 1F3FD 200D 1F3EB` doesn't match `woman teacher: medium skin tone` (👩🏽‍🏫)")
  end
end

it "`1F469 1F3FE 200D 1F3EB` (fully-qualified) should match `woman teacher: medium-dark skin tone` (👩🏾‍🏫)" do
  if m = "👩🏾‍🏫".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🏫"
  else
    fail("`1F469 1F3FE 200D 1F3EB` doesn't match `woman teacher: medium-dark skin tone` (👩🏾‍🏫)")
  end
end

it "`1F469 1F3FF 200D 1F3EB` (fully-qualified) should match `woman teacher: dark skin tone` (👩🏿‍🏫)" do
  if m = "👩🏿‍🏫".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🏫"
  else
    fail("`1F469 1F3FF 200D 1F3EB` doesn't match `woman teacher: dark skin tone` (👩🏿‍🏫)")
  end
end

it "`1F468 200D 2696 FE0F` (fully-qualified) should match `man judge` (👨‍⚖️)" do
  if m = "👨‍⚖️".match(Emoji::EMOJI_REGEX)
    "👨‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚖️"
  else
    fail("`1F468 200D 2696 FE0F` doesn't match `man judge` (👨‍⚖️)")
  end
end

it "`1F468 200D 2696` (minimally-qualified) should match `man judge` (👨‍⚖)" do
  if m = "👨‍⚖".match(Emoji::EMOJI_REGEX)
    "👨‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍⚖"
  else
    fail("`1F468 200D 2696` doesn't match `man judge` (👨‍⚖)")
  end
end

it "`1F468 1F3FB 200D 2696 FE0F` (fully-qualified) should match `man judge: light skin tone` (👨🏻‍⚖️)" do
  if m = "👨🏻‍⚖️".match(Emoji::EMOJI_REGEX)
    "👨🏻‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚖️"
  else
    fail("`1F468 1F3FB 200D 2696 FE0F` doesn't match `man judge: light skin tone` (👨🏻‍⚖️)")
  end
end

it "`1F468 1F3FB 200D 2696` (minimally-qualified) should match `man judge: light skin tone` (👨🏻‍⚖)" do
  if m = "👨🏻‍⚖".match(Emoji::EMOJI_REGEX)
    "👨🏻‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍⚖"
  else
    fail("`1F468 1F3FB 200D 2696` doesn't match `man judge: light skin tone` (👨🏻‍⚖)")
  end
end

it "`1F468 1F3FC 200D 2696 FE0F` (fully-qualified) should match `man judge: medium-light skin tone` (👨🏼‍⚖️)" do
  if m = "👨🏼‍⚖️".match(Emoji::EMOJI_REGEX)
    "👨🏼‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚖️"
  else
    fail("`1F468 1F3FC 200D 2696 FE0F` doesn't match `man judge: medium-light skin tone` (👨🏼‍⚖️)")
  end
end

it "`1F468 1F3FC 200D 2696` (minimally-qualified) should match `man judge: medium-light skin tone` (👨🏼‍⚖)" do
  if m = "👨🏼‍⚖".match(Emoji::EMOJI_REGEX)
    "👨🏼‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍⚖"
  else
    fail("`1F468 1F3FC 200D 2696` doesn't match `man judge: medium-light skin tone` (👨🏼‍⚖)")
  end
end

it "`1F468 1F3FD 200D 2696 FE0F` (fully-qualified) should match `man judge: medium skin tone` (👨🏽‍⚖️)" do
  if m = "👨🏽‍⚖️".match(Emoji::EMOJI_REGEX)
    "👨🏽‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚖️"
  else
    fail("`1F468 1F3FD 200D 2696 FE0F` doesn't match `man judge: medium skin tone` (👨🏽‍⚖️)")
  end
end

it "`1F468 1F3FD 200D 2696` (minimally-qualified) should match `man judge: medium skin tone` (👨🏽‍⚖)" do
  if m = "👨🏽‍⚖".match(Emoji::EMOJI_REGEX)
    "👨🏽‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍⚖"
  else
    fail("`1F468 1F3FD 200D 2696` doesn't match `man judge: medium skin tone` (👨🏽‍⚖)")
  end
end

it "`1F468 1F3FE 200D 2696 FE0F` (fully-qualified) should match `man judge: medium-dark skin tone` (👨🏾‍⚖️)" do
  if m = "👨🏾‍⚖️".match(Emoji::EMOJI_REGEX)
    "👨🏾‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚖️"
  else
    fail("`1F468 1F3FE 200D 2696 FE0F` doesn't match `man judge: medium-dark skin tone` (👨🏾‍⚖️)")
  end
end

it "`1F468 1F3FE 200D 2696` (minimally-qualified) should match `man judge: medium-dark skin tone` (👨🏾‍⚖)" do
  if m = "👨🏾‍⚖".match(Emoji::EMOJI_REGEX)
    "👨🏾‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍⚖"
  else
    fail("`1F468 1F3FE 200D 2696` doesn't match `man judge: medium-dark skin tone` (👨🏾‍⚖)")
  end
end

it "`1F468 1F3FF 200D 2696 FE0F` (fully-qualified) should match `man judge: dark skin tone` (👨🏿‍⚖️)" do
  if m = "👨🏿‍⚖️".match(Emoji::EMOJI_REGEX)
    "👨🏿‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚖️"
  else
    fail("`1F468 1F3FF 200D 2696 FE0F` doesn't match `man judge: dark skin tone` (👨🏿‍⚖️)")
  end
end

it "`1F468 1F3FF 200D 2696` (minimally-qualified) should match `man judge: dark skin tone` (👨🏿‍⚖)" do
  if m = "👨🏿‍⚖".match(Emoji::EMOJI_REGEX)
    "👨🏿‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍⚖"
  else
    fail("`1F468 1F3FF 200D 2696` doesn't match `man judge: dark skin tone` (👨🏿‍⚖)")
  end
end

it "`1F469 200D 2696 FE0F` (fully-qualified) should match `woman judge` (👩‍⚖️)" do
  if m = "👩‍⚖️".match(Emoji::EMOJI_REGEX)
    "👩‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚖️"
  else
    fail("`1F469 200D 2696 FE0F` doesn't match `woman judge` (👩‍⚖️)")
  end
end

it "`1F469 200D 2696` (minimally-qualified) should match `woman judge` (👩‍⚖)" do
  if m = "👩‍⚖".match(Emoji::EMOJI_REGEX)
    "👩‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍⚖"
  else
    fail("`1F469 200D 2696` doesn't match `woman judge` (👩‍⚖)")
  end
end

it "`1F469 1F3FB 200D 2696 FE0F` (fully-qualified) should match `woman judge: light skin tone` (👩🏻‍⚖️)" do
  if m = "👩🏻‍⚖️".match(Emoji::EMOJI_REGEX)
    "👩🏻‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚖️"
  else
    fail("`1F469 1F3FB 200D 2696 FE0F` doesn't match `woman judge: light skin tone` (👩🏻‍⚖️)")
  end
end

it "`1F469 1F3FB 200D 2696` (minimally-qualified) should match `woman judge: light skin tone` (👩🏻‍⚖)" do
  if m = "👩🏻‍⚖".match(Emoji::EMOJI_REGEX)
    "👩🏻‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍⚖"
  else
    fail("`1F469 1F3FB 200D 2696` doesn't match `woman judge: light skin tone` (👩🏻‍⚖)")
  end
end

it "`1F469 1F3FC 200D 2696 FE0F` (fully-qualified) should match `woman judge: medium-light skin tone` (👩🏼‍⚖️)" do
  if m = "👩🏼‍⚖️".match(Emoji::EMOJI_REGEX)
    "👩🏼‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚖️"
  else
    fail("`1F469 1F3FC 200D 2696 FE0F` doesn't match `woman judge: medium-light skin tone` (👩🏼‍⚖️)")
  end
end

it "`1F469 1F3FC 200D 2696` (minimally-qualified) should match `woman judge: medium-light skin tone` (👩🏼‍⚖)" do
  if m = "👩🏼‍⚖".match(Emoji::EMOJI_REGEX)
    "👩🏼‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍⚖"
  else
    fail("`1F469 1F3FC 200D 2696` doesn't match `woman judge: medium-light skin tone` (👩🏼‍⚖)")
  end
end

it "`1F469 1F3FD 200D 2696 FE0F` (fully-qualified) should match `woman judge: medium skin tone` (👩🏽‍⚖️)" do
  if m = "👩🏽‍⚖️".match(Emoji::EMOJI_REGEX)
    "👩🏽‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚖️"
  else
    fail("`1F469 1F3FD 200D 2696 FE0F` doesn't match `woman judge: medium skin tone` (👩🏽‍⚖️)")
  end
end

it "`1F469 1F3FD 200D 2696` (minimally-qualified) should match `woman judge: medium skin tone` (👩🏽‍⚖)" do
  if m = "👩🏽‍⚖".match(Emoji::EMOJI_REGEX)
    "👩🏽‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍⚖"
  else
    fail("`1F469 1F3FD 200D 2696` doesn't match `woman judge: medium skin tone` (👩🏽‍⚖)")
  end
end

it "`1F469 1F3FE 200D 2696 FE0F` (fully-qualified) should match `woman judge: medium-dark skin tone` (👩🏾‍⚖️)" do
  if m = "👩🏾‍⚖️".match(Emoji::EMOJI_REGEX)
    "👩🏾‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚖️"
  else
    fail("`1F469 1F3FE 200D 2696 FE0F` doesn't match `woman judge: medium-dark skin tone` (👩🏾‍⚖️)")
  end
end

it "`1F469 1F3FE 200D 2696` (minimally-qualified) should match `woman judge: medium-dark skin tone` (👩🏾‍⚖)" do
  if m = "👩🏾‍⚖".match(Emoji::EMOJI_REGEX)
    "👩🏾‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍⚖"
  else
    fail("`1F469 1F3FE 200D 2696` doesn't match `woman judge: medium-dark skin tone` (👩🏾‍⚖)")
  end
end

it "`1F469 1F3FF 200D 2696 FE0F` (fully-qualified) should match `woman judge: dark skin tone` (👩🏿‍⚖️)" do
  if m = "👩🏿‍⚖️".match(Emoji::EMOJI_REGEX)
    "👩🏿‍⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚖️"
  else
    fail("`1F469 1F3FF 200D 2696 FE0F` doesn't match `woman judge: dark skin tone` (👩🏿‍⚖️)")
  end
end

it "`1F469 1F3FF 200D 2696` (minimally-qualified) should match `woman judge: dark skin tone` (👩🏿‍⚖)" do
  if m = "👩🏿‍⚖".match(Emoji::EMOJI_REGEX)
    "👩🏿‍⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍⚖"
  else
    fail("`1F469 1F3FF 200D 2696` doesn't match `woman judge: dark skin tone` (👩🏿‍⚖)")
  end
end

it "`1F468 200D 1F33E` (fully-qualified) should match `man farmer` (👨‍🌾)" do
  if m = "👨‍🌾".match(Emoji::EMOJI_REGEX)
    "👨‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🌾"
  else
    fail("`1F468 200D 1F33E` doesn't match `man farmer` (👨‍🌾)")
  end
end

it "`1F468 1F3FB 200D 1F33E` (fully-qualified) should match `man farmer: light skin tone` (👨🏻‍🌾)" do
  if m = "👨🏻‍🌾".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🌾"
  else
    fail("`1F468 1F3FB 200D 1F33E` doesn't match `man farmer: light skin tone` (👨🏻‍🌾)")
  end
end

it "`1F468 1F3FC 200D 1F33E` (fully-qualified) should match `man farmer: medium-light skin tone` (👨🏼‍🌾)" do
  if m = "👨🏼‍🌾".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🌾"
  else
    fail("`1F468 1F3FC 200D 1F33E` doesn't match `man farmer: medium-light skin tone` (👨🏼‍🌾)")
  end
end

it "`1F468 1F3FD 200D 1F33E` (fully-qualified) should match `man farmer: medium skin tone` (👨🏽‍🌾)" do
  if m = "👨🏽‍🌾".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🌾"
  else
    fail("`1F468 1F3FD 200D 1F33E` doesn't match `man farmer: medium skin tone` (👨🏽‍🌾)")
  end
end

it "`1F468 1F3FE 200D 1F33E` (fully-qualified) should match `man farmer: medium-dark skin tone` (👨🏾‍🌾)" do
  if m = "👨🏾‍🌾".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🌾"
  else
    fail("`1F468 1F3FE 200D 1F33E` doesn't match `man farmer: medium-dark skin tone` (👨🏾‍🌾)")
  end
end

it "`1F468 1F3FF 200D 1F33E` (fully-qualified) should match `man farmer: dark skin tone` (👨🏿‍🌾)" do
  if m = "👨🏿‍🌾".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🌾"
  else
    fail("`1F468 1F3FF 200D 1F33E` doesn't match `man farmer: dark skin tone` (👨🏿‍🌾)")
  end
end

it "`1F469 200D 1F33E` (fully-qualified) should match `woman farmer` (👩‍🌾)" do
  if m = "👩‍🌾".match(Emoji::EMOJI_REGEX)
    "👩‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🌾"
  else
    fail("`1F469 200D 1F33E` doesn't match `woman farmer` (👩‍🌾)")
  end
end

it "`1F469 1F3FB 200D 1F33E` (fully-qualified) should match `woman farmer: light skin tone` (👩🏻‍🌾)" do
  if m = "👩🏻‍🌾".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🌾"
  else
    fail("`1F469 1F3FB 200D 1F33E` doesn't match `woman farmer: light skin tone` (👩🏻‍🌾)")
  end
end

it "`1F469 1F3FC 200D 1F33E` (fully-qualified) should match `woman farmer: medium-light skin tone` (👩🏼‍🌾)" do
  if m = "👩🏼‍🌾".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🌾"
  else
    fail("`1F469 1F3FC 200D 1F33E` doesn't match `woman farmer: medium-light skin tone` (👩🏼‍🌾)")
  end
end

it "`1F469 1F3FD 200D 1F33E` (fully-qualified) should match `woman farmer: medium skin tone` (👩🏽‍🌾)" do
  if m = "👩🏽‍🌾".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🌾"
  else
    fail("`1F469 1F3FD 200D 1F33E` doesn't match `woman farmer: medium skin tone` (👩🏽‍🌾)")
  end
end

it "`1F469 1F3FE 200D 1F33E` (fully-qualified) should match `woman farmer: medium-dark skin tone` (👩🏾‍🌾)" do
  if m = "👩🏾‍🌾".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🌾"
  else
    fail("`1F469 1F3FE 200D 1F33E` doesn't match `woman farmer: medium-dark skin tone` (👩🏾‍🌾)")
  end
end

it "`1F469 1F3FF 200D 1F33E` (fully-qualified) should match `woman farmer: dark skin tone` (👩🏿‍🌾)" do
  if m = "👩🏿‍🌾".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🌾"
  else
    fail("`1F469 1F3FF 200D 1F33E` doesn't match `woman farmer: dark skin tone` (👩🏿‍🌾)")
  end
end

it "`1F468 200D 1F373` (fully-qualified) should match `man cook` (👨‍🍳)" do
  if m = "👨‍🍳".match(Emoji::EMOJI_REGEX)
    "👨‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🍳"
  else
    fail("`1F468 200D 1F373` doesn't match `man cook` (👨‍🍳)")
  end
end

it "`1F468 1F3FB 200D 1F373` (fully-qualified) should match `man cook: light skin tone` (👨🏻‍🍳)" do
  if m = "👨🏻‍🍳".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🍳"
  else
    fail("`1F468 1F3FB 200D 1F373` doesn't match `man cook: light skin tone` (👨🏻‍🍳)")
  end
end

it "`1F468 1F3FC 200D 1F373` (fully-qualified) should match `man cook: medium-light skin tone` (👨🏼‍🍳)" do
  if m = "👨🏼‍🍳".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🍳"
  else
    fail("`1F468 1F3FC 200D 1F373` doesn't match `man cook: medium-light skin tone` (👨🏼‍🍳)")
  end
end

it "`1F468 1F3FD 200D 1F373` (fully-qualified) should match `man cook: medium skin tone` (👨🏽‍🍳)" do
  if m = "👨🏽‍🍳".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🍳"
  else
    fail("`1F468 1F3FD 200D 1F373` doesn't match `man cook: medium skin tone` (👨🏽‍🍳)")
  end
end

it "`1F468 1F3FE 200D 1F373` (fully-qualified) should match `man cook: medium-dark skin tone` (👨🏾‍🍳)" do
  if m = "👨🏾‍🍳".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🍳"
  else
    fail("`1F468 1F3FE 200D 1F373` doesn't match `man cook: medium-dark skin tone` (👨🏾‍🍳)")
  end
end

it "`1F468 1F3FF 200D 1F373` (fully-qualified) should match `man cook: dark skin tone` (👨🏿‍🍳)" do
  if m = "👨🏿‍🍳".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🍳"
  else
    fail("`1F468 1F3FF 200D 1F373` doesn't match `man cook: dark skin tone` (👨🏿‍🍳)")
  end
end

it "`1F469 200D 1F373` (fully-qualified) should match `woman cook` (👩‍🍳)" do
  if m = "👩‍🍳".match(Emoji::EMOJI_REGEX)
    "👩‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🍳"
  else
    fail("`1F469 200D 1F373` doesn't match `woman cook` (👩‍🍳)")
  end
end

it "`1F469 1F3FB 200D 1F373` (fully-qualified) should match `woman cook: light skin tone` (👩🏻‍🍳)" do
  if m = "👩🏻‍🍳".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🍳"
  else
    fail("`1F469 1F3FB 200D 1F373` doesn't match `woman cook: light skin tone` (👩🏻‍🍳)")
  end
end

it "`1F469 1F3FC 200D 1F373` (fully-qualified) should match `woman cook: medium-light skin tone` (👩🏼‍🍳)" do
  if m = "👩🏼‍🍳".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🍳"
  else
    fail("`1F469 1F3FC 200D 1F373` doesn't match `woman cook: medium-light skin tone` (👩🏼‍🍳)")
  end
end

it "`1F469 1F3FD 200D 1F373` (fully-qualified) should match `woman cook: medium skin tone` (👩🏽‍🍳)" do
  if m = "👩🏽‍🍳".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🍳"
  else
    fail("`1F469 1F3FD 200D 1F373` doesn't match `woman cook: medium skin tone` (👩🏽‍🍳)")
  end
end

it "`1F469 1F3FE 200D 1F373` (fully-qualified) should match `woman cook: medium-dark skin tone` (👩🏾‍🍳)" do
  if m = "👩🏾‍🍳".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🍳"
  else
    fail("`1F469 1F3FE 200D 1F373` doesn't match `woman cook: medium-dark skin tone` (👩🏾‍🍳)")
  end
end

it "`1F469 1F3FF 200D 1F373` (fully-qualified) should match `woman cook: dark skin tone` (👩🏿‍🍳)" do
  if m = "👩🏿‍🍳".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🍳"
  else
    fail("`1F469 1F3FF 200D 1F373` doesn't match `woman cook: dark skin tone` (👩🏿‍🍳)")
  end
end

it "`1F468 200D 1F527` (fully-qualified) should match `man mechanic` (👨‍🔧)" do
  if m = "👨‍🔧".match(Emoji::EMOJI_REGEX)
    "👨‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🔧"
  else
    fail("`1F468 200D 1F527` doesn't match `man mechanic` (👨‍🔧)")
  end
end

it "`1F468 1F3FB 200D 1F527` (fully-qualified) should match `man mechanic: light skin tone` (👨🏻‍🔧)" do
  if m = "👨🏻‍🔧".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🔧"
  else
    fail("`1F468 1F3FB 200D 1F527` doesn't match `man mechanic: light skin tone` (👨🏻‍🔧)")
  end
end

it "`1F468 1F3FC 200D 1F527` (fully-qualified) should match `man mechanic: medium-light skin tone` (👨🏼‍🔧)" do
  if m = "👨🏼‍🔧".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🔧"
  else
    fail("`1F468 1F3FC 200D 1F527` doesn't match `man mechanic: medium-light skin tone` (👨🏼‍🔧)")
  end
end

it "`1F468 1F3FD 200D 1F527` (fully-qualified) should match `man mechanic: medium skin tone` (👨🏽‍🔧)" do
  if m = "👨🏽‍🔧".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🔧"
  else
    fail("`1F468 1F3FD 200D 1F527` doesn't match `man mechanic: medium skin tone` (👨🏽‍🔧)")
  end
end

it "`1F468 1F3FE 200D 1F527` (fully-qualified) should match `man mechanic: medium-dark skin tone` (👨🏾‍🔧)" do
  if m = "👨🏾‍🔧".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🔧"
  else
    fail("`1F468 1F3FE 200D 1F527` doesn't match `man mechanic: medium-dark skin tone` (👨🏾‍🔧)")
  end
end

it "`1F468 1F3FF 200D 1F527` (fully-qualified) should match `man mechanic: dark skin tone` (👨🏿‍🔧)" do
  if m = "👨🏿‍🔧".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🔧"
  else
    fail("`1F468 1F3FF 200D 1F527` doesn't match `man mechanic: dark skin tone` (👨🏿‍🔧)")
  end
end

it "`1F469 200D 1F527` (fully-qualified) should match `woman mechanic` (👩‍🔧)" do
  if m = "👩‍🔧".match(Emoji::EMOJI_REGEX)
    "👩‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🔧"
  else
    fail("`1F469 200D 1F527` doesn't match `woman mechanic` (👩‍🔧)")
  end
end

it "`1F469 1F3FB 200D 1F527` (fully-qualified) should match `woman mechanic: light skin tone` (👩🏻‍🔧)" do
  if m = "👩🏻‍🔧".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🔧"
  else
    fail("`1F469 1F3FB 200D 1F527` doesn't match `woman mechanic: light skin tone` (👩🏻‍🔧)")
  end
end

it "`1F469 1F3FC 200D 1F527` (fully-qualified) should match `woman mechanic: medium-light skin tone` (👩🏼‍🔧)" do
  if m = "👩🏼‍🔧".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🔧"
  else
    fail("`1F469 1F3FC 200D 1F527` doesn't match `woman mechanic: medium-light skin tone` (👩🏼‍🔧)")
  end
end

it "`1F469 1F3FD 200D 1F527` (fully-qualified) should match `woman mechanic: medium skin tone` (👩🏽‍🔧)" do
  if m = "👩🏽‍🔧".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🔧"
  else
    fail("`1F469 1F3FD 200D 1F527` doesn't match `woman mechanic: medium skin tone` (👩🏽‍🔧)")
  end
end

it "`1F469 1F3FE 200D 1F527` (fully-qualified) should match `woman mechanic: medium-dark skin tone` (👩🏾‍🔧)" do
  if m = "👩🏾‍🔧".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🔧"
  else
    fail("`1F469 1F3FE 200D 1F527` doesn't match `woman mechanic: medium-dark skin tone` (👩🏾‍🔧)")
  end
end

it "`1F469 1F3FF 200D 1F527` (fully-qualified) should match `woman mechanic: dark skin tone` (👩🏿‍🔧)" do
  if m = "👩🏿‍🔧".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🔧"
  else
    fail("`1F469 1F3FF 200D 1F527` doesn't match `woman mechanic: dark skin tone` (👩🏿‍🔧)")
  end
end

it "`1F468 200D 1F3ED` (fully-qualified) should match `man factory worker` (👨‍🏭)" do
  if m = "👨‍🏭".match(Emoji::EMOJI_REGEX)
    "👨‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🏭"
  else
    fail("`1F468 200D 1F3ED` doesn't match `man factory worker` (👨‍🏭)")
  end
end

it "`1F468 1F3FB 200D 1F3ED` (fully-qualified) should match `man factory worker: light skin tone` (👨🏻‍🏭)" do
  if m = "👨🏻‍🏭".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🏭"
  else
    fail("`1F468 1F3FB 200D 1F3ED` doesn't match `man factory worker: light skin tone` (👨🏻‍🏭)")
  end
end

it "`1F468 1F3FC 200D 1F3ED` (fully-qualified) should match `man factory worker: medium-light skin tone` (👨🏼‍🏭)" do
  if m = "👨🏼‍🏭".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🏭"
  else
    fail("`1F468 1F3FC 200D 1F3ED` doesn't match `man factory worker: medium-light skin tone` (👨🏼‍🏭)")
  end
end

it "`1F468 1F3FD 200D 1F3ED` (fully-qualified) should match `man factory worker: medium skin tone` (👨🏽‍🏭)" do
  if m = "👨🏽‍🏭".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🏭"
  else
    fail("`1F468 1F3FD 200D 1F3ED` doesn't match `man factory worker: medium skin tone` (👨🏽‍🏭)")
  end
end

it "`1F468 1F3FE 200D 1F3ED` (fully-qualified) should match `man factory worker: medium-dark skin tone` (👨🏾‍🏭)" do
  if m = "👨🏾‍🏭".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🏭"
  else
    fail("`1F468 1F3FE 200D 1F3ED` doesn't match `man factory worker: medium-dark skin tone` (👨🏾‍🏭)")
  end
end

it "`1F468 1F3FF 200D 1F3ED` (fully-qualified) should match `man factory worker: dark skin tone` (👨🏿‍🏭)" do
  if m = "👨🏿‍🏭".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🏭"
  else
    fail("`1F468 1F3FF 200D 1F3ED` doesn't match `man factory worker: dark skin tone` (👨🏿‍🏭)")
  end
end

it "`1F469 200D 1F3ED` (fully-qualified) should match `woman factory worker` (👩‍🏭)" do
  if m = "👩‍🏭".match(Emoji::EMOJI_REGEX)
    "👩‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🏭"
  else
    fail("`1F469 200D 1F3ED` doesn't match `woman factory worker` (👩‍🏭)")
  end
end

it "`1F469 1F3FB 200D 1F3ED` (fully-qualified) should match `woman factory worker: light skin tone` (👩🏻‍🏭)" do
  if m = "👩🏻‍🏭".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🏭"
  else
    fail("`1F469 1F3FB 200D 1F3ED` doesn't match `woman factory worker: light skin tone` (👩🏻‍🏭)")
  end
end

it "`1F469 1F3FC 200D 1F3ED` (fully-qualified) should match `woman factory worker: medium-light skin tone` (👩🏼‍🏭)" do
  if m = "👩🏼‍🏭".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🏭"
  else
    fail("`1F469 1F3FC 200D 1F3ED` doesn't match `woman factory worker: medium-light skin tone` (👩🏼‍🏭)")
  end
end

it "`1F469 1F3FD 200D 1F3ED` (fully-qualified) should match `woman factory worker: medium skin tone` (👩🏽‍🏭)" do
  if m = "👩🏽‍🏭".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🏭"
  else
    fail("`1F469 1F3FD 200D 1F3ED` doesn't match `woman factory worker: medium skin tone` (👩🏽‍🏭)")
  end
end

it "`1F469 1F3FE 200D 1F3ED` (fully-qualified) should match `woman factory worker: medium-dark skin tone` (👩🏾‍🏭)" do
  if m = "👩🏾‍🏭".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🏭"
  else
    fail("`1F469 1F3FE 200D 1F3ED` doesn't match `woman factory worker: medium-dark skin tone` (👩🏾‍🏭)")
  end
end

it "`1F469 1F3FF 200D 1F3ED` (fully-qualified) should match `woman factory worker: dark skin tone` (👩🏿‍🏭)" do
  if m = "👩🏿‍🏭".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🏭"
  else
    fail("`1F469 1F3FF 200D 1F3ED` doesn't match `woman factory worker: dark skin tone` (👩🏿‍🏭)")
  end
end

it "`1F468 200D 1F4BC` (fully-qualified) should match `man office worker` (👨‍💼)" do
  if m = "👨‍💼".match(Emoji::EMOJI_REGEX)
    "👨‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍💼"
  else
    fail("`1F468 200D 1F4BC` doesn't match `man office worker` (👨‍💼)")
  end
end

it "`1F468 1F3FB 200D 1F4BC` (fully-qualified) should match `man office worker: light skin tone` (👨🏻‍💼)" do
  if m = "👨🏻‍💼".match(Emoji::EMOJI_REGEX)
    "👨🏻‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍💼"
  else
    fail("`1F468 1F3FB 200D 1F4BC` doesn't match `man office worker: light skin tone` (👨🏻‍💼)")
  end
end

it "`1F468 1F3FC 200D 1F4BC` (fully-qualified) should match `man office worker: medium-light skin tone` (👨🏼‍💼)" do
  if m = "👨🏼‍💼".match(Emoji::EMOJI_REGEX)
    "👨🏼‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍💼"
  else
    fail("`1F468 1F3FC 200D 1F4BC` doesn't match `man office worker: medium-light skin tone` (👨🏼‍💼)")
  end
end

it "`1F468 1F3FD 200D 1F4BC` (fully-qualified) should match `man office worker: medium skin tone` (👨🏽‍💼)" do
  if m = "👨🏽‍💼".match(Emoji::EMOJI_REGEX)
    "👨🏽‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍💼"
  else
    fail("`1F468 1F3FD 200D 1F4BC` doesn't match `man office worker: medium skin tone` (👨🏽‍💼)")
  end
end

it "`1F468 1F3FE 200D 1F4BC` (fully-qualified) should match `man office worker: medium-dark skin tone` (👨🏾‍💼)" do
  if m = "👨🏾‍💼".match(Emoji::EMOJI_REGEX)
    "👨🏾‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍💼"
  else
    fail("`1F468 1F3FE 200D 1F4BC` doesn't match `man office worker: medium-dark skin tone` (👨🏾‍💼)")
  end
end

it "`1F468 1F3FF 200D 1F4BC` (fully-qualified) should match `man office worker: dark skin tone` (👨🏿‍💼)" do
  if m = "👨🏿‍💼".match(Emoji::EMOJI_REGEX)
    "👨🏿‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍💼"
  else
    fail("`1F468 1F3FF 200D 1F4BC` doesn't match `man office worker: dark skin tone` (👨🏿‍💼)")
  end
end

it "`1F469 200D 1F4BC` (fully-qualified) should match `woman office worker` (👩‍💼)" do
  if m = "👩‍💼".match(Emoji::EMOJI_REGEX)
    "👩‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍💼"
  else
    fail("`1F469 200D 1F4BC` doesn't match `woman office worker` (👩‍💼)")
  end
end

it "`1F469 1F3FB 200D 1F4BC` (fully-qualified) should match `woman office worker: light skin tone` (👩🏻‍💼)" do
  if m = "👩🏻‍💼".match(Emoji::EMOJI_REGEX)
    "👩🏻‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍💼"
  else
    fail("`1F469 1F3FB 200D 1F4BC` doesn't match `woman office worker: light skin tone` (👩🏻‍💼)")
  end
end

it "`1F469 1F3FC 200D 1F4BC` (fully-qualified) should match `woman office worker: medium-light skin tone` (👩🏼‍💼)" do
  if m = "👩🏼‍💼".match(Emoji::EMOJI_REGEX)
    "👩🏼‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍💼"
  else
    fail("`1F469 1F3FC 200D 1F4BC` doesn't match `woman office worker: medium-light skin tone` (👩🏼‍💼)")
  end
end

it "`1F469 1F3FD 200D 1F4BC` (fully-qualified) should match `woman office worker: medium skin tone` (👩🏽‍💼)" do
  if m = "👩🏽‍💼".match(Emoji::EMOJI_REGEX)
    "👩🏽‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍💼"
  else
    fail("`1F469 1F3FD 200D 1F4BC` doesn't match `woman office worker: medium skin tone` (👩🏽‍💼)")
  end
end

it "`1F469 1F3FE 200D 1F4BC` (fully-qualified) should match `woman office worker: medium-dark skin tone` (👩🏾‍💼)" do
  if m = "👩🏾‍💼".match(Emoji::EMOJI_REGEX)
    "👩🏾‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍💼"
  else
    fail("`1F469 1F3FE 200D 1F4BC` doesn't match `woman office worker: medium-dark skin tone` (👩🏾‍💼)")
  end
end

it "`1F469 1F3FF 200D 1F4BC` (fully-qualified) should match `woman office worker: dark skin tone` (👩🏿‍💼)" do
  if m = "👩🏿‍💼".match(Emoji::EMOJI_REGEX)
    "👩🏿‍💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍💼"
  else
    fail("`1F469 1F3FF 200D 1F4BC` doesn't match `woman office worker: dark skin tone` (👩🏿‍💼)")
  end
end

it "`1F468 200D 1F52C` (fully-qualified) should match `man scientist` (👨‍🔬)" do
  if m = "👨‍🔬".match(Emoji::EMOJI_REGEX)
    "👨‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🔬"
  else
    fail("`1F468 200D 1F52C` doesn't match `man scientist` (👨‍🔬)")
  end
end

it "`1F468 1F3FB 200D 1F52C` (fully-qualified) should match `man scientist: light skin tone` (👨🏻‍🔬)" do
  if m = "👨🏻‍🔬".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🔬"
  else
    fail("`1F468 1F3FB 200D 1F52C` doesn't match `man scientist: light skin tone` (👨🏻‍🔬)")
  end
end

it "`1F468 1F3FC 200D 1F52C` (fully-qualified) should match `man scientist: medium-light skin tone` (👨🏼‍🔬)" do
  if m = "👨🏼‍🔬".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🔬"
  else
    fail("`1F468 1F3FC 200D 1F52C` doesn't match `man scientist: medium-light skin tone` (👨🏼‍🔬)")
  end
end

it "`1F468 1F3FD 200D 1F52C` (fully-qualified) should match `man scientist: medium skin tone` (👨🏽‍🔬)" do
  if m = "👨🏽‍🔬".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🔬"
  else
    fail("`1F468 1F3FD 200D 1F52C` doesn't match `man scientist: medium skin tone` (👨🏽‍🔬)")
  end
end

it "`1F468 1F3FE 200D 1F52C` (fully-qualified) should match `man scientist: medium-dark skin tone` (👨🏾‍🔬)" do
  if m = "👨🏾‍🔬".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🔬"
  else
    fail("`1F468 1F3FE 200D 1F52C` doesn't match `man scientist: medium-dark skin tone` (👨🏾‍🔬)")
  end
end

it "`1F468 1F3FF 200D 1F52C` (fully-qualified) should match `man scientist: dark skin tone` (👨🏿‍🔬)" do
  if m = "👨🏿‍🔬".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🔬"
  else
    fail("`1F468 1F3FF 200D 1F52C` doesn't match `man scientist: dark skin tone` (👨🏿‍🔬)")
  end
end

it "`1F469 200D 1F52C` (fully-qualified) should match `woman scientist` (👩‍🔬)" do
  if m = "👩‍🔬".match(Emoji::EMOJI_REGEX)
    "👩‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🔬"
  else
    fail("`1F469 200D 1F52C` doesn't match `woman scientist` (👩‍🔬)")
  end
end

it "`1F469 1F3FB 200D 1F52C` (fully-qualified) should match `woman scientist: light skin tone` (👩🏻‍🔬)" do
  if m = "👩🏻‍🔬".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🔬"
  else
    fail("`1F469 1F3FB 200D 1F52C` doesn't match `woman scientist: light skin tone` (👩🏻‍🔬)")
  end
end

it "`1F469 1F3FC 200D 1F52C` (fully-qualified) should match `woman scientist: medium-light skin tone` (👩🏼‍🔬)" do
  if m = "👩🏼‍🔬".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🔬"
  else
    fail("`1F469 1F3FC 200D 1F52C` doesn't match `woman scientist: medium-light skin tone` (👩🏼‍🔬)")
  end
end

it "`1F469 1F3FD 200D 1F52C` (fully-qualified) should match `woman scientist: medium skin tone` (👩🏽‍🔬)" do
  if m = "👩🏽‍🔬".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🔬"
  else
    fail("`1F469 1F3FD 200D 1F52C` doesn't match `woman scientist: medium skin tone` (👩🏽‍🔬)")
  end
end

it "`1F469 1F3FE 200D 1F52C` (fully-qualified) should match `woman scientist: medium-dark skin tone` (👩🏾‍🔬)" do
  if m = "👩🏾‍🔬".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🔬"
  else
    fail("`1F469 1F3FE 200D 1F52C` doesn't match `woman scientist: medium-dark skin tone` (👩🏾‍🔬)")
  end
end

it "`1F469 1F3FF 200D 1F52C` (fully-qualified) should match `woman scientist: dark skin tone` (👩🏿‍🔬)" do
  if m = "👩🏿‍🔬".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🔬"
  else
    fail("`1F469 1F3FF 200D 1F52C` doesn't match `woman scientist: dark skin tone` (👩🏿‍🔬)")
  end
end

it "`1F468 200D 1F4BB` (fully-qualified) should match `man technologist` (👨‍💻)" do
  if m = "👨‍💻".match(Emoji::EMOJI_REGEX)
    "👨‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍💻"
  else
    fail("`1F468 200D 1F4BB` doesn't match `man technologist` (👨‍💻)")
  end
end

it "`1F468 1F3FB 200D 1F4BB` (fully-qualified) should match `man technologist: light skin tone` (👨🏻‍💻)" do
  if m = "👨🏻‍💻".match(Emoji::EMOJI_REGEX)
    "👨🏻‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍💻"
  else
    fail("`1F468 1F3FB 200D 1F4BB` doesn't match `man technologist: light skin tone` (👨🏻‍💻)")
  end
end

it "`1F468 1F3FC 200D 1F4BB` (fully-qualified) should match `man technologist: medium-light skin tone` (👨🏼‍💻)" do
  if m = "👨🏼‍💻".match(Emoji::EMOJI_REGEX)
    "👨🏼‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍💻"
  else
    fail("`1F468 1F3FC 200D 1F4BB` doesn't match `man technologist: medium-light skin tone` (👨🏼‍💻)")
  end
end

it "`1F468 1F3FD 200D 1F4BB` (fully-qualified) should match `man technologist: medium skin tone` (👨🏽‍💻)" do
  if m = "👨🏽‍💻".match(Emoji::EMOJI_REGEX)
    "👨🏽‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍💻"
  else
    fail("`1F468 1F3FD 200D 1F4BB` doesn't match `man technologist: medium skin tone` (👨🏽‍💻)")
  end
end

it "`1F468 1F3FE 200D 1F4BB` (fully-qualified) should match `man technologist: medium-dark skin tone` (👨🏾‍💻)" do
  if m = "👨🏾‍💻".match(Emoji::EMOJI_REGEX)
    "👨🏾‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍💻"
  else
    fail("`1F468 1F3FE 200D 1F4BB` doesn't match `man technologist: medium-dark skin tone` (👨🏾‍💻)")
  end
end

it "`1F468 1F3FF 200D 1F4BB` (fully-qualified) should match `man technologist: dark skin tone` (👨🏿‍💻)" do
  if m = "👨🏿‍💻".match(Emoji::EMOJI_REGEX)
    "👨🏿‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍💻"
  else
    fail("`1F468 1F3FF 200D 1F4BB` doesn't match `man technologist: dark skin tone` (👨🏿‍💻)")
  end
end

it "`1F469 200D 1F4BB` (fully-qualified) should match `woman technologist` (👩‍💻)" do
  if m = "👩‍💻".match(Emoji::EMOJI_REGEX)
    "👩‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍💻"
  else
    fail("`1F469 200D 1F4BB` doesn't match `woman technologist` (👩‍💻)")
  end
end

it "`1F469 1F3FB 200D 1F4BB` (fully-qualified) should match `woman technologist: light skin tone` (👩🏻‍💻)" do
  if m = "👩🏻‍💻".match(Emoji::EMOJI_REGEX)
    "👩🏻‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍💻"
  else
    fail("`1F469 1F3FB 200D 1F4BB` doesn't match `woman technologist: light skin tone` (👩🏻‍💻)")
  end
end

it "`1F469 1F3FC 200D 1F4BB` (fully-qualified) should match `woman technologist: medium-light skin tone` (👩🏼‍💻)" do
  if m = "👩🏼‍💻".match(Emoji::EMOJI_REGEX)
    "👩🏼‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍💻"
  else
    fail("`1F469 1F3FC 200D 1F4BB` doesn't match `woman technologist: medium-light skin tone` (👩🏼‍💻)")
  end
end

it "`1F469 1F3FD 200D 1F4BB` (fully-qualified) should match `woman technologist: medium skin tone` (👩🏽‍💻)" do
  if m = "👩🏽‍💻".match(Emoji::EMOJI_REGEX)
    "👩🏽‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍💻"
  else
    fail("`1F469 1F3FD 200D 1F4BB` doesn't match `woman technologist: medium skin tone` (👩🏽‍💻)")
  end
end

it "`1F469 1F3FE 200D 1F4BB` (fully-qualified) should match `woman technologist: medium-dark skin tone` (👩🏾‍💻)" do
  if m = "👩🏾‍💻".match(Emoji::EMOJI_REGEX)
    "👩🏾‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍💻"
  else
    fail("`1F469 1F3FE 200D 1F4BB` doesn't match `woman technologist: medium-dark skin tone` (👩🏾‍💻)")
  end
end

it "`1F469 1F3FF 200D 1F4BB` (fully-qualified) should match `woman technologist: dark skin tone` (👩🏿‍💻)" do
  if m = "👩🏿‍💻".match(Emoji::EMOJI_REGEX)
    "👩🏿‍💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍💻"
  else
    fail("`1F469 1F3FF 200D 1F4BB` doesn't match `woman technologist: dark skin tone` (👩🏿‍💻)")
  end
end

it "`1F468 200D 1F3A4` (fully-qualified) should match `man singer` (👨‍🎤)" do
  if m = "👨‍🎤".match(Emoji::EMOJI_REGEX)
    "👨‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🎤"
  else
    fail("`1F468 200D 1F3A4` doesn't match `man singer` (👨‍🎤)")
  end
end

it "`1F468 1F3FB 200D 1F3A4` (fully-qualified) should match `man singer: light skin tone` (👨🏻‍🎤)" do
  if m = "👨🏻‍🎤".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🎤"
  else
    fail("`1F468 1F3FB 200D 1F3A4` doesn't match `man singer: light skin tone` (👨🏻‍🎤)")
  end
end

it "`1F468 1F3FC 200D 1F3A4` (fully-qualified) should match `man singer: medium-light skin tone` (👨🏼‍🎤)" do
  if m = "👨🏼‍🎤".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🎤"
  else
    fail("`1F468 1F3FC 200D 1F3A4` doesn't match `man singer: medium-light skin tone` (👨🏼‍🎤)")
  end
end

it "`1F468 1F3FD 200D 1F3A4` (fully-qualified) should match `man singer: medium skin tone` (👨🏽‍🎤)" do
  if m = "👨🏽‍🎤".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🎤"
  else
    fail("`1F468 1F3FD 200D 1F3A4` doesn't match `man singer: medium skin tone` (👨🏽‍🎤)")
  end
end

it "`1F468 1F3FE 200D 1F3A4` (fully-qualified) should match `man singer: medium-dark skin tone` (👨🏾‍🎤)" do
  if m = "👨🏾‍🎤".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🎤"
  else
    fail("`1F468 1F3FE 200D 1F3A4` doesn't match `man singer: medium-dark skin tone` (👨🏾‍🎤)")
  end
end

it "`1F468 1F3FF 200D 1F3A4` (fully-qualified) should match `man singer: dark skin tone` (👨🏿‍🎤)" do
  if m = "👨🏿‍🎤".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🎤"
  else
    fail("`1F468 1F3FF 200D 1F3A4` doesn't match `man singer: dark skin tone` (👨🏿‍🎤)")
  end
end

it "`1F469 200D 1F3A4` (fully-qualified) should match `woman singer` (👩‍🎤)" do
  if m = "👩‍🎤".match(Emoji::EMOJI_REGEX)
    "👩‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🎤"
  else
    fail("`1F469 200D 1F3A4` doesn't match `woman singer` (👩‍🎤)")
  end
end

it "`1F469 1F3FB 200D 1F3A4` (fully-qualified) should match `woman singer: light skin tone` (👩🏻‍🎤)" do
  if m = "👩🏻‍🎤".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🎤"
  else
    fail("`1F469 1F3FB 200D 1F3A4` doesn't match `woman singer: light skin tone` (👩🏻‍🎤)")
  end
end

it "`1F469 1F3FC 200D 1F3A4` (fully-qualified) should match `woman singer: medium-light skin tone` (👩🏼‍🎤)" do
  if m = "👩🏼‍🎤".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🎤"
  else
    fail("`1F469 1F3FC 200D 1F3A4` doesn't match `woman singer: medium-light skin tone` (👩🏼‍🎤)")
  end
end

it "`1F469 1F3FD 200D 1F3A4` (fully-qualified) should match `woman singer: medium skin tone` (👩🏽‍🎤)" do
  if m = "👩🏽‍🎤".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🎤"
  else
    fail("`1F469 1F3FD 200D 1F3A4` doesn't match `woman singer: medium skin tone` (👩🏽‍🎤)")
  end
end

it "`1F469 1F3FE 200D 1F3A4` (fully-qualified) should match `woman singer: medium-dark skin tone` (👩🏾‍🎤)" do
  if m = "👩🏾‍🎤".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🎤"
  else
    fail("`1F469 1F3FE 200D 1F3A4` doesn't match `woman singer: medium-dark skin tone` (👩🏾‍🎤)")
  end
end

it "`1F469 1F3FF 200D 1F3A4` (fully-qualified) should match `woman singer: dark skin tone` (👩🏿‍🎤)" do
  if m = "👩🏿‍🎤".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🎤"
  else
    fail("`1F469 1F3FF 200D 1F3A4` doesn't match `woman singer: dark skin tone` (👩🏿‍🎤)")
  end
end

it "`1F468 200D 1F3A8` (fully-qualified) should match `man artist` (👨‍🎨)" do
  if m = "👨‍🎨".match(Emoji::EMOJI_REGEX)
    "👨‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🎨"
  else
    fail("`1F468 200D 1F3A8` doesn't match `man artist` (👨‍🎨)")
  end
end

it "`1F468 1F3FB 200D 1F3A8` (fully-qualified) should match `man artist: light skin tone` (👨🏻‍🎨)" do
  if m = "👨🏻‍🎨".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🎨"
  else
    fail("`1F468 1F3FB 200D 1F3A8` doesn't match `man artist: light skin tone` (👨🏻‍🎨)")
  end
end

it "`1F468 1F3FC 200D 1F3A8` (fully-qualified) should match `man artist: medium-light skin tone` (👨🏼‍🎨)" do
  if m = "👨🏼‍🎨".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🎨"
  else
    fail("`1F468 1F3FC 200D 1F3A8` doesn't match `man artist: medium-light skin tone` (👨🏼‍🎨)")
  end
end

it "`1F468 1F3FD 200D 1F3A8` (fully-qualified) should match `man artist: medium skin tone` (👨🏽‍🎨)" do
  if m = "👨🏽‍🎨".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🎨"
  else
    fail("`1F468 1F3FD 200D 1F3A8` doesn't match `man artist: medium skin tone` (👨🏽‍🎨)")
  end
end

it "`1F468 1F3FE 200D 1F3A8` (fully-qualified) should match `man artist: medium-dark skin tone` (👨🏾‍🎨)" do
  if m = "👨🏾‍🎨".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🎨"
  else
    fail("`1F468 1F3FE 200D 1F3A8` doesn't match `man artist: medium-dark skin tone` (👨🏾‍🎨)")
  end
end

it "`1F468 1F3FF 200D 1F3A8` (fully-qualified) should match `man artist: dark skin tone` (👨🏿‍🎨)" do
  if m = "👨🏿‍🎨".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🎨"
  else
    fail("`1F468 1F3FF 200D 1F3A8` doesn't match `man artist: dark skin tone` (👨🏿‍🎨)")
  end
end

it "`1F469 200D 1F3A8` (fully-qualified) should match `woman artist` (👩‍🎨)" do
  if m = "👩‍🎨".match(Emoji::EMOJI_REGEX)
    "👩‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🎨"
  else
    fail("`1F469 200D 1F3A8` doesn't match `woman artist` (👩‍🎨)")
  end
end

it "`1F469 1F3FB 200D 1F3A8` (fully-qualified) should match `woman artist: light skin tone` (👩🏻‍🎨)" do
  if m = "👩🏻‍🎨".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🎨"
  else
    fail("`1F469 1F3FB 200D 1F3A8` doesn't match `woman artist: light skin tone` (👩🏻‍🎨)")
  end
end

it "`1F469 1F3FC 200D 1F3A8` (fully-qualified) should match `woman artist: medium-light skin tone` (👩🏼‍🎨)" do
  if m = "👩🏼‍🎨".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🎨"
  else
    fail("`1F469 1F3FC 200D 1F3A8` doesn't match `woman artist: medium-light skin tone` (👩🏼‍🎨)")
  end
end

it "`1F469 1F3FD 200D 1F3A8` (fully-qualified) should match `woman artist: medium skin tone` (👩🏽‍🎨)" do
  if m = "👩🏽‍🎨".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🎨"
  else
    fail("`1F469 1F3FD 200D 1F3A8` doesn't match `woman artist: medium skin tone` (👩🏽‍🎨)")
  end
end

it "`1F469 1F3FE 200D 1F3A8` (fully-qualified) should match `woman artist: medium-dark skin tone` (👩🏾‍🎨)" do
  if m = "👩🏾‍🎨".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🎨"
  else
    fail("`1F469 1F3FE 200D 1F3A8` doesn't match `woman artist: medium-dark skin tone` (👩🏾‍🎨)")
  end
end

it "`1F469 1F3FF 200D 1F3A8` (fully-qualified) should match `woman artist: dark skin tone` (👩🏿‍🎨)" do
  if m = "👩🏿‍🎨".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🎨"
  else
    fail("`1F469 1F3FF 200D 1F3A8` doesn't match `woman artist: dark skin tone` (👩🏿‍🎨)")
  end
end

it "`1F468 200D 2708 FE0F` (fully-qualified) should match `man pilot` (👨‍✈️)" do
  if m = "👨‍✈️".match(Emoji::EMOJI_REGEX)
    "👨‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍✈️"
  else
    fail("`1F468 200D 2708 FE0F` doesn't match `man pilot` (👨‍✈️)")
  end
end

it "`1F468 200D 2708` (minimally-qualified) should match `man pilot` (👨‍✈)" do
  if m = "👨‍✈".match(Emoji::EMOJI_REGEX)
    "👨‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍✈"
  else
    fail("`1F468 200D 2708` doesn't match `man pilot` (👨‍✈)")
  end
end

it "`1F468 1F3FB 200D 2708 FE0F` (fully-qualified) should match `man pilot: light skin tone` (👨🏻‍✈️)" do
  if m = "👨🏻‍✈️".match(Emoji::EMOJI_REGEX)
    "👨🏻‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍✈️"
  else
    fail("`1F468 1F3FB 200D 2708 FE0F` doesn't match `man pilot: light skin tone` (👨🏻‍✈️)")
  end
end

it "`1F468 1F3FB 200D 2708` (minimally-qualified) should match `man pilot: light skin tone` (👨🏻‍✈)" do
  if m = "👨🏻‍✈".match(Emoji::EMOJI_REGEX)
    "👨🏻‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍✈"
  else
    fail("`1F468 1F3FB 200D 2708` doesn't match `man pilot: light skin tone` (👨🏻‍✈)")
  end
end

it "`1F468 1F3FC 200D 2708 FE0F` (fully-qualified) should match `man pilot: medium-light skin tone` (👨🏼‍✈️)" do
  if m = "👨🏼‍✈️".match(Emoji::EMOJI_REGEX)
    "👨🏼‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍✈️"
  else
    fail("`1F468 1F3FC 200D 2708 FE0F` doesn't match `man pilot: medium-light skin tone` (👨🏼‍✈️)")
  end
end

it "`1F468 1F3FC 200D 2708` (minimally-qualified) should match `man pilot: medium-light skin tone` (👨🏼‍✈)" do
  if m = "👨🏼‍✈".match(Emoji::EMOJI_REGEX)
    "👨🏼‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍✈"
  else
    fail("`1F468 1F3FC 200D 2708` doesn't match `man pilot: medium-light skin tone` (👨🏼‍✈)")
  end
end

it "`1F468 1F3FD 200D 2708 FE0F` (fully-qualified) should match `man pilot: medium skin tone` (👨🏽‍✈️)" do
  if m = "👨🏽‍✈️".match(Emoji::EMOJI_REGEX)
    "👨🏽‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍✈️"
  else
    fail("`1F468 1F3FD 200D 2708 FE0F` doesn't match `man pilot: medium skin tone` (👨🏽‍✈️)")
  end
end

it "`1F468 1F3FD 200D 2708` (minimally-qualified) should match `man pilot: medium skin tone` (👨🏽‍✈)" do
  if m = "👨🏽‍✈".match(Emoji::EMOJI_REGEX)
    "👨🏽‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍✈"
  else
    fail("`1F468 1F3FD 200D 2708` doesn't match `man pilot: medium skin tone` (👨🏽‍✈)")
  end
end

it "`1F468 1F3FE 200D 2708 FE0F` (fully-qualified) should match `man pilot: medium-dark skin tone` (👨🏾‍✈️)" do
  if m = "👨🏾‍✈️".match(Emoji::EMOJI_REGEX)
    "👨🏾‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍✈️"
  else
    fail("`1F468 1F3FE 200D 2708 FE0F` doesn't match `man pilot: medium-dark skin tone` (👨🏾‍✈️)")
  end
end

it "`1F468 1F3FE 200D 2708` (minimally-qualified) should match `man pilot: medium-dark skin tone` (👨🏾‍✈)" do
  if m = "👨🏾‍✈".match(Emoji::EMOJI_REGEX)
    "👨🏾‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍✈"
  else
    fail("`1F468 1F3FE 200D 2708` doesn't match `man pilot: medium-dark skin tone` (👨🏾‍✈)")
  end
end

it "`1F468 1F3FF 200D 2708 FE0F` (fully-qualified) should match `man pilot: dark skin tone` (👨🏿‍✈️)" do
  if m = "👨🏿‍✈️".match(Emoji::EMOJI_REGEX)
    "👨🏿‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍✈️"
  else
    fail("`1F468 1F3FF 200D 2708 FE0F` doesn't match `man pilot: dark skin tone` (👨🏿‍✈️)")
  end
end

it "`1F468 1F3FF 200D 2708` (minimally-qualified) should match `man pilot: dark skin tone` (👨🏿‍✈)" do
  if m = "👨🏿‍✈".match(Emoji::EMOJI_REGEX)
    "👨🏿‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍✈"
  else
    fail("`1F468 1F3FF 200D 2708` doesn't match `man pilot: dark skin tone` (👨🏿‍✈)")
  end
end

it "`1F469 200D 2708 FE0F` (fully-qualified) should match `woman pilot` (👩‍✈️)" do
  if m = "👩‍✈️".match(Emoji::EMOJI_REGEX)
    "👩‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍✈️"
  else
    fail("`1F469 200D 2708 FE0F` doesn't match `woman pilot` (👩‍✈️)")
  end
end

it "`1F469 200D 2708` (minimally-qualified) should match `woman pilot` (👩‍✈)" do
  if m = "👩‍✈".match(Emoji::EMOJI_REGEX)
    "👩‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍✈"
  else
    fail("`1F469 200D 2708` doesn't match `woman pilot` (👩‍✈)")
  end
end

it "`1F469 1F3FB 200D 2708 FE0F` (fully-qualified) should match `woman pilot: light skin tone` (👩🏻‍✈️)" do
  if m = "👩🏻‍✈️".match(Emoji::EMOJI_REGEX)
    "👩🏻‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍✈️"
  else
    fail("`1F469 1F3FB 200D 2708 FE0F` doesn't match `woman pilot: light skin tone` (👩🏻‍✈️)")
  end
end

it "`1F469 1F3FB 200D 2708` (minimally-qualified) should match `woman pilot: light skin tone` (👩🏻‍✈)" do
  if m = "👩🏻‍✈".match(Emoji::EMOJI_REGEX)
    "👩🏻‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍✈"
  else
    fail("`1F469 1F3FB 200D 2708` doesn't match `woman pilot: light skin tone` (👩🏻‍✈)")
  end
end

it "`1F469 1F3FC 200D 2708 FE0F` (fully-qualified) should match `woman pilot: medium-light skin tone` (👩🏼‍✈️)" do
  if m = "👩🏼‍✈️".match(Emoji::EMOJI_REGEX)
    "👩🏼‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍✈️"
  else
    fail("`1F469 1F3FC 200D 2708 FE0F` doesn't match `woman pilot: medium-light skin tone` (👩🏼‍✈️)")
  end
end

it "`1F469 1F3FC 200D 2708` (minimally-qualified) should match `woman pilot: medium-light skin tone` (👩🏼‍✈)" do
  if m = "👩🏼‍✈".match(Emoji::EMOJI_REGEX)
    "👩🏼‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍✈"
  else
    fail("`1F469 1F3FC 200D 2708` doesn't match `woman pilot: medium-light skin tone` (👩🏼‍✈)")
  end
end

it "`1F469 1F3FD 200D 2708 FE0F` (fully-qualified) should match `woman pilot: medium skin tone` (👩🏽‍✈️)" do
  if m = "👩🏽‍✈️".match(Emoji::EMOJI_REGEX)
    "👩🏽‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍✈️"
  else
    fail("`1F469 1F3FD 200D 2708 FE0F` doesn't match `woman pilot: medium skin tone` (👩🏽‍✈️)")
  end
end

it "`1F469 1F3FD 200D 2708` (minimally-qualified) should match `woman pilot: medium skin tone` (👩🏽‍✈)" do
  if m = "👩🏽‍✈".match(Emoji::EMOJI_REGEX)
    "👩🏽‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍✈"
  else
    fail("`1F469 1F3FD 200D 2708` doesn't match `woman pilot: medium skin tone` (👩🏽‍✈)")
  end
end

it "`1F469 1F3FE 200D 2708 FE0F` (fully-qualified) should match `woman pilot: medium-dark skin tone` (👩🏾‍✈️)" do
  if m = "👩🏾‍✈️".match(Emoji::EMOJI_REGEX)
    "👩🏾‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍✈️"
  else
    fail("`1F469 1F3FE 200D 2708 FE0F` doesn't match `woman pilot: medium-dark skin tone` (👩🏾‍✈️)")
  end
end

it "`1F469 1F3FE 200D 2708` (minimally-qualified) should match `woman pilot: medium-dark skin tone` (👩🏾‍✈)" do
  if m = "👩🏾‍✈".match(Emoji::EMOJI_REGEX)
    "👩🏾‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍✈"
  else
    fail("`1F469 1F3FE 200D 2708` doesn't match `woman pilot: medium-dark skin tone` (👩🏾‍✈)")
  end
end

it "`1F469 1F3FF 200D 2708 FE0F` (fully-qualified) should match `woman pilot: dark skin tone` (👩🏿‍✈️)" do
  if m = "👩🏿‍✈️".match(Emoji::EMOJI_REGEX)
    "👩🏿‍✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍✈️"
  else
    fail("`1F469 1F3FF 200D 2708 FE0F` doesn't match `woman pilot: dark skin tone` (👩🏿‍✈️)")
  end
end

it "`1F469 1F3FF 200D 2708` (minimally-qualified) should match `woman pilot: dark skin tone` (👩🏿‍✈)" do
  if m = "👩🏿‍✈".match(Emoji::EMOJI_REGEX)
    "👩🏿‍✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍✈"
  else
    fail("`1F469 1F3FF 200D 2708` doesn't match `woman pilot: dark skin tone` (👩🏿‍✈)")
  end
end

it "`1F468 200D 1F680` (fully-qualified) should match `man astronaut` (👨‍🚀)" do
  if m = "👨‍🚀".match(Emoji::EMOJI_REGEX)
    "👨‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🚀"
  else
    fail("`1F468 200D 1F680` doesn't match `man astronaut` (👨‍🚀)")
  end
end

it "`1F468 1F3FB 200D 1F680` (fully-qualified) should match `man astronaut: light skin tone` (👨🏻‍🚀)" do
  if m = "👨🏻‍🚀".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🚀"
  else
    fail("`1F468 1F3FB 200D 1F680` doesn't match `man astronaut: light skin tone` (👨🏻‍🚀)")
  end
end

it "`1F468 1F3FC 200D 1F680` (fully-qualified) should match `man astronaut: medium-light skin tone` (👨🏼‍🚀)" do
  if m = "👨🏼‍🚀".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🚀"
  else
    fail("`1F468 1F3FC 200D 1F680` doesn't match `man astronaut: medium-light skin tone` (👨🏼‍🚀)")
  end
end

it "`1F468 1F3FD 200D 1F680` (fully-qualified) should match `man astronaut: medium skin tone` (👨🏽‍🚀)" do
  if m = "👨🏽‍🚀".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🚀"
  else
    fail("`1F468 1F3FD 200D 1F680` doesn't match `man astronaut: medium skin tone` (👨🏽‍🚀)")
  end
end

it "`1F468 1F3FE 200D 1F680` (fully-qualified) should match `man astronaut: medium-dark skin tone` (👨🏾‍🚀)" do
  if m = "👨🏾‍🚀".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🚀"
  else
    fail("`1F468 1F3FE 200D 1F680` doesn't match `man astronaut: medium-dark skin tone` (👨🏾‍🚀)")
  end
end

it "`1F468 1F3FF 200D 1F680` (fully-qualified) should match `man astronaut: dark skin tone` (👨🏿‍🚀)" do
  if m = "👨🏿‍🚀".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🚀"
  else
    fail("`1F468 1F3FF 200D 1F680` doesn't match `man astronaut: dark skin tone` (👨🏿‍🚀)")
  end
end

it "`1F469 200D 1F680` (fully-qualified) should match `woman astronaut` (👩‍🚀)" do
  if m = "👩‍🚀".match(Emoji::EMOJI_REGEX)
    "👩‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🚀"
  else
    fail("`1F469 200D 1F680` doesn't match `woman astronaut` (👩‍🚀)")
  end
end

it "`1F469 1F3FB 200D 1F680` (fully-qualified) should match `woman astronaut: light skin tone` (👩🏻‍🚀)" do
  if m = "👩🏻‍🚀".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🚀"
  else
    fail("`1F469 1F3FB 200D 1F680` doesn't match `woman astronaut: light skin tone` (👩🏻‍🚀)")
  end
end

it "`1F469 1F3FC 200D 1F680` (fully-qualified) should match `woman astronaut: medium-light skin tone` (👩🏼‍🚀)" do
  if m = "👩🏼‍🚀".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🚀"
  else
    fail("`1F469 1F3FC 200D 1F680` doesn't match `woman astronaut: medium-light skin tone` (👩🏼‍🚀)")
  end
end

it "`1F469 1F3FD 200D 1F680` (fully-qualified) should match `woman astronaut: medium skin tone` (👩🏽‍🚀)" do
  if m = "👩🏽‍🚀".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🚀"
  else
    fail("`1F469 1F3FD 200D 1F680` doesn't match `woman astronaut: medium skin tone` (👩🏽‍🚀)")
  end
end

it "`1F469 1F3FE 200D 1F680` (fully-qualified) should match `woman astronaut: medium-dark skin tone` (👩🏾‍🚀)" do
  if m = "👩🏾‍🚀".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🚀"
  else
    fail("`1F469 1F3FE 200D 1F680` doesn't match `woman astronaut: medium-dark skin tone` (👩🏾‍🚀)")
  end
end

it "`1F469 1F3FF 200D 1F680` (fully-qualified) should match `woman astronaut: dark skin tone` (👩🏿‍🚀)" do
  if m = "👩🏿‍🚀".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🚀"
  else
    fail("`1F469 1F3FF 200D 1F680` doesn't match `woman astronaut: dark skin tone` (👩🏿‍🚀)")
  end
end

it "`1F468 200D 1F692` (fully-qualified) should match `man firefighter` (👨‍🚒)" do
  if m = "👨‍🚒".match(Emoji::EMOJI_REGEX)
    "👨‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🚒"
  else
    fail("`1F468 200D 1F692` doesn't match `man firefighter` (👨‍🚒)")
  end
end

it "`1F468 1F3FB 200D 1F692` (fully-qualified) should match `man firefighter: light skin tone` (👨🏻‍🚒)" do
  if m = "👨🏻‍🚒".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🚒"
  else
    fail("`1F468 1F3FB 200D 1F692` doesn't match `man firefighter: light skin tone` (👨🏻‍🚒)")
  end
end

it "`1F468 1F3FC 200D 1F692` (fully-qualified) should match `man firefighter: medium-light skin tone` (👨🏼‍🚒)" do
  if m = "👨🏼‍🚒".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🚒"
  else
    fail("`1F468 1F3FC 200D 1F692` doesn't match `man firefighter: medium-light skin tone` (👨🏼‍🚒)")
  end
end

it "`1F468 1F3FD 200D 1F692` (fully-qualified) should match `man firefighter: medium skin tone` (👨🏽‍🚒)" do
  if m = "👨🏽‍🚒".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🚒"
  else
    fail("`1F468 1F3FD 200D 1F692` doesn't match `man firefighter: medium skin tone` (👨🏽‍🚒)")
  end
end

it "`1F468 1F3FE 200D 1F692` (fully-qualified) should match `man firefighter: medium-dark skin tone` (👨🏾‍🚒)" do
  if m = "👨🏾‍🚒".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🚒"
  else
    fail("`1F468 1F3FE 200D 1F692` doesn't match `man firefighter: medium-dark skin tone` (👨🏾‍🚒)")
  end
end

it "`1F468 1F3FF 200D 1F692` (fully-qualified) should match `man firefighter: dark skin tone` (👨🏿‍🚒)" do
  if m = "👨🏿‍🚒".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🚒"
  else
    fail("`1F468 1F3FF 200D 1F692` doesn't match `man firefighter: dark skin tone` (👨🏿‍🚒)")
  end
end

it "`1F469 200D 1F692` (fully-qualified) should match `woman firefighter` (👩‍🚒)" do
  if m = "👩‍🚒".match(Emoji::EMOJI_REGEX)
    "👩‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🚒"
  else
    fail("`1F469 200D 1F692` doesn't match `woman firefighter` (👩‍🚒)")
  end
end

it "`1F469 1F3FB 200D 1F692` (fully-qualified) should match `woman firefighter: light skin tone` (👩🏻‍🚒)" do
  if m = "👩🏻‍🚒".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🚒"
  else
    fail("`1F469 1F3FB 200D 1F692` doesn't match `woman firefighter: light skin tone` (👩🏻‍🚒)")
  end
end

it "`1F469 1F3FC 200D 1F692` (fully-qualified) should match `woman firefighter: medium-light skin tone` (👩🏼‍🚒)" do
  if m = "👩🏼‍🚒".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🚒"
  else
    fail("`1F469 1F3FC 200D 1F692` doesn't match `woman firefighter: medium-light skin tone` (👩🏼‍🚒)")
  end
end

it "`1F469 1F3FD 200D 1F692` (fully-qualified) should match `woman firefighter: medium skin tone` (👩🏽‍🚒)" do
  if m = "👩🏽‍🚒".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🚒"
  else
    fail("`1F469 1F3FD 200D 1F692` doesn't match `woman firefighter: medium skin tone` (👩🏽‍🚒)")
  end
end

it "`1F469 1F3FE 200D 1F692` (fully-qualified) should match `woman firefighter: medium-dark skin tone` (👩🏾‍🚒)" do
  if m = "👩🏾‍🚒".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🚒"
  else
    fail("`1F469 1F3FE 200D 1F692` doesn't match `woman firefighter: medium-dark skin tone` (👩🏾‍🚒)")
  end
end

it "`1F469 1F3FF 200D 1F692` (fully-qualified) should match `woman firefighter: dark skin tone` (👩🏿‍🚒)" do
  if m = "👩🏿‍🚒".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🚒"
  else
    fail("`1F469 1F3FF 200D 1F692` doesn't match `woman firefighter: dark skin tone` (👩🏿‍🚒)")
  end
end

it "`1F46E` (fully-qualified) should match `police officer` (👮)" do
  if m = "👮".match(Emoji::EMOJI_REGEX)
    "👮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮"
  else
    fail("`1F46E` doesn't match `police officer` (👮)")
  end
end

it "`1F46E 1F3FB` (fully-qualified) should match `police officer: light skin tone` (👮🏻)" do
  if m = "👮🏻".match(Emoji::EMOJI_REGEX)
    "👮🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻"
  else
    fail("`1F46E 1F3FB` doesn't match `police officer: light skin tone` (👮🏻)")
  end
end

it "`1F46E 1F3FC` (fully-qualified) should match `police officer: medium-light skin tone` (👮🏼)" do
  if m = "👮🏼".match(Emoji::EMOJI_REGEX)
    "👮🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼"
  else
    fail("`1F46E 1F3FC` doesn't match `police officer: medium-light skin tone` (👮🏼)")
  end
end

it "`1F46E 1F3FD` (fully-qualified) should match `police officer: medium skin tone` (👮🏽)" do
  if m = "👮🏽".match(Emoji::EMOJI_REGEX)
    "👮🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽"
  else
    fail("`1F46E 1F3FD` doesn't match `police officer: medium skin tone` (👮🏽)")
  end
end

it "`1F46E 1F3FE` (fully-qualified) should match `police officer: medium-dark skin tone` (👮🏾)" do
  if m = "👮🏾".match(Emoji::EMOJI_REGEX)
    "👮🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾"
  else
    fail("`1F46E 1F3FE` doesn't match `police officer: medium-dark skin tone` (👮🏾)")
  end
end

it "`1F46E 1F3FF` (fully-qualified) should match `police officer: dark skin tone` (👮🏿)" do
  if m = "👮🏿".match(Emoji::EMOJI_REGEX)
    "👮🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿"
  else
    fail("`1F46E 1F3FF` doesn't match `police officer: dark skin tone` (👮🏿)")
  end
end

it "`1F46E 200D 2642 FE0F` (fully-qualified) should match `man police officer` (👮‍♂️)" do
  if m = "👮‍♂️".match(Emoji::EMOJI_REGEX)
    "👮‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♂️"
  else
    fail("`1F46E 200D 2642 FE0F` doesn't match `man police officer` (👮‍♂️)")
  end
end

it "`1F46E 200D 2642` (minimally-qualified) should match `man police officer` (👮‍♂)" do
  if m = "👮‍♂".match(Emoji::EMOJI_REGEX)
    "👮‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♂"
  else
    fail("`1F46E 200D 2642` doesn't match `man police officer` (👮‍♂)")
  end
end

it "`1F46E 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man police officer: light skin tone` (👮🏻‍♂️)" do
  if m = "👮🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "👮🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♂️"
  else
    fail("`1F46E 1F3FB 200D 2642 FE0F` doesn't match `man police officer: light skin tone` (👮🏻‍♂️)")
  end
end

it "`1F46E 1F3FB 200D 2642` (minimally-qualified) should match `man police officer: light skin tone` (👮🏻‍♂)" do
  if m = "👮🏻‍♂".match(Emoji::EMOJI_REGEX)
    "👮🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♂"
  else
    fail("`1F46E 1F3FB 200D 2642` doesn't match `man police officer: light skin tone` (👮🏻‍♂)")
  end
end

it "`1F46E 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man police officer: medium-light skin tone` (👮🏼‍♂️)" do
  if m = "👮🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "👮🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♂️"
  else
    fail("`1F46E 1F3FC 200D 2642 FE0F` doesn't match `man police officer: medium-light skin tone` (👮🏼‍♂️)")
  end
end

it "`1F46E 1F3FC 200D 2642` (minimally-qualified) should match `man police officer: medium-light skin tone` (👮🏼‍♂)" do
  if m = "👮🏼‍♂".match(Emoji::EMOJI_REGEX)
    "👮🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♂"
  else
    fail("`1F46E 1F3FC 200D 2642` doesn't match `man police officer: medium-light skin tone` (👮🏼‍♂)")
  end
end

it "`1F46E 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man police officer: medium skin tone` (👮🏽‍♂️)" do
  if m = "👮🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "👮🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♂️"
  else
    fail("`1F46E 1F3FD 200D 2642 FE0F` doesn't match `man police officer: medium skin tone` (👮🏽‍♂️)")
  end
end

it "`1F46E 1F3FD 200D 2642` (minimally-qualified) should match `man police officer: medium skin tone` (👮🏽‍♂)" do
  if m = "👮🏽‍♂".match(Emoji::EMOJI_REGEX)
    "👮🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♂"
  else
    fail("`1F46E 1F3FD 200D 2642` doesn't match `man police officer: medium skin tone` (👮🏽‍♂)")
  end
end

it "`1F46E 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man police officer: medium-dark skin tone` (👮🏾‍♂️)" do
  if m = "👮🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "👮🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♂️"
  else
    fail("`1F46E 1F3FE 200D 2642 FE0F` doesn't match `man police officer: medium-dark skin tone` (👮🏾‍♂️)")
  end
end

it "`1F46E 1F3FE 200D 2642` (minimally-qualified) should match `man police officer: medium-dark skin tone` (👮🏾‍♂)" do
  if m = "👮🏾‍♂".match(Emoji::EMOJI_REGEX)
    "👮🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♂"
  else
    fail("`1F46E 1F3FE 200D 2642` doesn't match `man police officer: medium-dark skin tone` (👮🏾‍♂)")
  end
end

it "`1F46E 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man police officer: dark skin tone` (👮🏿‍♂️)" do
  if m = "👮🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "👮🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♂️"
  else
    fail("`1F46E 1F3FF 200D 2642 FE0F` doesn't match `man police officer: dark skin tone` (👮🏿‍♂️)")
  end
end

it "`1F46E 1F3FF 200D 2642` (minimally-qualified) should match `man police officer: dark skin tone` (👮🏿‍♂)" do
  if m = "👮🏿‍♂".match(Emoji::EMOJI_REGEX)
    "👮🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♂"
  else
    fail("`1F46E 1F3FF 200D 2642` doesn't match `man police officer: dark skin tone` (👮🏿‍♂)")
  end
end

it "`1F46E 200D 2640 FE0F` (fully-qualified) should match `woman police officer` (👮‍♀️)" do
  if m = "👮‍♀️".match(Emoji::EMOJI_REGEX)
    "👮‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♀️"
  else
    fail("`1F46E 200D 2640 FE0F` doesn't match `woman police officer` (👮‍♀️)")
  end
end

it "`1F46E 200D 2640` (minimally-qualified) should match `woman police officer` (👮‍♀)" do
  if m = "👮‍♀".match(Emoji::EMOJI_REGEX)
    "👮‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮‍♀"
  else
    fail("`1F46E 200D 2640` doesn't match `woman police officer` (👮‍♀)")
  end
end

it "`1F46E 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman police officer: light skin tone` (👮🏻‍♀️)" do
  if m = "👮🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "👮🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♀️"
  else
    fail("`1F46E 1F3FB 200D 2640 FE0F` doesn't match `woman police officer: light skin tone` (👮🏻‍♀️)")
  end
end

it "`1F46E 1F3FB 200D 2640` (minimally-qualified) should match `woman police officer: light skin tone` (👮🏻‍♀)" do
  if m = "👮🏻‍♀".match(Emoji::EMOJI_REGEX)
    "👮🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏻‍♀"
  else
    fail("`1F46E 1F3FB 200D 2640` doesn't match `woman police officer: light skin tone` (👮🏻‍♀)")
  end
end

it "`1F46E 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman police officer: medium-light skin tone` (👮🏼‍♀️)" do
  if m = "👮🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "👮🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♀️"
  else
    fail("`1F46E 1F3FC 200D 2640 FE0F` doesn't match `woman police officer: medium-light skin tone` (👮🏼‍♀️)")
  end
end

it "`1F46E 1F3FC 200D 2640` (minimally-qualified) should match `woman police officer: medium-light skin tone` (👮🏼‍♀)" do
  if m = "👮🏼‍♀".match(Emoji::EMOJI_REGEX)
    "👮🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏼‍♀"
  else
    fail("`1F46E 1F3FC 200D 2640` doesn't match `woman police officer: medium-light skin tone` (👮🏼‍♀)")
  end
end

it "`1F46E 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman police officer: medium skin tone` (👮🏽‍♀️)" do
  if m = "👮🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "👮🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♀️"
  else
    fail("`1F46E 1F3FD 200D 2640 FE0F` doesn't match `woman police officer: medium skin tone` (👮🏽‍♀️)")
  end
end

it "`1F46E 1F3FD 200D 2640` (minimally-qualified) should match `woman police officer: medium skin tone` (👮🏽‍♀)" do
  if m = "👮🏽‍♀".match(Emoji::EMOJI_REGEX)
    "👮🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏽‍♀"
  else
    fail("`1F46E 1F3FD 200D 2640` doesn't match `woman police officer: medium skin tone` (👮🏽‍♀)")
  end
end

it "`1F46E 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman police officer: medium-dark skin tone` (👮🏾‍♀️)" do
  if m = "👮🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "👮🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♀️"
  else
    fail("`1F46E 1F3FE 200D 2640 FE0F` doesn't match `woman police officer: medium-dark skin tone` (👮🏾‍♀️)")
  end
end

it "`1F46E 1F3FE 200D 2640` (minimally-qualified) should match `woman police officer: medium-dark skin tone` (👮🏾‍♀)" do
  if m = "👮🏾‍♀".match(Emoji::EMOJI_REGEX)
    "👮🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏾‍♀"
  else
    fail("`1F46E 1F3FE 200D 2640` doesn't match `woman police officer: medium-dark skin tone` (👮🏾‍♀)")
  end
end

it "`1F46E 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman police officer: dark skin tone` (👮🏿‍♀️)" do
  if m = "👮🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "👮🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♀️"
  else
    fail("`1F46E 1F3FF 200D 2640 FE0F` doesn't match `woman police officer: dark skin tone` (👮🏿‍♀️)")
  end
end

it "`1F46E 1F3FF 200D 2640` (minimally-qualified) should match `woman police officer: dark skin tone` (👮🏿‍♀)" do
  if m = "👮🏿‍♀".match(Emoji::EMOJI_REGEX)
    "👮🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👮🏿‍♀"
  else
    fail("`1F46E 1F3FF 200D 2640` doesn't match `woman police officer: dark skin tone` (👮🏿‍♀)")
  end
end

it "`1F575 FE0F` (fully-qualified) should match `detective` (🕵️)" do
  if m = "🕵️".match(Emoji::EMOJI_REGEX)
    "🕵️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️"
  else
    fail("`1F575 FE0F` doesn't match `detective` (🕵️)")
  end
end

it "`1F575` (unqualified) should match `detective` (🕵)" do
  if m = "🕵".match(Emoji::EMOJI_REGEX)
    "🕵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵"
  else
    fail("`1F575` doesn't match `detective` (🕵)")
  end
end

it "`1F575 1F3FB` (fully-qualified) should match `detective: light skin tone` (🕵🏻)" do
  if m = "🕵🏻".match(Emoji::EMOJI_REGEX)
    "🕵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻"
  else
    fail("`1F575 1F3FB` doesn't match `detective: light skin tone` (🕵🏻)")
  end
end

it "`1F575 1F3FC` (fully-qualified) should match `detective: medium-light skin tone` (🕵🏼)" do
  if m = "🕵🏼".match(Emoji::EMOJI_REGEX)
    "🕵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼"
  else
    fail("`1F575 1F3FC` doesn't match `detective: medium-light skin tone` (🕵🏼)")
  end
end

it "`1F575 1F3FD` (fully-qualified) should match `detective: medium skin tone` (🕵🏽)" do
  if m = "🕵🏽".match(Emoji::EMOJI_REGEX)
    "🕵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽"
  else
    fail("`1F575 1F3FD` doesn't match `detective: medium skin tone` (🕵🏽)")
  end
end

it "`1F575 1F3FE` (fully-qualified) should match `detective: medium-dark skin tone` (🕵🏾)" do
  if m = "🕵🏾".match(Emoji::EMOJI_REGEX)
    "🕵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾"
  else
    fail("`1F575 1F3FE` doesn't match `detective: medium-dark skin tone` (🕵🏾)")
  end
end

it "`1F575 1F3FF` (fully-qualified) should match `detective: dark skin tone` (🕵🏿)" do
  if m = "🕵🏿".match(Emoji::EMOJI_REGEX)
    "🕵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿"
  else
    fail("`1F575 1F3FF` doesn't match `detective: dark skin tone` (🕵🏿)")
  end
end

it "`1F575 FE0F 200D 2642 FE0F` (fully-qualified) should match `man detective` (🕵️‍♂️)" do
  if m = "🕵️‍♂️".match(Emoji::EMOJI_REGEX)
    "🕵️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♂️"
  else
    fail("`1F575 FE0F 200D 2642 FE0F` doesn't match `man detective` (🕵️‍♂️)")
  end
end

it "`1F575 200D 2642 FE0F` (unqualified) should match `man detective` (🕵‍♂️)" do
  if m = "🕵‍♂️".match(Emoji::EMOJI_REGEX)
    "🕵‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♂️"
  else
    fail("`1F575 200D 2642 FE0F` doesn't match `man detective` (🕵‍♂️)")
  end
end

it "`1F575 FE0F 200D 2642` (unqualified) should match `man detective` (🕵️‍♂)" do
  if m = "🕵️‍♂".match(Emoji::EMOJI_REGEX)
    "🕵️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♂"
  else
    fail("`1F575 FE0F 200D 2642` doesn't match `man detective` (🕵️‍♂)")
  end
end

it "`1F575 200D 2642` (unqualified) should match `man detective` (🕵‍♂)" do
  if m = "🕵‍♂".match(Emoji::EMOJI_REGEX)
    "🕵‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♂"
  else
    fail("`1F575 200D 2642` doesn't match `man detective` (🕵‍♂)")
  end
end

it "`1F575 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man detective: light skin tone` (🕵🏻‍♂️)" do
  if m = "🕵🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🕵🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♂️"
  else
    fail("`1F575 1F3FB 200D 2642 FE0F` doesn't match `man detective: light skin tone` (🕵🏻‍♂️)")
  end
end

it "`1F575 1F3FB 200D 2642` (minimally-qualified) should match `man detective: light skin tone` (🕵🏻‍♂)" do
  if m = "🕵🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🕵🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♂"
  else
    fail("`1F575 1F3FB 200D 2642` doesn't match `man detective: light skin tone` (🕵🏻‍♂)")
  end
end

it "`1F575 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man detective: medium-light skin tone` (🕵🏼‍♂️)" do
  if m = "🕵🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🕵🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♂️"
  else
    fail("`1F575 1F3FC 200D 2642 FE0F` doesn't match `man detective: medium-light skin tone` (🕵🏼‍♂️)")
  end
end

it "`1F575 1F3FC 200D 2642` (minimally-qualified) should match `man detective: medium-light skin tone` (🕵🏼‍♂)" do
  if m = "🕵🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🕵🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♂"
  else
    fail("`1F575 1F3FC 200D 2642` doesn't match `man detective: medium-light skin tone` (🕵🏼‍♂)")
  end
end

it "`1F575 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man detective: medium skin tone` (🕵🏽‍♂️)" do
  if m = "🕵🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🕵🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♂️"
  else
    fail("`1F575 1F3FD 200D 2642 FE0F` doesn't match `man detective: medium skin tone` (🕵🏽‍♂️)")
  end
end

it "`1F575 1F3FD 200D 2642` (minimally-qualified) should match `man detective: medium skin tone` (🕵🏽‍♂)" do
  if m = "🕵🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🕵🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♂"
  else
    fail("`1F575 1F3FD 200D 2642` doesn't match `man detective: medium skin tone` (🕵🏽‍♂)")
  end
end

it "`1F575 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man detective: medium-dark skin tone` (🕵🏾‍♂️)" do
  if m = "🕵🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🕵🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♂️"
  else
    fail("`1F575 1F3FE 200D 2642 FE0F` doesn't match `man detective: medium-dark skin tone` (🕵🏾‍♂️)")
  end
end

it "`1F575 1F3FE 200D 2642` (minimally-qualified) should match `man detective: medium-dark skin tone` (🕵🏾‍♂)" do
  if m = "🕵🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🕵🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♂"
  else
    fail("`1F575 1F3FE 200D 2642` doesn't match `man detective: medium-dark skin tone` (🕵🏾‍♂)")
  end
end

it "`1F575 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man detective: dark skin tone` (🕵🏿‍♂️)" do
  if m = "🕵🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🕵🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♂️"
  else
    fail("`1F575 1F3FF 200D 2642 FE0F` doesn't match `man detective: dark skin tone` (🕵🏿‍♂️)")
  end
end

it "`1F575 1F3FF 200D 2642` (minimally-qualified) should match `man detective: dark skin tone` (🕵🏿‍♂)" do
  if m = "🕵🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🕵🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♂"
  else
    fail("`1F575 1F3FF 200D 2642` doesn't match `man detective: dark skin tone` (🕵🏿‍♂)")
  end
end

it "`1F575 FE0F 200D 2640 FE0F` (fully-qualified) should match `woman detective` (🕵️‍♀️)" do
  if m = "🕵️‍♀️".match(Emoji::EMOJI_REGEX)
    "🕵️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♀️"
  else
    fail("`1F575 FE0F 200D 2640 FE0F` doesn't match `woman detective` (🕵️‍♀️)")
  end
end

it "`1F575 200D 2640 FE0F` (unqualified) should match `woman detective` (🕵‍♀️)" do
  if m = "🕵‍♀️".match(Emoji::EMOJI_REGEX)
    "🕵‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♀️"
  else
    fail("`1F575 200D 2640 FE0F` doesn't match `woman detective` (🕵‍♀️)")
  end
end

it "`1F575 FE0F 200D 2640` (unqualified) should match `woman detective` (🕵️‍♀)" do
  if m = "🕵️‍♀".match(Emoji::EMOJI_REGEX)
    "🕵️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵️‍♀"
  else
    fail("`1F575 FE0F 200D 2640` doesn't match `woman detective` (🕵️‍♀)")
  end
end

it "`1F575 200D 2640` (unqualified) should match `woman detective` (🕵‍♀)" do
  if m = "🕵‍♀".match(Emoji::EMOJI_REGEX)
    "🕵‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵‍♀"
  else
    fail("`1F575 200D 2640` doesn't match `woman detective` (🕵‍♀)")
  end
end

it "`1F575 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman detective: light skin tone` (🕵🏻‍♀️)" do
  if m = "🕵🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🕵🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♀️"
  else
    fail("`1F575 1F3FB 200D 2640 FE0F` doesn't match `woman detective: light skin tone` (🕵🏻‍♀️)")
  end
end

it "`1F575 1F3FB 200D 2640` (minimally-qualified) should match `woman detective: light skin tone` (🕵🏻‍♀)" do
  if m = "🕵🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🕵🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏻‍♀"
  else
    fail("`1F575 1F3FB 200D 2640` doesn't match `woman detective: light skin tone` (🕵🏻‍♀)")
  end
end

it "`1F575 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman detective: medium-light skin tone` (🕵🏼‍♀️)" do
  if m = "🕵🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🕵🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♀️"
  else
    fail("`1F575 1F3FC 200D 2640 FE0F` doesn't match `woman detective: medium-light skin tone` (🕵🏼‍♀️)")
  end
end

it "`1F575 1F3FC 200D 2640` (minimally-qualified) should match `woman detective: medium-light skin tone` (🕵🏼‍♀)" do
  if m = "🕵🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🕵🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏼‍♀"
  else
    fail("`1F575 1F3FC 200D 2640` doesn't match `woman detective: medium-light skin tone` (🕵🏼‍♀)")
  end
end

it "`1F575 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman detective: medium skin tone` (🕵🏽‍♀️)" do
  if m = "🕵🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🕵🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♀️"
  else
    fail("`1F575 1F3FD 200D 2640 FE0F` doesn't match `woman detective: medium skin tone` (🕵🏽‍♀️)")
  end
end

it "`1F575 1F3FD 200D 2640` (minimally-qualified) should match `woman detective: medium skin tone` (🕵🏽‍♀)" do
  if m = "🕵🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🕵🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏽‍♀"
  else
    fail("`1F575 1F3FD 200D 2640` doesn't match `woman detective: medium skin tone` (🕵🏽‍♀)")
  end
end

it "`1F575 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman detective: medium-dark skin tone` (🕵🏾‍♀️)" do
  if m = "🕵🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🕵🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♀️"
  else
    fail("`1F575 1F3FE 200D 2640 FE0F` doesn't match `woman detective: medium-dark skin tone` (🕵🏾‍♀️)")
  end
end

it "`1F575 1F3FE 200D 2640` (minimally-qualified) should match `woman detective: medium-dark skin tone` (🕵🏾‍♀)" do
  if m = "🕵🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🕵🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏾‍♀"
  else
    fail("`1F575 1F3FE 200D 2640` doesn't match `woman detective: medium-dark skin tone` (🕵🏾‍♀)")
  end
end

it "`1F575 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman detective: dark skin tone` (🕵🏿‍♀️)" do
  if m = "🕵🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🕵🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♀️"
  else
    fail("`1F575 1F3FF 200D 2640 FE0F` doesn't match `woman detective: dark skin tone` (🕵🏿‍♀️)")
  end
end

it "`1F575 1F3FF 200D 2640` (minimally-qualified) should match `woman detective: dark skin tone` (🕵🏿‍♀)" do
  if m = "🕵🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🕵🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕵🏿‍♀"
  else
    fail("`1F575 1F3FF 200D 2640` doesn't match `woman detective: dark skin tone` (🕵🏿‍♀)")
  end
end

it "`1F482` (fully-qualified) should match `guard` (💂)" do
  if m = "💂".match(Emoji::EMOJI_REGEX)
    "💂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂"
  else
    fail("`1F482` doesn't match `guard` (💂)")
  end
end

it "`1F482 1F3FB` (fully-qualified) should match `guard: light skin tone` (💂🏻)" do
  if m = "💂🏻".match(Emoji::EMOJI_REGEX)
    "💂🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻"
  else
    fail("`1F482 1F3FB` doesn't match `guard: light skin tone` (💂🏻)")
  end
end

it "`1F482 1F3FC` (fully-qualified) should match `guard: medium-light skin tone` (💂🏼)" do
  if m = "💂🏼".match(Emoji::EMOJI_REGEX)
    "💂🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼"
  else
    fail("`1F482 1F3FC` doesn't match `guard: medium-light skin tone` (💂🏼)")
  end
end

it "`1F482 1F3FD` (fully-qualified) should match `guard: medium skin tone` (💂🏽)" do
  if m = "💂🏽".match(Emoji::EMOJI_REGEX)
    "💂🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽"
  else
    fail("`1F482 1F3FD` doesn't match `guard: medium skin tone` (💂🏽)")
  end
end

it "`1F482 1F3FE` (fully-qualified) should match `guard: medium-dark skin tone` (💂🏾)" do
  if m = "💂🏾".match(Emoji::EMOJI_REGEX)
    "💂🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾"
  else
    fail("`1F482 1F3FE` doesn't match `guard: medium-dark skin tone` (💂🏾)")
  end
end

it "`1F482 1F3FF` (fully-qualified) should match `guard: dark skin tone` (💂🏿)" do
  if m = "💂🏿".match(Emoji::EMOJI_REGEX)
    "💂🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿"
  else
    fail("`1F482 1F3FF` doesn't match `guard: dark skin tone` (💂🏿)")
  end
end

it "`1F482 200D 2642 FE0F` (fully-qualified) should match `man guard` (💂‍♂️)" do
  if m = "💂‍♂️".match(Emoji::EMOJI_REGEX)
    "💂‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♂️"
  else
    fail("`1F482 200D 2642 FE0F` doesn't match `man guard` (💂‍♂️)")
  end
end

it "`1F482 200D 2642` (minimally-qualified) should match `man guard` (💂‍♂)" do
  if m = "💂‍♂".match(Emoji::EMOJI_REGEX)
    "💂‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♂"
  else
    fail("`1F482 200D 2642` doesn't match `man guard` (💂‍♂)")
  end
end

it "`1F482 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man guard: light skin tone` (💂🏻‍♂️)" do
  if m = "💂🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "💂🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♂️"
  else
    fail("`1F482 1F3FB 200D 2642 FE0F` doesn't match `man guard: light skin tone` (💂🏻‍♂️)")
  end
end

it "`1F482 1F3FB 200D 2642` (minimally-qualified) should match `man guard: light skin tone` (💂🏻‍♂)" do
  if m = "💂🏻‍♂".match(Emoji::EMOJI_REGEX)
    "💂🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♂"
  else
    fail("`1F482 1F3FB 200D 2642` doesn't match `man guard: light skin tone` (💂🏻‍♂)")
  end
end

it "`1F482 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man guard: medium-light skin tone` (💂🏼‍♂️)" do
  if m = "💂🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "💂🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♂️"
  else
    fail("`1F482 1F3FC 200D 2642 FE0F` doesn't match `man guard: medium-light skin tone` (💂🏼‍♂️)")
  end
end

it "`1F482 1F3FC 200D 2642` (minimally-qualified) should match `man guard: medium-light skin tone` (💂🏼‍♂)" do
  if m = "💂🏼‍♂".match(Emoji::EMOJI_REGEX)
    "💂🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♂"
  else
    fail("`1F482 1F3FC 200D 2642` doesn't match `man guard: medium-light skin tone` (💂🏼‍♂)")
  end
end

it "`1F482 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man guard: medium skin tone` (💂🏽‍♂️)" do
  if m = "💂🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "💂🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♂️"
  else
    fail("`1F482 1F3FD 200D 2642 FE0F` doesn't match `man guard: medium skin tone` (💂🏽‍♂️)")
  end
end

it "`1F482 1F3FD 200D 2642` (minimally-qualified) should match `man guard: medium skin tone` (💂🏽‍♂)" do
  if m = "💂🏽‍♂".match(Emoji::EMOJI_REGEX)
    "💂🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♂"
  else
    fail("`1F482 1F3FD 200D 2642` doesn't match `man guard: medium skin tone` (💂🏽‍♂)")
  end
end

it "`1F482 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man guard: medium-dark skin tone` (💂🏾‍♂️)" do
  if m = "💂🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "💂🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♂️"
  else
    fail("`1F482 1F3FE 200D 2642 FE0F` doesn't match `man guard: medium-dark skin tone` (💂🏾‍♂️)")
  end
end

it "`1F482 1F3FE 200D 2642` (minimally-qualified) should match `man guard: medium-dark skin tone` (💂🏾‍♂)" do
  if m = "💂🏾‍♂".match(Emoji::EMOJI_REGEX)
    "💂🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♂"
  else
    fail("`1F482 1F3FE 200D 2642` doesn't match `man guard: medium-dark skin tone` (💂🏾‍♂)")
  end
end

it "`1F482 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man guard: dark skin tone` (💂🏿‍♂️)" do
  if m = "💂🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "💂🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♂️"
  else
    fail("`1F482 1F3FF 200D 2642 FE0F` doesn't match `man guard: dark skin tone` (💂🏿‍♂️)")
  end
end

it "`1F482 1F3FF 200D 2642` (minimally-qualified) should match `man guard: dark skin tone` (💂🏿‍♂)" do
  if m = "💂🏿‍♂".match(Emoji::EMOJI_REGEX)
    "💂🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♂"
  else
    fail("`1F482 1F3FF 200D 2642` doesn't match `man guard: dark skin tone` (💂🏿‍♂)")
  end
end

it "`1F482 200D 2640 FE0F` (fully-qualified) should match `woman guard` (💂‍♀️)" do
  if m = "💂‍♀️".match(Emoji::EMOJI_REGEX)
    "💂‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♀️"
  else
    fail("`1F482 200D 2640 FE0F` doesn't match `woman guard` (💂‍♀️)")
  end
end

it "`1F482 200D 2640` (minimally-qualified) should match `woman guard` (💂‍♀)" do
  if m = "💂‍♀".match(Emoji::EMOJI_REGEX)
    "💂‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂‍♀"
  else
    fail("`1F482 200D 2640` doesn't match `woman guard` (💂‍♀)")
  end
end

it "`1F482 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman guard: light skin tone` (💂🏻‍♀️)" do
  if m = "💂🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "💂🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♀️"
  else
    fail("`1F482 1F3FB 200D 2640 FE0F` doesn't match `woman guard: light skin tone` (💂🏻‍♀️)")
  end
end

it "`1F482 1F3FB 200D 2640` (minimally-qualified) should match `woman guard: light skin tone` (💂🏻‍♀)" do
  if m = "💂🏻‍♀".match(Emoji::EMOJI_REGEX)
    "💂🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏻‍♀"
  else
    fail("`1F482 1F3FB 200D 2640` doesn't match `woman guard: light skin tone` (💂🏻‍♀)")
  end
end

it "`1F482 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman guard: medium-light skin tone` (💂🏼‍♀️)" do
  if m = "💂🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "💂🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♀️"
  else
    fail("`1F482 1F3FC 200D 2640 FE0F` doesn't match `woman guard: medium-light skin tone` (💂🏼‍♀️)")
  end
end

it "`1F482 1F3FC 200D 2640` (minimally-qualified) should match `woman guard: medium-light skin tone` (💂🏼‍♀)" do
  if m = "💂🏼‍♀".match(Emoji::EMOJI_REGEX)
    "💂🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏼‍♀"
  else
    fail("`1F482 1F3FC 200D 2640` doesn't match `woman guard: medium-light skin tone` (💂🏼‍♀)")
  end
end

it "`1F482 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman guard: medium skin tone` (💂🏽‍♀️)" do
  if m = "💂🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "💂🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♀️"
  else
    fail("`1F482 1F3FD 200D 2640 FE0F` doesn't match `woman guard: medium skin tone` (💂🏽‍♀️)")
  end
end

it "`1F482 1F3FD 200D 2640` (minimally-qualified) should match `woman guard: medium skin tone` (💂🏽‍♀)" do
  if m = "💂🏽‍♀".match(Emoji::EMOJI_REGEX)
    "💂🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏽‍♀"
  else
    fail("`1F482 1F3FD 200D 2640` doesn't match `woman guard: medium skin tone` (💂🏽‍♀)")
  end
end

it "`1F482 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman guard: medium-dark skin tone` (💂🏾‍♀️)" do
  if m = "💂🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "💂🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♀️"
  else
    fail("`1F482 1F3FE 200D 2640 FE0F` doesn't match `woman guard: medium-dark skin tone` (💂🏾‍♀️)")
  end
end

it "`1F482 1F3FE 200D 2640` (minimally-qualified) should match `woman guard: medium-dark skin tone` (💂🏾‍♀)" do
  if m = "💂🏾‍♀".match(Emoji::EMOJI_REGEX)
    "💂🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏾‍♀"
  else
    fail("`1F482 1F3FE 200D 2640` doesn't match `woman guard: medium-dark skin tone` (💂🏾‍♀)")
  end
end

it "`1F482 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman guard: dark skin tone` (💂🏿‍♀️)" do
  if m = "💂🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "💂🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♀️"
  else
    fail("`1F482 1F3FF 200D 2640 FE0F` doesn't match `woman guard: dark skin tone` (💂🏿‍♀️)")
  end
end

it "`1F482 1F3FF 200D 2640` (minimally-qualified) should match `woman guard: dark skin tone` (💂🏿‍♀)" do
  if m = "💂🏿‍♀".match(Emoji::EMOJI_REGEX)
    "💂🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💂🏿‍♀"
  else
    fail("`1F482 1F3FF 200D 2640` doesn't match `woman guard: dark skin tone` (💂🏿‍♀)")
  end
end

it "`1F477` (fully-qualified) should match `construction worker` (👷)" do
  if m = "👷".match(Emoji::EMOJI_REGEX)
    "👷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷"
  else
    fail("`1F477` doesn't match `construction worker` (👷)")
  end
end

it "`1F477 1F3FB` (fully-qualified) should match `construction worker: light skin tone` (👷🏻)" do
  if m = "👷🏻".match(Emoji::EMOJI_REGEX)
    "👷🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻"
  else
    fail("`1F477 1F3FB` doesn't match `construction worker: light skin tone` (👷🏻)")
  end
end

it "`1F477 1F3FC` (fully-qualified) should match `construction worker: medium-light skin tone` (👷🏼)" do
  if m = "👷🏼".match(Emoji::EMOJI_REGEX)
    "👷🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼"
  else
    fail("`1F477 1F3FC` doesn't match `construction worker: medium-light skin tone` (👷🏼)")
  end
end

it "`1F477 1F3FD` (fully-qualified) should match `construction worker: medium skin tone` (👷🏽)" do
  if m = "👷🏽".match(Emoji::EMOJI_REGEX)
    "👷🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽"
  else
    fail("`1F477 1F3FD` doesn't match `construction worker: medium skin tone` (👷🏽)")
  end
end

it "`1F477 1F3FE` (fully-qualified) should match `construction worker: medium-dark skin tone` (👷🏾)" do
  if m = "👷🏾".match(Emoji::EMOJI_REGEX)
    "👷🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾"
  else
    fail("`1F477 1F3FE` doesn't match `construction worker: medium-dark skin tone` (👷🏾)")
  end
end

it "`1F477 1F3FF` (fully-qualified) should match `construction worker: dark skin tone` (👷🏿)" do
  if m = "👷🏿".match(Emoji::EMOJI_REGEX)
    "👷🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿"
  else
    fail("`1F477 1F3FF` doesn't match `construction worker: dark skin tone` (👷🏿)")
  end
end

it "`1F477 200D 2642 FE0F` (fully-qualified) should match `man construction worker` (👷‍♂️)" do
  if m = "👷‍♂️".match(Emoji::EMOJI_REGEX)
    "👷‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♂️"
  else
    fail("`1F477 200D 2642 FE0F` doesn't match `man construction worker` (👷‍♂️)")
  end
end

it "`1F477 200D 2642` (minimally-qualified) should match `man construction worker` (👷‍♂)" do
  if m = "👷‍♂".match(Emoji::EMOJI_REGEX)
    "👷‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♂"
  else
    fail("`1F477 200D 2642` doesn't match `man construction worker` (👷‍♂)")
  end
end

it "`1F477 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man construction worker: light skin tone` (👷🏻‍♂️)" do
  if m = "👷🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "👷🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♂️"
  else
    fail("`1F477 1F3FB 200D 2642 FE0F` doesn't match `man construction worker: light skin tone` (👷🏻‍♂️)")
  end
end

it "`1F477 1F3FB 200D 2642` (minimally-qualified) should match `man construction worker: light skin tone` (👷🏻‍♂)" do
  if m = "👷🏻‍♂".match(Emoji::EMOJI_REGEX)
    "👷🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♂"
  else
    fail("`1F477 1F3FB 200D 2642` doesn't match `man construction worker: light skin tone` (👷🏻‍♂)")
  end
end

it "`1F477 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man construction worker: medium-light skin tone` (👷🏼‍♂️)" do
  if m = "👷🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "👷🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♂️"
  else
    fail("`1F477 1F3FC 200D 2642 FE0F` doesn't match `man construction worker: medium-light skin tone` (👷🏼‍♂️)")
  end
end

it "`1F477 1F3FC 200D 2642` (minimally-qualified) should match `man construction worker: medium-light skin tone` (👷🏼‍♂)" do
  if m = "👷🏼‍♂".match(Emoji::EMOJI_REGEX)
    "👷🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♂"
  else
    fail("`1F477 1F3FC 200D 2642` doesn't match `man construction worker: medium-light skin tone` (👷🏼‍♂)")
  end
end

it "`1F477 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man construction worker: medium skin tone` (👷🏽‍♂️)" do
  if m = "👷🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "👷🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♂️"
  else
    fail("`1F477 1F3FD 200D 2642 FE0F` doesn't match `man construction worker: medium skin tone` (👷🏽‍♂️)")
  end
end

it "`1F477 1F3FD 200D 2642` (minimally-qualified) should match `man construction worker: medium skin tone` (👷🏽‍♂)" do
  if m = "👷🏽‍♂".match(Emoji::EMOJI_REGEX)
    "👷🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♂"
  else
    fail("`1F477 1F3FD 200D 2642` doesn't match `man construction worker: medium skin tone` (👷🏽‍♂)")
  end
end

it "`1F477 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man construction worker: medium-dark skin tone` (👷🏾‍♂️)" do
  if m = "👷🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "👷🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♂️"
  else
    fail("`1F477 1F3FE 200D 2642 FE0F` doesn't match `man construction worker: medium-dark skin tone` (👷🏾‍♂️)")
  end
end

it "`1F477 1F3FE 200D 2642` (minimally-qualified) should match `man construction worker: medium-dark skin tone` (👷🏾‍♂)" do
  if m = "👷🏾‍♂".match(Emoji::EMOJI_REGEX)
    "👷🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♂"
  else
    fail("`1F477 1F3FE 200D 2642` doesn't match `man construction worker: medium-dark skin tone` (👷🏾‍♂)")
  end
end

it "`1F477 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man construction worker: dark skin tone` (👷🏿‍♂️)" do
  if m = "👷🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "👷🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♂️"
  else
    fail("`1F477 1F3FF 200D 2642 FE0F` doesn't match `man construction worker: dark skin tone` (👷🏿‍♂️)")
  end
end

it "`1F477 1F3FF 200D 2642` (minimally-qualified) should match `man construction worker: dark skin tone` (👷🏿‍♂)" do
  if m = "👷🏿‍♂".match(Emoji::EMOJI_REGEX)
    "👷🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♂"
  else
    fail("`1F477 1F3FF 200D 2642` doesn't match `man construction worker: dark skin tone` (👷🏿‍♂)")
  end
end

it "`1F477 200D 2640 FE0F` (fully-qualified) should match `woman construction worker` (👷‍♀️)" do
  if m = "👷‍♀️".match(Emoji::EMOJI_REGEX)
    "👷‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♀️"
  else
    fail("`1F477 200D 2640 FE0F` doesn't match `woman construction worker` (👷‍♀️)")
  end
end

it "`1F477 200D 2640` (minimally-qualified) should match `woman construction worker` (👷‍♀)" do
  if m = "👷‍♀".match(Emoji::EMOJI_REGEX)
    "👷‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷‍♀"
  else
    fail("`1F477 200D 2640` doesn't match `woman construction worker` (👷‍♀)")
  end
end

it "`1F477 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: light skin tone` (👷🏻‍♀️)" do
  if m = "👷🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "👷🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♀️"
  else
    fail("`1F477 1F3FB 200D 2640 FE0F` doesn't match `woman construction worker: light skin tone` (👷🏻‍♀️)")
  end
end

it "`1F477 1F3FB 200D 2640` (minimally-qualified) should match `woman construction worker: light skin tone` (👷🏻‍♀)" do
  if m = "👷🏻‍♀".match(Emoji::EMOJI_REGEX)
    "👷🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏻‍♀"
  else
    fail("`1F477 1F3FB 200D 2640` doesn't match `woman construction worker: light skin tone` (👷🏻‍♀)")
  end
end

it "`1F477 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: medium-light skin tone` (👷🏼‍♀️)" do
  if m = "👷🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "👷🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♀️"
  else
    fail("`1F477 1F3FC 200D 2640 FE0F` doesn't match `woman construction worker: medium-light skin tone` (👷🏼‍♀️)")
  end
end

it "`1F477 1F3FC 200D 2640` (minimally-qualified) should match `woman construction worker: medium-light skin tone` (👷🏼‍♀)" do
  if m = "👷🏼‍♀".match(Emoji::EMOJI_REGEX)
    "👷🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏼‍♀"
  else
    fail("`1F477 1F3FC 200D 2640` doesn't match `woman construction worker: medium-light skin tone` (👷🏼‍♀)")
  end
end

it "`1F477 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: medium skin tone` (👷🏽‍♀️)" do
  if m = "👷🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "👷🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♀️"
  else
    fail("`1F477 1F3FD 200D 2640 FE0F` doesn't match `woman construction worker: medium skin tone` (👷🏽‍♀️)")
  end
end

it "`1F477 1F3FD 200D 2640` (minimally-qualified) should match `woman construction worker: medium skin tone` (👷🏽‍♀)" do
  if m = "👷🏽‍♀".match(Emoji::EMOJI_REGEX)
    "👷🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏽‍♀"
  else
    fail("`1F477 1F3FD 200D 2640` doesn't match `woman construction worker: medium skin tone` (👷🏽‍♀)")
  end
end

it "`1F477 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: medium-dark skin tone` (👷🏾‍♀️)" do
  if m = "👷🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "👷🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♀️"
  else
    fail("`1F477 1F3FE 200D 2640 FE0F` doesn't match `woman construction worker: medium-dark skin tone` (👷🏾‍♀️)")
  end
end

it "`1F477 1F3FE 200D 2640` (minimally-qualified) should match `woman construction worker: medium-dark skin tone` (👷🏾‍♀)" do
  if m = "👷🏾‍♀".match(Emoji::EMOJI_REGEX)
    "👷🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏾‍♀"
  else
    fail("`1F477 1F3FE 200D 2640` doesn't match `woman construction worker: medium-dark skin tone` (👷🏾‍♀)")
  end
end

it "`1F477 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman construction worker: dark skin tone` (👷🏿‍♀️)" do
  if m = "👷🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "👷🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♀️"
  else
    fail("`1F477 1F3FF 200D 2640 FE0F` doesn't match `woman construction worker: dark skin tone` (👷🏿‍♀️)")
  end
end

it "`1F477 1F3FF 200D 2640` (minimally-qualified) should match `woman construction worker: dark skin tone` (👷🏿‍♀)" do
  if m = "👷🏿‍♀".match(Emoji::EMOJI_REGEX)
    "👷🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👷🏿‍♀"
  else
    fail("`1F477 1F3FF 200D 2640` doesn't match `woman construction worker: dark skin tone` (👷🏿‍♀)")
  end
end

it "`1F934` (fully-qualified) should match `prince` (🤴)" do
  if m = "🤴".match(Emoji::EMOJI_REGEX)
    "🤴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴"
  else
    fail("`1F934` doesn't match `prince` (🤴)")
  end
end

it "`1F934 1F3FB` (fully-qualified) should match `prince: light skin tone` (🤴🏻)" do
  if m = "🤴🏻".match(Emoji::EMOJI_REGEX)
    "🤴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏻"
  else
    fail("`1F934 1F3FB` doesn't match `prince: light skin tone` (🤴🏻)")
  end
end

it "`1F934 1F3FC` (fully-qualified) should match `prince: medium-light skin tone` (🤴🏼)" do
  if m = "🤴🏼".match(Emoji::EMOJI_REGEX)
    "🤴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏼"
  else
    fail("`1F934 1F3FC` doesn't match `prince: medium-light skin tone` (🤴🏼)")
  end
end

it "`1F934 1F3FD` (fully-qualified) should match `prince: medium skin tone` (🤴🏽)" do
  if m = "🤴🏽".match(Emoji::EMOJI_REGEX)
    "🤴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏽"
  else
    fail("`1F934 1F3FD` doesn't match `prince: medium skin tone` (🤴🏽)")
  end
end

it "`1F934 1F3FE` (fully-qualified) should match `prince: medium-dark skin tone` (🤴🏾)" do
  if m = "🤴🏾".match(Emoji::EMOJI_REGEX)
    "🤴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏾"
  else
    fail("`1F934 1F3FE` doesn't match `prince: medium-dark skin tone` (🤴🏾)")
  end
end

it "`1F934 1F3FF` (fully-qualified) should match `prince: dark skin tone` (🤴🏿)" do
  if m = "🤴🏿".match(Emoji::EMOJI_REGEX)
    "🤴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤴🏿"
  else
    fail("`1F934 1F3FF` doesn't match `prince: dark skin tone` (🤴🏿)")
  end
end

it "`1F478` (fully-qualified) should match `princess` (👸)" do
  if m = "👸".match(Emoji::EMOJI_REGEX)
    "👸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸"
  else
    fail("`1F478` doesn't match `princess` (👸)")
  end
end

it "`1F478 1F3FB` (fully-qualified) should match `princess: light skin tone` (👸🏻)" do
  if m = "👸🏻".match(Emoji::EMOJI_REGEX)
    "👸🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏻"
  else
    fail("`1F478 1F3FB` doesn't match `princess: light skin tone` (👸🏻)")
  end
end

it "`1F478 1F3FC` (fully-qualified) should match `princess: medium-light skin tone` (👸🏼)" do
  if m = "👸🏼".match(Emoji::EMOJI_REGEX)
    "👸🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏼"
  else
    fail("`1F478 1F3FC` doesn't match `princess: medium-light skin tone` (👸🏼)")
  end
end

it "`1F478 1F3FD` (fully-qualified) should match `princess: medium skin tone` (👸🏽)" do
  if m = "👸🏽".match(Emoji::EMOJI_REGEX)
    "👸🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏽"
  else
    fail("`1F478 1F3FD` doesn't match `princess: medium skin tone` (👸🏽)")
  end
end

it "`1F478 1F3FE` (fully-qualified) should match `princess: medium-dark skin tone` (👸🏾)" do
  if m = "👸🏾".match(Emoji::EMOJI_REGEX)
    "👸🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏾"
  else
    fail("`1F478 1F3FE` doesn't match `princess: medium-dark skin tone` (👸🏾)")
  end
end

it "`1F478 1F3FF` (fully-qualified) should match `princess: dark skin tone` (👸🏿)" do
  if m = "👸🏿".match(Emoji::EMOJI_REGEX)
    "👸🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👸🏿"
  else
    fail("`1F478 1F3FF` doesn't match `princess: dark skin tone` (👸🏿)")
  end
end

it "`1F473` (fully-qualified) should match `person wearing turban` (👳)" do
  if m = "👳".match(Emoji::EMOJI_REGEX)
    "👳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳"
  else
    fail("`1F473` doesn't match `person wearing turban` (👳)")
  end
end

it "`1F473 1F3FB` (fully-qualified) should match `person wearing turban: light skin tone` (👳🏻)" do
  if m = "👳🏻".match(Emoji::EMOJI_REGEX)
    "👳🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻"
  else
    fail("`1F473 1F3FB` doesn't match `person wearing turban: light skin tone` (👳🏻)")
  end
end

it "`1F473 1F3FC` (fully-qualified) should match `person wearing turban: medium-light skin tone` (👳🏼)" do
  if m = "👳🏼".match(Emoji::EMOJI_REGEX)
    "👳🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼"
  else
    fail("`1F473 1F3FC` doesn't match `person wearing turban: medium-light skin tone` (👳🏼)")
  end
end

it "`1F473 1F3FD` (fully-qualified) should match `person wearing turban: medium skin tone` (👳🏽)" do
  if m = "👳🏽".match(Emoji::EMOJI_REGEX)
    "👳🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽"
  else
    fail("`1F473 1F3FD` doesn't match `person wearing turban: medium skin tone` (👳🏽)")
  end
end

it "`1F473 1F3FE` (fully-qualified) should match `person wearing turban: medium-dark skin tone` (👳🏾)" do
  if m = "👳🏾".match(Emoji::EMOJI_REGEX)
    "👳🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾"
  else
    fail("`1F473 1F3FE` doesn't match `person wearing turban: medium-dark skin tone` (👳🏾)")
  end
end

it "`1F473 1F3FF` (fully-qualified) should match `person wearing turban: dark skin tone` (👳🏿)" do
  if m = "👳🏿".match(Emoji::EMOJI_REGEX)
    "👳🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿"
  else
    fail("`1F473 1F3FF` doesn't match `person wearing turban: dark skin tone` (👳🏿)")
  end
end

it "`1F473 200D 2642 FE0F` (fully-qualified) should match `man wearing turban` (👳‍♂️)" do
  if m = "👳‍♂️".match(Emoji::EMOJI_REGEX)
    "👳‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♂️"
  else
    fail("`1F473 200D 2642 FE0F` doesn't match `man wearing turban` (👳‍♂️)")
  end
end

it "`1F473 200D 2642` (minimally-qualified) should match `man wearing turban` (👳‍♂)" do
  if m = "👳‍♂".match(Emoji::EMOJI_REGEX)
    "👳‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♂"
  else
    fail("`1F473 200D 2642` doesn't match `man wearing turban` (👳‍♂)")
  end
end

it "`1F473 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: light skin tone` (👳🏻‍♂️)" do
  if m = "👳🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "👳🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♂️"
  else
    fail("`1F473 1F3FB 200D 2642 FE0F` doesn't match `man wearing turban: light skin tone` (👳🏻‍♂️)")
  end
end

it "`1F473 1F3FB 200D 2642` (minimally-qualified) should match `man wearing turban: light skin tone` (👳🏻‍♂)" do
  if m = "👳🏻‍♂".match(Emoji::EMOJI_REGEX)
    "👳🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♂"
  else
    fail("`1F473 1F3FB 200D 2642` doesn't match `man wearing turban: light skin tone` (👳🏻‍♂)")
  end
end

it "`1F473 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: medium-light skin tone` (👳🏼‍♂️)" do
  if m = "👳🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "👳🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♂️"
  else
    fail("`1F473 1F3FC 200D 2642 FE0F` doesn't match `man wearing turban: medium-light skin tone` (👳🏼‍♂️)")
  end
end

it "`1F473 1F3FC 200D 2642` (minimally-qualified) should match `man wearing turban: medium-light skin tone` (👳🏼‍♂)" do
  if m = "👳🏼‍♂".match(Emoji::EMOJI_REGEX)
    "👳🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♂"
  else
    fail("`1F473 1F3FC 200D 2642` doesn't match `man wearing turban: medium-light skin tone` (👳🏼‍♂)")
  end
end

it "`1F473 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: medium skin tone` (👳🏽‍♂️)" do
  if m = "👳🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "👳🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♂️"
  else
    fail("`1F473 1F3FD 200D 2642 FE0F` doesn't match `man wearing turban: medium skin tone` (👳🏽‍♂️)")
  end
end

it "`1F473 1F3FD 200D 2642` (minimally-qualified) should match `man wearing turban: medium skin tone` (👳🏽‍♂)" do
  if m = "👳🏽‍♂".match(Emoji::EMOJI_REGEX)
    "👳🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♂"
  else
    fail("`1F473 1F3FD 200D 2642` doesn't match `man wearing turban: medium skin tone` (👳🏽‍♂)")
  end
end

it "`1F473 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: medium-dark skin tone` (👳🏾‍♂️)" do
  if m = "👳🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "👳🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♂️"
  else
    fail("`1F473 1F3FE 200D 2642 FE0F` doesn't match `man wearing turban: medium-dark skin tone` (👳🏾‍♂️)")
  end
end

it "`1F473 1F3FE 200D 2642` (minimally-qualified) should match `man wearing turban: medium-dark skin tone` (👳🏾‍♂)" do
  if m = "👳🏾‍♂".match(Emoji::EMOJI_REGEX)
    "👳🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♂"
  else
    fail("`1F473 1F3FE 200D 2642` doesn't match `man wearing turban: medium-dark skin tone` (👳🏾‍♂)")
  end
end

it "`1F473 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man wearing turban: dark skin tone` (👳🏿‍♂️)" do
  if m = "👳🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "👳🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♂️"
  else
    fail("`1F473 1F3FF 200D 2642 FE0F` doesn't match `man wearing turban: dark skin tone` (👳🏿‍♂️)")
  end
end

it "`1F473 1F3FF 200D 2642` (minimally-qualified) should match `man wearing turban: dark skin tone` (👳🏿‍♂)" do
  if m = "👳🏿‍♂".match(Emoji::EMOJI_REGEX)
    "👳🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♂"
  else
    fail("`1F473 1F3FF 200D 2642` doesn't match `man wearing turban: dark skin tone` (👳🏿‍♂)")
  end
end

it "`1F473 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban` (👳‍♀️)" do
  if m = "👳‍♀️".match(Emoji::EMOJI_REGEX)
    "👳‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♀️"
  else
    fail("`1F473 200D 2640 FE0F` doesn't match `woman wearing turban` (👳‍♀️)")
  end
end

it "`1F473 200D 2640` (minimally-qualified) should match `woman wearing turban` (👳‍♀)" do
  if m = "👳‍♀".match(Emoji::EMOJI_REGEX)
    "👳‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳‍♀"
  else
    fail("`1F473 200D 2640` doesn't match `woman wearing turban` (👳‍♀)")
  end
end

it "`1F473 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: light skin tone` (👳🏻‍♀️)" do
  if m = "👳🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "👳🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♀️"
  else
    fail("`1F473 1F3FB 200D 2640 FE0F` doesn't match `woman wearing turban: light skin tone` (👳🏻‍♀️)")
  end
end

it "`1F473 1F3FB 200D 2640` (minimally-qualified) should match `woman wearing turban: light skin tone` (👳🏻‍♀)" do
  if m = "👳🏻‍♀".match(Emoji::EMOJI_REGEX)
    "👳🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏻‍♀"
  else
    fail("`1F473 1F3FB 200D 2640` doesn't match `woman wearing turban: light skin tone` (👳🏻‍♀)")
  end
end

it "`1F473 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: medium-light skin tone` (👳🏼‍♀️)" do
  if m = "👳🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "👳🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♀️"
  else
    fail("`1F473 1F3FC 200D 2640 FE0F` doesn't match `woman wearing turban: medium-light skin tone` (👳🏼‍♀️)")
  end
end

it "`1F473 1F3FC 200D 2640` (minimally-qualified) should match `woman wearing turban: medium-light skin tone` (👳🏼‍♀)" do
  if m = "👳🏼‍♀".match(Emoji::EMOJI_REGEX)
    "👳🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏼‍♀"
  else
    fail("`1F473 1F3FC 200D 2640` doesn't match `woman wearing turban: medium-light skin tone` (👳🏼‍♀)")
  end
end

it "`1F473 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: medium skin tone` (👳🏽‍♀️)" do
  if m = "👳🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "👳🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♀️"
  else
    fail("`1F473 1F3FD 200D 2640 FE0F` doesn't match `woman wearing turban: medium skin tone` (👳🏽‍♀️)")
  end
end

it "`1F473 1F3FD 200D 2640` (minimally-qualified) should match `woman wearing turban: medium skin tone` (👳🏽‍♀)" do
  if m = "👳🏽‍♀".match(Emoji::EMOJI_REGEX)
    "👳🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏽‍♀"
  else
    fail("`1F473 1F3FD 200D 2640` doesn't match `woman wearing turban: medium skin tone` (👳🏽‍♀)")
  end
end

it "`1F473 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: medium-dark skin tone` (👳🏾‍♀️)" do
  if m = "👳🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "👳🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♀️"
  else
    fail("`1F473 1F3FE 200D 2640 FE0F` doesn't match `woman wearing turban: medium-dark skin tone` (👳🏾‍♀️)")
  end
end

it "`1F473 1F3FE 200D 2640` (minimally-qualified) should match `woman wearing turban: medium-dark skin tone` (👳🏾‍♀)" do
  if m = "👳🏾‍♀".match(Emoji::EMOJI_REGEX)
    "👳🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏾‍♀"
  else
    fail("`1F473 1F3FE 200D 2640` doesn't match `woman wearing turban: medium-dark skin tone` (👳🏾‍♀)")
  end
end

it "`1F473 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman wearing turban: dark skin tone` (👳🏿‍♀️)" do
  if m = "👳🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "👳🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♀️"
  else
    fail("`1F473 1F3FF 200D 2640 FE0F` doesn't match `woman wearing turban: dark skin tone` (👳🏿‍♀️)")
  end
end

it "`1F473 1F3FF 200D 2640` (minimally-qualified) should match `woman wearing turban: dark skin tone` (👳🏿‍♀)" do
  if m = "👳🏿‍♀".match(Emoji::EMOJI_REGEX)
    "👳🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👳🏿‍♀"
  else
    fail("`1F473 1F3FF 200D 2640` doesn't match `woman wearing turban: dark skin tone` (👳🏿‍♀)")
  end
end

it "`1F472` (fully-qualified) should match `man with Chinese cap` (👲)" do
  if m = "👲".match(Emoji::EMOJI_REGEX)
    "👲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲"
  else
    fail("`1F472` doesn't match `man with Chinese cap` (👲)")
  end
end

it "`1F472 1F3FB` (fully-qualified) should match `man with Chinese cap: light skin tone` (👲🏻)" do
  if m = "👲🏻".match(Emoji::EMOJI_REGEX)
    "👲🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏻"
  else
    fail("`1F472 1F3FB` doesn't match `man with Chinese cap: light skin tone` (👲🏻)")
  end
end

it "`1F472 1F3FC` (fully-qualified) should match `man with Chinese cap: medium-light skin tone` (👲🏼)" do
  if m = "👲🏼".match(Emoji::EMOJI_REGEX)
    "👲🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏼"
  else
    fail("`1F472 1F3FC` doesn't match `man with Chinese cap: medium-light skin tone` (👲🏼)")
  end
end

it "`1F472 1F3FD` (fully-qualified) should match `man with Chinese cap: medium skin tone` (👲🏽)" do
  if m = "👲🏽".match(Emoji::EMOJI_REGEX)
    "👲🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏽"
  else
    fail("`1F472 1F3FD` doesn't match `man with Chinese cap: medium skin tone` (👲🏽)")
  end
end

it "`1F472 1F3FE` (fully-qualified) should match `man with Chinese cap: medium-dark skin tone` (👲🏾)" do
  if m = "👲🏾".match(Emoji::EMOJI_REGEX)
    "👲🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏾"
  else
    fail("`1F472 1F3FE` doesn't match `man with Chinese cap: medium-dark skin tone` (👲🏾)")
  end
end

it "`1F472 1F3FF` (fully-qualified) should match `man with Chinese cap: dark skin tone` (👲🏿)" do
  if m = "👲🏿".match(Emoji::EMOJI_REGEX)
    "👲🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👲🏿"
  else
    fail("`1F472 1F3FF` doesn't match `man with Chinese cap: dark skin tone` (👲🏿)")
  end
end

it "`1F9D5` (fully-qualified) should match `woman with headscarf` (🧕)" do
  if m = "🧕".match(Emoji::EMOJI_REGEX)
    "🧕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕"
  else
    fail("`1F9D5` doesn't match `woman with headscarf` (🧕)")
  end
end

it "`1F9D5 1F3FB` (fully-qualified) should match `woman with headscarf: light skin tone` (🧕🏻)" do
  if m = "🧕🏻".match(Emoji::EMOJI_REGEX)
    "🧕🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏻"
  else
    fail("`1F9D5 1F3FB` doesn't match `woman with headscarf: light skin tone` (🧕🏻)")
  end
end

it "`1F9D5 1F3FC` (fully-qualified) should match `woman with headscarf: medium-light skin tone` (🧕🏼)" do
  if m = "🧕🏼".match(Emoji::EMOJI_REGEX)
    "🧕🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏼"
  else
    fail("`1F9D5 1F3FC` doesn't match `woman with headscarf: medium-light skin tone` (🧕🏼)")
  end
end

it "`1F9D5 1F3FD` (fully-qualified) should match `woman with headscarf: medium skin tone` (🧕🏽)" do
  if m = "🧕🏽".match(Emoji::EMOJI_REGEX)
    "🧕🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏽"
  else
    fail("`1F9D5 1F3FD` doesn't match `woman with headscarf: medium skin tone` (🧕🏽)")
  end
end

it "`1F9D5 1F3FE` (fully-qualified) should match `woman with headscarf: medium-dark skin tone` (🧕🏾)" do
  if m = "🧕🏾".match(Emoji::EMOJI_REGEX)
    "🧕🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏾"
  else
    fail("`1F9D5 1F3FE` doesn't match `woman with headscarf: medium-dark skin tone` (🧕🏾)")
  end
end

it "`1F9D5 1F3FF` (fully-qualified) should match `woman with headscarf: dark skin tone` (🧕🏿)" do
  if m = "🧕🏿".match(Emoji::EMOJI_REGEX)
    "🧕🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧕🏿"
  else
    fail("`1F9D5 1F3FF` doesn't match `woman with headscarf: dark skin tone` (🧕🏿)")
  end
end

it "`1F935` (fully-qualified) should match `man in tuxedo` (🤵)" do
  if m = "🤵".match(Emoji::EMOJI_REGEX)
    "🤵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵"
  else
    fail("`1F935` doesn't match `man in tuxedo` (🤵)")
  end
end

it "`1F935 1F3FB` (fully-qualified) should match `man in tuxedo: light skin tone` (🤵🏻)" do
  if m = "🤵🏻".match(Emoji::EMOJI_REGEX)
    "🤵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏻"
  else
    fail("`1F935 1F3FB` doesn't match `man in tuxedo: light skin tone` (🤵🏻)")
  end
end

it "`1F935 1F3FC` (fully-qualified) should match `man in tuxedo: medium-light skin tone` (🤵🏼)" do
  if m = "🤵🏼".match(Emoji::EMOJI_REGEX)
    "🤵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏼"
  else
    fail("`1F935 1F3FC` doesn't match `man in tuxedo: medium-light skin tone` (🤵🏼)")
  end
end

it "`1F935 1F3FD` (fully-qualified) should match `man in tuxedo: medium skin tone` (🤵🏽)" do
  if m = "🤵🏽".match(Emoji::EMOJI_REGEX)
    "🤵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏽"
  else
    fail("`1F935 1F3FD` doesn't match `man in tuxedo: medium skin tone` (🤵🏽)")
  end
end

it "`1F935 1F3FE` (fully-qualified) should match `man in tuxedo: medium-dark skin tone` (🤵🏾)" do
  if m = "🤵🏾".match(Emoji::EMOJI_REGEX)
    "🤵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏾"
  else
    fail("`1F935 1F3FE` doesn't match `man in tuxedo: medium-dark skin tone` (🤵🏾)")
  end
end

it "`1F935 1F3FF` (fully-qualified) should match `man in tuxedo: dark skin tone` (🤵🏿)" do
  if m = "🤵🏿".match(Emoji::EMOJI_REGEX)
    "🤵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤵🏿"
  else
    fail("`1F935 1F3FF` doesn't match `man in tuxedo: dark skin tone` (🤵🏿)")
  end
end

it "`1F470` (fully-qualified) should match `bride with veil` (👰)" do
  if m = "👰".match(Emoji::EMOJI_REGEX)
    "👰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰"
  else
    fail("`1F470` doesn't match `bride with veil` (👰)")
  end
end

it "`1F470 1F3FB` (fully-qualified) should match `bride with veil: light skin tone` (👰🏻)" do
  if m = "👰🏻".match(Emoji::EMOJI_REGEX)
    "👰🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏻"
  else
    fail("`1F470 1F3FB` doesn't match `bride with veil: light skin tone` (👰🏻)")
  end
end

it "`1F470 1F3FC` (fully-qualified) should match `bride with veil: medium-light skin tone` (👰🏼)" do
  if m = "👰🏼".match(Emoji::EMOJI_REGEX)
    "👰🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏼"
  else
    fail("`1F470 1F3FC` doesn't match `bride with veil: medium-light skin tone` (👰🏼)")
  end
end

it "`1F470 1F3FD` (fully-qualified) should match `bride with veil: medium skin tone` (👰🏽)" do
  if m = "👰🏽".match(Emoji::EMOJI_REGEX)
    "👰🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏽"
  else
    fail("`1F470 1F3FD` doesn't match `bride with veil: medium skin tone` (👰🏽)")
  end
end

it "`1F470 1F3FE` (fully-qualified) should match `bride with veil: medium-dark skin tone` (👰🏾)" do
  if m = "👰🏾".match(Emoji::EMOJI_REGEX)
    "👰🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏾"
  else
    fail("`1F470 1F3FE` doesn't match `bride with veil: medium-dark skin tone` (👰🏾)")
  end
end

it "`1F470 1F3FF` (fully-qualified) should match `bride with veil: dark skin tone` (👰🏿)" do
  if m = "👰🏿".match(Emoji::EMOJI_REGEX)
    "👰🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👰🏿"
  else
    fail("`1F470 1F3FF` doesn't match `bride with veil: dark skin tone` (👰🏿)")
  end
end

it "`1F930` (fully-qualified) should match `pregnant woman` (🤰)" do
  if m = "🤰".match(Emoji::EMOJI_REGEX)
    "🤰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰"
  else
    fail("`1F930` doesn't match `pregnant woman` (🤰)")
  end
end

it "`1F930 1F3FB` (fully-qualified) should match `pregnant woman: light skin tone` (🤰🏻)" do
  if m = "🤰🏻".match(Emoji::EMOJI_REGEX)
    "🤰🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏻"
  else
    fail("`1F930 1F3FB` doesn't match `pregnant woman: light skin tone` (🤰🏻)")
  end
end

it "`1F930 1F3FC` (fully-qualified) should match `pregnant woman: medium-light skin tone` (🤰🏼)" do
  if m = "🤰🏼".match(Emoji::EMOJI_REGEX)
    "🤰🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏼"
  else
    fail("`1F930 1F3FC` doesn't match `pregnant woman: medium-light skin tone` (🤰🏼)")
  end
end

it "`1F930 1F3FD` (fully-qualified) should match `pregnant woman: medium skin tone` (🤰🏽)" do
  if m = "🤰🏽".match(Emoji::EMOJI_REGEX)
    "🤰🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏽"
  else
    fail("`1F930 1F3FD` doesn't match `pregnant woman: medium skin tone` (🤰🏽)")
  end
end

it "`1F930 1F3FE` (fully-qualified) should match `pregnant woman: medium-dark skin tone` (🤰🏾)" do
  if m = "🤰🏾".match(Emoji::EMOJI_REGEX)
    "🤰🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏾"
  else
    fail("`1F930 1F3FE` doesn't match `pregnant woman: medium-dark skin tone` (🤰🏾)")
  end
end

it "`1F930 1F3FF` (fully-qualified) should match `pregnant woman: dark skin tone` (🤰🏿)" do
  if m = "🤰🏿".match(Emoji::EMOJI_REGEX)
    "🤰🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤰🏿"
  else
    fail("`1F930 1F3FF` doesn't match `pregnant woman: dark skin tone` (🤰🏿)")
  end
end

it "`1F931` (fully-qualified) should match `breast-feeding` (🤱)" do
  if m = "🤱".match(Emoji::EMOJI_REGEX)
    "🤱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱"
  else
    fail("`1F931` doesn't match `breast-feeding` (🤱)")
  end
end

it "`1F931 1F3FB` (fully-qualified) should match `breast-feeding: light skin tone` (🤱🏻)" do
  if m = "🤱🏻".match(Emoji::EMOJI_REGEX)
    "🤱🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏻"
  else
    fail("`1F931 1F3FB` doesn't match `breast-feeding: light skin tone` (🤱🏻)")
  end
end

it "`1F931 1F3FC` (fully-qualified) should match `breast-feeding: medium-light skin tone` (🤱🏼)" do
  if m = "🤱🏼".match(Emoji::EMOJI_REGEX)
    "🤱🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏼"
  else
    fail("`1F931 1F3FC` doesn't match `breast-feeding: medium-light skin tone` (🤱🏼)")
  end
end

it "`1F931 1F3FD` (fully-qualified) should match `breast-feeding: medium skin tone` (🤱🏽)" do
  if m = "🤱🏽".match(Emoji::EMOJI_REGEX)
    "🤱🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏽"
  else
    fail("`1F931 1F3FD` doesn't match `breast-feeding: medium skin tone` (🤱🏽)")
  end
end

it "`1F931 1F3FE` (fully-qualified) should match `breast-feeding: medium-dark skin tone` (🤱🏾)" do
  if m = "🤱🏾".match(Emoji::EMOJI_REGEX)
    "🤱🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏾"
  else
    fail("`1F931 1F3FE` doesn't match `breast-feeding: medium-dark skin tone` (🤱🏾)")
  end
end

it "`1F931 1F3FF` (fully-qualified) should match `breast-feeding: dark skin tone` (🤱🏿)" do
  if m = "🤱🏿".match(Emoji::EMOJI_REGEX)
    "🤱🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤱🏿"
  else
    fail("`1F931 1F3FF` doesn't match `breast-feeding: dark skin tone` (🤱🏿)")
  end
end

it "`1F47C` (fully-qualified) should match `baby angel` (👼)" do
  if m = "👼".match(Emoji::EMOJI_REGEX)
    "👼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼"
  else
    fail("`1F47C` doesn't match `baby angel` (👼)")
  end
end

it "`1F47C 1F3FB` (fully-qualified) should match `baby angel: light skin tone` (👼🏻)" do
  if m = "👼🏻".match(Emoji::EMOJI_REGEX)
    "👼🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏻"
  else
    fail("`1F47C 1F3FB` doesn't match `baby angel: light skin tone` (👼🏻)")
  end
end

it "`1F47C 1F3FC` (fully-qualified) should match `baby angel: medium-light skin tone` (👼🏼)" do
  if m = "👼🏼".match(Emoji::EMOJI_REGEX)
    "👼🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏼"
  else
    fail("`1F47C 1F3FC` doesn't match `baby angel: medium-light skin tone` (👼🏼)")
  end
end

it "`1F47C 1F3FD` (fully-qualified) should match `baby angel: medium skin tone` (👼🏽)" do
  if m = "👼🏽".match(Emoji::EMOJI_REGEX)
    "👼🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏽"
  else
    fail("`1F47C 1F3FD` doesn't match `baby angel: medium skin tone` (👼🏽)")
  end
end

it "`1F47C 1F3FE` (fully-qualified) should match `baby angel: medium-dark skin tone` (👼🏾)" do
  if m = "👼🏾".match(Emoji::EMOJI_REGEX)
    "👼🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏾"
  else
    fail("`1F47C 1F3FE` doesn't match `baby angel: medium-dark skin tone` (👼🏾)")
  end
end

it "`1F47C 1F3FF` (fully-qualified) should match `baby angel: dark skin tone` (👼🏿)" do
  if m = "👼🏿".match(Emoji::EMOJI_REGEX)
    "👼🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👼🏿"
  else
    fail("`1F47C 1F3FF` doesn't match `baby angel: dark skin tone` (👼🏿)")
  end
end

it "`1F385` (fully-qualified) should match `Santa Claus` (🎅)" do
  if m = "🎅".match(Emoji::EMOJI_REGEX)
    "🎅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅"
  else
    fail("`1F385` doesn't match `Santa Claus` (🎅)")
  end
end

it "`1F385 1F3FB` (fully-qualified) should match `Santa Claus: light skin tone` (🎅🏻)" do
  if m = "🎅🏻".match(Emoji::EMOJI_REGEX)
    "🎅🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏻"
  else
    fail("`1F385 1F3FB` doesn't match `Santa Claus: light skin tone` (🎅🏻)")
  end
end

it "`1F385 1F3FC` (fully-qualified) should match `Santa Claus: medium-light skin tone` (🎅🏼)" do
  if m = "🎅🏼".match(Emoji::EMOJI_REGEX)
    "🎅🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏼"
  else
    fail("`1F385 1F3FC` doesn't match `Santa Claus: medium-light skin tone` (🎅🏼)")
  end
end

it "`1F385 1F3FD` (fully-qualified) should match `Santa Claus: medium skin tone` (🎅🏽)" do
  if m = "🎅🏽".match(Emoji::EMOJI_REGEX)
    "🎅🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏽"
  else
    fail("`1F385 1F3FD` doesn't match `Santa Claus: medium skin tone` (🎅🏽)")
  end
end

it "`1F385 1F3FE` (fully-qualified) should match `Santa Claus: medium-dark skin tone` (🎅🏾)" do
  if m = "🎅🏾".match(Emoji::EMOJI_REGEX)
    "🎅🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏾"
  else
    fail("`1F385 1F3FE` doesn't match `Santa Claus: medium-dark skin tone` (🎅🏾)")
  end
end

it "`1F385 1F3FF` (fully-qualified) should match `Santa Claus: dark skin tone` (🎅🏿)" do
  if m = "🎅🏿".match(Emoji::EMOJI_REGEX)
    "🎅🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎅🏿"
  else
    fail("`1F385 1F3FF` doesn't match `Santa Claus: dark skin tone` (🎅🏿)")
  end
end

it "`1F936` (fully-qualified) should match `Mrs. Claus` (🤶)" do
  if m = "🤶".match(Emoji::EMOJI_REGEX)
    "🤶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶"
  else
    fail("`1F936` doesn't match `Mrs. Claus` (🤶)")
  end
end

it "`1F936 1F3FB` (fully-qualified) should match `Mrs. Claus: light skin tone` (🤶🏻)" do
  if m = "🤶🏻".match(Emoji::EMOJI_REGEX)
    "🤶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏻"
  else
    fail("`1F936 1F3FB` doesn't match `Mrs. Claus: light skin tone` (🤶🏻)")
  end
end

it "`1F936 1F3FC` (fully-qualified) should match `Mrs. Claus: medium-light skin tone` (🤶🏼)" do
  if m = "🤶🏼".match(Emoji::EMOJI_REGEX)
    "🤶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏼"
  else
    fail("`1F936 1F3FC` doesn't match `Mrs. Claus: medium-light skin tone` (🤶🏼)")
  end
end

it "`1F936 1F3FD` (fully-qualified) should match `Mrs. Claus: medium skin tone` (🤶🏽)" do
  if m = "🤶🏽".match(Emoji::EMOJI_REGEX)
    "🤶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏽"
  else
    fail("`1F936 1F3FD` doesn't match `Mrs. Claus: medium skin tone` (🤶🏽)")
  end
end

it "`1F936 1F3FE` (fully-qualified) should match `Mrs. Claus: medium-dark skin tone` (🤶🏾)" do
  if m = "🤶🏾".match(Emoji::EMOJI_REGEX)
    "🤶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏾"
  else
    fail("`1F936 1F3FE` doesn't match `Mrs. Claus: medium-dark skin tone` (🤶🏾)")
  end
end

it "`1F936 1F3FF` (fully-qualified) should match `Mrs. Claus: dark skin tone` (🤶🏿)" do
  if m = "🤶🏿".match(Emoji::EMOJI_REGEX)
    "🤶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤶🏿"
  else
    fail("`1F936 1F3FF` doesn't match `Mrs. Claus: dark skin tone` (🤶🏿)")
  end
end

it "`1F9B8` (fully-qualified) should match `superhero` (🦸)" do
  if m = "🦸".match(Emoji::EMOJI_REGEX)
    "🦸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸"
  else
    fail("`1F9B8` doesn't match `superhero` (🦸)")
  end
end

it "`1F9B8 1F3FB` (fully-qualified) should match `superhero: light skin tone` (🦸🏻)" do
  if m = "🦸🏻".match(Emoji::EMOJI_REGEX)
    "🦸🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻"
  else
    fail("`1F9B8 1F3FB` doesn't match `superhero: light skin tone` (🦸🏻)")
  end
end

it "`1F9B8 1F3FC` (fully-qualified) should match `superhero: medium-light skin tone` (🦸🏼)" do
  if m = "🦸🏼".match(Emoji::EMOJI_REGEX)
    "🦸🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼"
  else
    fail("`1F9B8 1F3FC` doesn't match `superhero: medium-light skin tone` (🦸🏼)")
  end
end

it "`1F9B8 1F3FD` (fully-qualified) should match `superhero: medium skin tone` (🦸🏽)" do
  if m = "🦸🏽".match(Emoji::EMOJI_REGEX)
    "🦸🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽"
  else
    fail("`1F9B8 1F3FD` doesn't match `superhero: medium skin tone` (🦸🏽)")
  end
end

it "`1F9B8 1F3FE` (fully-qualified) should match `superhero: medium-dark skin tone` (🦸🏾)" do
  if m = "🦸🏾".match(Emoji::EMOJI_REGEX)
    "🦸🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾"
  else
    fail("`1F9B8 1F3FE` doesn't match `superhero: medium-dark skin tone` (🦸🏾)")
  end
end

it "`1F9B8 1F3FF` (fully-qualified) should match `superhero: dark skin tone` (🦸🏿)" do
  if m = "🦸🏿".match(Emoji::EMOJI_REGEX)
    "🦸🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿"
  else
    fail("`1F9B8 1F3FF` doesn't match `superhero: dark skin tone` (🦸🏿)")
  end
end

it "`1F9B8 200D 2642 FE0F` (fully-qualified) should match `man superhero` (🦸‍♂️)" do
  if m = "🦸‍♂️".match(Emoji::EMOJI_REGEX)
    "🦸‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♂️"
  else
    fail("`1F9B8 200D 2642 FE0F` doesn't match `man superhero` (🦸‍♂️)")
  end
end

it "`1F9B8 200D 2642` (minimally-qualified) should match `man superhero` (🦸‍♂)" do
  if m = "🦸‍♂".match(Emoji::EMOJI_REGEX)
    "🦸‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♂"
  else
    fail("`1F9B8 200D 2642` doesn't match `man superhero` (🦸‍♂)")
  end
end

it "`1F9B8 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man superhero: light skin tone` (🦸🏻‍♂️)" do
  if m = "🦸🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🦸🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♂️"
  else
    fail("`1F9B8 1F3FB 200D 2642 FE0F` doesn't match `man superhero: light skin tone` (🦸🏻‍♂️)")
  end
end

it "`1F9B8 1F3FB 200D 2642` (minimally-qualified) should match `man superhero: light skin tone` (🦸🏻‍♂)" do
  if m = "🦸🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🦸🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♂"
  else
    fail("`1F9B8 1F3FB 200D 2642` doesn't match `man superhero: light skin tone` (🦸🏻‍♂)")
  end
end

it "`1F9B8 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man superhero: medium-light skin tone` (🦸🏼‍♂️)" do
  if m = "🦸🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🦸🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♂️"
  else
    fail("`1F9B8 1F3FC 200D 2642 FE0F` doesn't match `man superhero: medium-light skin tone` (🦸🏼‍♂️)")
  end
end

it "`1F9B8 1F3FC 200D 2642` (minimally-qualified) should match `man superhero: medium-light skin tone` (🦸🏼‍♂)" do
  if m = "🦸🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🦸🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♂"
  else
    fail("`1F9B8 1F3FC 200D 2642` doesn't match `man superhero: medium-light skin tone` (🦸🏼‍♂)")
  end
end

it "`1F9B8 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man superhero: medium skin tone` (🦸🏽‍♂️)" do
  if m = "🦸🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🦸🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♂️"
  else
    fail("`1F9B8 1F3FD 200D 2642 FE0F` doesn't match `man superhero: medium skin tone` (🦸🏽‍♂️)")
  end
end

it "`1F9B8 1F3FD 200D 2642` (minimally-qualified) should match `man superhero: medium skin tone` (🦸🏽‍♂)" do
  if m = "🦸🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🦸🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♂"
  else
    fail("`1F9B8 1F3FD 200D 2642` doesn't match `man superhero: medium skin tone` (🦸🏽‍♂)")
  end
end

it "`1F9B8 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man superhero: medium-dark skin tone` (🦸🏾‍♂️)" do
  if m = "🦸🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🦸🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♂️"
  else
    fail("`1F9B8 1F3FE 200D 2642 FE0F` doesn't match `man superhero: medium-dark skin tone` (🦸🏾‍♂️)")
  end
end

it "`1F9B8 1F3FE 200D 2642` (minimally-qualified) should match `man superhero: medium-dark skin tone` (🦸🏾‍♂)" do
  if m = "🦸🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🦸🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♂"
  else
    fail("`1F9B8 1F3FE 200D 2642` doesn't match `man superhero: medium-dark skin tone` (🦸🏾‍♂)")
  end
end

it "`1F9B8 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man superhero: dark skin tone` (🦸🏿‍♂️)" do
  if m = "🦸🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🦸🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♂️"
  else
    fail("`1F9B8 1F3FF 200D 2642 FE0F` doesn't match `man superhero: dark skin tone` (🦸🏿‍♂️)")
  end
end

it "`1F9B8 1F3FF 200D 2642` (minimally-qualified) should match `man superhero: dark skin tone` (🦸🏿‍♂)" do
  if m = "🦸🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🦸🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♂"
  else
    fail("`1F9B8 1F3FF 200D 2642` doesn't match `man superhero: dark skin tone` (🦸🏿‍♂)")
  end
end

it "`1F9B8 200D 2640 FE0F` (fully-qualified) should match `woman superhero` (🦸‍♀️)" do
  if m = "🦸‍♀️".match(Emoji::EMOJI_REGEX)
    "🦸‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♀️"
  else
    fail("`1F9B8 200D 2640 FE0F` doesn't match `woman superhero` (🦸‍♀️)")
  end
end

it "`1F9B8 200D 2640` (minimally-qualified) should match `woman superhero` (🦸‍♀)" do
  if m = "🦸‍♀".match(Emoji::EMOJI_REGEX)
    "🦸‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸‍♀"
  else
    fail("`1F9B8 200D 2640` doesn't match `woman superhero` (🦸‍♀)")
  end
end

it "`1F9B8 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman superhero: light skin tone` (🦸🏻‍♀️)" do
  if m = "🦸🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🦸🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♀️"
  else
    fail("`1F9B8 1F3FB 200D 2640 FE0F` doesn't match `woman superhero: light skin tone` (🦸🏻‍♀️)")
  end
end

it "`1F9B8 1F3FB 200D 2640` (minimally-qualified) should match `woman superhero: light skin tone` (🦸🏻‍♀)" do
  if m = "🦸🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🦸🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏻‍♀"
  else
    fail("`1F9B8 1F3FB 200D 2640` doesn't match `woman superhero: light skin tone` (🦸🏻‍♀)")
  end
end

it "`1F9B8 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman superhero: medium-light skin tone` (🦸🏼‍♀️)" do
  if m = "🦸🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🦸🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♀️"
  else
    fail("`1F9B8 1F3FC 200D 2640 FE0F` doesn't match `woman superhero: medium-light skin tone` (🦸🏼‍♀️)")
  end
end

it "`1F9B8 1F3FC 200D 2640` (minimally-qualified) should match `woman superhero: medium-light skin tone` (🦸🏼‍♀)" do
  if m = "🦸🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🦸🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏼‍♀"
  else
    fail("`1F9B8 1F3FC 200D 2640` doesn't match `woman superhero: medium-light skin tone` (🦸🏼‍♀)")
  end
end

it "`1F9B8 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman superhero: medium skin tone` (🦸🏽‍♀️)" do
  if m = "🦸🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🦸🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♀️"
  else
    fail("`1F9B8 1F3FD 200D 2640 FE0F` doesn't match `woman superhero: medium skin tone` (🦸🏽‍♀️)")
  end
end

it "`1F9B8 1F3FD 200D 2640` (minimally-qualified) should match `woman superhero: medium skin tone` (🦸🏽‍♀)" do
  if m = "🦸🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🦸🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏽‍♀"
  else
    fail("`1F9B8 1F3FD 200D 2640` doesn't match `woman superhero: medium skin tone` (🦸🏽‍♀)")
  end
end

it "`1F9B8 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman superhero: medium-dark skin tone` (🦸🏾‍♀️)" do
  if m = "🦸🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🦸🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♀️"
  else
    fail("`1F9B8 1F3FE 200D 2640 FE0F` doesn't match `woman superhero: medium-dark skin tone` (🦸🏾‍♀️)")
  end
end

it "`1F9B8 1F3FE 200D 2640` (minimally-qualified) should match `woman superhero: medium-dark skin tone` (🦸🏾‍♀)" do
  if m = "🦸🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🦸🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏾‍♀"
  else
    fail("`1F9B8 1F3FE 200D 2640` doesn't match `woman superhero: medium-dark skin tone` (🦸🏾‍♀)")
  end
end

it "`1F9B8 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman superhero: dark skin tone` (🦸🏿‍♀️)" do
  if m = "🦸🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🦸🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♀️"
  else
    fail("`1F9B8 1F3FF 200D 2640 FE0F` doesn't match `woman superhero: dark skin tone` (🦸🏿‍♀️)")
  end
end

it "`1F9B8 1F3FF 200D 2640` (minimally-qualified) should match `woman superhero: dark skin tone` (🦸🏿‍♀)" do
  if m = "🦸🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🦸🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦸🏿‍♀"
  else
    fail("`1F9B8 1F3FF 200D 2640` doesn't match `woman superhero: dark skin tone` (🦸🏿‍♀)")
  end
end

it "`1F9B9` (fully-qualified) should match `supervillain` (🦹)" do
  if m = "🦹".match(Emoji::EMOJI_REGEX)
    "🦹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹"
  else
    fail("`1F9B9` doesn't match `supervillain` (🦹)")
  end
end

it "`1F9B9 1F3FB` (fully-qualified) should match `supervillain: light skin tone` (🦹🏻)" do
  if m = "🦹🏻".match(Emoji::EMOJI_REGEX)
    "🦹🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻"
  else
    fail("`1F9B9 1F3FB` doesn't match `supervillain: light skin tone` (🦹🏻)")
  end
end

it "`1F9B9 1F3FC` (fully-qualified) should match `supervillain: medium-light skin tone` (🦹🏼)" do
  if m = "🦹🏼".match(Emoji::EMOJI_REGEX)
    "🦹🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼"
  else
    fail("`1F9B9 1F3FC` doesn't match `supervillain: medium-light skin tone` (🦹🏼)")
  end
end

it "`1F9B9 1F3FD` (fully-qualified) should match `supervillain: medium skin tone` (🦹🏽)" do
  if m = "🦹🏽".match(Emoji::EMOJI_REGEX)
    "🦹🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽"
  else
    fail("`1F9B9 1F3FD` doesn't match `supervillain: medium skin tone` (🦹🏽)")
  end
end

it "`1F9B9 1F3FE` (fully-qualified) should match `supervillain: medium-dark skin tone` (🦹🏾)" do
  if m = "🦹🏾".match(Emoji::EMOJI_REGEX)
    "🦹🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾"
  else
    fail("`1F9B9 1F3FE` doesn't match `supervillain: medium-dark skin tone` (🦹🏾)")
  end
end

it "`1F9B9 1F3FF` (fully-qualified) should match `supervillain: dark skin tone` (🦹🏿)" do
  if m = "🦹🏿".match(Emoji::EMOJI_REGEX)
    "🦹🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿"
  else
    fail("`1F9B9 1F3FF` doesn't match `supervillain: dark skin tone` (🦹🏿)")
  end
end

it "`1F9B9 200D 2642 FE0F` (fully-qualified) should match `man supervillain` (🦹‍♂️)" do
  if m = "🦹‍♂️".match(Emoji::EMOJI_REGEX)
    "🦹‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♂️"
  else
    fail("`1F9B9 200D 2642 FE0F` doesn't match `man supervillain` (🦹‍♂️)")
  end
end

it "`1F9B9 200D 2642` (minimally-qualified) should match `man supervillain` (🦹‍♂)" do
  if m = "🦹‍♂".match(Emoji::EMOJI_REGEX)
    "🦹‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♂"
  else
    fail("`1F9B9 200D 2642` doesn't match `man supervillain` (🦹‍♂)")
  end
end

it "`1F9B9 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man supervillain: light skin tone` (🦹🏻‍♂️)" do
  if m = "🦹🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🦹🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♂️"
  else
    fail("`1F9B9 1F3FB 200D 2642 FE0F` doesn't match `man supervillain: light skin tone` (🦹🏻‍♂️)")
  end
end

it "`1F9B9 1F3FB 200D 2642` (minimally-qualified) should match `man supervillain: light skin tone` (🦹🏻‍♂)" do
  if m = "🦹🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🦹🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♂"
  else
    fail("`1F9B9 1F3FB 200D 2642` doesn't match `man supervillain: light skin tone` (🦹🏻‍♂)")
  end
end

it "`1F9B9 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man supervillain: medium-light skin tone` (🦹🏼‍♂️)" do
  if m = "🦹🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🦹🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♂️"
  else
    fail("`1F9B9 1F3FC 200D 2642 FE0F` doesn't match `man supervillain: medium-light skin tone` (🦹🏼‍♂️)")
  end
end

it "`1F9B9 1F3FC 200D 2642` (minimally-qualified) should match `man supervillain: medium-light skin tone` (🦹🏼‍♂)" do
  if m = "🦹🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🦹🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♂"
  else
    fail("`1F9B9 1F3FC 200D 2642` doesn't match `man supervillain: medium-light skin tone` (🦹🏼‍♂)")
  end
end

it "`1F9B9 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man supervillain: medium skin tone` (🦹🏽‍♂️)" do
  if m = "🦹🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🦹🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♂️"
  else
    fail("`1F9B9 1F3FD 200D 2642 FE0F` doesn't match `man supervillain: medium skin tone` (🦹🏽‍♂️)")
  end
end

it "`1F9B9 1F3FD 200D 2642` (minimally-qualified) should match `man supervillain: medium skin tone` (🦹🏽‍♂)" do
  if m = "🦹🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🦹🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♂"
  else
    fail("`1F9B9 1F3FD 200D 2642` doesn't match `man supervillain: medium skin tone` (🦹🏽‍♂)")
  end
end

it "`1F9B9 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man supervillain: medium-dark skin tone` (🦹🏾‍♂️)" do
  if m = "🦹🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🦹🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♂️"
  else
    fail("`1F9B9 1F3FE 200D 2642 FE0F` doesn't match `man supervillain: medium-dark skin tone` (🦹🏾‍♂️)")
  end
end

it "`1F9B9 1F3FE 200D 2642` (minimally-qualified) should match `man supervillain: medium-dark skin tone` (🦹🏾‍♂)" do
  if m = "🦹🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🦹🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♂"
  else
    fail("`1F9B9 1F3FE 200D 2642` doesn't match `man supervillain: medium-dark skin tone` (🦹🏾‍♂)")
  end
end

it "`1F9B9 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man supervillain: dark skin tone` (🦹🏿‍♂️)" do
  if m = "🦹🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🦹🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♂️"
  else
    fail("`1F9B9 1F3FF 200D 2642 FE0F` doesn't match `man supervillain: dark skin tone` (🦹🏿‍♂️)")
  end
end

it "`1F9B9 1F3FF 200D 2642` (minimally-qualified) should match `man supervillain: dark skin tone` (🦹🏿‍♂)" do
  if m = "🦹🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🦹🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♂"
  else
    fail("`1F9B9 1F3FF 200D 2642` doesn't match `man supervillain: dark skin tone` (🦹🏿‍♂)")
  end
end

it "`1F9B9 200D 2640 FE0F` (fully-qualified) should match `woman supervillain` (🦹‍♀️)" do
  if m = "🦹‍♀️".match(Emoji::EMOJI_REGEX)
    "🦹‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♀️"
  else
    fail("`1F9B9 200D 2640 FE0F` doesn't match `woman supervillain` (🦹‍♀️)")
  end
end

it "`1F9B9 200D 2640` (minimally-qualified) should match `woman supervillain` (🦹‍♀)" do
  if m = "🦹‍♀".match(Emoji::EMOJI_REGEX)
    "🦹‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹‍♀"
  else
    fail("`1F9B9 200D 2640` doesn't match `woman supervillain` (🦹‍♀)")
  end
end

it "`1F9B9 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: light skin tone` (🦹🏻‍♀️)" do
  if m = "🦹🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🦹🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♀️"
  else
    fail("`1F9B9 1F3FB 200D 2640 FE0F` doesn't match `woman supervillain: light skin tone` (🦹🏻‍♀️)")
  end
end

it "`1F9B9 1F3FB 200D 2640` (minimally-qualified) should match `woman supervillain: light skin tone` (🦹🏻‍♀)" do
  if m = "🦹🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🦹🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏻‍♀"
  else
    fail("`1F9B9 1F3FB 200D 2640` doesn't match `woman supervillain: light skin tone` (🦹🏻‍♀)")
  end
end

it "`1F9B9 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: medium-light skin tone` (🦹🏼‍♀️)" do
  if m = "🦹🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🦹🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♀️"
  else
    fail("`1F9B9 1F3FC 200D 2640 FE0F` doesn't match `woman supervillain: medium-light skin tone` (🦹🏼‍♀️)")
  end
end

it "`1F9B9 1F3FC 200D 2640` (minimally-qualified) should match `woman supervillain: medium-light skin tone` (🦹🏼‍♀)" do
  if m = "🦹🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🦹🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏼‍♀"
  else
    fail("`1F9B9 1F3FC 200D 2640` doesn't match `woman supervillain: medium-light skin tone` (🦹🏼‍♀)")
  end
end

it "`1F9B9 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: medium skin tone` (🦹🏽‍♀️)" do
  if m = "🦹🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🦹🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♀️"
  else
    fail("`1F9B9 1F3FD 200D 2640 FE0F` doesn't match `woman supervillain: medium skin tone` (🦹🏽‍♀️)")
  end
end

it "`1F9B9 1F3FD 200D 2640` (minimally-qualified) should match `woman supervillain: medium skin tone` (🦹🏽‍♀)" do
  if m = "🦹🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🦹🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏽‍♀"
  else
    fail("`1F9B9 1F3FD 200D 2640` doesn't match `woman supervillain: medium skin tone` (🦹🏽‍♀)")
  end
end

it "`1F9B9 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: medium-dark skin tone` (🦹🏾‍♀️)" do
  if m = "🦹🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🦹🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♀️"
  else
    fail("`1F9B9 1F3FE 200D 2640 FE0F` doesn't match `woman supervillain: medium-dark skin tone` (🦹🏾‍♀️)")
  end
end

it "`1F9B9 1F3FE 200D 2640` (minimally-qualified) should match `woman supervillain: medium-dark skin tone` (🦹🏾‍♀)" do
  if m = "🦹🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🦹🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏾‍♀"
  else
    fail("`1F9B9 1F3FE 200D 2640` doesn't match `woman supervillain: medium-dark skin tone` (🦹🏾‍♀)")
  end
end

it "`1F9B9 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman supervillain: dark skin tone` (🦹🏿‍♀️)" do
  if m = "🦹🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🦹🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♀️"
  else
    fail("`1F9B9 1F3FF 200D 2640 FE0F` doesn't match `woman supervillain: dark skin tone` (🦹🏿‍♀️)")
  end
end

it "`1F9B9 1F3FF 200D 2640` (minimally-qualified) should match `woman supervillain: dark skin tone` (🦹🏿‍♀)" do
  if m = "🦹🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🦹🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦹🏿‍♀"
  else
    fail("`1F9B9 1F3FF 200D 2640` doesn't match `woman supervillain: dark skin tone` (🦹🏿‍♀)")
  end
end

it "`1F9D9` (fully-qualified) should match `mage` (🧙)" do
  if m = "🧙".match(Emoji::EMOJI_REGEX)
    "🧙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙"
  else
    fail("`1F9D9` doesn't match `mage` (🧙)")
  end
end

it "`1F9D9 1F3FB` (fully-qualified) should match `mage: light skin tone` (🧙🏻)" do
  if m = "🧙🏻".match(Emoji::EMOJI_REGEX)
    "🧙🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻"
  else
    fail("`1F9D9 1F3FB` doesn't match `mage: light skin tone` (🧙🏻)")
  end
end

it "`1F9D9 1F3FC` (fully-qualified) should match `mage: medium-light skin tone` (🧙🏼)" do
  if m = "🧙🏼".match(Emoji::EMOJI_REGEX)
    "🧙🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼"
  else
    fail("`1F9D9 1F3FC` doesn't match `mage: medium-light skin tone` (🧙🏼)")
  end
end

it "`1F9D9 1F3FD` (fully-qualified) should match `mage: medium skin tone` (🧙🏽)" do
  if m = "🧙🏽".match(Emoji::EMOJI_REGEX)
    "🧙🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽"
  else
    fail("`1F9D9 1F3FD` doesn't match `mage: medium skin tone` (🧙🏽)")
  end
end

it "`1F9D9 1F3FE` (fully-qualified) should match `mage: medium-dark skin tone` (🧙🏾)" do
  if m = "🧙🏾".match(Emoji::EMOJI_REGEX)
    "🧙🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾"
  else
    fail("`1F9D9 1F3FE` doesn't match `mage: medium-dark skin tone` (🧙🏾)")
  end
end

it "`1F9D9 1F3FF` (fully-qualified) should match `mage: dark skin tone` (🧙🏿)" do
  if m = "🧙🏿".match(Emoji::EMOJI_REGEX)
    "🧙🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿"
  else
    fail("`1F9D9 1F3FF` doesn't match `mage: dark skin tone` (🧙🏿)")
  end
end

it "`1F9D9 200D 2642 FE0F` (fully-qualified) should match `man mage` (🧙‍♂️)" do
  if m = "🧙‍♂️".match(Emoji::EMOJI_REGEX)
    "🧙‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♂️"
  else
    fail("`1F9D9 200D 2642 FE0F` doesn't match `man mage` (🧙‍♂️)")
  end
end

it "`1F9D9 200D 2642` (minimally-qualified) should match `man mage` (🧙‍♂)" do
  if m = "🧙‍♂".match(Emoji::EMOJI_REGEX)
    "🧙‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♂"
  else
    fail("`1F9D9 200D 2642` doesn't match `man mage` (🧙‍♂)")
  end
end

it "`1F9D9 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man mage: light skin tone` (🧙🏻‍♂️)" do
  if m = "🧙🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧙🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♂️"
  else
    fail("`1F9D9 1F3FB 200D 2642 FE0F` doesn't match `man mage: light skin tone` (🧙🏻‍♂️)")
  end
end

it "`1F9D9 1F3FB 200D 2642` (minimally-qualified) should match `man mage: light skin tone` (🧙🏻‍♂)" do
  if m = "🧙🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧙🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♂"
  else
    fail("`1F9D9 1F3FB 200D 2642` doesn't match `man mage: light skin tone` (🧙🏻‍♂)")
  end
end

it "`1F9D9 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man mage: medium-light skin tone` (🧙🏼‍♂️)" do
  if m = "🧙🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧙🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♂️"
  else
    fail("`1F9D9 1F3FC 200D 2642 FE0F` doesn't match `man mage: medium-light skin tone` (🧙🏼‍♂️)")
  end
end

it "`1F9D9 1F3FC 200D 2642` (minimally-qualified) should match `man mage: medium-light skin tone` (🧙🏼‍♂)" do
  if m = "🧙🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧙🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♂"
  else
    fail("`1F9D9 1F3FC 200D 2642` doesn't match `man mage: medium-light skin tone` (🧙🏼‍♂)")
  end
end

it "`1F9D9 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man mage: medium skin tone` (🧙🏽‍♂️)" do
  if m = "🧙🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧙🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♂️"
  else
    fail("`1F9D9 1F3FD 200D 2642 FE0F` doesn't match `man mage: medium skin tone` (🧙🏽‍♂️)")
  end
end

it "`1F9D9 1F3FD 200D 2642` (minimally-qualified) should match `man mage: medium skin tone` (🧙🏽‍♂)" do
  if m = "🧙🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧙🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♂"
  else
    fail("`1F9D9 1F3FD 200D 2642` doesn't match `man mage: medium skin tone` (🧙🏽‍♂)")
  end
end

it "`1F9D9 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man mage: medium-dark skin tone` (🧙🏾‍♂️)" do
  if m = "🧙🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧙🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♂️"
  else
    fail("`1F9D9 1F3FE 200D 2642 FE0F` doesn't match `man mage: medium-dark skin tone` (🧙🏾‍♂️)")
  end
end

it "`1F9D9 1F3FE 200D 2642` (minimally-qualified) should match `man mage: medium-dark skin tone` (🧙🏾‍♂)" do
  if m = "🧙🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧙🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♂"
  else
    fail("`1F9D9 1F3FE 200D 2642` doesn't match `man mage: medium-dark skin tone` (🧙🏾‍♂)")
  end
end

it "`1F9D9 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man mage: dark skin tone` (🧙🏿‍♂️)" do
  if m = "🧙🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧙🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♂️"
  else
    fail("`1F9D9 1F3FF 200D 2642 FE0F` doesn't match `man mage: dark skin tone` (🧙🏿‍♂️)")
  end
end

it "`1F9D9 1F3FF 200D 2642` (minimally-qualified) should match `man mage: dark skin tone` (🧙🏿‍♂)" do
  if m = "🧙🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧙🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♂"
  else
    fail("`1F9D9 1F3FF 200D 2642` doesn't match `man mage: dark skin tone` (🧙🏿‍♂)")
  end
end

it "`1F9D9 200D 2640 FE0F` (fully-qualified) should match `woman mage` (🧙‍♀️)" do
  if m = "🧙‍♀️".match(Emoji::EMOJI_REGEX)
    "🧙‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♀️"
  else
    fail("`1F9D9 200D 2640 FE0F` doesn't match `woman mage` (🧙‍♀️)")
  end
end

it "`1F9D9 200D 2640` (minimally-qualified) should match `woman mage` (🧙‍♀)" do
  if m = "🧙‍♀".match(Emoji::EMOJI_REGEX)
    "🧙‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙‍♀"
  else
    fail("`1F9D9 200D 2640` doesn't match `woman mage` (🧙‍♀)")
  end
end

it "`1F9D9 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman mage: light skin tone` (🧙🏻‍♀️)" do
  if m = "🧙🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧙🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♀️"
  else
    fail("`1F9D9 1F3FB 200D 2640 FE0F` doesn't match `woman mage: light skin tone` (🧙🏻‍♀️)")
  end
end

it "`1F9D9 1F3FB 200D 2640` (minimally-qualified) should match `woman mage: light skin tone` (🧙🏻‍♀)" do
  if m = "🧙🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧙🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏻‍♀"
  else
    fail("`1F9D9 1F3FB 200D 2640` doesn't match `woman mage: light skin tone` (🧙🏻‍♀)")
  end
end

it "`1F9D9 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman mage: medium-light skin tone` (🧙🏼‍♀️)" do
  if m = "🧙🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧙🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♀️"
  else
    fail("`1F9D9 1F3FC 200D 2640 FE0F` doesn't match `woman mage: medium-light skin tone` (🧙🏼‍♀️)")
  end
end

it "`1F9D9 1F3FC 200D 2640` (minimally-qualified) should match `woman mage: medium-light skin tone` (🧙🏼‍♀)" do
  if m = "🧙🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧙🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏼‍♀"
  else
    fail("`1F9D9 1F3FC 200D 2640` doesn't match `woman mage: medium-light skin tone` (🧙🏼‍♀)")
  end
end

it "`1F9D9 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman mage: medium skin tone` (🧙🏽‍♀️)" do
  if m = "🧙🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧙🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♀️"
  else
    fail("`1F9D9 1F3FD 200D 2640 FE0F` doesn't match `woman mage: medium skin tone` (🧙🏽‍♀️)")
  end
end

it "`1F9D9 1F3FD 200D 2640` (minimally-qualified) should match `woman mage: medium skin tone` (🧙🏽‍♀)" do
  if m = "🧙🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧙🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏽‍♀"
  else
    fail("`1F9D9 1F3FD 200D 2640` doesn't match `woman mage: medium skin tone` (🧙🏽‍♀)")
  end
end

it "`1F9D9 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman mage: medium-dark skin tone` (🧙🏾‍♀️)" do
  if m = "🧙🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧙🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♀️"
  else
    fail("`1F9D9 1F3FE 200D 2640 FE0F` doesn't match `woman mage: medium-dark skin tone` (🧙🏾‍♀️)")
  end
end

it "`1F9D9 1F3FE 200D 2640` (minimally-qualified) should match `woman mage: medium-dark skin tone` (🧙🏾‍♀)" do
  if m = "🧙🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧙🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏾‍♀"
  else
    fail("`1F9D9 1F3FE 200D 2640` doesn't match `woman mage: medium-dark skin tone` (🧙🏾‍♀)")
  end
end

it "`1F9D9 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman mage: dark skin tone` (🧙🏿‍♀️)" do
  if m = "🧙🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧙🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♀️"
  else
    fail("`1F9D9 1F3FF 200D 2640 FE0F` doesn't match `woman mage: dark skin tone` (🧙🏿‍♀️)")
  end
end

it "`1F9D9 1F3FF 200D 2640` (minimally-qualified) should match `woman mage: dark skin tone` (🧙🏿‍♀)" do
  if m = "🧙🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧙🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧙🏿‍♀"
  else
    fail("`1F9D9 1F3FF 200D 2640` doesn't match `woman mage: dark skin tone` (🧙🏿‍♀)")
  end
end

it "`1F9DA` (fully-qualified) should match `fairy` (🧚)" do
  if m = "🧚".match(Emoji::EMOJI_REGEX)
    "🧚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚"
  else
    fail("`1F9DA` doesn't match `fairy` (🧚)")
  end
end

it "`1F9DA 1F3FB` (fully-qualified) should match `fairy: light skin tone` (🧚🏻)" do
  if m = "🧚🏻".match(Emoji::EMOJI_REGEX)
    "🧚🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻"
  else
    fail("`1F9DA 1F3FB` doesn't match `fairy: light skin tone` (🧚🏻)")
  end
end

it "`1F9DA 1F3FC` (fully-qualified) should match `fairy: medium-light skin tone` (🧚🏼)" do
  if m = "🧚🏼".match(Emoji::EMOJI_REGEX)
    "🧚🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼"
  else
    fail("`1F9DA 1F3FC` doesn't match `fairy: medium-light skin tone` (🧚🏼)")
  end
end

it "`1F9DA 1F3FD` (fully-qualified) should match `fairy: medium skin tone` (🧚🏽)" do
  if m = "🧚🏽".match(Emoji::EMOJI_REGEX)
    "🧚🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽"
  else
    fail("`1F9DA 1F3FD` doesn't match `fairy: medium skin tone` (🧚🏽)")
  end
end

it "`1F9DA 1F3FE` (fully-qualified) should match `fairy: medium-dark skin tone` (🧚🏾)" do
  if m = "🧚🏾".match(Emoji::EMOJI_REGEX)
    "🧚🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾"
  else
    fail("`1F9DA 1F3FE` doesn't match `fairy: medium-dark skin tone` (🧚🏾)")
  end
end

it "`1F9DA 1F3FF` (fully-qualified) should match `fairy: dark skin tone` (🧚🏿)" do
  if m = "🧚🏿".match(Emoji::EMOJI_REGEX)
    "🧚🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿"
  else
    fail("`1F9DA 1F3FF` doesn't match `fairy: dark skin tone` (🧚🏿)")
  end
end

it "`1F9DA 200D 2642 FE0F` (fully-qualified) should match `man fairy` (🧚‍♂️)" do
  if m = "🧚‍♂️".match(Emoji::EMOJI_REGEX)
    "🧚‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♂️"
  else
    fail("`1F9DA 200D 2642 FE0F` doesn't match `man fairy` (🧚‍♂️)")
  end
end

it "`1F9DA 200D 2642` (minimally-qualified) should match `man fairy` (🧚‍♂)" do
  if m = "🧚‍♂".match(Emoji::EMOJI_REGEX)
    "🧚‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♂"
  else
    fail("`1F9DA 200D 2642` doesn't match `man fairy` (🧚‍♂)")
  end
end

it "`1F9DA 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man fairy: light skin tone` (🧚🏻‍♂️)" do
  if m = "🧚🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧚🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♂️"
  else
    fail("`1F9DA 1F3FB 200D 2642 FE0F` doesn't match `man fairy: light skin tone` (🧚🏻‍♂️)")
  end
end

it "`1F9DA 1F3FB 200D 2642` (minimally-qualified) should match `man fairy: light skin tone` (🧚🏻‍♂)" do
  if m = "🧚🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧚🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♂"
  else
    fail("`1F9DA 1F3FB 200D 2642` doesn't match `man fairy: light skin tone` (🧚🏻‍♂)")
  end
end

it "`1F9DA 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man fairy: medium-light skin tone` (🧚🏼‍♂️)" do
  if m = "🧚🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧚🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♂️"
  else
    fail("`1F9DA 1F3FC 200D 2642 FE0F` doesn't match `man fairy: medium-light skin tone` (🧚🏼‍♂️)")
  end
end

it "`1F9DA 1F3FC 200D 2642` (minimally-qualified) should match `man fairy: medium-light skin tone` (🧚🏼‍♂)" do
  if m = "🧚🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧚🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♂"
  else
    fail("`1F9DA 1F3FC 200D 2642` doesn't match `man fairy: medium-light skin tone` (🧚🏼‍♂)")
  end
end

it "`1F9DA 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man fairy: medium skin tone` (🧚🏽‍♂️)" do
  if m = "🧚🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧚🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♂️"
  else
    fail("`1F9DA 1F3FD 200D 2642 FE0F` doesn't match `man fairy: medium skin tone` (🧚🏽‍♂️)")
  end
end

it "`1F9DA 1F3FD 200D 2642` (minimally-qualified) should match `man fairy: medium skin tone` (🧚🏽‍♂)" do
  if m = "🧚🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧚🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♂"
  else
    fail("`1F9DA 1F3FD 200D 2642` doesn't match `man fairy: medium skin tone` (🧚🏽‍♂)")
  end
end

it "`1F9DA 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man fairy: medium-dark skin tone` (🧚🏾‍♂️)" do
  if m = "🧚🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧚🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♂️"
  else
    fail("`1F9DA 1F3FE 200D 2642 FE0F` doesn't match `man fairy: medium-dark skin tone` (🧚🏾‍♂️)")
  end
end

it "`1F9DA 1F3FE 200D 2642` (minimally-qualified) should match `man fairy: medium-dark skin tone` (🧚🏾‍♂)" do
  if m = "🧚🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧚🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♂"
  else
    fail("`1F9DA 1F3FE 200D 2642` doesn't match `man fairy: medium-dark skin tone` (🧚🏾‍♂)")
  end
end

it "`1F9DA 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man fairy: dark skin tone` (🧚🏿‍♂️)" do
  if m = "🧚🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧚🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♂️"
  else
    fail("`1F9DA 1F3FF 200D 2642 FE0F` doesn't match `man fairy: dark skin tone` (🧚🏿‍♂️)")
  end
end

it "`1F9DA 1F3FF 200D 2642` (minimally-qualified) should match `man fairy: dark skin tone` (🧚🏿‍♂)" do
  if m = "🧚🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧚🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♂"
  else
    fail("`1F9DA 1F3FF 200D 2642` doesn't match `man fairy: dark skin tone` (🧚🏿‍♂)")
  end
end

it "`1F9DA 200D 2640 FE0F` (fully-qualified) should match `woman fairy` (🧚‍♀️)" do
  if m = "🧚‍♀️".match(Emoji::EMOJI_REGEX)
    "🧚‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♀️"
  else
    fail("`1F9DA 200D 2640 FE0F` doesn't match `woman fairy` (🧚‍♀️)")
  end
end

it "`1F9DA 200D 2640` (minimally-qualified) should match `woman fairy` (🧚‍♀)" do
  if m = "🧚‍♀".match(Emoji::EMOJI_REGEX)
    "🧚‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚‍♀"
  else
    fail("`1F9DA 200D 2640` doesn't match `woman fairy` (🧚‍♀)")
  end
end

it "`1F9DA 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman fairy: light skin tone` (🧚🏻‍♀️)" do
  if m = "🧚🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧚🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♀️"
  else
    fail("`1F9DA 1F3FB 200D 2640 FE0F` doesn't match `woman fairy: light skin tone` (🧚🏻‍♀️)")
  end
end

it "`1F9DA 1F3FB 200D 2640` (minimally-qualified) should match `woman fairy: light skin tone` (🧚🏻‍♀)" do
  if m = "🧚🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧚🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏻‍♀"
  else
    fail("`1F9DA 1F3FB 200D 2640` doesn't match `woman fairy: light skin tone` (🧚🏻‍♀)")
  end
end

it "`1F9DA 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman fairy: medium-light skin tone` (🧚🏼‍♀️)" do
  if m = "🧚🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧚🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♀️"
  else
    fail("`1F9DA 1F3FC 200D 2640 FE0F` doesn't match `woman fairy: medium-light skin tone` (🧚🏼‍♀️)")
  end
end

it "`1F9DA 1F3FC 200D 2640` (minimally-qualified) should match `woman fairy: medium-light skin tone` (🧚🏼‍♀)" do
  if m = "🧚🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧚🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏼‍♀"
  else
    fail("`1F9DA 1F3FC 200D 2640` doesn't match `woman fairy: medium-light skin tone` (🧚🏼‍♀)")
  end
end

it "`1F9DA 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman fairy: medium skin tone` (🧚🏽‍♀️)" do
  if m = "🧚🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧚🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♀️"
  else
    fail("`1F9DA 1F3FD 200D 2640 FE0F` doesn't match `woman fairy: medium skin tone` (🧚🏽‍♀️)")
  end
end

it "`1F9DA 1F3FD 200D 2640` (minimally-qualified) should match `woman fairy: medium skin tone` (🧚🏽‍♀)" do
  if m = "🧚🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧚🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏽‍♀"
  else
    fail("`1F9DA 1F3FD 200D 2640` doesn't match `woman fairy: medium skin tone` (🧚🏽‍♀)")
  end
end

it "`1F9DA 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman fairy: medium-dark skin tone` (🧚🏾‍♀️)" do
  if m = "🧚🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧚🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♀️"
  else
    fail("`1F9DA 1F3FE 200D 2640 FE0F` doesn't match `woman fairy: medium-dark skin tone` (🧚🏾‍♀️)")
  end
end

it "`1F9DA 1F3FE 200D 2640` (minimally-qualified) should match `woman fairy: medium-dark skin tone` (🧚🏾‍♀)" do
  if m = "🧚🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧚🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏾‍♀"
  else
    fail("`1F9DA 1F3FE 200D 2640` doesn't match `woman fairy: medium-dark skin tone` (🧚🏾‍♀)")
  end
end

it "`1F9DA 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman fairy: dark skin tone` (🧚🏿‍♀️)" do
  if m = "🧚🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧚🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♀️"
  else
    fail("`1F9DA 1F3FF 200D 2640 FE0F` doesn't match `woman fairy: dark skin tone` (🧚🏿‍♀️)")
  end
end

it "`1F9DA 1F3FF 200D 2640` (minimally-qualified) should match `woman fairy: dark skin tone` (🧚🏿‍♀)" do
  if m = "🧚🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧚🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧚🏿‍♀"
  else
    fail("`1F9DA 1F3FF 200D 2640` doesn't match `woman fairy: dark skin tone` (🧚🏿‍♀)")
  end
end

it "`1F9DB` (fully-qualified) should match `vampire` (🧛)" do
  if m = "🧛".match(Emoji::EMOJI_REGEX)
    "🧛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛"
  else
    fail("`1F9DB` doesn't match `vampire` (🧛)")
  end
end

it "`1F9DB 1F3FB` (fully-qualified) should match `vampire: light skin tone` (🧛🏻)" do
  if m = "🧛🏻".match(Emoji::EMOJI_REGEX)
    "🧛🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻"
  else
    fail("`1F9DB 1F3FB` doesn't match `vampire: light skin tone` (🧛🏻)")
  end
end

it "`1F9DB 1F3FC` (fully-qualified) should match `vampire: medium-light skin tone` (🧛🏼)" do
  if m = "🧛🏼".match(Emoji::EMOJI_REGEX)
    "🧛🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼"
  else
    fail("`1F9DB 1F3FC` doesn't match `vampire: medium-light skin tone` (🧛🏼)")
  end
end

it "`1F9DB 1F3FD` (fully-qualified) should match `vampire: medium skin tone` (🧛🏽)" do
  if m = "🧛🏽".match(Emoji::EMOJI_REGEX)
    "🧛🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽"
  else
    fail("`1F9DB 1F3FD` doesn't match `vampire: medium skin tone` (🧛🏽)")
  end
end

it "`1F9DB 1F3FE` (fully-qualified) should match `vampire: medium-dark skin tone` (🧛🏾)" do
  if m = "🧛🏾".match(Emoji::EMOJI_REGEX)
    "🧛🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾"
  else
    fail("`1F9DB 1F3FE` doesn't match `vampire: medium-dark skin tone` (🧛🏾)")
  end
end

it "`1F9DB 1F3FF` (fully-qualified) should match `vampire: dark skin tone` (🧛🏿)" do
  if m = "🧛🏿".match(Emoji::EMOJI_REGEX)
    "🧛🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿"
  else
    fail("`1F9DB 1F3FF` doesn't match `vampire: dark skin tone` (🧛🏿)")
  end
end

it "`1F9DB 200D 2642 FE0F` (fully-qualified) should match `man vampire` (🧛‍♂️)" do
  if m = "🧛‍♂️".match(Emoji::EMOJI_REGEX)
    "🧛‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♂️"
  else
    fail("`1F9DB 200D 2642 FE0F` doesn't match `man vampire` (🧛‍♂️)")
  end
end

it "`1F9DB 200D 2642` (minimally-qualified) should match `man vampire` (🧛‍♂)" do
  if m = "🧛‍♂".match(Emoji::EMOJI_REGEX)
    "🧛‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♂"
  else
    fail("`1F9DB 200D 2642` doesn't match `man vampire` (🧛‍♂)")
  end
end

it "`1F9DB 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man vampire: light skin tone` (🧛🏻‍♂️)" do
  if m = "🧛🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧛🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♂️"
  else
    fail("`1F9DB 1F3FB 200D 2642 FE0F` doesn't match `man vampire: light skin tone` (🧛🏻‍♂️)")
  end
end

it "`1F9DB 1F3FB 200D 2642` (minimally-qualified) should match `man vampire: light skin tone` (🧛🏻‍♂)" do
  if m = "🧛🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧛🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♂"
  else
    fail("`1F9DB 1F3FB 200D 2642` doesn't match `man vampire: light skin tone` (🧛🏻‍♂)")
  end
end

it "`1F9DB 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man vampire: medium-light skin tone` (🧛🏼‍♂️)" do
  if m = "🧛🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧛🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♂️"
  else
    fail("`1F9DB 1F3FC 200D 2642 FE0F` doesn't match `man vampire: medium-light skin tone` (🧛🏼‍♂️)")
  end
end

it "`1F9DB 1F3FC 200D 2642` (minimally-qualified) should match `man vampire: medium-light skin tone` (🧛🏼‍♂)" do
  if m = "🧛🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧛🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♂"
  else
    fail("`1F9DB 1F3FC 200D 2642` doesn't match `man vampire: medium-light skin tone` (🧛🏼‍♂)")
  end
end

it "`1F9DB 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man vampire: medium skin tone` (🧛🏽‍♂️)" do
  if m = "🧛🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧛🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♂️"
  else
    fail("`1F9DB 1F3FD 200D 2642 FE0F` doesn't match `man vampire: medium skin tone` (🧛🏽‍♂️)")
  end
end

it "`1F9DB 1F3FD 200D 2642` (minimally-qualified) should match `man vampire: medium skin tone` (🧛🏽‍♂)" do
  if m = "🧛🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧛🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♂"
  else
    fail("`1F9DB 1F3FD 200D 2642` doesn't match `man vampire: medium skin tone` (🧛🏽‍♂)")
  end
end

it "`1F9DB 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man vampire: medium-dark skin tone` (🧛🏾‍♂️)" do
  if m = "🧛🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧛🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♂️"
  else
    fail("`1F9DB 1F3FE 200D 2642 FE0F` doesn't match `man vampire: medium-dark skin tone` (🧛🏾‍♂️)")
  end
end

it "`1F9DB 1F3FE 200D 2642` (minimally-qualified) should match `man vampire: medium-dark skin tone` (🧛🏾‍♂)" do
  if m = "🧛🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧛🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♂"
  else
    fail("`1F9DB 1F3FE 200D 2642` doesn't match `man vampire: medium-dark skin tone` (🧛🏾‍♂)")
  end
end

it "`1F9DB 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man vampire: dark skin tone` (🧛🏿‍♂️)" do
  if m = "🧛🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧛🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♂️"
  else
    fail("`1F9DB 1F3FF 200D 2642 FE0F` doesn't match `man vampire: dark skin tone` (🧛🏿‍♂️)")
  end
end

it "`1F9DB 1F3FF 200D 2642` (minimally-qualified) should match `man vampire: dark skin tone` (🧛🏿‍♂)" do
  if m = "🧛🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧛🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♂"
  else
    fail("`1F9DB 1F3FF 200D 2642` doesn't match `man vampire: dark skin tone` (🧛🏿‍♂)")
  end
end

it "`1F9DB 200D 2640 FE0F` (fully-qualified) should match `woman vampire` (🧛‍♀️)" do
  if m = "🧛‍♀️".match(Emoji::EMOJI_REGEX)
    "🧛‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♀️"
  else
    fail("`1F9DB 200D 2640 FE0F` doesn't match `woman vampire` (🧛‍♀️)")
  end
end

it "`1F9DB 200D 2640` (minimally-qualified) should match `woman vampire` (🧛‍♀)" do
  if m = "🧛‍♀".match(Emoji::EMOJI_REGEX)
    "🧛‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛‍♀"
  else
    fail("`1F9DB 200D 2640` doesn't match `woman vampire` (🧛‍♀)")
  end
end

it "`1F9DB 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman vampire: light skin tone` (🧛🏻‍♀️)" do
  if m = "🧛🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧛🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♀️"
  else
    fail("`1F9DB 1F3FB 200D 2640 FE0F` doesn't match `woman vampire: light skin tone` (🧛🏻‍♀️)")
  end
end

it "`1F9DB 1F3FB 200D 2640` (minimally-qualified) should match `woman vampire: light skin tone` (🧛🏻‍♀)" do
  if m = "🧛🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧛🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏻‍♀"
  else
    fail("`1F9DB 1F3FB 200D 2640` doesn't match `woman vampire: light skin tone` (🧛🏻‍♀)")
  end
end

it "`1F9DB 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman vampire: medium-light skin tone` (🧛🏼‍♀️)" do
  if m = "🧛🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧛🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♀️"
  else
    fail("`1F9DB 1F3FC 200D 2640 FE0F` doesn't match `woman vampire: medium-light skin tone` (🧛🏼‍♀️)")
  end
end

it "`1F9DB 1F3FC 200D 2640` (minimally-qualified) should match `woman vampire: medium-light skin tone` (🧛🏼‍♀)" do
  if m = "🧛🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧛🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏼‍♀"
  else
    fail("`1F9DB 1F3FC 200D 2640` doesn't match `woman vampire: medium-light skin tone` (🧛🏼‍♀)")
  end
end

it "`1F9DB 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman vampire: medium skin tone` (🧛🏽‍♀️)" do
  if m = "🧛🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧛🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♀️"
  else
    fail("`1F9DB 1F3FD 200D 2640 FE0F` doesn't match `woman vampire: medium skin tone` (🧛🏽‍♀️)")
  end
end

it "`1F9DB 1F3FD 200D 2640` (minimally-qualified) should match `woman vampire: medium skin tone` (🧛🏽‍♀)" do
  if m = "🧛🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧛🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏽‍♀"
  else
    fail("`1F9DB 1F3FD 200D 2640` doesn't match `woman vampire: medium skin tone` (🧛🏽‍♀)")
  end
end

it "`1F9DB 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman vampire: medium-dark skin tone` (🧛🏾‍♀️)" do
  if m = "🧛🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧛🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♀️"
  else
    fail("`1F9DB 1F3FE 200D 2640 FE0F` doesn't match `woman vampire: medium-dark skin tone` (🧛🏾‍♀️)")
  end
end

it "`1F9DB 1F3FE 200D 2640` (minimally-qualified) should match `woman vampire: medium-dark skin tone` (🧛🏾‍♀)" do
  if m = "🧛🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧛🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏾‍♀"
  else
    fail("`1F9DB 1F3FE 200D 2640` doesn't match `woman vampire: medium-dark skin tone` (🧛🏾‍♀)")
  end
end

it "`1F9DB 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman vampire: dark skin tone` (🧛🏿‍♀️)" do
  if m = "🧛🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧛🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♀️"
  else
    fail("`1F9DB 1F3FF 200D 2640 FE0F` doesn't match `woman vampire: dark skin tone` (🧛🏿‍♀️)")
  end
end

it "`1F9DB 1F3FF 200D 2640` (minimally-qualified) should match `woman vampire: dark skin tone` (🧛🏿‍♀)" do
  if m = "🧛🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧛🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧛🏿‍♀"
  else
    fail("`1F9DB 1F3FF 200D 2640` doesn't match `woman vampire: dark skin tone` (🧛🏿‍♀)")
  end
end

it "`1F9DC` (fully-qualified) should match `merperson` (🧜)" do
  if m = "🧜".match(Emoji::EMOJI_REGEX)
    "🧜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜"
  else
    fail("`1F9DC` doesn't match `merperson` (🧜)")
  end
end

it "`1F9DC 1F3FB` (fully-qualified) should match `merperson: light skin tone` (🧜🏻)" do
  if m = "🧜🏻".match(Emoji::EMOJI_REGEX)
    "🧜🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻"
  else
    fail("`1F9DC 1F3FB` doesn't match `merperson: light skin tone` (🧜🏻)")
  end
end

it "`1F9DC 1F3FC` (fully-qualified) should match `merperson: medium-light skin tone` (🧜🏼)" do
  if m = "🧜🏼".match(Emoji::EMOJI_REGEX)
    "🧜🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼"
  else
    fail("`1F9DC 1F3FC` doesn't match `merperson: medium-light skin tone` (🧜🏼)")
  end
end

it "`1F9DC 1F3FD` (fully-qualified) should match `merperson: medium skin tone` (🧜🏽)" do
  if m = "🧜🏽".match(Emoji::EMOJI_REGEX)
    "🧜🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽"
  else
    fail("`1F9DC 1F3FD` doesn't match `merperson: medium skin tone` (🧜🏽)")
  end
end

it "`1F9DC 1F3FE` (fully-qualified) should match `merperson: medium-dark skin tone` (🧜🏾)" do
  if m = "🧜🏾".match(Emoji::EMOJI_REGEX)
    "🧜🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾"
  else
    fail("`1F9DC 1F3FE` doesn't match `merperson: medium-dark skin tone` (🧜🏾)")
  end
end

it "`1F9DC 1F3FF` (fully-qualified) should match `merperson: dark skin tone` (🧜🏿)" do
  if m = "🧜🏿".match(Emoji::EMOJI_REGEX)
    "🧜🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿"
  else
    fail("`1F9DC 1F3FF` doesn't match `merperson: dark skin tone` (🧜🏿)")
  end
end

it "`1F9DC 200D 2642 FE0F` (fully-qualified) should match `merman` (🧜‍♂️)" do
  if m = "🧜‍♂️".match(Emoji::EMOJI_REGEX)
    "🧜‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♂️"
  else
    fail("`1F9DC 200D 2642 FE0F` doesn't match `merman` (🧜‍♂️)")
  end
end

it "`1F9DC 200D 2642` (minimally-qualified) should match `merman` (🧜‍♂)" do
  if m = "🧜‍♂".match(Emoji::EMOJI_REGEX)
    "🧜‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♂"
  else
    fail("`1F9DC 200D 2642` doesn't match `merman` (🧜‍♂)")
  end
end

it "`1F9DC 1F3FB 200D 2642 FE0F` (fully-qualified) should match `merman: light skin tone` (🧜🏻‍♂️)" do
  if m = "🧜🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧜🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♂️"
  else
    fail("`1F9DC 1F3FB 200D 2642 FE0F` doesn't match `merman: light skin tone` (🧜🏻‍♂️)")
  end
end

it "`1F9DC 1F3FB 200D 2642` (minimally-qualified) should match `merman: light skin tone` (🧜🏻‍♂)" do
  if m = "🧜🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧜🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♂"
  else
    fail("`1F9DC 1F3FB 200D 2642` doesn't match `merman: light skin tone` (🧜🏻‍♂)")
  end
end

it "`1F9DC 1F3FC 200D 2642 FE0F` (fully-qualified) should match `merman: medium-light skin tone` (🧜🏼‍♂️)" do
  if m = "🧜🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧜🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♂️"
  else
    fail("`1F9DC 1F3FC 200D 2642 FE0F` doesn't match `merman: medium-light skin tone` (🧜🏼‍♂️)")
  end
end

it "`1F9DC 1F3FC 200D 2642` (minimally-qualified) should match `merman: medium-light skin tone` (🧜🏼‍♂)" do
  if m = "🧜🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧜🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♂"
  else
    fail("`1F9DC 1F3FC 200D 2642` doesn't match `merman: medium-light skin tone` (🧜🏼‍♂)")
  end
end

it "`1F9DC 1F3FD 200D 2642 FE0F` (fully-qualified) should match `merman: medium skin tone` (🧜🏽‍♂️)" do
  if m = "🧜🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧜🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♂️"
  else
    fail("`1F9DC 1F3FD 200D 2642 FE0F` doesn't match `merman: medium skin tone` (🧜🏽‍♂️)")
  end
end

it "`1F9DC 1F3FD 200D 2642` (minimally-qualified) should match `merman: medium skin tone` (🧜🏽‍♂)" do
  if m = "🧜🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧜🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♂"
  else
    fail("`1F9DC 1F3FD 200D 2642` doesn't match `merman: medium skin tone` (🧜🏽‍♂)")
  end
end

it "`1F9DC 1F3FE 200D 2642 FE0F` (fully-qualified) should match `merman: medium-dark skin tone` (🧜🏾‍♂️)" do
  if m = "🧜🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧜🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♂️"
  else
    fail("`1F9DC 1F3FE 200D 2642 FE0F` doesn't match `merman: medium-dark skin tone` (🧜🏾‍♂️)")
  end
end

it "`1F9DC 1F3FE 200D 2642` (minimally-qualified) should match `merman: medium-dark skin tone` (🧜🏾‍♂)" do
  if m = "🧜🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧜🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♂"
  else
    fail("`1F9DC 1F3FE 200D 2642` doesn't match `merman: medium-dark skin tone` (🧜🏾‍♂)")
  end
end

it "`1F9DC 1F3FF 200D 2642 FE0F` (fully-qualified) should match `merman: dark skin tone` (🧜🏿‍♂️)" do
  if m = "🧜🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧜🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♂️"
  else
    fail("`1F9DC 1F3FF 200D 2642 FE0F` doesn't match `merman: dark skin tone` (🧜🏿‍♂️)")
  end
end

it "`1F9DC 1F3FF 200D 2642` (minimally-qualified) should match `merman: dark skin tone` (🧜🏿‍♂)" do
  if m = "🧜🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧜🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♂"
  else
    fail("`1F9DC 1F3FF 200D 2642` doesn't match `merman: dark skin tone` (🧜🏿‍♂)")
  end
end

it "`1F9DC 200D 2640 FE0F` (fully-qualified) should match `mermaid` (🧜‍♀️)" do
  if m = "🧜‍♀️".match(Emoji::EMOJI_REGEX)
    "🧜‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♀️"
  else
    fail("`1F9DC 200D 2640 FE0F` doesn't match `mermaid` (🧜‍♀️)")
  end
end

it "`1F9DC 200D 2640` (minimally-qualified) should match `mermaid` (🧜‍♀)" do
  if m = "🧜‍♀".match(Emoji::EMOJI_REGEX)
    "🧜‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜‍♀"
  else
    fail("`1F9DC 200D 2640` doesn't match `mermaid` (🧜‍♀)")
  end
end

it "`1F9DC 1F3FB 200D 2640 FE0F` (fully-qualified) should match `mermaid: light skin tone` (🧜🏻‍♀️)" do
  if m = "🧜🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧜🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♀️"
  else
    fail("`1F9DC 1F3FB 200D 2640 FE0F` doesn't match `mermaid: light skin tone` (🧜🏻‍♀️)")
  end
end

it "`1F9DC 1F3FB 200D 2640` (minimally-qualified) should match `mermaid: light skin tone` (🧜🏻‍♀)" do
  if m = "🧜🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧜🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏻‍♀"
  else
    fail("`1F9DC 1F3FB 200D 2640` doesn't match `mermaid: light skin tone` (🧜🏻‍♀)")
  end
end

it "`1F9DC 1F3FC 200D 2640 FE0F` (fully-qualified) should match `mermaid: medium-light skin tone` (🧜🏼‍♀️)" do
  if m = "🧜🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧜🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♀️"
  else
    fail("`1F9DC 1F3FC 200D 2640 FE0F` doesn't match `mermaid: medium-light skin tone` (🧜🏼‍♀️)")
  end
end

it "`1F9DC 1F3FC 200D 2640` (minimally-qualified) should match `mermaid: medium-light skin tone` (🧜🏼‍♀)" do
  if m = "🧜🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧜🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏼‍♀"
  else
    fail("`1F9DC 1F3FC 200D 2640` doesn't match `mermaid: medium-light skin tone` (🧜🏼‍♀)")
  end
end

it "`1F9DC 1F3FD 200D 2640 FE0F` (fully-qualified) should match `mermaid: medium skin tone` (🧜🏽‍♀️)" do
  if m = "🧜🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧜🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♀️"
  else
    fail("`1F9DC 1F3FD 200D 2640 FE0F` doesn't match `mermaid: medium skin tone` (🧜🏽‍♀️)")
  end
end

it "`1F9DC 1F3FD 200D 2640` (minimally-qualified) should match `mermaid: medium skin tone` (🧜🏽‍♀)" do
  if m = "🧜🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧜🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏽‍♀"
  else
    fail("`1F9DC 1F3FD 200D 2640` doesn't match `mermaid: medium skin tone` (🧜🏽‍♀)")
  end
end

it "`1F9DC 1F3FE 200D 2640 FE0F` (fully-qualified) should match `mermaid: medium-dark skin tone` (🧜🏾‍♀️)" do
  if m = "🧜🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧜🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♀️"
  else
    fail("`1F9DC 1F3FE 200D 2640 FE0F` doesn't match `mermaid: medium-dark skin tone` (🧜🏾‍♀️)")
  end
end

it "`1F9DC 1F3FE 200D 2640` (minimally-qualified) should match `mermaid: medium-dark skin tone` (🧜🏾‍♀)" do
  if m = "🧜🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧜🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏾‍♀"
  else
    fail("`1F9DC 1F3FE 200D 2640` doesn't match `mermaid: medium-dark skin tone` (🧜🏾‍♀)")
  end
end

it "`1F9DC 1F3FF 200D 2640 FE0F` (fully-qualified) should match `mermaid: dark skin tone` (🧜🏿‍♀️)" do
  if m = "🧜🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧜🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♀️"
  else
    fail("`1F9DC 1F3FF 200D 2640 FE0F` doesn't match `mermaid: dark skin tone` (🧜🏿‍♀️)")
  end
end

it "`1F9DC 1F3FF 200D 2640` (minimally-qualified) should match `mermaid: dark skin tone` (🧜🏿‍♀)" do
  if m = "🧜🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧜🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧜🏿‍♀"
  else
    fail("`1F9DC 1F3FF 200D 2640` doesn't match `mermaid: dark skin tone` (🧜🏿‍♀)")
  end
end

it "`1F9DD` (fully-qualified) should match `elf` (🧝)" do
  if m = "🧝".match(Emoji::EMOJI_REGEX)
    "🧝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝"
  else
    fail("`1F9DD` doesn't match `elf` (🧝)")
  end
end

it "`1F9DD 1F3FB` (fully-qualified) should match `elf: light skin tone` (🧝🏻)" do
  if m = "🧝🏻".match(Emoji::EMOJI_REGEX)
    "🧝🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻"
  else
    fail("`1F9DD 1F3FB` doesn't match `elf: light skin tone` (🧝🏻)")
  end
end

it "`1F9DD 1F3FC` (fully-qualified) should match `elf: medium-light skin tone` (🧝🏼)" do
  if m = "🧝🏼".match(Emoji::EMOJI_REGEX)
    "🧝🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼"
  else
    fail("`1F9DD 1F3FC` doesn't match `elf: medium-light skin tone` (🧝🏼)")
  end
end

it "`1F9DD 1F3FD` (fully-qualified) should match `elf: medium skin tone` (🧝🏽)" do
  if m = "🧝🏽".match(Emoji::EMOJI_REGEX)
    "🧝🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽"
  else
    fail("`1F9DD 1F3FD` doesn't match `elf: medium skin tone` (🧝🏽)")
  end
end

it "`1F9DD 1F3FE` (fully-qualified) should match `elf: medium-dark skin tone` (🧝🏾)" do
  if m = "🧝🏾".match(Emoji::EMOJI_REGEX)
    "🧝🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾"
  else
    fail("`1F9DD 1F3FE` doesn't match `elf: medium-dark skin tone` (🧝🏾)")
  end
end

it "`1F9DD 1F3FF` (fully-qualified) should match `elf: dark skin tone` (🧝🏿)" do
  if m = "🧝🏿".match(Emoji::EMOJI_REGEX)
    "🧝🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿"
  else
    fail("`1F9DD 1F3FF` doesn't match `elf: dark skin tone` (🧝🏿)")
  end
end

it "`1F9DD 200D 2642 FE0F` (fully-qualified) should match `man elf` (🧝‍♂️)" do
  if m = "🧝‍♂️".match(Emoji::EMOJI_REGEX)
    "🧝‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♂️"
  else
    fail("`1F9DD 200D 2642 FE0F` doesn't match `man elf` (🧝‍♂️)")
  end
end

it "`1F9DD 200D 2642` (minimally-qualified) should match `man elf` (🧝‍♂)" do
  if m = "🧝‍♂".match(Emoji::EMOJI_REGEX)
    "🧝‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♂"
  else
    fail("`1F9DD 200D 2642` doesn't match `man elf` (🧝‍♂)")
  end
end

it "`1F9DD 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man elf: light skin tone` (🧝🏻‍♂️)" do
  if m = "🧝🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧝🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♂️"
  else
    fail("`1F9DD 1F3FB 200D 2642 FE0F` doesn't match `man elf: light skin tone` (🧝🏻‍♂️)")
  end
end

it "`1F9DD 1F3FB 200D 2642` (minimally-qualified) should match `man elf: light skin tone` (🧝🏻‍♂)" do
  if m = "🧝🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧝🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♂"
  else
    fail("`1F9DD 1F3FB 200D 2642` doesn't match `man elf: light skin tone` (🧝🏻‍♂)")
  end
end

it "`1F9DD 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man elf: medium-light skin tone` (🧝🏼‍♂️)" do
  if m = "🧝🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧝🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♂️"
  else
    fail("`1F9DD 1F3FC 200D 2642 FE0F` doesn't match `man elf: medium-light skin tone` (🧝🏼‍♂️)")
  end
end

it "`1F9DD 1F3FC 200D 2642` (minimally-qualified) should match `man elf: medium-light skin tone` (🧝🏼‍♂)" do
  if m = "🧝🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧝🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♂"
  else
    fail("`1F9DD 1F3FC 200D 2642` doesn't match `man elf: medium-light skin tone` (🧝🏼‍♂)")
  end
end

it "`1F9DD 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man elf: medium skin tone` (🧝🏽‍♂️)" do
  if m = "🧝🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧝🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♂️"
  else
    fail("`1F9DD 1F3FD 200D 2642 FE0F` doesn't match `man elf: medium skin tone` (🧝🏽‍♂️)")
  end
end

it "`1F9DD 1F3FD 200D 2642` (minimally-qualified) should match `man elf: medium skin tone` (🧝🏽‍♂)" do
  if m = "🧝🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧝🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♂"
  else
    fail("`1F9DD 1F3FD 200D 2642` doesn't match `man elf: medium skin tone` (🧝🏽‍♂)")
  end
end

it "`1F9DD 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man elf: medium-dark skin tone` (🧝🏾‍♂️)" do
  if m = "🧝🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧝🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♂️"
  else
    fail("`1F9DD 1F3FE 200D 2642 FE0F` doesn't match `man elf: medium-dark skin tone` (🧝🏾‍♂️)")
  end
end

it "`1F9DD 1F3FE 200D 2642` (minimally-qualified) should match `man elf: medium-dark skin tone` (🧝🏾‍♂)" do
  if m = "🧝🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧝🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♂"
  else
    fail("`1F9DD 1F3FE 200D 2642` doesn't match `man elf: medium-dark skin tone` (🧝🏾‍♂)")
  end
end

it "`1F9DD 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man elf: dark skin tone` (🧝🏿‍♂️)" do
  if m = "🧝🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧝🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♂️"
  else
    fail("`1F9DD 1F3FF 200D 2642 FE0F` doesn't match `man elf: dark skin tone` (🧝🏿‍♂️)")
  end
end

it "`1F9DD 1F3FF 200D 2642` (minimally-qualified) should match `man elf: dark skin tone` (🧝🏿‍♂)" do
  if m = "🧝🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧝🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♂"
  else
    fail("`1F9DD 1F3FF 200D 2642` doesn't match `man elf: dark skin tone` (🧝🏿‍♂)")
  end
end

it "`1F9DD 200D 2640 FE0F` (fully-qualified) should match `woman elf` (🧝‍♀️)" do
  if m = "🧝‍♀️".match(Emoji::EMOJI_REGEX)
    "🧝‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♀️"
  else
    fail("`1F9DD 200D 2640 FE0F` doesn't match `woman elf` (🧝‍♀️)")
  end
end

it "`1F9DD 200D 2640` (minimally-qualified) should match `woman elf` (🧝‍♀)" do
  if m = "🧝‍♀".match(Emoji::EMOJI_REGEX)
    "🧝‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝‍♀"
  else
    fail("`1F9DD 200D 2640` doesn't match `woman elf` (🧝‍♀)")
  end
end

it "`1F9DD 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman elf: light skin tone` (🧝🏻‍♀️)" do
  if m = "🧝🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧝🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♀️"
  else
    fail("`1F9DD 1F3FB 200D 2640 FE0F` doesn't match `woman elf: light skin tone` (🧝🏻‍♀️)")
  end
end

it "`1F9DD 1F3FB 200D 2640` (minimally-qualified) should match `woman elf: light skin tone` (🧝🏻‍♀)" do
  if m = "🧝🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧝🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏻‍♀"
  else
    fail("`1F9DD 1F3FB 200D 2640` doesn't match `woman elf: light skin tone` (🧝🏻‍♀)")
  end
end

it "`1F9DD 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman elf: medium-light skin tone` (🧝🏼‍♀️)" do
  if m = "🧝🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧝🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♀️"
  else
    fail("`1F9DD 1F3FC 200D 2640 FE0F` doesn't match `woman elf: medium-light skin tone` (🧝🏼‍♀️)")
  end
end

it "`1F9DD 1F3FC 200D 2640` (minimally-qualified) should match `woman elf: medium-light skin tone` (🧝🏼‍♀)" do
  if m = "🧝🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧝🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏼‍♀"
  else
    fail("`1F9DD 1F3FC 200D 2640` doesn't match `woman elf: medium-light skin tone` (🧝🏼‍♀)")
  end
end

it "`1F9DD 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman elf: medium skin tone` (🧝🏽‍♀️)" do
  if m = "🧝🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧝🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♀️"
  else
    fail("`1F9DD 1F3FD 200D 2640 FE0F` doesn't match `woman elf: medium skin tone` (🧝🏽‍♀️)")
  end
end

it "`1F9DD 1F3FD 200D 2640` (minimally-qualified) should match `woman elf: medium skin tone` (🧝🏽‍♀)" do
  if m = "🧝🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧝🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏽‍♀"
  else
    fail("`1F9DD 1F3FD 200D 2640` doesn't match `woman elf: medium skin tone` (🧝🏽‍♀)")
  end
end

it "`1F9DD 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman elf: medium-dark skin tone` (🧝🏾‍♀️)" do
  if m = "🧝🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧝🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♀️"
  else
    fail("`1F9DD 1F3FE 200D 2640 FE0F` doesn't match `woman elf: medium-dark skin tone` (🧝🏾‍♀️)")
  end
end

it "`1F9DD 1F3FE 200D 2640` (minimally-qualified) should match `woman elf: medium-dark skin tone` (🧝🏾‍♀)" do
  if m = "🧝🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧝🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏾‍♀"
  else
    fail("`1F9DD 1F3FE 200D 2640` doesn't match `woman elf: medium-dark skin tone` (🧝🏾‍♀)")
  end
end

it "`1F9DD 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman elf: dark skin tone` (🧝🏿‍♀️)" do
  if m = "🧝🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧝🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♀️"
  else
    fail("`1F9DD 1F3FF 200D 2640 FE0F` doesn't match `woman elf: dark skin tone` (🧝🏿‍♀️)")
  end
end

it "`1F9DD 1F3FF 200D 2640` (minimally-qualified) should match `woman elf: dark skin tone` (🧝🏿‍♀)" do
  if m = "🧝🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧝🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧝🏿‍♀"
  else
    fail("`1F9DD 1F3FF 200D 2640` doesn't match `woman elf: dark skin tone` (🧝🏿‍♀)")
  end
end

it "`1F9DE` (fully-qualified) should match `genie` (🧞)" do
  if m = "🧞".match(Emoji::EMOJI_REGEX)
    "🧞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞"
  else
    fail("`1F9DE` doesn't match `genie` (🧞)")
  end
end

it "`1F9DE 200D 2642 FE0F` (fully-qualified) should match `man genie` (🧞‍♂️)" do
  if m = "🧞‍♂️".match(Emoji::EMOJI_REGEX)
    "🧞‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♂️"
  else
    fail("`1F9DE 200D 2642 FE0F` doesn't match `man genie` (🧞‍♂️)")
  end
end

it "`1F9DE 200D 2642` (minimally-qualified) should match `man genie` (🧞‍♂)" do
  if m = "🧞‍♂".match(Emoji::EMOJI_REGEX)
    "🧞‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♂"
  else
    fail("`1F9DE 200D 2642` doesn't match `man genie` (🧞‍♂)")
  end
end

it "`1F9DE 200D 2640 FE0F` (fully-qualified) should match `woman genie` (🧞‍♀️)" do
  if m = "🧞‍♀️".match(Emoji::EMOJI_REGEX)
    "🧞‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♀️"
  else
    fail("`1F9DE 200D 2640 FE0F` doesn't match `woman genie` (🧞‍♀️)")
  end
end

it "`1F9DE 200D 2640` (minimally-qualified) should match `woman genie` (🧞‍♀)" do
  if m = "🧞‍♀".match(Emoji::EMOJI_REGEX)
    "🧞‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧞‍♀"
  else
    fail("`1F9DE 200D 2640` doesn't match `woman genie` (🧞‍♀)")
  end
end

it "`1F9DF` (fully-qualified) should match `zombie` (🧟)" do
  if m = "🧟".match(Emoji::EMOJI_REGEX)
    "🧟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟"
  else
    fail("`1F9DF` doesn't match `zombie` (🧟)")
  end
end

it "`1F9DF 200D 2642 FE0F` (fully-qualified) should match `man zombie` (🧟‍♂️)" do
  if m = "🧟‍♂️".match(Emoji::EMOJI_REGEX)
    "🧟‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♂️"
  else
    fail("`1F9DF 200D 2642 FE0F` doesn't match `man zombie` (🧟‍♂️)")
  end
end

it "`1F9DF 200D 2642` (minimally-qualified) should match `man zombie` (🧟‍♂)" do
  if m = "🧟‍♂".match(Emoji::EMOJI_REGEX)
    "🧟‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♂"
  else
    fail("`1F9DF 200D 2642` doesn't match `man zombie` (🧟‍♂)")
  end
end

it "`1F9DF 200D 2640 FE0F` (fully-qualified) should match `woman zombie` (🧟‍♀️)" do
  if m = "🧟‍♀️".match(Emoji::EMOJI_REGEX)
    "🧟‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♀️"
  else
    fail("`1F9DF 200D 2640 FE0F` doesn't match `woman zombie` (🧟‍♀️)")
  end
end

it "`1F9DF 200D 2640` (minimally-qualified) should match `woman zombie` (🧟‍♀)" do
  if m = "🧟‍♀".match(Emoji::EMOJI_REGEX)
    "🧟‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧟‍♀"
  else
    fail("`1F9DF 200D 2640` doesn't match `woman zombie` (🧟‍♀)")
  end
end

it "`1F486` (fully-qualified) should match `person getting massage` (💆)" do
  if m = "💆".match(Emoji::EMOJI_REGEX)
    "💆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆"
  else
    fail("`1F486` doesn't match `person getting massage` (💆)")
  end
end

it "`1F486 1F3FB` (fully-qualified) should match `person getting massage: light skin tone` (💆🏻)" do
  if m = "💆🏻".match(Emoji::EMOJI_REGEX)
    "💆🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻"
  else
    fail("`1F486 1F3FB` doesn't match `person getting massage: light skin tone` (💆🏻)")
  end
end

it "`1F486 1F3FC` (fully-qualified) should match `person getting massage: medium-light skin tone` (💆🏼)" do
  if m = "💆🏼".match(Emoji::EMOJI_REGEX)
    "💆🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼"
  else
    fail("`1F486 1F3FC` doesn't match `person getting massage: medium-light skin tone` (💆🏼)")
  end
end

it "`1F486 1F3FD` (fully-qualified) should match `person getting massage: medium skin tone` (💆🏽)" do
  if m = "💆🏽".match(Emoji::EMOJI_REGEX)
    "💆🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽"
  else
    fail("`1F486 1F3FD` doesn't match `person getting massage: medium skin tone` (💆🏽)")
  end
end

it "`1F486 1F3FE` (fully-qualified) should match `person getting massage: medium-dark skin tone` (💆🏾)" do
  if m = "💆🏾".match(Emoji::EMOJI_REGEX)
    "💆🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾"
  else
    fail("`1F486 1F3FE` doesn't match `person getting massage: medium-dark skin tone` (💆🏾)")
  end
end

it "`1F486 1F3FF` (fully-qualified) should match `person getting massage: dark skin tone` (💆🏿)" do
  if m = "💆🏿".match(Emoji::EMOJI_REGEX)
    "💆🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿"
  else
    fail("`1F486 1F3FF` doesn't match `person getting massage: dark skin tone` (💆🏿)")
  end
end

it "`1F486 200D 2642 FE0F` (fully-qualified) should match `man getting massage` (💆‍♂️)" do
  if m = "💆‍♂️".match(Emoji::EMOJI_REGEX)
    "💆‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♂️"
  else
    fail("`1F486 200D 2642 FE0F` doesn't match `man getting massage` (💆‍♂️)")
  end
end

it "`1F486 200D 2642` (minimally-qualified) should match `man getting massage` (💆‍♂)" do
  if m = "💆‍♂".match(Emoji::EMOJI_REGEX)
    "💆‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♂"
  else
    fail("`1F486 200D 2642` doesn't match `man getting massage` (💆‍♂)")
  end
end

it "`1F486 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man getting massage: light skin tone` (💆🏻‍♂️)" do
  if m = "💆🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "💆🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♂️"
  else
    fail("`1F486 1F3FB 200D 2642 FE0F` doesn't match `man getting massage: light skin tone` (💆🏻‍♂️)")
  end
end

it "`1F486 1F3FB 200D 2642` (minimally-qualified) should match `man getting massage: light skin tone` (💆🏻‍♂)" do
  if m = "💆🏻‍♂".match(Emoji::EMOJI_REGEX)
    "💆🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♂"
  else
    fail("`1F486 1F3FB 200D 2642` doesn't match `man getting massage: light skin tone` (💆🏻‍♂)")
  end
end

it "`1F486 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man getting massage: medium-light skin tone` (💆🏼‍♂️)" do
  if m = "💆🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "💆🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♂️"
  else
    fail("`1F486 1F3FC 200D 2642 FE0F` doesn't match `man getting massage: medium-light skin tone` (💆🏼‍♂️)")
  end
end

it "`1F486 1F3FC 200D 2642` (minimally-qualified) should match `man getting massage: medium-light skin tone` (💆🏼‍♂)" do
  if m = "💆🏼‍♂".match(Emoji::EMOJI_REGEX)
    "💆🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♂"
  else
    fail("`1F486 1F3FC 200D 2642` doesn't match `man getting massage: medium-light skin tone` (💆🏼‍♂)")
  end
end

it "`1F486 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man getting massage: medium skin tone` (💆🏽‍♂️)" do
  if m = "💆🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "💆🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♂️"
  else
    fail("`1F486 1F3FD 200D 2642 FE0F` doesn't match `man getting massage: medium skin tone` (💆🏽‍♂️)")
  end
end

it "`1F486 1F3FD 200D 2642` (minimally-qualified) should match `man getting massage: medium skin tone` (💆🏽‍♂)" do
  if m = "💆🏽‍♂".match(Emoji::EMOJI_REGEX)
    "💆🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♂"
  else
    fail("`1F486 1F3FD 200D 2642` doesn't match `man getting massage: medium skin tone` (💆🏽‍♂)")
  end
end

it "`1F486 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man getting massage: medium-dark skin tone` (💆🏾‍♂️)" do
  if m = "💆🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "💆🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♂️"
  else
    fail("`1F486 1F3FE 200D 2642 FE0F` doesn't match `man getting massage: medium-dark skin tone` (💆🏾‍♂️)")
  end
end

it "`1F486 1F3FE 200D 2642` (minimally-qualified) should match `man getting massage: medium-dark skin tone` (💆🏾‍♂)" do
  if m = "💆🏾‍♂".match(Emoji::EMOJI_REGEX)
    "💆🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♂"
  else
    fail("`1F486 1F3FE 200D 2642` doesn't match `man getting massage: medium-dark skin tone` (💆🏾‍♂)")
  end
end

it "`1F486 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man getting massage: dark skin tone` (💆🏿‍♂️)" do
  if m = "💆🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "💆🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♂️"
  else
    fail("`1F486 1F3FF 200D 2642 FE0F` doesn't match `man getting massage: dark skin tone` (💆🏿‍♂️)")
  end
end

it "`1F486 1F3FF 200D 2642` (minimally-qualified) should match `man getting massage: dark skin tone` (💆🏿‍♂)" do
  if m = "💆🏿‍♂".match(Emoji::EMOJI_REGEX)
    "💆🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♂"
  else
    fail("`1F486 1F3FF 200D 2642` doesn't match `man getting massage: dark skin tone` (💆🏿‍♂)")
  end
end

it "`1F486 200D 2640 FE0F` (fully-qualified) should match `woman getting massage` (💆‍♀️)" do
  if m = "💆‍♀️".match(Emoji::EMOJI_REGEX)
    "💆‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♀️"
  else
    fail("`1F486 200D 2640 FE0F` doesn't match `woman getting massage` (💆‍♀️)")
  end
end

it "`1F486 200D 2640` (minimally-qualified) should match `woman getting massage` (💆‍♀)" do
  if m = "💆‍♀".match(Emoji::EMOJI_REGEX)
    "💆‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆‍♀"
  else
    fail("`1F486 200D 2640` doesn't match `woman getting massage` (💆‍♀)")
  end
end

it "`1F486 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: light skin tone` (💆🏻‍♀️)" do
  if m = "💆🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "💆🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♀️"
  else
    fail("`1F486 1F3FB 200D 2640 FE0F` doesn't match `woman getting massage: light skin tone` (💆🏻‍♀️)")
  end
end

it "`1F486 1F3FB 200D 2640` (minimally-qualified) should match `woman getting massage: light skin tone` (💆🏻‍♀)" do
  if m = "💆🏻‍♀".match(Emoji::EMOJI_REGEX)
    "💆🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏻‍♀"
  else
    fail("`1F486 1F3FB 200D 2640` doesn't match `woman getting massage: light skin tone` (💆🏻‍♀)")
  end
end

it "`1F486 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: medium-light skin tone` (💆🏼‍♀️)" do
  if m = "💆🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "💆🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♀️"
  else
    fail("`1F486 1F3FC 200D 2640 FE0F` doesn't match `woman getting massage: medium-light skin tone` (💆🏼‍♀️)")
  end
end

it "`1F486 1F3FC 200D 2640` (minimally-qualified) should match `woman getting massage: medium-light skin tone` (💆🏼‍♀)" do
  if m = "💆🏼‍♀".match(Emoji::EMOJI_REGEX)
    "💆🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏼‍♀"
  else
    fail("`1F486 1F3FC 200D 2640` doesn't match `woman getting massage: medium-light skin tone` (💆🏼‍♀)")
  end
end

it "`1F486 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: medium skin tone` (💆🏽‍♀️)" do
  if m = "💆🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "💆🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♀️"
  else
    fail("`1F486 1F3FD 200D 2640 FE0F` doesn't match `woman getting massage: medium skin tone` (💆🏽‍♀️)")
  end
end

it "`1F486 1F3FD 200D 2640` (minimally-qualified) should match `woman getting massage: medium skin tone` (💆🏽‍♀)" do
  if m = "💆🏽‍♀".match(Emoji::EMOJI_REGEX)
    "💆🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏽‍♀"
  else
    fail("`1F486 1F3FD 200D 2640` doesn't match `woman getting massage: medium skin tone` (💆🏽‍♀)")
  end
end

it "`1F486 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: medium-dark skin tone` (💆🏾‍♀️)" do
  if m = "💆🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "💆🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♀️"
  else
    fail("`1F486 1F3FE 200D 2640 FE0F` doesn't match `woman getting massage: medium-dark skin tone` (💆🏾‍♀️)")
  end
end

it "`1F486 1F3FE 200D 2640` (minimally-qualified) should match `woman getting massage: medium-dark skin tone` (💆🏾‍♀)" do
  if m = "💆🏾‍♀".match(Emoji::EMOJI_REGEX)
    "💆🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏾‍♀"
  else
    fail("`1F486 1F3FE 200D 2640` doesn't match `woman getting massage: medium-dark skin tone` (💆🏾‍♀)")
  end
end

it "`1F486 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman getting massage: dark skin tone` (💆🏿‍♀️)" do
  if m = "💆🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "💆🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♀️"
  else
    fail("`1F486 1F3FF 200D 2640 FE0F` doesn't match `woman getting massage: dark skin tone` (💆🏿‍♀️)")
  end
end

it "`1F486 1F3FF 200D 2640` (minimally-qualified) should match `woman getting massage: dark skin tone` (💆🏿‍♀)" do
  if m = "💆🏿‍♀".match(Emoji::EMOJI_REGEX)
    "💆🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💆🏿‍♀"
  else
    fail("`1F486 1F3FF 200D 2640` doesn't match `woman getting massage: dark skin tone` (💆🏿‍♀)")
  end
end

it "`1F487` (fully-qualified) should match `person getting haircut` (💇)" do
  if m = "💇".match(Emoji::EMOJI_REGEX)
    "💇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇"
  else
    fail("`1F487` doesn't match `person getting haircut` (💇)")
  end
end

it "`1F487 1F3FB` (fully-qualified) should match `person getting haircut: light skin tone` (💇🏻)" do
  if m = "💇🏻".match(Emoji::EMOJI_REGEX)
    "💇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻"
  else
    fail("`1F487 1F3FB` doesn't match `person getting haircut: light skin tone` (💇🏻)")
  end
end

it "`1F487 1F3FC` (fully-qualified) should match `person getting haircut: medium-light skin tone` (💇🏼)" do
  if m = "💇🏼".match(Emoji::EMOJI_REGEX)
    "💇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼"
  else
    fail("`1F487 1F3FC` doesn't match `person getting haircut: medium-light skin tone` (💇🏼)")
  end
end

it "`1F487 1F3FD` (fully-qualified) should match `person getting haircut: medium skin tone` (💇🏽)" do
  if m = "💇🏽".match(Emoji::EMOJI_REGEX)
    "💇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽"
  else
    fail("`1F487 1F3FD` doesn't match `person getting haircut: medium skin tone` (💇🏽)")
  end
end

it "`1F487 1F3FE` (fully-qualified) should match `person getting haircut: medium-dark skin tone` (💇🏾)" do
  if m = "💇🏾".match(Emoji::EMOJI_REGEX)
    "💇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾"
  else
    fail("`1F487 1F3FE` doesn't match `person getting haircut: medium-dark skin tone` (💇🏾)")
  end
end

it "`1F487 1F3FF` (fully-qualified) should match `person getting haircut: dark skin tone` (💇🏿)" do
  if m = "💇🏿".match(Emoji::EMOJI_REGEX)
    "💇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿"
  else
    fail("`1F487 1F3FF` doesn't match `person getting haircut: dark skin tone` (💇🏿)")
  end
end

it "`1F487 200D 2642 FE0F` (fully-qualified) should match `man getting haircut` (💇‍♂️)" do
  if m = "💇‍♂️".match(Emoji::EMOJI_REGEX)
    "💇‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♂️"
  else
    fail("`1F487 200D 2642 FE0F` doesn't match `man getting haircut` (💇‍♂️)")
  end
end

it "`1F487 200D 2642` (minimally-qualified) should match `man getting haircut` (💇‍♂)" do
  if m = "💇‍♂".match(Emoji::EMOJI_REGEX)
    "💇‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♂"
  else
    fail("`1F487 200D 2642` doesn't match `man getting haircut` (💇‍♂)")
  end
end

it "`1F487 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: light skin tone` (💇🏻‍♂️)" do
  if m = "💇🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "💇🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♂️"
  else
    fail("`1F487 1F3FB 200D 2642 FE0F` doesn't match `man getting haircut: light skin tone` (💇🏻‍♂️)")
  end
end

it "`1F487 1F3FB 200D 2642` (minimally-qualified) should match `man getting haircut: light skin tone` (💇🏻‍♂)" do
  if m = "💇🏻‍♂".match(Emoji::EMOJI_REGEX)
    "💇🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♂"
  else
    fail("`1F487 1F3FB 200D 2642` doesn't match `man getting haircut: light skin tone` (💇🏻‍♂)")
  end
end

it "`1F487 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: medium-light skin tone` (💇🏼‍♂️)" do
  if m = "💇🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "💇🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♂️"
  else
    fail("`1F487 1F3FC 200D 2642 FE0F` doesn't match `man getting haircut: medium-light skin tone` (💇🏼‍♂️)")
  end
end

it "`1F487 1F3FC 200D 2642` (minimally-qualified) should match `man getting haircut: medium-light skin tone` (💇🏼‍♂)" do
  if m = "💇🏼‍♂".match(Emoji::EMOJI_REGEX)
    "💇🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♂"
  else
    fail("`1F487 1F3FC 200D 2642` doesn't match `man getting haircut: medium-light skin tone` (💇🏼‍♂)")
  end
end

it "`1F487 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: medium skin tone` (💇🏽‍♂️)" do
  if m = "💇🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "💇🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♂️"
  else
    fail("`1F487 1F3FD 200D 2642 FE0F` doesn't match `man getting haircut: medium skin tone` (💇🏽‍♂️)")
  end
end

it "`1F487 1F3FD 200D 2642` (minimally-qualified) should match `man getting haircut: medium skin tone` (💇🏽‍♂)" do
  if m = "💇🏽‍♂".match(Emoji::EMOJI_REGEX)
    "💇🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♂"
  else
    fail("`1F487 1F3FD 200D 2642` doesn't match `man getting haircut: medium skin tone` (💇🏽‍♂)")
  end
end

it "`1F487 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: medium-dark skin tone` (💇🏾‍♂️)" do
  if m = "💇🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "💇🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♂️"
  else
    fail("`1F487 1F3FE 200D 2642 FE0F` doesn't match `man getting haircut: medium-dark skin tone` (💇🏾‍♂️)")
  end
end

it "`1F487 1F3FE 200D 2642` (minimally-qualified) should match `man getting haircut: medium-dark skin tone` (💇🏾‍♂)" do
  if m = "💇🏾‍♂".match(Emoji::EMOJI_REGEX)
    "💇🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♂"
  else
    fail("`1F487 1F3FE 200D 2642` doesn't match `man getting haircut: medium-dark skin tone` (💇🏾‍♂)")
  end
end

it "`1F487 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man getting haircut: dark skin tone` (💇🏿‍♂️)" do
  if m = "💇🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "💇🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♂️"
  else
    fail("`1F487 1F3FF 200D 2642 FE0F` doesn't match `man getting haircut: dark skin tone` (💇🏿‍♂️)")
  end
end

it "`1F487 1F3FF 200D 2642` (minimally-qualified) should match `man getting haircut: dark skin tone` (💇🏿‍♂)" do
  if m = "💇🏿‍♂".match(Emoji::EMOJI_REGEX)
    "💇🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♂"
  else
    fail("`1F487 1F3FF 200D 2642` doesn't match `man getting haircut: dark skin tone` (💇🏿‍♂)")
  end
end

it "`1F487 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut` (💇‍♀️)" do
  if m = "💇‍♀️".match(Emoji::EMOJI_REGEX)
    "💇‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♀️"
  else
    fail("`1F487 200D 2640 FE0F` doesn't match `woman getting haircut` (💇‍♀️)")
  end
end

it "`1F487 200D 2640` (minimally-qualified) should match `woman getting haircut` (💇‍♀)" do
  if m = "💇‍♀".match(Emoji::EMOJI_REGEX)
    "💇‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇‍♀"
  else
    fail("`1F487 200D 2640` doesn't match `woman getting haircut` (💇‍♀)")
  end
end

it "`1F487 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: light skin tone` (💇🏻‍♀️)" do
  if m = "💇🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "💇🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♀️"
  else
    fail("`1F487 1F3FB 200D 2640 FE0F` doesn't match `woman getting haircut: light skin tone` (💇🏻‍♀️)")
  end
end

it "`1F487 1F3FB 200D 2640` (minimally-qualified) should match `woman getting haircut: light skin tone` (💇🏻‍♀)" do
  if m = "💇🏻‍♀".match(Emoji::EMOJI_REGEX)
    "💇🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏻‍♀"
  else
    fail("`1F487 1F3FB 200D 2640` doesn't match `woman getting haircut: light skin tone` (💇🏻‍♀)")
  end
end

it "`1F487 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: medium-light skin tone` (💇🏼‍♀️)" do
  if m = "💇🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "💇🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♀️"
  else
    fail("`1F487 1F3FC 200D 2640 FE0F` doesn't match `woman getting haircut: medium-light skin tone` (💇🏼‍♀️)")
  end
end

it "`1F487 1F3FC 200D 2640` (minimally-qualified) should match `woman getting haircut: medium-light skin tone` (💇🏼‍♀)" do
  if m = "💇🏼‍♀".match(Emoji::EMOJI_REGEX)
    "💇🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏼‍♀"
  else
    fail("`1F487 1F3FC 200D 2640` doesn't match `woman getting haircut: medium-light skin tone` (💇🏼‍♀)")
  end
end

it "`1F487 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: medium skin tone` (💇🏽‍♀️)" do
  if m = "💇🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "💇🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♀️"
  else
    fail("`1F487 1F3FD 200D 2640 FE0F` doesn't match `woman getting haircut: medium skin tone` (💇🏽‍♀️)")
  end
end

it "`1F487 1F3FD 200D 2640` (minimally-qualified) should match `woman getting haircut: medium skin tone` (💇🏽‍♀)" do
  if m = "💇🏽‍♀".match(Emoji::EMOJI_REGEX)
    "💇🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏽‍♀"
  else
    fail("`1F487 1F3FD 200D 2640` doesn't match `woman getting haircut: medium skin tone` (💇🏽‍♀)")
  end
end

it "`1F487 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: medium-dark skin tone` (💇🏾‍♀️)" do
  if m = "💇🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "💇🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♀️"
  else
    fail("`1F487 1F3FE 200D 2640 FE0F` doesn't match `woman getting haircut: medium-dark skin tone` (💇🏾‍♀️)")
  end
end

it "`1F487 1F3FE 200D 2640` (minimally-qualified) should match `woman getting haircut: medium-dark skin tone` (💇🏾‍♀)" do
  if m = "💇🏾‍♀".match(Emoji::EMOJI_REGEX)
    "💇🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏾‍♀"
  else
    fail("`1F487 1F3FE 200D 2640` doesn't match `woman getting haircut: medium-dark skin tone` (💇🏾‍♀)")
  end
end

it "`1F487 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman getting haircut: dark skin tone` (💇🏿‍♀️)" do
  if m = "💇🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "💇🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♀️"
  else
    fail("`1F487 1F3FF 200D 2640 FE0F` doesn't match `woman getting haircut: dark skin tone` (💇🏿‍♀️)")
  end
end

it "`1F487 1F3FF 200D 2640` (minimally-qualified) should match `woman getting haircut: dark skin tone` (💇🏿‍♀)" do
  if m = "💇🏿‍♀".match(Emoji::EMOJI_REGEX)
    "💇🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💇🏿‍♀"
  else
    fail("`1F487 1F3FF 200D 2640` doesn't match `woman getting haircut: dark skin tone` (💇🏿‍♀)")
  end
end

it "`1F6B6` (fully-qualified) should match `person walking` (🚶)" do
  if m = "🚶".match(Emoji::EMOJI_REGEX)
    "🚶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶"
  else
    fail("`1F6B6` doesn't match `person walking` (🚶)")
  end
end

it "`1F6B6 1F3FB` (fully-qualified) should match `person walking: light skin tone` (🚶🏻)" do
  if m = "🚶🏻".match(Emoji::EMOJI_REGEX)
    "🚶🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻"
  else
    fail("`1F6B6 1F3FB` doesn't match `person walking: light skin tone` (🚶🏻)")
  end
end

it "`1F6B6 1F3FC` (fully-qualified) should match `person walking: medium-light skin tone` (🚶🏼)" do
  if m = "🚶🏼".match(Emoji::EMOJI_REGEX)
    "🚶🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼"
  else
    fail("`1F6B6 1F3FC` doesn't match `person walking: medium-light skin tone` (🚶🏼)")
  end
end

it "`1F6B6 1F3FD` (fully-qualified) should match `person walking: medium skin tone` (🚶🏽)" do
  if m = "🚶🏽".match(Emoji::EMOJI_REGEX)
    "🚶🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽"
  else
    fail("`1F6B6 1F3FD` doesn't match `person walking: medium skin tone` (🚶🏽)")
  end
end

it "`1F6B6 1F3FE` (fully-qualified) should match `person walking: medium-dark skin tone` (🚶🏾)" do
  if m = "🚶🏾".match(Emoji::EMOJI_REGEX)
    "🚶🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾"
  else
    fail("`1F6B6 1F3FE` doesn't match `person walking: medium-dark skin tone` (🚶🏾)")
  end
end

it "`1F6B6 1F3FF` (fully-qualified) should match `person walking: dark skin tone` (🚶🏿)" do
  if m = "🚶🏿".match(Emoji::EMOJI_REGEX)
    "🚶🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿"
  else
    fail("`1F6B6 1F3FF` doesn't match `person walking: dark skin tone` (🚶🏿)")
  end
end

it "`1F6B6 200D 2642 FE0F` (fully-qualified) should match `man walking` (🚶‍♂️)" do
  if m = "🚶‍♂️".match(Emoji::EMOJI_REGEX)
    "🚶‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♂️"
  else
    fail("`1F6B6 200D 2642 FE0F` doesn't match `man walking` (🚶‍♂️)")
  end
end

it "`1F6B6 200D 2642` (minimally-qualified) should match `man walking` (🚶‍♂)" do
  if m = "🚶‍♂".match(Emoji::EMOJI_REGEX)
    "🚶‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♂"
  else
    fail("`1F6B6 200D 2642` doesn't match `man walking` (🚶‍♂)")
  end
end

it "`1F6B6 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man walking: light skin tone` (🚶🏻‍♂️)" do
  if m = "🚶🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🚶🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♂️"
  else
    fail("`1F6B6 1F3FB 200D 2642 FE0F` doesn't match `man walking: light skin tone` (🚶🏻‍♂️)")
  end
end

it "`1F6B6 1F3FB 200D 2642` (minimally-qualified) should match `man walking: light skin tone` (🚶🏻‍♂)" do
  if m = "🚶🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🚶🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♂"
  else
    fail("`1F6B6 1F3FB 200D 2642` doesn't match `man walking: light skin tone` (🚶🏻‍♂)")
  end
end

it "`1F6B6 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man walking: medium-light skin tone` (🚶🏼‍♂️)" do
  if m = "🚶🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🚶🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♂️"
  else
    fail("`1F6B6 1F3FC 200D 2642 FE0F` doesn't match `man walking: medium-light skin tone` (🚶🏼‍♂️)")
  end
end

it "`1F6B6 1F3FC 200D 2642` (minimally-qualified) should match `man walking: medium-light skin tone` (🚶🏼‍♂)" do
  if m = "🚶🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🚶🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♂"
  else
    fail("`1F6B6 1F3FC 200D 2642` doesn't match `man walking: medium-light skin tone` (🚶🏼‍♂)")
  end
end

it "`1F6B6 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man walking: medium skin tone` (🚶🏽‍♂️)" do
  if m = "🚶🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🚶🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♂️"
  else
    fail("`1F6B6 1F3FD 200D 2642 FE0F` doesn't match `man walking: medium skin tone` (🚶🏽‍♂️)")
  end
end

it "`1F6B6 1F3FD 200D 2642` (minimally-qualified) should match `man walking: medium skin tone` (🚶🏽‍♂)" do
  if m = "🚶🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🚶🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♂"
  else
    fail("`1F6B6 1F3FD 200D 2642` doesn't match `man walking: medium skin tone` (🚶🏽‍♂)")
  end
end

it "`1F6B6 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man walking: medium-dark skin tone` (🚶🏾‍♂️)" do
  if m = "🚶🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🚶🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♂️"
  else
    fail("`1F6B6 1F3FE 200D 2642 FE0F` doesn't match `man walking: medium-dark skin tone` (🚶🏾‍♂️)")
  end
end

it "`1F6B6 1F3FE 200D 2642` (minimally-qualified) should match `man walking: medium-dark skin tone` (🚶🏾‍♂)" do
  if m = "🚶🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🚶🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♂"
  else
    fail("`1F6B6 1F3FE 200D 2642` doesn't match `man walking: medium-dark skin tone` (🚶🏾‍♂)")
  end
end

it "`1F6B6 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man walking: dark skin tone` (🚶🏿‍♂️)" do
  if m = "🚶🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🚶🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♂️"
  else
    fail("`1F6B6 1F3FF 200D 2642 FE0F` doesn't match `man walking: dark skin tone` (🚶🏿‍♂️)")
  end
end

it "`1F6B6 1F3FF 200D 2642` (minimally-qualified) should match `man walking: dark skin tone` (🚶🏿‍♂)" do
  if m = "🚶🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🚶🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♂"
  else
    fail("`1F6B6 1F3FF 200D 2642` doesn't match `man walking: dark skin tone` (🚶🏿‍♂)")
  end
end

it "`1F6B6 200D 2640 FE0F` (fully-qualified) should match `woman walking` (🚶‍♀️)" do
  if m = "🚶‍♀️".match(Emoji::EMOJI_REGEX)
    "🚶‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♀️"
  else
    fail("`1F6B6 200D 2640 FE0F` doesn't match `woman walking` (🚶‍♀️)")
  end
end

it "`1F6B6 200D 2640` (minimally-qualified) should match `woman walking` (🚶‍♀)" do
  if m = "🚶‍♀".match(Emoji::EMOJI_REGEX)
    "🚶‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶‍♀"
  else
    fail("`1F6B6 200D 2640` doesn't match `woman walking` (🚶‍♀)")
  end
end

it "`1F6B6 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman walking: light skin tone` (🚶🏻‍♀️)" do
  if m = "🚶🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🚶🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♀️"
  else
    fail("`1F6B6 1F3FB 200D 2640 FE0F` doesn't match `woman walking: light skin tone` (🚶🏻‍♀️)")
  end
end

it "`1F6B6 1F3FB 200D 2640` (minimally-qualified) should match `woman walking: light skin tone` (🚶🏻‍♀)" do
  if m = "🚶🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🚶🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏻‍♀"
  else
    fail("`1F6B6 1F3FB 200D 2640` doesn't match `woman walking: light skin tone` (🚶🏻‍♀)")
  end
end

it "`1F6B6 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman walking: medium-light skin tone` (🚶🏼‍♀️)" do
  if m = "🚶🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🚶🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♀️"
  else
    fail("`1F6B6 1F3FC 200D 2640 FE0F` doesn't match `woman walking: medium-light skin tone` (🚶🏼‍♀️)")
  end
end

it "`1F6B6 1F3FC 200D 2640` (minimally-qualified) should match `woman walking: medium-light skin tone` (🚶🏼‍♀)" do
  if m = "🚶🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🚶🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏼‍♀"
  else
    fail("`1F6B6 1F3FC 200D 2640` doesn't match `woman walking: medium-light skin tone` (🚶🏼‍♀)")
  end
end

it "`1F6B6 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman walking: medium skin tone` (🚶🏽‍♀️)" do
  if m = "🚶🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🚶🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♀️"
  else
    fail("`1F6B6 1F3FD 200D 2640 FE0F` doesn't match `woman walking: medium skin tone` (🚶🏽‍♀️)")
  end
end

it "`1F6B6 1F3FD 200D 2640` (minimally-qualified) should match `woman walking: medium skin tone` (🚶🏽‍♀)" do
  if m = "🚶🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🚶🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏽‍♀"
  else
    fail("`1F6B6 1F3FD 200D 2640` doesn't match `woman walking: medium skin tone` (🚶🏽‍♀)")
  end
end

it "`1F6B6 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman walking: medium-dark skin tone` (🚶🏾‍♀️)" do
  if m = "🚶🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🚶🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♀️"
  else
    fail("`1F6B6 1F3FE 200D 2640 FE0F` doesn't match `woman walking: medium-dark skin tone` (🚶🏾‍♀️)")
  end
end

it "`1F6B6 1F3FE 200D 2640` (minimally-qualified) should match `woman walking: medium-dark skin tone` (🚶🏾‍♀)" do
  if m = "🚶🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🚶🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏾‍♀"
  else
    fail("`1F6B6 1F3FE 200D 2640` doesn't match `woman walking: medium-dark skin tone` (🚶🏾‍♀)")
  end
end

it "`1F6B6 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman walking: dark skin tone` (🚶🏿‍♀️)" do
  if m = "🚶🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🚶🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♀️"
  else
    fail("`1F6B6 1F3FF 200D 2640 FE0F` doesn't match `woman walking: dark skin tone` (🚶🏿‍♀️)")
  end
end

it "`1F6B6 1F3FF 200D 2640` (minimally-qualified) should match `woman walking: dark skin tone` (🚶🏿‍♀)" do
  if m = "🚶🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🚶🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚶🏿‍♀"
  else
    fail("`1F6B6 1F3FF 200D 2640` doesn't match `woman walking: dark skin tone` (🚶🏿‍♀)")
  end
end

it "`1F9CD` (fully-qualified) should match `person standing` (🧍)" do
  if m = "🧍".match(Emoji::EMOJI_REGEX)
    "🧍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍"
  else
    fail("`1F9CD` doesn't match `person standing` (🧍)")
  end
end

it "`1F9CD 1F3FB` (fully-qualified) should match `person standing: light skin tone` (🧍🏻)" do
  if m = "🧍🏻".match(Emoji::EMOJI_REGEX)
    "🧍🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻"
  else
    fail("`1F9CD 1F3FB` doesn't match `person standing: light skin tone` (🧍🏻)")
  end
end

it "`1F9CD 1F3FC` (fully-qualified) should match `person standing: medium-light skin tone` (🧍🏼)" do
  if m = "🧍🏼".match(Emoji::EMOJI_REGEX)
    "🧍🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼"
  else
    fail("`1F9CD 1F3FC` doesn't match `person standing: medium-light skin tone` (🧍🏼)")
  end
end

it "`1F9CD 1F3FD` (fully-qualified) should match `person standing: medium skin tone` (🧍🏽)" do
  if m = "🧍🏽".match(Emoji::EMOJI_REGEX)
    "🧍🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽"
  else
    fail("`1F9CD 1F3FD` doesn't match `person standing: medium skin tone` (🧍🏽)")
  end
end

it "`1F9CD 1F3FE` (fully-qualified) should match `person standing: medium-dark skin tone` (🧍🏾)" do
  if m = "🧍🏾".match(Emoji::EMOJI_REGEX)
    "🧍🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾"
  else
    fail("`1F9CD 1F3FE` doesn't match `person standing: medium-dark skin tone` (🧍🏾)")
  end
end

it "`1F9CD 1F3FF` (fully-qualified) should match `person standing: dark skin tone` (🧍🏿)" do
  if m = "🧍🏿".match(Emoji::EMOJI_REGEX)
    "🧍🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿"
  else
    fail("`1F9CD 1F3FF` doesn't match `person standing: dark skin tone` (🧍🏿)")
  end
end

it "`1F9CD 200D 2642 FE0F` (fully-qualified) should match `man standing` (🧍‍♂️)" do
  if m = "🧍‍♂️".match(Emoji::EMOJI_REGEX)
    "🧍‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♂️"
  else
    fail("`1F9CD 200D 2642 FE0F` doesn't match `man standing` (🧍‍♂️)")
  end
end

it "`1F9CD 200D 2642` (minimally-qualified) should match `man standing` (🧍‍♂)" do
  if m = "🧍‍♂".match(Emoji::EMOJI_REGEX)
    "🧍‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♂"
  else
    fail("`1F9CD 200D 2642` doesn't match `man standing` (🧍‍♂)")
  end
end

it "`1F9CD 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man standing: light skin tone` (🧍🏻‍♂️)" do
  if m = "🧍🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧍🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♂️"
  else
    fail("`1F9CD 1F3FB 200D 2642 FE0F` doesn't match `man standing: light skin tone` (🧍🏻‍♂️)")
  end
end

it "`1F9CD 1F3FB 200D 2642` (minimally-qualified) should match `man standing: light skin tone` (🧍🏻‍♂)" do
  if m = "🧍🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧍🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♂"
  else
    fail("`1F9CD 1F3FB 200D 2642` doesn't match `man standing: light skin tone` (🧍🏻‍♂)")
  end
end

it "`1F9CD 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man standing: medium-light skin tone` (🧍🏼‍♂️)" do
  if m = "🧍🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧍🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♂️"
  else
    fail("`1F9CD 1F3FC 200D 2642 FE0F` doesn't match `man standing: medium-light skin tone` (🧍🏼‍♂️)")
  end
end

it "`1F9CD 1F3FC 200D 2642` (minimally-qualified) should match `man standing: medium-light skin tone` (🧍🏼‍♂)" do
  if m = "🧍🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧍🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♂"
  else
    fail("`1F9CD 1F3FC 200D 2642` doesn't match `man standing: medium-light skin tone` (🧍🏼‍♂)")
  end
end

it "`1F9CD 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man standing: medium skin tone` (🧍🏽‍♂️)" do
  if m = "🧍🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧍🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♂️"
  else
    fail("`1F9CD 1F3FD 200D 2642 FE0F` doesn't match `man standing: medium skin tone` (🧍🏽‍♂️)")
  end
end

it "`1F9CD 1F3FD 200D 2642` (minimally-qualified) should match `man standing: medium skin tone` (🧍🏽‍♂)" do
  if m = "🧍🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧍🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♂"
  else
    fail("`1F9CD 1F3FD 200D 2642` doesn't match `man standing: medium skin tone` (🧍🏽‍♂)")
  end
end

it "`1F9CD 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man standing: medium-dark skin tone` (🧍🏾‍♂️)" do
  if m = "🧍🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧍🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♂️"
  else
    fail("`1F9CD 1F3FE 200D 2642 FE0F` doesn't match `man standing: medium-dark skin tone` (🧍🏾‍♂️)")
  end
end

it "`1F9CD 1F3FE 200D 2642` (minimally-qualified) should match `man standing: medium-dark skin tone` (🧍🏾‍♂)" do
  if m = "🧍🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧍🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♂"
  else
    fail("`1F9CD 1F3FE 200D 2642` doesn't match `man standing: medium-dark skin tone` (🧍🏾‍♂)")
  end
end

it "`1F9CD 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man standing: dark skin tone` (🧍🏿‍♂️)" do
  if m = "🧍🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧍🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♂️"
  else
    fail("`1F9CD 1F3FF 200D 2642 FE0F` doesn't match `man standing: dark skin tone` (🧍🏿‍♂️)")
  end
end

it "`1F9CD 1F3FF 200D 2642` (minimally-qualified) should match `man standing: dark skin tone` (🧍🏿‍♂)" do
  if m = "🧍🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧍🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♂"
  else
    fail("`1F9CD 1F3FF 200D 2642` doesn't match `man standing: dark skin tone` (🧍🏿‍♂)")
  end
end

it "`1F9CD 200D 2640 FE0F` (fully-qualified) should match `woman standing` (🧍‍♀️)" do
  if m = "🧍‍♀️".match(Emoji::EMOJI_REGEX)
    "🧍‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♀️"
  else
    fail("`1F9CD 200D 2640 FE0F` doesn't match `woman standing` (🧍‍♀️)")
  end
end

it "`1F9CD 200D 2640` (minimally-qualified) should match `woman standing` (🧍‍♀)" do
  if m = "🧍‍♀".match(Emoji::EMOJI_REGEX)
    "🧍‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍‍♀"
  else
    fail("`1F9CD 200D 2640` doesn't match `woman standing` (🧍‍♀)")
  end
end

it "`1F9CD 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman standing: light skin tone` (🧍🏻‍♀️)" do
  if m = "🧍🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧍🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♀️"
  else
    fail("`1F9CD 1F3FB 200D 2640 FE0F` doesn't match `woman standing: light skin tone` (🧍🏻‍♀️)")
  end
end

it "`1F9CD 1F3FB 200D 2640` (minimally-qualified) should match `woman standing: light skin tone` (🧍🏻‍♀)" do
  if m = "🧍🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧍🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏻‍♀"
  else
    fail("`1F9CD 1F3FB 200D 2640` doesn't match `woman standing: light skin tone` (🧍🏻‍♀)")
  end
end

it "`1F9CD 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman standing: medium-light skin tone` (🧍🏼‍♀️)" do
  if m = "🧍🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧍🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♀️"
  else
    fail("`1F9CD 1F3FC 200D 2640 FE0F` doesn't match `woman standing: medium-light skin tone` (🧍🏼‍♀️)")
  end
end

it "`1F9CD 1F3FC 200D 2640` (minimally-qualified) should match `woman standing: medium-light skin tone` (🧍🏼‍♀)" do
  if m = "🧍🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧍🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏼‍♀"
  else
    fail("`1F9CD 1F3FC 200D 2640` doesn't match `woman standing: medium-light skin tone` (🧍🏼‍♀)")
  end
end

it "`1F9CD 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman standing: medium skin tone` (🧍🏽‍♀️)" do
  if m = "🧍🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧍🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♀️"
  else
    fail("`1F9CD 1F3FD 200D 2640 FE0F` doesn't match `woman standing: medium skin tone` (🧍🏽‍♀️)")
  end
end

it "`1F9CD 1F3FD 200D 2640` (minimally-qualified) should match `woman standing: medium skin tone` (🧍🏽‍♀)" do
  if m = "🧍🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧍🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏽‍♀"
  else
    fail("`1F9CD 1F3FD 200D 2640` doesn't match `woman standing: medium skin tone` (🧍🏽‍♀)")
  end
end

it "`1F9CD 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman standing: medium-dark skin tone` (🧍🏾‍♀️)" do
  if m = "🧍🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧍🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♀️"
  else
    fail("`1F9CD 1F3FE 200D 2640 FE0F` doesn't match `woman standing: medium-dark skin tone` (🧍🏾‍♀️)")
  end
end

it "`1F9CD 1F3FE 200D 2640` (minimally-qualified) should match `woman standing: medium-dark skin tone` (🧍🏾‍♀)" do
  if m = "🧍🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧍🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏾‍♀"
  else
    fail("`1F9CD 1F3FE 200D 2640` doesn't match `woman standing: medium-dark skin tone` (🧍🏾‍♀)")
  end
end

it "`1F9CD 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman standing: dark skin tone` (🧍🏿‍♀️)" do
  if m = "🧍🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧍🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♀️"
  else
    fail("`1F9CD 1F3FF 200D 2640 FE0F` doesn't match `woman standing: dark skin tone` (🧍🏿‍♀️)")
  end
end

it "`1F9CD 1F3FF 200D 2640` (minimally-qualified) should match `woman standing: dark skin tone` (🧍🏿‍♀)" do
  if m = "🧍🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧍🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧍🏿‍♀"
  else
    fail("`1F9CD 1F3FF 200D 2640` doesn't match `woman standing: dark skin tone` (🧍🏿‍♀)")
  end
end

it "`1F9CE` (fully-qualified) should match `person kneeling` (🧎)" do
  if m = "🧎".match(Emoji::EMOJI_REGEX)
    "🧎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎"
  else
    fail("`1F9CE` doesn't match `person kneeling` (🧎)")
  end
end

it "`1F9CE 1F3FB` (fully-qualified) should match `person kneeling: light skin tone` (🧎🏻)" do
  if m = "🧎🏻".match(Emoji::EMOJI_REGEX)
    "🧎🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻"
  else
    fail("`1F9CE 1F3FB` doesn't match `person kneeling: light skin tone` (🧎🏻)")
  end
end

it "`1F9CE 1F3FC` (fully-qualified) should match `person kneeling: medium-light skin tone` (🧎🏼)" do
  if m = "🧎🏼".match(Emoji::EMOJI_REGEX)
    "🧎🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼"
  else
    fail("`1F9CE 1F3FC` doesn't match `person kneeling: medium-light skin tone` (🧎🏼)")
  end
end

it "`1F9CE 1F3FD` (fully-qualified) should match `person kneeling: medium skin tone` (🧎🏽)" do
  if m = "🧎🏽".match(Emoji::EMOJI_REGEX)
    "🧎🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽"
  else
    fail("`1F9CE 1F3FD` doesn't match `person kneeling: medium skin tone` (🧎🏽)")
  end
end

it "`1F9CE 1F3FE` (fully-qualified) should match `person kneeling: medium-dark skin tone` (🧎🏾)" do
  if m = "🧎🏾".match(Emoji::EMOJI_REGEX)
    "🧎🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾"
  else
    fail("`1F9CE 1F3FE` doesn't match `person kneeling: medium-dark skin tone` (🧎🏾)")
  end
end

it "`1F9CE 1F3FF` (fully-qualified) should match `person kneeling: dark skin tone` (🧎🏿)" do
  if m = "🧎🏿".match(Emoji::EMOJI_REGEX)
    "🧎🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿"
  else
    fail("`1F9CE 1F3FF` doesn't match `person kneeling: dark skin tone` (🧎🏿)")
  end
end

it "`1F9CE 200D 2642 FE0F` (fully-qualified) should match `man kneeling` (🧎‍♂️)" do
  if m = "🧎‍♂️".match(Emoji::EMOJI_REGEX)
    "🧎‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♂️"
  else
    fail("`1F9CE 200D 2642 FE0F` doesn't match `man kneeling` (🧎‍♂️)")
  end
end

it "`1F9CE 200D 2642` (minimally-qualified) should match `man kneeling` (🧎‍♂)" do
  if m = "🧎‍♂".match(Emoji::EMOJI_REGEX)
    "🧎‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♂"
  else
    fail("`1F9CE 200D 2642` doesn't match `man kneeling` (🧎‍♂)")
  end
end

it "`1F9CE 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man kneeling: light skin tone` (🧎🏻‍♂️)" do
  if m = "🧎🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧎🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♂️"
  else
    fail("`1F9CE 1F3FB 200D 2642 FE0F` doesn't match `man kneeling: light skin tone` (🧎🏻‍♂️)")
  end
end

it "`1F9CE 1F3FB 200D 2642` (minimally-qualified) should match `man kneeling: light skin tone` (🧎🏻‍♂)" do
  if m = "🧎🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧎🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♂"
  else
    fail("`1F9CE 1F3FB 200D 2642` doesn't match `man kneeling: light skin tone` (🧎🏻‍♂)")
  end
end

it "`1F9CE 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man kneeling: medium-light skin tone` (🧎🏼‍♂️)" do
  if m = "🧎🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧎🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♂️"
  else
    fail("`1F9CE 1F3FC 200D 2642 FE0F` doesn't match `man kneeling: medium-light skin tone` (🧎🏼‍♂️)")
  end
end

it "`1F9CE 1F3FC 200D 2642` (minimally-qualified) should match `man kneeling: medium-light skin tone` (🧎🏼‍♂)" do
  if m = "🧎🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧎🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♂"
  else
    fail("`1F9CE 1F3FC 200D 2642` doesn't match `man kneeling: medium-light skin tone` (🧎🏼‍♂)")
  end
end

it "`1F9CE 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man kneeling: medium skin tone` (🧎🏽‍♂️)" do
  if m = "🧎🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧎🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♂️"
  else
    fail("`1F9CE 1F3FD 200D 2642 FE0F` doesn't match `man kneeling: medium skin tone` (🧎🏽‍♂️)")
  end
end

it "`1F9CE 1F3FD 200D 2642` (minimally-qualified) should match `man kneeling: medium skin tone` (🧎🏽‍♂)" do
  if m = "🧎🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧎🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♂"
  else
    fail("`1F9CE 1F3FD 200D 2642` doesn't match `man kneeling: medium skin tone` (🧎🏽‍♂)")
  end
end

it "`1F9CE 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man kneeling: medium-dark skin tone` (🧎🏾‍♂️)" do
  if m = "🧎🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧎🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♂️"
  else
    fail("`1F9CE 1F3FE 200D 2642 FE0F` doesn't match `man kneeling: medium-dark skin tone` (🧎🏾‍♂️)")
  end
end

it "`1F9CE 1F3FE 200D 2642` (minimally-qualified) should match `man kneeling: medium-dark skin tone` (🧎🏾‍♂)" do
  if m = "🧎🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧎🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♂"
  else
    fail("`1F9CE 1F3FE 200D 2642` doesn't match `man kneeling: medium-dark skin tone` (🧎🏾‍♂)")
  end
end

it "`1F9CE 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man kneeling: dark skin tone` (🧎🏿‍♂️)" do
  if m = "🧎🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧎🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♂️"
  else
    fail("`1F9CE 1F3FF 200D 2642 FE0F` doesn't match `man kneeling: dark skin tone` (🧎🏿‍♂️)")
  end
end

it "`1F9CE 1F3FF 200D 2642` (minimally-qualified) should match `man kneeling: dark skin tone` (🧎🏿‍♂)" do
  if m = "🧎🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧎🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♂"
  else
    fail("`1F9CE 1F3FF 200D 2642` doesn't match `man kneeling: dark skin tone` (🧎🏿‍♂)")
  end
end

it "`1F9CE 200D 2640 FE0F` (fully-qualified) should match `woman kneeling` (🧎‍♀️)" do
  if m = "🧎‍♀️".match(Emoji::EMOJI_REGEX)
    "🧎‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♀️"
  else
    fail("`1F9CE 200D 2640 FE0F` doesn't match `woman kneeling` (🧎‍♀️)")
  end
end

it "`1F9CE 200D 2640` (minimally-qualified) should match `woman kneeling` (🧎‍♀)" do
  if m = "🧎‍♀".match(Emoji::EMOJI_REGEX)
    "🧎‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎‍♀"
  else
    fail("`1F9CE 200D 2640` doesn't match `woman kneeling` (🧎‍♀)")
  end
end

it "`1F9CE 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: light skin tone` (🧎🏻‍♀️)" do
  if m = "🧎🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧎🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♀️"
  else
    fail("`1F9CE 1F3FB 200D 2640 FE0F` doesn't match `woman kneeling: light skin tone` (🧎🏻‍♀️)")
  end
end

it "`1F9CE 1F3FB 200D 2640` (minimally-qualified) should match `woman kneeling: light skin tone` (🧎🏻‍♀)" do
  if m = "🧎🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧎🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏻‍♀"
  else
    fail("`1F9CE 1F3FB 200D 2640` doesn't match `woman kneeling: light skin tone` (🧎🏻‍♀)")
  end
end

it "`1F9CE 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: medium-light skin tone` (🧎🏼‍♀️)" do
  if m = "🧎🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧎🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♀️"
  else
    fail("`1F9CE 1F3FC 200D 2640 FE0F` doesn't match `woman kneeling: medium-light skin tone` (🧎🏼‍♀️)")
  end
end

it "`1F9CE 1F3FC 200D 2640` (minimally-qualified) should match `woman kneeling: medium-light skin tone` (🧎🏼‍♀)" do
  if m = "🧎🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧎🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏼‍♀"
  else
    fail("`1F9CE 1F3FC 200D 2640` doesn't match `woman kneeling: medium-light skin tone` (🧎🏼‍♀)")
  end
end

it "`1F9CE 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: medium skin tone` (🧎🏽‍♀️)" do
  if m = "🧎🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧎🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♀️"
  else
    fail("`1F9CE 1F3FD 200D 2640 FE0F` doesn't match `woman kneeling: medium skin tone` (🧎🏽‍♀️)")
  end
end

it "`1F9CE 1F3FD 200D 2640` (minimally-qualified) should match `woman kneeling: medium skin tone` (🧎🏽‍♀)" do
  if m = "🧎🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧎🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏽‍♀"
  else
    fail("`1F9CE 1F3FD 200D 2640` doesn't match `woman kneeling: medium skin tone` (🧎🏽‍♀)")
  end
end

it "`1F9CE 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: medium-dark skin tone` (🧎🏾‍♀️)" do
  if m = "🧎🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧎🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♀️"
  else
    fail("`1F9CE 1F3FE 200D 2640 FE0F` doesn't match `woman kneeling: medium-dark skin tone` (🧎🏾‍♀️)")
  end
end

it "`1F9CE 1F3FE 200D 2640` (minimally-qualified) should match `woman kneeling: medium-dark skin tone` (🧎🏾‍♀)" do
  if m = "🧎🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧎🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏾‍♀"
  else
    fail("`1F9CE 1F3FE 200D 2640` doesn't match `woman kneeling: medium-dark skin tone` (🧎🏾‍♀)")
  end
end

it "`1F9CE 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman kneeling: dark skin tone` (🧎🏿‍♀️)" do
  if m = "🧎🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧎🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♀️"
  else
    fail("`1F9CE 1F3FF 200D 2640 FE0F` doesn't match `woman kneeling: dark skin tone` (🧎🏿‍♀️)")
  end
end

it "`1F9CE 1F3FF 200D 2640` (minimally-qualified) should match `woman kneeling: dark skin tone` (🧎🏿‍♀)" do
  if m = "🧎🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧎🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧎🏿‍♀"
  else
    fail("`1F9CE 1F3FF 200D 2640` doesn't match `woman kneeling: dark skin tone` (🧎🏿‍♀)")
  end
end

it "`1F468 200D 1F9AF` (fully-qualified) should match `man with probing cane` (👨‍🦯)" do
  if m = "👨‍🦯".match(Emoji::EMOJI_REGEX)
    "👨‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦯"
  else
    fail("`1F468 200D 1F9AF` doesn't match `man with probing cane` (👨‍🦯)")
  end
end

it "`1F468 1F3FB 200D 1F9AF` (fully-qualified) should match `man with probing cane: light skin tone` (👨🏻‍🦯)" do
  if m = "👨🏻‍🦯".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦯"
  else
    fail("`1F468 1F3FB 200D 1F9AF` doesn't match `man with probing cane: light skin tone` (👨🏻‍🦯)")
  end
end

it "`1F468 1F3FC 200D 1F9AF` (fully-qualified) should match `man with probing cane: medium-light skin tone` (👨🏼‍🦯)" do
  if m = "👨🏼‍🦯".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦯"
  else
    fail("`1F468 1F3FC 200D 1F9AF` doesn't match `man with probing cane: medium-light skin tone` (👨🏼‍🦯)")
  end
end

it "`1F468 1F3FD 200D 1F9AF` (fully-qualified) should match `man with probing cane: medium skin tone` (👨🏽‍🦯)" do
  if m = "👨🏽‍🦯".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦯"
  else
    fail("`1F468 1F3FD 200D 1F9AF` doesn't match `man with probing cane: medium skin tone` (👨🏽‍🦯)")
  end
end

it "`1F468 1F3FE 200D 1F9AF` (fully-qualified) should match `man with probing cane: medium-dark skin tone` (👨🏾‍🦯)" do
  if m = "👨🏾‍🦯".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦯"
  else
    fail("`1F468 1F3FE 200D 1F9AF` doesn't match `man with probing cane: medium-dark skin tone` (👨🏾‍🦯)")
  end
end

it "`1F468 1F3FF 200D 1F9AF` (fully-qualified) should match `man with probing cane: dark skin tone` (👨🏿‍🦯)" do
  if m = "👨🏿‍🦯".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦯"
  else
    fail("`1F468 1F3FF 200D 1F9AF` doesn't match `man with probing cane: dark skin tone` (👨🏿‍🦯)")
  end
end

it "`1F469 200D 1F9AF` (fully-qualified) should match `woman with probing cane` (👩‍🦯)" do
  if m = "👩‍🦯".match(Emoji::EMOJI_REGEX)
    "👩‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦯"
  else
    fail("`1F469 200D 1F9AF` doesn't match `woman with probing cane` (👩‍🦯)")
  end
end

it "`1F469 1F3FB 200D 1F9AF` (fully-qualified) should match `woman with probing cane: light skin tone` (👩🏻‍🦯)" do
  if m = "👩🏻‍🦯".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦯"
  else
    fail("`1F469 1F3FB 200D 1F9AF` doesn't match `woman with probing cane: light skin tone` (👩🏻‍🦯)")
  end
end

it "`1F469 1F3FC 200D 1F9AF` (fully-qualified) should match `woman with probing cane: medium-light skin tone` (👩🏼‍🦯)" do
  if m = "👩🏼‍🦯".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦯"
  else
    fail("`1F469 1F3FC 200D 1F9AF` doesn't match `woman with probing cane: medium-light skin tone` (👩🏼‍🦯)")
  end
end

it "`1F469 1F3FD 200D 1F9AF` (fully-qualified) should match `woman with probing cane: medium skin tone` (👩🏽‍🦯)" do
  if m = "👩🏽‍🦯".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦯"
  else
    fail("`1F469 1F3FD 200D 1F9AF` doesn't match `woman with probing cane: medium skin tone` (👩🏽‍🦯)")
  end
end

it "`1F469 1F3FE 200D 1F9AF` (fully-qualified) should match `woman with probing cane: medium-dark skin tone` (👩🏾‍🦯)" do
  if m = "👩🏾‍🦯".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦯"
  else
    fail("`1F469 1F3FE 200D 1F9AF` doesn't match `woman with probing cane: medium-dark skin tone` (👩🏾‍🦯)")
  end
end

it "`1F469 1F3FF 200D 1F9AF` (fully-qualified) should match `woman with probing cane: dark skin tone` (👩🏿‍🦯)" do
  if m = "👩🏿‍🦯".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦯"
  else
    fail("`1F469 1F3FF 200D 1F9AF` doesn't match `woman with probing cane: dark skin tone` (👩🏿‍🦯)")
  end
end

it "`1F468 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair` (👨‍🦼)" do
  if m = "👨‍🦼".match(Emoji::EMOJI_REGEX)
    "👨‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦼"
  else
    fail("`1F468 200D 1F9BC` doesn't match `man in motorized wheelchair` (👨‍🦼)")
  end
end

it "`1F468 1F3FB 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: light skin tone` (👨🏻‍🦼)" do
  if m = "👨🏻‍🦼".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦼"
  else
    fail("`1F468 1F3FB 200D 1F9BC` doesn't match `man in motorized wheelchair: light skin tone` (👨🏻‍🦼)")
  end
end

it "`1F468 1F3FC 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: medium-light skin tone` (👨🏼‍🦼)" do
  if m = "👨🏼‍🦼".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦼"
  else
    fail("`1F468 1F3FC 200D 1F9BC` doesn't match `man in motorized wheelchair: medium-light skin tone` (👨🏼‍🦼)")
  end
end

it "`1F468 1F3FD 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: medium skin tone` (👨🏽‍🦼)" do
  if m = "👨🏽‍🦼".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦼"
  else
    fail("`1F468 1F3FD 200D 1F9BC` doesn't match `man in motorized wheelchair: medium skin tone` (👨🏽‍🦼)")
  end
end

it "`1F468 1F3FE 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: medium-dark skin tone` (👨🏾‍🦼)" do
  if m = "👨🏾‍🦼".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦼"
  else
    fail("`1F468 1F3FE 200D 1F9BC` doesn't match `man in motorized wheelchair: medium-dark skin tone` (👨🏾‍🦼)")
  end
end

it "`1F468 1F3FF 200D 1F9BC` (fully-qualified) should match `man in motorized wheelchair: dark skin tone` (👨🏿‍🦼)" do
  if m = "👨🏿‍🦼".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦼"
  else
    fail("`1F468 1F3FF 200D 1F9BC` doesn't match `man in motorized wheelchair: dark skin tone` (👨🏿‍🦼)")
  end
end

it "`1F469 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair` (👩‍🦼)" do
  if m = "👩‍🦼".match(Emoji::EMOJI_REGEX)
    "👩‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦼"
  else
    fail("`1F469 200D 1F9BC` doesn't match `woman in motorized wheelchair` (👩‍🦼)")
  end
end

it "`1F469 1F3FB 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: light skin tone` (👩🏻‍🦼)" do
  if m = "👩🏻‍🦼".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦼"
  else
    fail("`1F469 1F3FB 200D 1F9BC` doesn't match `woman in motorized wheelchair: light skin tone` (👩🏻‍🦼)")
  end
end

it "`1F469 1F3FC 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: medium-light skin tone` (👩🏼‍🦼)" do
  if m = "👩🏼‍🦼".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦼"
  else
    fail("`1F469 1F3FC 200D 1F9BC` doesn't match `woman in motorized wheelchair: medium-light skin tone` (👩🏼‍🦼)")
  end
end

it "`1F469 1F3FD 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: medium skin tone` (👩🏽‍🦼)" do
  if m = "👩🏽‍🦼".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦼"
  else
    fail("`1F469 1F3FD 200D 1F9BC` doesn't match `woman in motorized wheelchair: medium skin tone` (👩🏽‍🦼)")
  end
end

it "`1F469 1F3FE 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: medium-dark skin tone` (👩🏾‍🦼)" do
  if m = "👩🏾‍🦼".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦼"
  else
    fail("`1F469 1F3FE 200D 1F9BC` doesn't match `woman in motorized wheelchair: medium-dark skin tone` (👩🏾‍🦼)")
  end
end

it "`1F469 1F3FF 200D 1F9BC` (fully-qualified) should match `woman in motorized wheelchair: dark skin tone` (👩🏿‍🦼)" do
  if m = "👩🏿‍🦼".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦼"
  else
    fail("`1F469 1F3FF 200D 1F9BC` doesn't match `woman in motorized wheelchair: dark skin tone` (👩🏿‍🦼)")
  end
end

it "`1F468 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair` (👨‍🦽)" do
  if m = "👨‍🦽".match(Emoji::EMOJI_REGEX)
    "👨‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍🦽"
  else
    fail("`1F468 200D 1F9BD` doesn't match `man in manual wheelchair` (👨‍🦽)")
  end
end

it "`1F468 1F3FB 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: light skin tone` (👨🏻‍🦽)" do
  if m = "👨🏻‍🦽".match(Emoji::EMOJI_REGEX)
    "👨🏻‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏻‍🦽"
  else
    fail("`1F468 1F3FB 200D 1F9BD` doesn't match `man in manual wheelchair: light skin tone` (👨🏻‍🦽)")
  end
end

it "`1F468 1F3FC 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: medium-light skin tone` (👨🏼‍🦽)" do
  if m = "👨🏼‍🦽".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🦽"
  else
    fail("`1F468 1F3FC 200D 1F9BD` doesn't match `man in manual wheelchair: medium-light skin tone` (👨🏼‍🦽)")
  end
end

it "`1F468 1F3FD 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: medium skin tone` (👨🏽‍🦽)" do
  if m = "👨🏽‍🦽".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🦽"
  else
    fail("`1F468 1F3FD 200D 1F9BD` doesn't match `man in manual wheelchair: medium skin tone` (👨🏽‍🦽)")
  end
end

it "`1F468 1F3FE 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: medium-dark skin tone` (👨🏾‍🦽)" do
  if m = "👨🏾‍🦽".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🦽"
  else
    fail("`1F468 1F3FE 200D 1F9BD` doesn't match `man in manual wheelchair: medium-dark skin tone` (👨🏾‍🦽)")
  end
end

it "`1F468 1F3FF 200D 1F9BD` (fully-qualified) should match `man in manual wheelchair: dark skin tone` (👨🏿‍🦽)" do
  if m = "👨🏿‍🦽".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🦽"
  else
    fail("`1F468 1F3FF 200D 1F9BD` doesn't match `man in manual wheelchair: dark skin tone` (👨🏿‍🦽)")
  end
end

it "`1F469 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair` (👩‍🦽)" do
  if m = "👩‍🦽".match(Emoji::EMOJI_REGEX)
    "👩‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍🦽"
  else
    fail("`1F469 200D 1F9BD` doesn't match `woman in manual wheelchair` (👩‍🦽)")
  end
end

it "`1F469 1F3FB 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: light skin tone` (👩🏻‍🦽)" do
  if m = "👩🏻‍🦽".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🦽"
  else
    fail("`1F469 1F3FB 200D 1F9BD` doesn't match `woman in manual wheelchair: light skin tone` (👩🏻‍🦽)")
  end
end

it "`1F469 1F3FC 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: medium-light skin tone` (👩🏼‍🦽)" do
  if m = "👩🏼‍🦽".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🦽"
  else
    fail("`1F469 1F3FC 200D 1F9BD` doesn't match `woman in manual wheelchair: medium-light skin tone` (👩🏼‍🦽)")
  end
end

it "`1F469 1F3FD 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: medium skin tone` (👩🏽‍🦽)" do
  if m = "👩🏽‍🦽".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🦽"
  else
    fail("`1F469 1F3FD 200D 1F9BD` doesn't match `woman in manual wheelchair: medium skin tone` (👩🏽‍🦽)")
  end
end

it "`1F469 1F3FE 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: medium-dark skin tone` (👩🏾‍🦽)" do
  if m = "👩🏾‍🦽".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🦽"
  else
    fail("`1F469 1F3FE 200D 1F9BD` doesn't match `woman in manual wheelchair: medium-dark skin tone` (👩🏾‍🦽)")
  end
end

it "`1F469 1F3FF 200D 1F9BD` (fully-qualified) should match `woman in manual wheelchair: dark skin tone` (👩🏿‍🦽)" do
  if m = "👩🏿‍🦽".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🦽"
  else
    fail("`1F469 1F3FF 200D 1F9BD` doesn't match `woman in manual wheelchair: dark skin tone` (👩🏿‍🦽)")
  end
end

it "`1F3C3` (fully-qualified) should match `person running` (🏃)" do
  if m = "🏃".match(Emoji::EMOJI_REGEX)
    "🏃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃"
  else
    fail("`1F3C3` doesn't match `person running` (🏃)")
  end
end

it "`1F3C3 1F3FB` (fully-qualified) should match `person running: light skin tone` (🏃🏻)" do
  if m = "🏃🏻".match(Emoji::EMOJI_REGEX)
    "🏃🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻"
  else
    fail("`1F3C3 1F3FB` doesn't match `person running: light skin tone` (🏃🏻)")
  end
end

it "`1F3C3 1F3FC` (fully-qualified) should match `person running: medium-light skin tone` (🏃🏼)" do
  if m = "🏃🏼".match(Emoji::EMOJI_REGEX)
    "🏃🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼"
  else
    fail("`1F3C3 1F3FC` doesn't match `person running: medium-light skin tone` (🏃🏼)")
  end
end

it "`1F3C3 1F3FD` (fully-qualified) should match `person running: medium skin tone` (🏃🏽)" do
  if m = "🏃🏽".match(Emoji::EMOJI_REGEX)
    "🏃🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽"
  else
    fail("`1F3C3 1F3FD` doesn't match `person running: medium skin tone` (🏃🏽)")
  end
end

it "`1F3C3 1F3FE` (fully-qualified) should match `person running: medium-dark skin tone` (🏃🏾)" do
  if m = "🏃🏾".match(Emoji::EMOJI_REGEX)
    "🏃🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾"
  else
    fail("`1F3C3 1F3FE` doesn't match `person running: medium-dark skin tone` (🏃🏾)")
  end
end

it "`1F3C3 1F3FF` (fully-qualified) should match `person running: dark skin tone` (🏃🏿)" do
  if m = "🏃🏿".match(Emoji::EMOJI_REGEX)
    "🏃🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿"
  else
    fail("`1F3C3 1F3FF` doesn't match `person running: dark skin tone` (🏃🏿)")
  end
end

it "`1F3C3 200D 2642 FE0F` (fully-qualified) should match `man running` (🏃‍♂️)" do
  if m = "🏃‍♂️".match(Emoji::EMOJI_REGEX)
    "🏃‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♂️"
  else
    fail("`1F3C3 200D 2642 FE0F` doesn't match `man running` (🏃‍♂️)")
  end
end

it "`1F3C3 200D 2642` (minimally-qualified) should match `man running` (🏃‍♂)" do
  if m = "🏃‍♂".match(Emoji::EMOJI_REGEX)
    "🏃‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♂"
  else
    fail("`1F3C3 200D 2642` doesn't match `man running` (🏃‍♂)")
  end
end

it "`1F3C3 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man running: light skin tone` (🏃🏻‍♂️)" do
  if m = "🏃🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🏃🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♂️"
  else
    fail("`1F3C3 1F3FB 200D 2642 FE0F` doesn't match `man running: light skin tone` (🏃🏻‍♂️)")
  end
end

it "`1F3C3 1F3FB 200D 2642` (minimally-qualified) should match `man running: light skin tone` (🏃🏻‍♂)" do
  if m = "🏃🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🏃🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♂"
  else
    fail("`1F3C3 1F3FB 200D 2642` doesn't match `man running: light skin tone` (🏃🏻‍♂)")
  end
end

it "`1F3C3 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man running: medium-light skin tone` (🏃🏼‍♂️)" do
  if m = "🏃🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🏃🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♂️"
  else
    fail("`1F3C3 1F3FC 200D 2642 FE0F` doesn't match `man running: medium-light skin tone` (🏃🏼‍♂️)")
  end
end

it "`1F3C3 1F3FC 200D 2642` (minimally-qualified) should match `man running: medium-light skin tone` (🏃🏼‍♂)" do
  if m = "🏃🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🏃🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♂"
  else
    fail("`1F3C3 1F3FC 200D 2642` doesn't match `man running: medium-light skin tone` (🏃🏼‍♂)")
  end
end

it "`1F3C3 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man running: medium skin tone` (🏃🏽‍♂️)" do
  if m = "🏃🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🏃🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♂️"
  else
    fail("`1F3C3 1F3FD 200D 2642 FE0F` doesn't match `man running: medium skin tone` (🏃🏽‍♂️)")
  end
end

it "`1F3C3 1F3FD 200D 2642` (minimally-qualified) should match `man running: medium skin tone` (🏃🏽‍♂)" do
  if m = "🏃🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🏃🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♂"
  else
    fail("`1F3C3 1F3FD 200D 2642` doesn't match `man running: medium skin tone` (🏃🏽‍♂)")
  end
end

it "`1F3C3 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man running: medium-dark skin tone` (🏃🏾‍♂️)" do
  if m = "🏃🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🏃🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♂️"
  else
    fail("`1F3C3 1F3FE 200D 2642 FE0F` doesn't match `man running: medium-dark skin tone` (🏃🏾‍♂️)")
  end
end

it "`1F3C3 1F3FE 200D 2642` (minimally-qualified) should match `man running: medium-dark skin tone` (🏃🏾‍♂)" do
  if m = "🏃🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🏃🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♂"
  else
    fail("`1F3C3 1F3FE 200D 2642` doesn't match `man running: medium-dark skin tone` (🏃🏾‍♂)")
  end
end

it "`1F3C3 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man running: dark skin tone` (🏃🏿‍♂️)" do
  if m = "🏃🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🏃🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♂️"
  else
    fail("`1F3C3 1F3FF 200D 2642 FE0F` doesn't match `man running: dark skin tone` (🏃🏿‍♂️)")
  end
end

it "`1F3C3 1F3FF 200D 2642` (minimally-qualified) should match `man running: dark skin tone` (🏃🏿‍♂)" do
  if m = "🏃🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🏃🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♂"
  else
    fail("`1F3C3 1F3FF 200D 2642` doesn't match `man running: dark skin tone` (🏃🏿‍♂)")
  end
end

it "`1F3C3 200D 2640 FE0F` (fully-qualified) should match `woman running` (🏃‍♀️)" do
  if m = "🏃‍♀️".match(Emoji::EMOJI_REGEX)
    "🏃‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♀️"
  else
    fail("`1F3C3 200D 2640 FE0F` doesn't match `woman running` (🏃‍♀️)")
  end
end

it "`1F3C3 200D 2640` (minimally-qualified) should match `woman running` (🏃‍♀)" do
  if m = "🏃‍♀".match(Emoji::EMOJI_REGEX)
    "🏃‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃‍♀"
  else
    fail("`1F3C3 200D 2640` doesn't match `woman running` (🏃‍♀)")
  end
end

it "`1F3C3 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman running: light skin tone` (🏃🏻‍♀️)" do
  if m = "🏃🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🏃🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♀️"
  else
    fail("`1F3C3 1F3FB 200D 2640 FE0F` doesn't match `woman running: light skin tone` (🏃🏻‍♀️)")
  end
end

it "`1F3C3 1F3FB 200D 2640` (minimally-qualified) should match `woman running: light skin tone` (🏃🏻‍♀)" do
  if m = "🏃🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🏃🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏻‍♀"
  else
    fail("`1F3C3 1F3FB 200D 2640` doesn't match `woman running: light skin tone` (🏃🏻‍♀)")
  end
end

it "`1F3C3 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman running: medium-light skin tone` (🏃🏼‍♀️)" do
  if m = "🏃🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🏃🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♀️"
  else
    fail("`1F3C3 1F3FC 200D 2640 FE0F` doesn't match `woman running: medium-light skin tone` (🏃🏼‍♀️)")
  end
end

it "`1F3C3 1F3FC 200D 2640` (minimally-qualified) should match `woman running: medium-light skin tone` (🏃🏼‍♀)" do
  if m = "🏃🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🏃🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏼‍♀"
  else
    fail("`1F3C3 1F3FC 200D 2640` doesn't match `woman running: medium-light skin tone` (🏃🏼‍♀)")
  end
end

it "`1F3C3 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman running: medium skin tone` (🏃🏽‍♀️)" do
  if m = "🏃🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🏃🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♀️"
  else
    fail("`1F3C3 1F3FD 200D 2640 FE0F` doesn't match `woman running: medium skin tone` (🏃🏽‍♀️)")
  end
end

it "`1F3C3 1F3FD 200D 2640` (minimally-qualified) should match `woman running: medium skin tone` (🏃🏽‍♀)" do
  if m = "🏃🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🏃🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏽‍♀"
  else
    fail("`1F3C3 1F3FD 200D 2640` doesn't match `woman running: medium skin tone` (🏃🏽‍♀)")
  end
end

it "`1F3C3 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman running: medium-dark skin tone` (🏃🏾‍♀️)" do
  if m = "🏃🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🏃🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♀️"
  else
    fail("`1F3C3 1F3FE 200D 2640 FE0F` doesn't match `woman running: medium-dark skin tone` (🏃🏾‍♀️)")
  end
end

it "`1F3C3 1F3FE 200D 2640` (minimally-qualified) should match `woman running: medium-dark skin tone` (🏃🏾‍♀)" do
  if m = "🏃🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🏃🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏾‍♀"
  else
    fail("`1F3C3 1F3FE 200D 2640` doesn't match `woman running: medium-dark skin tone` (🏃🏾‍♀)")
  end
end

it "`1F3C3 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman running: dark skin tone` (🏃🏿‍♀️)" do
  if m = "🏃🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🏃🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♀️"
  else
    fail("`1F3C3 1F3FF 200D 2640 FE0F` doesn't match `woman running: dark skin tone` (🏃🏿‍♀️)")
  end
end

it "`1F3C3 1F3FF 200D 2640` (minimally-qualified) should match `woman running: dark skin tone` (🏃🏿‍♀)" do
  if m = "🏃🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🏃🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏃🏿‍♀"
  else
    fail("`1F3C3 1F3FF 200D 2640` doesn't match `woman running: dark skin tone` (🏃🏿‍♀)")
  end
end

it "`1F483` (fully-qualified) should match `woman dancing` (💃)" do
  if m = "💃".match(Emoji::EMOJI_REGEX)
    "💃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃"
  else
    fail("`1F483` doesn't match `woman dancing` (💃)")
  end
end

it "`1F483 1F3FB` (fully-qualified) should match `woman dancing: light skin tone` (💃🏻)" do
  if m = "💃🏻".match(Emoji::EMOJI_REGEX)
    "💃🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏻"
  else
    fail("`1F483 1F3FB` doesn't match `woman dancing: light skin tone` (💃🏻)")
  end
end

it "`1F483 1F3FC` (fully-qualified) should match `woman dancing: medium-light skin tone` (💃🏼)" do
  if m = "💃🏼".match(Emoji::EMOJI_REGEX)
    "💃🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏼"
  else
    fail("`1F483 1F3FC` doesn't match `woman dancing: medium-light skin tone` (💃🏼)")
  end
end

it "`1F483 1F3FD` (fully-qualified) should match `woman dancing: medium skin tone` (💃🏽)" do
  if m = "💃🏽".match(Emoji::EMOJI_REGEX)
    "💃🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏽"
  else
    fail("`1F483 1F3FD` doesn't match `woman dancing: medium skin tone` (💃🏽)")
  end
end

it "`1F483 1F3FE` (fully-qualified) should match `woman dancing: medium-dark skin tone` (💃🏾)" do
  if m = "💃🏾".match(Emoji::EMOJI_REGEX)
    "💃🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏾"
  else
    fail("`1F483 1F3FE` doesn't match `woman dancing: medium-dark skin tone` (💃🏾)")
  end
end

it "`1F483 1F3FF` (fully-qualified) should match `woman dancing: dark skin tone` (💃🏿)" do
  if m = "💃🏿".match(Emoji::EMOJI_REGEX)
    "💃🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💃🏿"
  else
    fail("`1F483 1F3FF` doesn't match `woman dancing: dark skin tone` (💃🏿)")
  end
end

it "`1F57A` (fully-qualified) should match `man dancing` (🕺)" do
  if m = "🕺".match(Emoji::EMOJI_REGEX)
    "🕺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺"
  else
    fail("`1F57A` doesn't match `man dancing` (🕺)")
  end
end

it "`1F57A 1F3FB` (fully-qualified) should match `man dancing: light skin tone` (🕺🏻)" do
  if m = "🕺🏻".match(Emoji::EMOJI_REGEX)
    "🕺🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏻"
  else
    fail("`1F57A 1F3FB` doesn't match `man dancing: light skin tone` (🕺🏻)")
  end
end

it "`1F57A 1F3FC` (fully-qualified) should match `man dancing: medium-light skin tone` (🕺🏼)" do
  if m = "🕺🏼".match(Emoji::EMOJI_REGEX)
    "🕺🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏼"
  else
    fail("`1F57A 1F3FC` doesn't match `man dancing: medium-light skin tone` (🕺🏼)")
  end
end

it "`1F57A 1F3FD` (fully-qualified) should match `man dancing: medium skin tone` (🕺🏽)" do
  if m = "🕺🏽".match(Emoji::EMOJI_REGEX)
    "🕺🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏽"
  else
    fail("`1F57A 1F3FD` doesn't match `man dancing: medium skin tone` (🕺🏽)")
  end
end

it "`1F57A 1F3FE` (fully-qualified) should match `man dancing: medium-dark skin tone` (🕺🏾)" do
  if m = "🕺🏾".match(Emoji::EMOJI_REGEX)
    "🕺🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏾"
  else
    fail("`1F57A 1F3FE` doesn't match `man dancing: medium-dark skin tone` (🕺🏾)")
  end
end

it "`1F57A 1F3FF` (fully-qualified) should match `man dancing: dark skin tone` (🕺🏿)" do
  if m = "🕺🏿".match(Emoji::EMOJI_REGEX)
    "🕺🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕺🏿"
  else
    fail("`1F57A 1F3FF` doesn't match `man dancing: dark skin tone` (🕺🏿)")
  end
end

it "`1F574 FE0F` (fully-qualified) should match `man in suit levitating` (🕴️)" do
  if m = "🕴️".match(Emoji::EMOJI_REGEX)
    "🕴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴️"
  else
    fail("`1F574 FE0F` doesn't match `man in suit levitating` (🕴️)")
  end
end

it "`1F574` (unqualified) should match `man in suit levitating` (🕴)" do
  if m = "🕴".match(Emoji::EMOJI_REGEX)
    "🕴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴"
  else
    fail("`1F574` doesn't match `man in suit levitating` (🕴)")
  end
end

it "`1F574 1F3FB` (fully-qualified) should match `man in suit levitating: light skin tone` (🕴🏻)" do
  if m = "🕴🏻".match(Emoji::EMOJI_REGEX)
    "🕴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏻"
  else
    fail("`1F574 1F3FB` doesn't match `man in suit levitating: light skin tone` (🕴🏻)")
  end
end

it "`1F574 1F3FC` (fully-qualified) should match `man in suit levitating: medium-light skin tone` (🕴🏼)" do
  if m = "🕴🏼".match(Emoji::EMOJI_REGEX)
    "🕴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏼"
  else
    fail("`1F574 1F3FC` doesn't match `man in suit levitating: medium-light skin tone` (🕴🏼)")
  end
end

it "`1F574 1F3FD` (fully-qualified) should match `man in suit levitating: medium skin tone` (🕴🏽)" do
  if m = "🕴🏽".match(Emoji::EMOJI_REGEX)
    "🕴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏽"
  else
    fail("`1F574 1F3FD` doesn't match `man in suit levitating: medium skin tone` (🕴🏽)")
  end
end

it "`1F574 1F3FE` (fully-qualified) should match `man in suit levitating: medium-dark skin tone` (🕴🏾)" do
  if m = "🕴🏾".match(Emoji::EMOJI_REGEX)
    "🕴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏾"
  else
    fail("`1F574 1F3FE` doesn't match `man in suit levitating: medium-dark skin tone` (🕴🏾)")
  end
end

it "`1F574 1F3FF` (fully-qualified) should match `man in suit levitating: dark skin tone` (🕴🏿)" do
  if m = "🕴🏿".match(Emoji::EMOJI_REGEX)
    "🕴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕴🏿"
  else
    fail("`1F574 1F3FF` doesn't match `man in suit levitating: dark skin tone` (🕴🏿)")
  end
end

it "`1F46F` (fully-qualified) should match `people with bunny ears` (👯)" do
  if m = "👯".match(Emoji::EMOJI_REGEX)
    "👯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯"
  else
    fail("`1F46F` doesn't match `people with bunny ears` (👯)")
  end
end

it "`1F46F 200D 2642 FE0F` (fully-qualified) should match `men with bunny ears` (👯‍♂️)" do
  if m = "👯‍♂️".match(Emoji::EMOJI_REGEX)
    "👯‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♂️"
  else
    fail("`1F46F 200D 2642 FE0F` doesn't match `men with bunny ears` (👯‍♂️)")
  end
end

it "`1F46F 200D 2642` (minimally-qualified) should match `men with bunny ears` (👯‍♂)" do
  if m = "👯‍♂".match(Emoji::EMOJI_REGEX)
    "👯‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♂"
  else
    fail("`1F46F 200D 2642` doesn't match `men with bunny ears` (👯‍♂)")
  end
end

it "`1F46F 200D 2640 FE0F` (fully-qualified) should match `women with bunny ears` (👯‍♀️)" do
  if m = "👯‍♀️".match(Emoji::EMOJI_REGEX)
    "👯‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♀️"
  else
    fail("`1F46F 200D 2640 FE0F` doesn't match `women with bunny ears` (👯‍♀️)")
  end
end

it "`1F46F 200D 2640` (minimally-qualified) should match `women with bunny ears` (👯‍♀)" do
  if m = "👯‍♀".match(Emoji::EMOJI_REGEX)
    "👯‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👯‍♀"
  else
    fail("`1F46F 200D 2640` doesn't match `women with bunny ears` (👯‍♀)")
  end
end

it "`1F9D6` (fully-qualified) should match `person in steamy room` (🧖)" do
  if m = "🧖".match(Emoji::EMOJI_REGEX)
    "🧖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖"
  else
    fail("`1F9D6` doesn't match `person in steamy room` (🧖)")
  end
end

it "`1F9D6 1F3FB` (fully-qualified) should match `person in steamy room: light skin tone` (🧖🏻)" do
  if m = "🧖🏻".match(Emoji::EMOJI_REGEX)
    "🧖🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻"
  else
    fail("`1F9D6 1F3FB` doesn't match `person in steamy room: light skin tone` (🧖🏻)")
  end
end

it "`1F9D6 1F3FC` (fully-qualified) should match `person in steamy room: medium-light skin tone` (🧖🏼)" do
  if m = "🧖🏼".match(Emoji::EMOJI_REGEX)
    "🧖🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼"
  else
    fail("`1F9D6 1F3FC` doesn't match `person in steamy room: medium-light skin tone` (🧖🏼)")
  end
end

it "`1F9D6 1F3FD` (fully-qualified) should match `person in steamy room: medium skin tone` (🧖🏽)" do
  if m = "🧖🏽".match(Emoji::EMOJI_REGEX)
    "🧖🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽"
  else
    fail("`1F9D6 1F3FD` doesn't match `person in steamy room: medium skin tone` (🧖🏽)")
  end
end

it "`1F9D6 1F3FE` (fully-qualified) should match `person in steamy room: medium-dark skin tone` (🧖🏾)" do
  if m = "🧖🏾".match(Emoji::EMOJI_REGEX)
    "🧖🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾"
  else
    fail("`1F9D6 1F3FE` doesn't match `person in steamy room: medium-dark skin tone` (🧖🏾)")
  end
end

it "`1F9D6 1F3FF` (fully-qualified) should match `person in steamy room: dark skin tone` (🧖🏿)" do
  if m = "🧖🏿".match(Emoji::EMOJI_REGEX)
    "🧖🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿"
  else
    fail("`1F9D6 1F3FF` doesn't match `person in steamy room: dark skin tone` (🧖🏿)")
  end
end

it "`1F9D6 200D 2642 FE0F` (fully-qualified) should match `man in steamy room` (🧖‍♂️)" do
  if m = "🧖‍♂️".match(Emoji::EMOJI_REGEX)
    "🧖‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♂️"
  else
    fail("`1F9D6 200D 2642 FE0F` doesn't match `man in steamy room` (🧖‍♂️)")
  end
end

it "`1F9D6 200D 2642` (minimally-qualified) should match `man in steamy room` (🧖‍♂)" do
  if m = "🧖‍♂".match(Emoji::EMOJI_REGEX)
    "🧖‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♂"
  else
    fail("`1F9D6 200D 2642` doesn't match `man in steamy room` (🧖‍♂)")
  end
end

it "`1F9D6 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: light skin tone` (🧖🏻‍♂️)" do
  if m = "🧖🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧖🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♂️"
  else
    fail("`1F9D6 1F3FB 200D 2642 FE0F` doesn't match `man in steamy room: light skin tone` (🧖🏻‍♂️)")
  end
end

it "`1F9D6 1F3FB 200D 2642` (minimally-qualified) should match `man in steamy room: light skin tone` (🧖🏻‍♂)" do
  if m = "🧖🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧖🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♂"
  else
    fail("`1F9D6 1F3FB 200D 2642` doesn't match `man in steamy room: light skin tone` (🧖🏻‍♂)")
  end
end

it "`1F9D6 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: medium-light skin tone` (🧖🏼‍♂️)" do
  if m = "🧖🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧖🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♂️"
  else
    fail("`1F9D6 1F3FC 200D 2642 FE0F` doesn't match `man in steamy room: medium-light skin tone` (🧖🏼‍♂️)")
  end
end

it "`1F9D6 1F3FC 200D 2642` (minimally-qualified) should match `man in steamy room: medium-light skin tone` (🧖🏼‍♂)" do
  if m = "🧖🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧖🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♂"
  else
    fail("`1F9D6 1F3FC 200D 2642` doesn't match `man in steamy room: medium-light skin tone` (🧖🏼‍♂)")
  end
end

it "`1F9D6 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: medium skin tone` (🧖🏽‍♂️)" do
  if m = "🧖🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧖🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♂️"
  else
    fail("`1F9D6 1F3FD 200D 2642 FE0F` doesn't match `man in steamy room: medium skin tone` (🧖🏽‍♂️)")
  end
end

it "`1F9D6 1F3FD 200D 2642` (minimally-qualified) should match `man in steamy room: medium skin tone` (🧖🏽‍♂)" do
  if m = "🧖🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧖🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♂"
  else
    fail("`1F9D6 1F3FD 200D 2642` doesn't match `man in steamy room: medium skin tone` (🧖🏽‍♂)")
  end
end

it "`1F9D6 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: medium-dark skin tone` (🧖🏾‍♂️)" do
  if m = "🧖🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧖🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♂️"
  else
    fail("`1F9D6 1F3FE 200D 2642 FE0F` doesn't match `man in steamy room: medium-dark skin tone` (🧖🏾‍♂️)")
  end
end

it "`1F9D6 1F3FE 200D 2642` (minimally-qualified) should match `man in steamy room: medium-dark skin tone` (🧖🏾‍♂)" do
  if m = "🧖🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧖🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♂"
  else
    fail("`1F9D6 1F3FE 200D 2642` doesn't match `man in steamy room: medium-dark skin tone` (🧖🏾‍♂)")
  end
end

it "`1F9D6 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man in steamy room: dark skin tone` (🧖🏿‍♂️)" do
  if m = "🧖🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧖🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♂️"
  else
    fail("`1F9D6 1F3FF 200D 2642 FE0F` doesn't match `man in steamy room: dark skin tone` (🧖🏿‍♂️)")
  end
end

it "`1F9D6 1F3FF 200D 2642` (minimally-qualified) should match `man in steamy room: dark skin tone` (🧖🏿‍♂)" do
  if m = "🧖🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧖🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♂"
  else
    fail("`1F9D6 1F3FF 200D 2642` doesn't match `man in steamy room: dark skin tone` (🧖🏿‍♂)")
  end
end

it "`1F9D6 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room` (🧖‍♀️)" do
  if m = "🧖‍♀️".match(Emoji::EMOJI_REGEX)
    "🧖‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♀️"
  else
    fail("`1F9D6 200D 2640 FE0F` doesn't match `woman in steamy room` (🧖‍♀️)")
  end
end

it "`1F9D6 200D 2640` (minimally-qualified) should match `woman in steamy room` (🧖‍♀)" do
  if m = "🧖‍♀".match(Emoji::EMOJI_REGEX)
    "🧖‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖‍♀"
  else
    fail("`1F9D6 200D 2640` doesn't match `woman in steamy room` (🧖‍♀)")
  end
end

it "`1F9D6 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: light skin tone` (🧖🏻‍♀️)" do
  if m = "🧖🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧖🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♀️"
  else
    fail("`1F9D6 1F3FB 200D 2640 FE0F` doesn't match `woman in steamy room: light skin tone` (🧖🏻‍♀️)")
  end
end

it "`1F9D6 1F3FB 200D 2640` (minimally-qualified) should match `woman in steamy room: light skin tone` (🧖🏻‍♀)" do
  if m = "🧖🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧖🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏻‍♀"
  else
    fail("`1F9D6 1F3FB 200D 2640` doesn't match `woman in steamy room: light skin tone` (🧖🏻‍♀)")
  end
end

it "`1F9D6 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: medium-light skin tone` (🧖🏼‍♀️)" do
  if m = "🧖🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧖🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♀️"
  else
    fail("`1F9D6 1F3FC 200D 2640 FE0F` doesn't match `woman in steamy room: medium-light skin tone` (🧖🏼‍♀️)")
  end
end

it "`1F9D6 1F3FC 200D 2640` (minimally-qualified) should match `woman in steamy room: medium-light skin tone` (🧖🏼‍♀)" do
  if m = "🧖🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧖🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏼‍♀"
  else
    fail("`1F9D6 1F3FC 200D 2640` doesn't match `woman in steamy room: medium-light skin tone` (🧖🏼‍♀)")
  end
end

it "`1F9D6 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: medium skin tone` (🧖🏽‍♀️)" do
  if m = "🧖🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧖🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♀️"
  else
    fail("`1F9D6 1F3FD 200D 2640 FE0F` doesn't match `woman in steamy room: medium skin tone` (🧖🏽‍♀️)")
  end
end

it "`1F9D6 1F3FD 200D 2640` (minimally-qualified) should match `woman in steamy room: medium skin tone` (🧖🏽‍♀)" do
  if m = "🧖🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧖🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏽‍♀"
  else
    fail("`1F9D6 1F3FD 200D 2640` doesn't match `woman in steamy room: medium skin tone` (🧖🏽‍♀)")
  end
end

it "`1F9D6 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: medium-dark skin tone` (🧖🏾‍♀️)" do
  if m = "🧖🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧖🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♀️"
  else
    fail("`1F9D6 1F3FE 200D 2640 FE0F` doesn't match `woman in steamy room: medium-dark skin tone` (🧖🏾‍♀️)")
  end
end

it "`1F9D6 1F3FE 200D 2640` (minimally-qualified) should match `woman in steamy room: medium-dark skin tone` (🧖🏾‍♀)" do
  if m = "🧖🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧖🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏾‍♀"
  else
    fail("`1F9D6 1F3FE 200D 2640` doesn't match `woman in steamy room: medium-dark skin tone` (🧖🏾‍♀)")
  end
end

it "`1F9D6 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman in steamy room: dark skin tone` (🧖🏿‍♀️)" do
  if m = "🧖🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧖🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♀️"
  else
    fail("`1F9D6 1F3FF 200D 2640 FE0F` doesn't match `woman in steamy room: dark skin tone` (🧖🏿‍♀️)")
  end
end

it "`1F9D6 1F3FF 200D 2640` (minimally-qualified) should match `woman in steamy room: dark skin tone` (🧖🏿‍♀)" do
  if m = "🧖🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧖🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧖🏿‍♀"
  else
    fail("`1F9D6 1F3FF 200D 2640` doesn't match `woman in steamy room: dark skin tone` (🧖🏿‍♀)")
  end
end

it "`1F9D7` (fully-qualified) should match `person climbing` (🧗)" do
  if m = "🧗".match(Emoji::EMOJI_REGEX)
    "🧗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗"
  else
    fail("`1F9D7` doesn't match `person climbing` (🧗)")
  end
end

it "`1F9D7 1F3FB` (fully-qualified) should match `person climbing: light skin tone` (🧗🏻)" do
  if m = "🧗🏻".match(Emoji::EMOJI_REGEX)
    "🧗🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻"
  else
    fail("`1F9D7 1F3FB` doesn't match `person climbing: light skin tone` (🧗🏻)")
  end
end

it "`1F9D7 1F3FC` (fully-qualified) should match `person climbing: medium-light skin tone` (🧗🏼)" do
  if m = "🧗🏼".match(Emoji::EMOJI_REGEX)
    "🧗🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼"
  else
    fail("`1F9D7 1F3FC` doesn't match `person climbing: medium-light skin tone` (🧗🏼)")
  end
end

it "`1F9D7 1F3FD` (fully-qualified) should match `person climbing: medium skin tone` (🧗🏽)" do
  if m = "🧗🏽".match(Emoji::EMOJI_REGEX)
    "🧗🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽"
  else
    fail("`1F9D7 1F3FD` doesn't match `person climbing: medium skin tone` (🧗🏽)")
  end
end

it "`1F9D7 1F3FE` (fully-qualified) should match `person climbing: medium-dark skin tone` (🧗🏾)" do
  if m = "🧗🏾".match(Emoji::EMOJI_REGEX)
    "🧗🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾"
  else
    fail("`1F9D7 1F3FE` doesn't match `person climbing: medium-dark skin tone` (🧗🏾)")
  end
end

it "`1F9D7 1F3FF` (fully-qualified) should match `person climbing: dark skin tone` (🧗🏿)" do
  if m = "🧗🏿".match(Emoji::EMOJI_REGEX)
    "🧗🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿"
  else
    fail("`1F9D7 1F3FF` doesn't match `person climbing: dark skin tone` (🧗🏿)")
  end
end

it "`1F9D7 200D 2642 FE0F` (fully-qualified) should match `man climbing` (🧗‍♂️)" do
  if m = "🧗‍♂️".match(Emoji::EMOJI_REGEX)
    "🧗‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♂️"
  else
    fail("`1F9D7 200D 2642 FE0F` doesn't match `man climbing` (🧗‍♂️)")
  end
end

it "`1F9D7 200D 2642` (minimally-qualified) should match `man climbing` (🧗‍♂)" do
  if m = "🧗‍♂".match(Emoji::EMOJI_REGEX)
    "🧗‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♂"
  else
    fail("`1F9D7 200D 2642` doesn't match `man climbing` (🧗‍♂)")
  end
end

it "`1F9D7 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man climbing: light skin tone` (🧗🏻‍♂️)" do
  if m = "🧗🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧗🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♂️"
  else
    fail("`1F9D7 1F3FB 200D 2642 FE0F` doesn't match `man climbing: light skin tone` (🧗🏻‍♂️)")
  end
end

it "`1F9D7 1F3FB 200D 2642` (minimally-qualified) should match `man climbing: light skin tone` (🧗🏻‍♂)" do
  if m = "🧗🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧗🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♂"
  else
    fail("`1F9D7 1F3FB 200D 2642` doesn't match `man climbing: light skin tone` (🧗🏻‍♂)")
  end
end

it "`1F9D7 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man climbing: medium-light skin tone` (🧗🏼‍♂️)" do
  if m = "🧗🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧗🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♂️"
  else
    fail("`1F9D7 1F3FC 200D 2642 FE0F` doesn't match `man climbing: medium-light skin tone` (🧗🏼‍♂️)")
  end
end

it "`1F9D7 1F3FC 200D 2642` (minimally-qualified) should match `man climbing: medium-light skin tone` (🧗🏼‍♂)" do
  if m = "🧗🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧗🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♂"
  else
    fail("`1F9D7 1F3FC 200D 2642` doesn't match `man climbing: medium-light skin tone` (🧗🏼‍♂)")
  end
end

it "`1F9D7 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man climbing: medium skin tone` (🧗🏽‍♂️)" do
  if m = "🧗🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧗🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♂️"
  else
    fail("`1F9D7 1F3FD 200D 2642 FE0F` doesn't match `man climbing: medium skin tone` (🧗🏽‍♂️)")
  end
end

it "`1F9D7 1F3FD 200D 2642` (minimally-qualified) should match `man climbing: medium skin tone` (🧗🏽‍♂)" do
  if m = "🧗🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧗🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♂"
  else
    fail("`1F9D7 1F3FD 200D 2642` doesn't match `man climbing: medium skin tone` (🧗🏽‍♂)")
  end
end

it "`1F9D7 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man climbing: medium-dark skin tone` (🧗🏾‍♂️)" do
  if m = "🧗🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧗🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♂️"
  else
    fail("`1F9D7 1F3FE 200D 2642 FE0F` doesn't match `man climbing: medium-dark skin tone` (🧗🏾‍♂️)")
  end
end

it "`1F9D7 1F3FE 200D 2642` (minimally-qualified) should match `man climbing: medium-dark skin tone` (🧗🏾‍♂)" do
  if m = "🧗🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧗🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♂"
  else
    fail("`1F9D7 1F3FE 200D 2642` doesn't match `man climbing: medium-dark skin tone` (🧗🏾‍♂)")
  end
end

it "`1F9D7 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man climbing: dark skin tone` (🧗🏿‍♂️)" do
  if m = "🧗🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧗🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♂️"
  else
    fail("`1F9D7 1F3FF 200D 2642 FE0F` doesn't match `man climbing: dark skin tone` (🧗🏿‍♂️)")
  end
end

it "`1F9D7 1F3FF 200D 2642` (minimally-qualified) should match `man climbing: dark skin tone` (🧗🏿‍♂)" do
  if m = "🧗🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧗🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♂"
  else
    fail("`1F9D7 1F3FF 200D 2642` doesn't match `man climbing: dark skin tone` (🧗🏿‍♂)")
  end
end

it "`1F9D7 200D 2640 FE0F` (fully-qualified) should match `woman climbing` (🧗‍♀️)" do
  if m = "🧗‍♀️".match(Emoji::EMOJI_REGEX)
    "🧗‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♀️"
  else
    fail("`1F9D7 200D 2640 FE0F` doesn't match `woman climbing` (🧗‍♀️)")
  end
end

it "`1F9D7 200D 2640` (minimally-qualified) should match `woman climbing` (🧗‍♀)" do
  if m = "🧗‍♀".match(Emoji::EMOJI_REGEX)
    "🧗‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗‍♀"
  else
    fail("`1F9D7 200D 2640` doesn't match `woman climbing` (🧗‍♀)")
  end
end

it "`1F9D7 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman climbing: light skin tone` (🧗🏻‍♀️)" do
  if m = "🧗🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧗🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♀️"
  else
    fail("`1F9D7 1F3FB 200D 2640 FE0F` doesn't match `woman climbing: light skin tone` (🧗🏻‍♀️)")
  end
end

it "`1F9D7 1F3FB 200D 2640` (minimally-qualified) should match `woman climbing: light skin tone` (🧗🏻‍♀)" do
  if m = "🧗🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧗🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏻‍♀"
  else
    fail("`1F9D7 1F3FB 200D 2640` doesn't match `woman climbing: light skin tone` (🧗🏻‍♀)")
  end
end

it "`1F9D7 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman climbing: medium-light skin tone` (🧗🏼‍♀️)" do
  if m = "🧗🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧗🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♀️"
  else
    fail("`1F9D7 1F3FC 200D 2640 FE0F` doesn't match `woman climbing: medium-light skin tone` (🧗🏼‍♀️)")
  end
end

it "`1F9D7 1F3FC 200D 2640` (minimally-qualified) should match `woman climbing: medium-light skin tone` (🧗🏼‍♀)" do
  if m = "🧗🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧗🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏼‍♀"
  else
    fail("`1F9D7 1F3FC 200D 2640` doesn't match `woman climbing: medium-light skin tone` (🧗🏼‍♀)")
  end
end

it "`1F9D7 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman climbing: medium skin tone` (🧗🏽‍♀️)" do
  if m = "🧗🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧗🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♀️"
  else
    fail("`1F9D7 1F3FD 200D 2640 FE0F` doesn't match `woman climbing: medium skin tone` (🧗🏽‍♀️)")
  end
end

it "`1F9D7 1F3FD 200D 2640` (minimally-qualified) should match `woman climbing: medium skin tone` (🧗🏽‍♀)" do
  if m = "🧗🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧗🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏽‍♀"
  else
    fail("`1F9D7 1F3FD 200D 2640` doesn't match `woman climbing: medium skin tone` (🧗🏽‍♀)")
  end
end

it "`1F9D7 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman climbing: medium-dark skin tone` (🧗🏾‍♀️)" do
  if m = "🧗🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧗🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♀️"
  else
    fail("`1F9D7 1F3FE 200D 2640 FE0F` doesn't match `woman climbing: medium-dark skin tone` (🧗🏾‍♀️)")
  end
end

it "`1F9D7 1F3FE 200D 2640` (minimally-qualified) should match `woman climbing: medium-dark skin tone` (🧗🏾‍♀)" do
  if m = "🧗🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧗🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏾‍♀"
  else
    fail("`1F9D7 1F3FE 200D 2640` doesn't match `woman climbing: medium-dark skin tone` (🧗🏾‍♀)")
  end
end

it "`1F9D7 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman climbing: dark skin tone` (🧗🏿‍♀️)" do
  if m = "🧗🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧗🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♀️"
  else
    fail("`1F9D7 1F3FF 200D 2640 FE0F` doesn't match `woman climbing: dark skin tone` (🧗🏿‍♀️)")
  end
end

it "`1F9D7 1F3FF 200D 2640` (minimally-qualified) should match `woman climbing: dark skin tone` (🧗🏿‍♀)" do
  if m = "🧗🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧗🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧗🏿‍♀"
  else
    fail("`1F9D7 1F3FF 200D 2640` doesn't match `woman climbing: dark skin tone` (🧗🏿‍♀)")
  end
end

it "`1F93A` (fully-qualified) should match `person fencing` (🤺)" do
  if m = "🤺".match(Emoji::EMOJI_REGEX)
    "🤺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤺"
  else
    fail("`1F93A` doesn't match `person fencing` (🤺)")
  end
end

it "`1F3C7` (fully-qualified) should match `horse racing` (🏇)" do
  if m = "🏇".match(Emoji::EMOJI_REGEX)
    "🏇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇"
  else
    fail("`1F3C7` doesn't match `horse racing` (🏇)")
  end
end

it "`1F3C7 1F3FB` (fully-qualified) should match `horse racing: light skin tone` (🏇🏻)" do
  if m = "🏇🏻".match(Emoji::EMOJI_REGEX)
    "🏇🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏻"
  else
    fail("`1F3C7 1F3FB` doesn't match `horse racing: light skin tone` (🏇🏻)")
  end
end

it "`1F3C7 1F3FC` (fully-qualified) should match `horse racing: medium-light skin tone` (🏇🏼)" do
  if m = "🏇🏼".match(Emoji::EMOJI_REGEX)
    "🏇🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏼"
  else
    fail("`1F3C7 1F3FC` doesn't match `horse racing: medium-light skin tone` (🏇🏼)")
  end
end

it "`1F3C7 1F3FD` (fully-qualified) should match `horse racing: medium skin tone` (🏇🏽)" do
  if m = "🏇🏽".match(Emoji::EMOJI_REGEX)
    "🏇🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏽"
  else
    fail("`1F3C7 1F3FD` doesn't match `horse racing: medium skin tone` (🏇🏽)")
  end
end

it "`1F3C7 1F3FE` (fully-qualified) should match `horse racing: medium-dark skin tone` (🏇🏾)" do
  if m = "🏇🏾".match(Emoji::EMOJI_REGEX)
    "🏇🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏾"
  else
    fail("`1F3C7 1F3FE` doesn't match `horse racing: medium-dark skin tone` (🏇🏾)")
  end
end

it "`1F3C7 1F3FF` (fully-qualified) should match `horse racing: dark skin tone` (🏇🏿)" do
  if m = "🏇🏿".match(Emoji::EMOJI_REGEX)
    "🏇🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏇🏿"
  else
    fail("`1F3C7 1F3FF` doesn't match `horse racing: dark skin tone` (🏇🏿)")
  end
end

it "`26F7 FE0F` (fully-qualified) should match `skier` (⛷️)" do
  if m = "⛷️".match(Emoji::EMOJI_REGEX)
    "⛷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛷️"
  else
    fail("`26F7 FE0F` doesn't match `skier` (⛷️)")
  end
end

it "`26F7` (unqualified) should match `skier` (⛷)" do
  if m = "⛷".match(Emoji::EMOJI_REGEX)
    "⛷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛷"
  else
    fail("`26F7` doesn't match `skier` (⛷)")
  end
end

it "`1F3C2` (fully-qualified) should match `snowboarder` (🏂)" do
  if m = "🏂".match(Emoji::EMOJI_REGEX)
    "🏂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂"
  else
    fail("`1F3C2` doesn't match `snowboarder` (🏂)")
  end
end

it "`1F3C2 1F3FB` (fully-qualified) should match `snowboarder: light skin tone` (🏂🏻)" do
  if m = "🏂🏻".match(Emoji::EMOJI_REGEX)
    "🏂🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏻"
  else
    fail("`1F3C2 1F3FB` doesn't match `snowboarder: light skin tone` (🏂🏻)")
  end
end

it "`1F3C2 1F3FC` (fully-qualified) should match `snowboarder: medium-light skin tone` (🏂🏼)" do
  if m = "🏂🏼".match(Emoji::EMOJI_REGEX)
    "🏂🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏼"
  else
    fail("`1F3C2 1F3FC` doesn't match `snowboarder: medium-light skin tone` (🏂🏼)")
  end
end

it "`1F3C2 1F3FD` (fully-qualified) should match `snowboarder: medium skin tone` (🏂🏽)" do
  if m = "🏂🏽".match(Emoji::EMOJI_REGEX)
    "🏂🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏽"
  else
    fail("`1F3C2 1F3FD` doesn't match `snowboarder: medium skin tone` (🏂🏽)")
  end
end

it "`1F3C2 1F3FE` (fully-qualified) should match `snowboarder: medium-dark skin tone` (🏂🏾)" do
  if m = "🏂🏾".match(Emoji::EMOJI_REGEX)
    "🏂🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏾"
  else
    fail("`1F3C2 1F3FE` doesn't match `snowboarder: medium-dark skin tone` (🏂🏾)")
  end
end

it "`1F3C2 1F3FF` (fully-qualified) should match `snowboarder: dark skin tone` (🏂🏿)" do
  if m = "🏂🏿".match(Emoji::EMOJI_REGEX)
    "🏂🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏂🏿"
  else
    fail("`1F3C2 1F3FF` doesn't match `snowboarder: dark skin tone` (🏂🏿)")
  end
end

it "`1F3CC FE0F` (fully-qualified) should match `person golfing` (🏌️)" do
  if m = "🏌️".match(Emoji::EMOJI_REGEX)
    "🏌️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️"
  else
    fail("`1F3CC FE0F` doesn't match `person golfing` (🏌️)")
  end
end

it "`1F3CC` (unqualified) should match `person golfing` (🏌)" do
  if m = "🏌".match(Emoji::EMOJI_REGEX)
    "🏌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌"
  else
    fail("`1F3CC` doesn't match `person golfing` (🏌)")
  end
end

it "`1F3CC 1F3FB` (fully-qualified) should match `person golfing: light skin tone` (🏌🏻)" do
  if m = "🏌🏻".match(Emoji::EMOJI_REGEX)
    "🏌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻"
  else
    fail("`1F3CC 1F3FB` doesn't match `person golfing: light skin tone` (🏌🏻)")
  end
end

it "`1F3CC 1F3FC` (fully-qualified) should match `person golfing: medium-light skin tone` (🏌🏼)" do
  if m = "🏌🏼".match(Emoji::EMOJI_REGEX)
    "🏌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼"
  else
    fail("`1F3CC 1F3FC` doesn't match `person golfing: medium-light skin tone` (🏌🏼)")
  end
end

it "`1F3CC 1F3FD` (fully-qualified) should match `person golfing: medium skin tone` (🏌🏽)" do
  if m = "🏌🏽".match(Emoji::EMOJI_REGEX)
    "🏌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽"
  else
    fail("`1F3CC 1F3FD` doesn't match `person golfing: medium skin tone` (🏌🏽)")
  end
end

it "`1F3CC 1F3FE` (fully-qualified) should match `person golfing: medium-dark skin tone` (🏌🏾)" do
  if m = "🏌🏾".match(Emoji::EMOJI_REGEX)
    "🏌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾"
  else
    fail("`1F3CC 1F3FE` doesn't match `person golfing: medium-dark skin tone` (🏌🏾)")
  end
end

it "`1F3CC 1F3FF` (fully-qualified) should match `person golfing: dark skin tone` (🏌🏿)" do
  if m = "🏌🏿".match(Emoji::EMOJI_REGEX)
    "🏌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿"
  else
    fail("`1F3CC 1F3FF` doesn't match `person golfing: dark skin tone` (🏌🏿)")
  end
end

it "`1F3CC FE0F 200D 2642 FE0F` (fully-qualified) should match `man golfing` (🏌️‍♂️)" do
  if m = "🏌️‍♂️".match(Emoji::EMOJI_REGEX)
    "🏌️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♂️"
  else
    fail("`1F3CC FE0F 200D 2642 FE0F` doesn't match `man golfing` (🏌️‍♂️)")
  end
end

it "`1F3CC 200D 2642 FE0F` (unqualified) should match `man golfing` (🏌‍♂️)" do
  if m = "🏌‍♂️".match(Emoji::EMOJI_REGEX)
    "🏌‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♂️"
  else
    fail("`1F3CC 200D 2642 FE0F` doesn't match `man golfing` (🏌‍♂️)")
  end
end

it "`1F3CC FE0F 200D 2642` (unqualified) should match `man golfing` (🏌️‍♂)" do
  if m = "🏌️‍♂".match(Emoji::EMOJI_REGEX)
    "🏌️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♂"
  else
    fail("`1F3CC FE0F 200D 2642` doesn't match `man golfing` (🏌️‍♂)")
  end
end

it "`1F3CC 200D 2642` (unqualified) should match `man golfing` (🏌‍♂)" do
  if m = "🏌‍♂".match(Emoji::EMOJI_REGEX)
    "🏌‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♂"
  else
    fail("`1F3CC 200D 2642` doesn't match `man golfing` (🏌‍♂)")
  end
end

it "`1F3CC 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man golfing: light skin tone` (🏌🏻‍♂️)" do
  if m = "🏌🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🏌🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♂️"
  else
    fail("`1F3CC 1F3FB 200D 2642 FE0F` doesn't match `man golfing: light skin tone` (🏌🏻‍♂️)")
  end
end

it "`1F3CC 1F3FB 200D 2642` (minimally-qualified) should match `man golfing: light skin tone` (🏌🏻‍♂)" do
  if m = "🏌🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🏌🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♂"
  else
    fail("`1F3CC 1F3FB 200D 2642` doesn't match `man golfing: light skin tone` (🏌🏻‍♂)")
  end
end

it "`1F3CC 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man golfing: medium-light skin tone` (🏌🏼‍♂️)" do
  if m = "🏌🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🏌🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♂️"
  else
    fail("`1F3CC 1F3FC 200D 2642 FE0F` doesn't match `man golfing: medium-light skin tone` (🏌🏼‍♂️)")
  end
end

it "`1F3CC 1F3FC 200D 2642` (minimally-qualified) should match `man golfing: medium-light skin tone` (🏌🏼‍♂)" do
  if m = "🏌🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🏌🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♂"
  else
    fail("`1F3CC 1F3FC 200D 2642` doesn't match `man golfing: medium-light skin tone` (🏌🏼‍♂)")
  end
end

it "`1F3CC 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man golfing: medium skin tone` (🏌🏽‍♂️)" do
  if m = "🏌🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🏌🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♂️"
  else
    fail("`1F3CC 1F3FD 200D 2642 FE0F` doesn't match `man golfing: medium skin tone` (🏌🏽‍♂️)")
  end
end

it "`1F3CC 1F3FD 200D 2642` (minimally-qualified) should match `man golfing: medium skin tone` (🏌🏽‍♂)" do
  if m = "🏌🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🏌🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♂"
  else
    fail("`1F3CC 1F3FD 200D 2642` doesn't match `man golfing: medium skin tone` (🏌🏽‍♂)")
  end
end

it "`1F3CC 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man golfing: medium-dark skin tone` (🏌🏾‍♂️)" do
  if m = "🏌🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🏌🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♂️"
  else
    fail("`1F3CC 1F3FE 200D 2642 FE0F` doesn't match `man golfing: medium-dark skin tone` (🏌🏾‍♂️)")
  end
end

it "`1F3CC 1F3FE 200D 2642` (minimally-qualified) should match `man golfing: medium-dark skin tone` (🏌🏾‍♂)" do
  if m = "🏌🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🏌🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♂"
  else
    fail("`1F3CC 1F3FE 200D 2642` doesn't match `man golfing: medium-dark skin tone` (🏌🏾‍♂)")
  end
end

it "`1F3CC 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man golfing: dark skin tone` (🏌🏿‍♂️)" do
  if m = "🏌🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🏌🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♂️"
  else
    fail("`1F3CC 1F3FF 200D 2642 FE0F` doesn't match `man golfing: dark skin tone` (🏌🏿‍♂️)")
  end
end

it "`1F3CC 1F3FF 200D 2642` (minimally-qualified) should match `man golfing: dark skin tone` (🏌🏿‍♂)" do
  if m = "🏌🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🏌🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♂"
  else
    fail("`1F3CC 1F3FF 200D 2642` doesn't match `man golfing: dark skin tone` (🏌🏿‍♂)")
  end
end

it "`1F3CC FE0F 200D 2640 FE0F` (fully-qualified) should match `woman golfing` (🏌️‍♀️)" do
  if m = "🏌️‍♀️".match(Emoji::EMOJI_REGEX)
    "🏌️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♀️"
  else
    fail("`1F3CC FE0F 200D 2640 FE0F` doesn't match `woman golfing` (🏌️‍♀️)")
  end
end

it "`1F3CC 200D 2640 FE0F` (unqualified) should match `woman golfing` (🏌‍♀️)" do
  if m = "🏌‍♀️".match(Emoji::EMOJI_REGEX)
    "🏌‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♀️"
  else
    fail("`1F3CC 200D 2640 FE0F` doesn't match `woman golfing` (🏌‍♀️)")
  end
end

it "`1F3CC FE0F 200D 2640` (unqualified) should match `woman golfing` (🏌️‍♀)" do
  if m = "🏌️‍♀".match(Emoji::EMOJI_REGEX)
    "🏌️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌️‍♀"
  else
    fail("`1F3CC FE0F 200D 2640` doesn't match `woman golfing` (🏌️‍♀)")
  end
end

it "`1F3CC 200D 2640` (unqualified) should match `woman golfing` (🏌‍♀)" do
  if m = "🏌‍♀".match(Emoji::EMOJI_REGEX)
    "🏌‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌‍♀"
  else
    fail("`1F3CC 200D 2640` doesn't match `woman golfing` (🏌‍♀)")
  end
end

it "`1F3CC 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman golfing: light skin tone` (🏌🏻‍♀️)" do
  if m = "🏌🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🏌🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♀️"
  else
    fail("`1F3CC 1F3FB 200D 2640 FE0F` doesn't match `woman golfing: light skin tone` (🏌🏻‍♀️)")
  end
end

it "`1F3CC 1F3FB 200D 2640` (minimally-qualified) should match `woman golfing: light skin tone` (🏌🏻‍♀)" do
  if m = "🏌🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🏌🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏻‍♀"
  else
    fail("`1F3CC 1F3FB 200D 2640` doesn't match `woman golfing: light skin tone` (🏌🏻‍♀)")
  end
end

it "`1F3CC 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman golfing: medium-light skin tone` (🏌🏼‍♀️)" do
  if m = "🏌🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🏌🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♀️"
  else
    fail("`1F3CC 1F3FC 200D 2640 FE0F` doesn't match `woman golfing: medium-light skin tone` (🏌🏼‍♀️)")
  end
end

it "`1F3CC 1F3FC 200D 2640` (minimally-qualified) should match `woman golfing: medium-light skin tone` (🏌🏼‍♀)" do
  if m = "🏌🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🏌🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏼‍♀"
  else
    fail("`1F3CC 1F3FC 200D 2640` doesn't match `woman golfing: medium-light skin tone` (🏌🏼‍♀)")
  end
end

it "`1F3CC 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman golfing: medium skin tone` (🏌🏽‍♀️)" do
  if m = "🏌🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🏌🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♀️"
  else
    fail("`1F3CC 1F3FD 200D 2640 FE0F` doesn't match `woman golfing: medium skin tone` (🏌🏽‍♀️)")
  end
end

it "`1F3CC 1F3FD 200D 2640` (minimally-qualified) should match `woman golfing: medium skin tone` (🏌🏽‍♀)" do
  if m = "🏌🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🏌🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏽‍♀"
  else
    fail("`1F3CC 1F3FD 200D 2640` doesn't match `woman golfing: medium skin tone` (🏌🏽‍♀)")
  end
end

it "`1F3CC 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman golfing: medium-dark skin tone` (🏌🏾‍♀️)" do
  if m = "🏌🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🏌🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♀️"
  else
    fail("`1F3CC 1F3FE 200D 2640 FE0F` doesn't match `woman golfing: medium-dark skin tone` (🏌🏾‍♀️)")
  end
end

it "`1F3CC 1F3FE 200D 2640` (minimally-qualified) should match `woman golfing: medium-dark skin tone` (🏌🏾‍♀)" do
  if m = "🏌🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🏌🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏾‍♀"
  else
    fail("`1F3CC 1F3FE 200D 2640` doesn't match `woman golfing: medium-dark skin tone` (🏌🏾‍♀)")
  end
end

it "`1F3CC 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman golfing: dark skin tone` (🏌🏿‍♀️)" do
  if m = "🏌🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🏌🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♀️"
  else
    fail("`1F3CC 1F3FF 200D 2640 FE0F` doesn't match `woman golfing: dark skin tone` (🏌🏿‍♀️)")
  end
end

it "`1F3CC 1F3FF 200D 2640` (minimally-qualified) should match `woman golfing: dark skin tone` (🏌🏿‍♀)" do
  if m = "🏌🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🏌🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏌🏿‍♀"
  else
    fail("`1F3CC 1F3FF 200D 2640` doesn't match `woman golfing: dark skin tone` (🏌🏿‍♀)")
  end
end

it "`1F3C4` (fully-qualified) should match `person surfing` (🏄)" do
  if m = "🏄".match(Emoji::EMOJI_REGEX)
    "🏄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄"
  else
    fail("`1F3C4` doesn't match `person surfing` (🏄)")
  end
end

it "`1F3C4 1F3FB` (fully-qualified) should match `person surfing: light skin tone` (🏄🏻)" do
  if m = "🏄🏻".match(Emoji::EMOJI_REGEX)
    "🏄🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻"
  else
    fail("`1F3C4 1F3FB` doesn't match `person surfing: light skin tone` (🏄🏻)")
  end
end

it "`1F3C4 1F3FC` (fully-qualified) should match `person surfing: medium-light skin tone` (🏄🏼)" do
  if m = "🏄🏼".match(Emoji::EMOJI_REGEX)
    "🏄🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼"
  else
    fail("`1F3C4 1F3FC` doesn't match `person surfing: medium-light skin tone` (🏄🏼)")
  end
end

it "`1F3C4 1F3FD` (fully-qualified) should match `person surfing: medium skin tone` (🏄🏽)" do
  if m = "🏄🏽".match(Emoji::EMOJI_REGEX)
    "🏄🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽"
  else
    fail("`1F3C4 1F3FD` doesn't match `person surfing: medium skin tone` (🏄🏽)")
  end
end

it "`1F3C4 1F3FE` (fully-qualified) should match `person surfing: medium-dark skin tone` (🏄🏾)" do
  if m = "🏄🏾".match(Emoji::EMOJI_REGEX)
    "🏄🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾"
  else
    fail("`1F3C4 1F3FE` doesn't match `person surfing: medium-dark skin tone` (🏄🏾)")
  end
end

it "`1F3C4 1F3FF` (fully-qualified) should match `person surfing: dark skin tone` (🏄🏿)" do
  if m = "🏄🏿".match(Emoji::EMOJI_REGEX)
    "🏄🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿"
  else
    fail("`1F3C4 1F3FF` doesn't match `person surfing: dark skin tone` (🏄🏿)")
  end
end

it "`1F3C4 200D 2642 FE0F` (fully-qualified) should match `man surfing` (🏄‍♂️)" do
  if m = "🏄‍♂️".match(Emoji::EMOJI_REGEX)
    "🏄‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♂️"
  else
    fail("`1F3C4 200D 2642 FE0F` doesn't match `man surfing` (🏄‍♂️)")
  end
end

it "`1F3C4 200D 2642` (minimally-qualified) should match `man surfing` (🏄‍♂)" do
  if m = "🏄‍♂".match(Emoji::EMOJI_REGEX)
    "🏄‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♂"
  else
    fail("`1F3C4 200D 2642` doesn't match `man surfing` (🏄‍♂)")
  end
end

it "`1F3C4 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man surfing: light skin tone` (🏄🏻‍♂️)" do
  if m = "🏄🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🏄🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♂️"
  else
    fail("`1F3C4 1F3FB 200D 2642 FE0F` doesn't match `man surfing: light skin tone` (🏄🏻‍♂️)")
  end
end

it "`1F3C4 1F3FB 200D 2642` (minimally-qualified) should match `man surfing: light skin tone` (🏄🏻‍♂)" do
  if m = "🏄🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🏄🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♂"
  else
    fail("`1F3C4 1F3FB 200D 2642` doesn't match `man surfing: light skin tone` (🏄🏻‍♂)")
  end
end

it "`1F3C4 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man surfing: medium-light skin tone` (🏄🏼‍♂️)" do
  if m = "🏄🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🏄🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♂️"
  else
    fail("`1F3C4 1F3FC 200D 2642 FE0F` doesn't match `man surfing: medium-light skin tone` (🏄🏼‍♂️)")
  end
end

it "`1F3C4 1F3FC 200D 2642` (minimally-qualified) should match `man surfing: medium-light skin tone` (🏄🏼‍♂)" do
  if m = "🏄🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🏄🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♂"
  else
    fail("`1F3C4 1F3FC 200D 2642` doesn't match `man surfing: medium-light skin tone` (🏄🏼‍♂)")
  end
end

it "`1F3C4 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man surfing: medium skin tone` (🏄🏽‍♂️)" do
  if m = "🏄🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🏄🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♂️"
  else
    fail("`1F3C4 1F3FD 200D 2642 FE0F` doesn't match `man surfing: medium skin tone` (🏄🏽‍♂️)")
  end
end

it "`1F3C4 1F3FD 200D 2642` (minimally-qualified) should match `man surfing: medium skin tone` (🏄🏽‍♂)" do
  if m = "🏄🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🏄🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♂"
  else
    fail("`1F3C4 1F3FD 200D 2642` doesn't match `man surfing: medium skin tone` (🏄🏽‍♂)")
  end
end

it "`1F3C4 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man surfing: medium-dark skin tone` (🏄🏾‍♂️)" do
  if m = "🏄🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🏄🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♂️"
  else
    fail("`1F3C4 1F3FE 200D 2642 FE0F` doesn't match `man surfing: medium-dark skin tone` (🏄🏾‍♂️)")
  end
end

it "`1F3C4 1F3FE 200D 2642` (minimally-qualified) should match `man surfing: medium-dark skin tone` (🏄🏾‍♂)" do
  if m = "🏄🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🏄🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♂"
  else
    fail("`1F3C4 1F3FE 200D 2642` doesn't match `man surfing: medium-dark skin tone` (🏄🏾‍♂)")
  end
end

it "`1F3C4 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man surfing: dark skin tone` (🏄🏿‍♂️)" do
  if m = "🏄🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🏄🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♂️"
  else
    fail("`1F3C4 1F3FF 200D 2642 FE0F` doesn't match `man surfing: dark skin tone` (🏄🏿‍♂️)")
  end
end

it "`1F3C4 1F3FF 200D 2642` (minimally-qualified) should match `man surfing: dark skin tone` (🏄🏿‍♂)" do
  if m = "🏄🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🏄🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♂"
  else
    fail("`1F3C4 1F3FF 200D 2642` doesn't match `man surfing: dark skin tone` (🏄🏿‍♂)")
  end
end

it "`1F3C4 200D 2640 FE0F` (fully-qualified) should match `woman surfing` (🏄‍♀️)" do
  if m = "🏄‍♀️".match(Emoji::EMOJI_REGEX)
    "🏄‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♀️"
  else
    fail("`1F3C4 200D 2640 FE0F` doesn't match `woman surfing` (🏄‍♀️)")
  end
end

it "`1F3C4 200D 2640` (minimally-qualified) should match `woman surfing` (🏄‍♀)" do
  if m = "🏄‍♀".match(Emoji::EMOJI_REGEX)
    "🏄‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄‍♀"
  else
    fail("`1F3C4 200D 2640` doesn't match `woman surfing` (🏄‍♀)")
  end
end

it "`1F3C4 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman surfing: light skin tone` (🏄🏻‍♀️)" do
  if m = "🏄🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🏄🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♀️"
  else
    fail("`1F3C4 1F3FB 200D 2640 FE0F` doesn't match `woman surfing: light skin tone` (🏄🏻‍♀️)")
  end
end

it "`1F3C4 1F3FB 200D 2640` (minimally-qualified) should match `woman surfing: light skin tone` (🏄🏻‍♀)" do
  if m = "🏄🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🏄🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏻‍♀"
  else
    fail("`1F3C4 1F3FB 200D 2640` doesn't match `woman surfing: light skin tone` (🏄🏻‍♀)")
  end
end

it "`1F3C4 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman surfing: medium-light skin tone` (🏄🏼‍♀️)" do
  if m = "🏄🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🏄🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♀️"
  else
    fail("`1F3C4 1F3FC 200D 2640 FE0F` doesn't match `woman surfing: medium-light skin tone` (🏄🏼‍♀️)")
  end
end

it "`1F3C4 1F3FC 200D 2640` (minimally-qualified) should match `woman surfing: medium-light skin tone` (🏄🏼‍♀)" do
  if m = "🏄🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🏄🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏼‍♀"
  else
    fail("`1F3C4 1F3FC 200D 2640` doesn't match `woman surfing: medium-light skin tone` (🏄🏼‍♀)")
  end
end

it "`1F3C4 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman surfing: medium skin tone` (🏄🏽‍♀️)" do
  if m = "🏄🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🏄🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♀️"
  else
    fail("`1F3C4 1F3FD 200D 2640 FE0F` doesn't match `woman surfing: medium skin tone` (🏄🏽‍♀️)")
  end
end

it "`1F3C4 1F3FD 200D 2640` (minimally-qualified) should match `woman surfing: medium skin tone` (🏄🏽‍♀)" do
  if m = "🏄🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🏄🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏽‍♀"
  else
    fail("`1F3C4 1F3FD 200D 2640` doesn't match `woman surfing: medium skin tone` (🏄🏽‍♀)")
  end
end

it "`1F3C4 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman surfing: medium-dark skin tone` (🏄🏾‍♀️)" do
  if m = "🏄🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🏄🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♀️"
  else
    fail("`1F3C4 1F3FE 200D 2640 FE0F` doesn't match `woman surfing: medium-dark skin tone` (🏄🏾‍♀️)")
  end
end

it "`1F3C4 1F3FE 200D 2640` (minimally-qualified) should match `woman surfing: medium-dark skin tone` (🏄🏾‍♀)" do
  if m = "🏄🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🏄🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏾‍♀"
  else
    fail("`1F3C4 1F3FE 200D 2640` doesn't match `woman surfing: medium-dark skin tone` (🏄🏾‍♀)")
  end
end

it "`1F3C4 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman surfing: dark skin tone` (🏄🏿‍♀️)" do
  if m = "🏄🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🏄🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♀️"
  else
    fail("`1F3C4 1F3FF 200D 2640 FE0F` doesn't match `woman surfing: dark skin tone` (🏄🏿‍♀️)")
  end
end

it "`1F3C4 1F3FF 200D 2640` (minimally-qualified) should match `woman surfing: dark skin tone` (🏄🏿‍♀)" do
  if m = "🏄🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🏄🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏄🏿‍♀"
  else
    fail("`1F3C4 1F3FF 200D 2640` doesn't match `woman surfing: dark skin tone` (🏄🏿‍♀)")
  end
end

it "`1F6A3` (fully-qualified) should match `person rowing boat` (🚣)" do
  if m = "🚣".match(Emoji::EMOJI_REGEX)
    "🚣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣"
  else
    fail("`1F6A3` doesn't match `person rowing boat` (🚣)")
  end
end

it "`1F6A3 1F3FB` (fully-qualified) should match `person rowing boat: light skin tone` (🚣🏻)" do
  if m = "🚣🏻".match(Emoji::EMOJI_REGEX)
    "🚣🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻"
  else
    fail("`1F6A3 1F3FB` doesn't match `person rowing boat: light skin tone` (🚣🏻)")
  end
end

it "`1F6A3 1F3FC` (fully-qualified) should match `person rowing boat: medium-light skin tone` (🚣🏼)" do
  if m = "🚣🏼".match(Emoji::EMOJI_REGEX)
    "🚣🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼"
  else
    fail("`1F6A3 1F3FC` doesn't match `person rowing boat: medium-light skin tone` (🚣🏼)")
  end
end

it "`1F6A3 1F3FD` (fully-qualified) should match `person rowing boat: medium skin tone` (🚣🏽)" do
  if m = "🚣🏽".match(Emoji::EMOJI_REGEX)
    "🚣🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽"
  else
    fail("`1F6A3 1F3FD` doesn't match `person rowing boat: medium skin tone` (🚣🏽)")
  end
end

it "`1F6A3 1F3FE` (fully-qualified) should match `person rowing boat: medium-dark skin tone` (🚣🏾)" do
  if m = "🚣🏾".match(Emoji::EMOJI_REGEX)
    "🚣🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾"
  else
    fail("`1F6A3 1F3FE` doesn't match `person rowing boat: medium-dark skin tone` (🚣🏾)")
  end
end

it "`1F6A3 1F3FF` (fully-qualified) should match `person rowing boat: dark skin tone` (🚣🏿)" do
  if m = "🚣🏿".match(Emoji::EMOJI_REGEX)
    "🚣🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿"
  else
    fail("`1F6A3 1F3FF` doesn't match `person rowing boat: dark skin tone` (🚣🏿)")
  end
end

it "`1F6A3 200D 2642 FE0F` (fully-qualified) should match `man rowing boat` (🚣‍♂️)" do
  if m = "🚣‍♂️".match(Emoji::EMOJI_REGEX)
    "🚣‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♂️"
  else
    fail("`1F6A3 200D 2642 FE0F` doesn't match `man rowing boat` (🚣‍♂️)")
  end
end

it "`1F6A3 200D 2642` (minimally-qualified) should match `man rowing boat` (🚣‍♂)" do
  if m = "🚣‍♂".match(Emoji::EMOJI_REGEX)
    "🚣‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♂"
  else
    fail("`1F6A3 200D 2642` doesn't match `man rowing boat` (🚣‍♂)")
  end
end

it "`1F6A3 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: light skin tone` (🚣🏻‍♂️)" do
  if m = "🚣🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🚣🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♂️"
  else
    fail("`1F6A3 1F3FB 200D 2642 FE0F` doesn't match `man rowing boat: light skin tone` (🚣🏻‍♂️)")
  end
end

it "`1F6A3 1F3FB 200D 2642` (minimally-qualified) should match `man rowing boat: light skin tone` (🚣🏻‍♂)" do
  if m = "🚣🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🚣🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♂"
  else
    fail("`1F6A3 1F3FB 200D 2642` doesn't match `man rowing boat: light skin tone` (🚣🏻‍♂)")
  end
end

it "`1F6A3 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: medium-light skin tone` (🚣🏼‍♂️)" do
  if m = "🚣🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🚣🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♂️"
  else
    fail("`1F6A3 1F3FC 200D 2642 FE0F` doesn't match `man rowing boat: medium-light skin tone` (🚣🏼‍♂️)")
  end
end

it "`1F6A3 1F3FC 200D 2642` (minimally-qualified) should match `man rowing boat: medium-light skin tone` (🚣🏼‍♂)" do
  if m = "🚣🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🚣🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♂"
  else
    fail("`1F6A3 1F3FC 200D 2642` doesn't match `man rowing boat: medium-light skin tone` (🚣🏼‍♂)")
  end
end

it "`1F6A3 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: medium skin tone` (🚣🏽‍♂️)" do
  if m = "🚣🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🚣🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♂️"
  else
    fail("`1F6A3 1F3FD 200D 2642 FE0F` doesn't match `man rowing boat: medium skin tone` (🚣🏽‍♂️)")
  end
end

it "`1F6A3 1F3FD 200D 2642` (minimally-qualified) should match `man rowing boat: medium skin tone` (🚣🏽‍♂)" do
  if m = "🚣🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🚣🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♂"
  else
    fail("`1F6A3 1F3FD 200D 2642` doesn't match `man rowing boat: medium skin tone` (🚣🏽‍♂)")
  end
end

it "`1F6A3 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: medium-dark skin tone` (🚣🏾‍♂️)" do
  if m = "🚣🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🚣🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♂️"
  else
    fail("`1F6A3 1F3FE 200D 2642 FE0F` doesn't match `man rowing boat: medium-dark skin tone` (🚣🏾‍♂️)")
  end
end

it "`1F6A3 1F3FE 200D 2642` (minimally-qualified) should match `man rowing boat: medium-dark skin tone` (🚣🏾‍♂)" do
  if m = "🚣🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🚣🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♂"
  else
    fail("`1F6A3 1F3FE 200D 2642` doesn't match `man rowing boat: medium-dark skin tone` (🚣🏾‍♂)")
  end
end

it "`1F6A3 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man rowing boat: dark skin tone` (🚣🏿‍♂️)" do
  if m = "🚣🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🚣🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♂️"
  else
    fail("`1F6A3 1F3FF 200D 2642 FE0F` doesn't match `man rowing boat: dark skin tone` (🚣🏿‍♂️)")
  end
end

it "`1F6A3 1F3FF 200D 2642` (minimally-qualified) should match `man rowing boat: dark skin tone` (🚣🏿‍♂)" do
  if m = "🚣🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🚣🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♂"
  else
    fail("`1F6A3 1F3FF 200D 2642` doesn't match `man rowing boat: dark skin tone` (🚣🏿‍♂)")
  end
end

it "`1F6A3 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat` (🚣‍♀️)" do
  if m = "🚣‍♀️".match(Emoji::EMOJI_REGEX)
    "🚣‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♀️"
  else
    fail("`1F6A3 200D 2640 FE0F` doesn't match `woman rowing boat` (🚣‍♀️)")
  end
end

it "`1F6A3 200D 2640` (minimally-qualified) should match `woman rowing boat` (🚣‍♀)" do
  if m = "🚣‍♀".match(Emoji::EMOJI_REGEX)
    "🚣‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣‍♀"
  else
    fail("`1F6A3 200D 2640` doesn't match `woman rowing boat` (🚣‍♀)")
  end
end

it "`1F6A3 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: light skin tone` (🚣🏻‍♀️)" do
  if m = "🚣🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🚣🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♀️"
  else
    fail("`1F6A3 1F3FB 200D 2640 FE0F` doesn't match `woman rowing boat: light skin tone` (🚣🏻‍♀️)")
  end
end

it "`1F6A3 1F3FB 200D 2640` (minimally-qualified) should match `woman rowing boat: light skin tone` (🚣🏻‍♀)" do
  if m = "🚣🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🚣🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏻‍♀"
  else
    fail("`1F6A3 1F3FB 200D 2640` doesn't match `woman rowing boat: light skin tone` (🚣🏻‍♀)")
  end
end

it "`1F6A3 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: medium-light skin tone` (🚣🏼‍♀️)" do
  if m = "🚣🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🚣🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♀️"
  else
    fail("`1F6A3 1F3FC 200D 2640 FE0F` doesn't match `woman rowing boat: medium-light skin tone` (🚣🏼‍♀️)")
  end
end

it "`1F6A3 1F3FC 200D 2640` (minimally-qualified) should match `woman rowing boat: medium-light skin tone` (🚣🏼‍♀)" do
  if m = "🚣🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🚣🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏼‍♀"
  else
    fail("`1F6A3 1F3FC 200D 2640` doesn't match `woman rowing boat: medium-light skin tone` (🚣🏼‍♀)")
  end
end

it "`1F6A3 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: medium skin tone` (🚣🏽‍♀️)" do
  if m = "🚣🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🚣🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♀️"
  else
    fail("`1F6A3 1F3FD 200D 2640 FE0F` doesn't match `woman rowing boat: medium skin tone` (🚣🏽‍♀️)")
  end
end

it "`1F6A3 1F3FD 200D 2640` (minimally-qualified) should match `woman rowing boat: medium skin tone` (🚣🏽‍♀)" do
  if m = "🚣🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🚣🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏽‍♀"
  else
    fail("`1F6A3 1F3FD 200D 2640` doesn't match `woman rowing boat: medium skin tone` (🚣🏽‍♀)")
  end
end

it "`1F6A3 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: medium-dark skin tone` (🚣🏾‍♀️)" do
  if m = "🚣🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🚣🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♀️"
  else
    fail("`1F6A3 1F3FE 200D 2640 FE0F` doesn't match `woman rowing boat: medium-dark skin tone` (🚣🏾‍♀️)")
  end
end

it "`1F6A3 1F3FE 200D 2640` (minimally-qualified) should match `woman rowing boat: medium-dark skin tone` (🚣🏾‍♀)" do
  if m = "🚣🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🚣🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏾‍♀"
  else
    fail("`1F6A3 1F3FE 200D 2640` doesn't match `woman rowing boat: medium-dark skin tone` (🚣🏾‍♀)")
  end
end

it "`1F6A3 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman rowing boat: dark skin tone` (🚣🏿‍♀️)" do
  if m = "🚣🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🚣🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♀️"
  else
    fail("`1F6A3 1F3FF 200D 2640 FE0F` doesn't match `woman rowing boat: dark skin tone` (🚣🏿‍♀️)")
  end
end

it "`1F6A3 1F3FF 200D 2640` (minimally-qualified) should match `woman rowing boat: dark skin tone` (🚣🏿‍♀)" do
  if m = "🚣🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🚣🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚣🏿‍♀"
  else
    fail("`1F6A3 1F3FF 200D 2640` doesn't match `woman rowing boat: dark skin tone` (🚣🏿‍♀)")
  end
end

it "`1F3CA` (fully-qualified) should match `person swimming` (🏊)" do
  if m = "🏊".match(Emoji::EMOJI_REGEX)
    "🏊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊"
  else
    fail("`1F3CA` doesn't match `person swimming` (🏊)")
  end
end

it "`1F3CA 1F3FB` (fully-qualified) should match `person swimming: light skin tone` (🏊🏻)" do
  if m = "🏊🏻".match(Emoji::EMOJI_REGEX)
    "🏊🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻"
  else
    fail("`1F3CA 1F3FB` doesn't match `person swimming: light skin tone` (🏊🏻)")
  end
end

it "`1F3CA 1F3FC` (fully-qualified) should match `person swimming: medium-light skin tone` (🏊🏼)" do
  if m = "🏊🏼".match(Emoji::EMOJI_REGEX)
    "🏊🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼"
  else
    fail("`1F3CA 1F3FC` doesn't match `person swimming: medium-light skin tone` (🏊🏼)")
  end
end

it "`1F3CA 1F3FD` (fully-qualified) should match `person swimming: medium skin tone` (🏊🏽)" do
  if m = "🏊🏽".match(Emoji::EMOJI_REGEX)
    "🏊🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽"
  else
    fail("`1F3CA 1F3FD` doesn't match `person swimming: medium skin tone` (🏊🏽)")
  end
end

it "`1F3CA 1F3FE` (fully-qualified) should match `person swimming: medium-dark skin tone` (🏊🏾)" do
  if m = "🏊🏾".match(Emoji::EMOJI_REGEX)
    "🏊🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾"
  else
    fail("`1F3CA 1F3FE` doesn't match `person swimming: medium-dark skin tone` (🏊🏾)")
  end
end

it "`1F3CA 1F3FF` (fully-qualified) should match `person swimming: dark skin tone` (🏊🏿)" do
  if m = "🏊🏿".match(Emoji::EMOJI_REGEX)
    "🏊🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿"
  else
    fail("`1F3CA 1F3FF` doesn't match `person swimming: dark skin tone` (🏊🏿)")
  end
end

it "`1F3CA 200D 2642 FE0F` (fully-qualified) should match `man swimming` (🏊‍♂️)" do
  if m = "🏊‍♂️".match(Emoji::EMOJI_REGEX)
    "🏊‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♂️"
  else
    fail("`1F3CA 200D 2642 FE0F` doesn't match `man swimming` (🏊‍♂️)")
  end
end

it "`1F3CA 200D 2642` (minimally-qualified) should match `man swimming` (🏊‍♂)" do
  if m = "🏊‍♂".match(Emoji::EMOJI_REGEX)
    "🏊‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♂"
  else
    fail("`1F3CA 200D 2642` doesn't match `man swimming` (🏊‍♂)")
  end
end

it "`1F3CA 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man swimming: light skin tone` (🏊🏻‍♂️)" do
  if m = "🏊🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🏊🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♂️"
  else
    fail("`1F3CA 1F3FB 200D 2642 FE0F` doesn't match `man swimming: light skin tone` (🏊🏻‍♂️)")
  end
end

it "`1F3CA 1F3FB 200D 2642` (minimally-qualified) should match `man swimming: light skin tone` (🏊🏻‍♂)" do
  if m = "🏊🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🏊🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♂"
  else
    fail("`1F3CA 1F3FB 200D 2642` doesn't match `man swimming: light skin tone` (🏊🏻‍♂)")
  end
end

it "`1F3CA 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man swimming: medium-light skin tone` (🏊🏼‍♂️)" do
  if m = "🏊🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🏊🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♂️"
  else
    fail("`1F3CA 1F3FC 200D 2642 FE0F` doesn't match `man swimming: medium-light skin tone` (🏊🏼‍♂️)")
  end
end

it "`1F3CA 1F3FC 200D 2642` (minimally-qualified) should match `man swimming: medium-light skin tone` (🏊🏼‍♂)" do
  if m = "🏊🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🏊🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♂"
  else
    fail("`1F3CA 1F3FC 200D 2642` doesn't match `man swimming: medium-light skin tone` (🏊🏼‍♂)")
  end
end

it "`1F3CA 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man swimming: medium skin tone` (🏊🏽‍♂️)" do
  if m = "🏊🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🏊🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♂️"
  else
    fail("`1F3CA 1F3FD 200D 2642 FE0F` doesn't match `man swimming: medium skin tone` (🏊🏽‍♂️)")
  end
end

it "`1F3CA 1F3FD 200D 2642` (minimally-qualified) should match `man swimming: medium skin tone` (🏊🏽‍♂)" do
  if m = "🏊🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🏊🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♂"
  else
    fail("`1F3CA 1F3FD 200D 2642` doesn't match `man swimming: medium skin tone` (🏊🏽‍♂)")
  end
end

it "`1F3CA 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man swimming: medium-dark skin tone` (🏊🏾‍♂️)" do
  if m = "🏊🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🏊🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♂️"
  else
    fail("`1F3CA 1F3FE 200D 2642 FE0F` doesn't match `man swimming: medium-dark skin tone` (🏊🏾‍♂️)")
  end
end

it "`1F3CA 1F3FE 200D 2642` (minimally-qualified) should match `man swimming: medium-dark skin tone` (🏊🏾‍♂)" do
  if m = "🏊🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🏊🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♂"
  else
    fail("`1F3CA 1F3FE 200D 2642` doesn't match `man swimming: medium-dark skin tone` (🏊🏾‍♂)")
  end
end

it "`1F3CA 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man swimming: dark skin tone` (🏊🏿‍♂️)" do
  if m = "🏊🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🏊🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♂️"
  else
    fail("`1F3CA 1F3FF 200D 2642 FE0F` doesn't match `man swimming: dark skin tone` (🏊🏿‍♂️)")
  end
end

it "`1F3CA 1F3FF 200D 2642` (minimally-qualified) should match `man swimming: dark skin tone` (🏊🏿‍♂)" do
  if m = "🏊🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🏊🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♂"
  else
    fail("`1F3CA 1F3FF 200D 2642` doesn't match `man swimming: dark skin tone` (🏊🏿‍♂)")
  end
end

it "`1F3CA 200D 2640 FE0F` (fully-qualified) should match `woman swimming` (🏊‍♀️)" do
  if m = "🏊‍♀️".match(Emoji::EMOJI_REGEX)
    "🏊‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♀️"
  else
    fail("`1F3CA 200D 2640 FE0F` doesn't match `woman swimming` (🏊‍♀️)")
  end
end

it "`1F3CA 200D 2640` (minimally-qualified) should match `woman swimming` (🏊‍♀)" do
  if m = "🏊‍♀".match(Emoji::EMOJI_REGEX)
    "🏊‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊‍♀"
  else
    fail("`1F3CA 200D 2640` doesn't match `woman swimming` (🏊‍♀)")
  end
end

it "`1F3CA 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman swimming: light skin tone` (🏊🏻‍♀️)" do
  if m = "🏊🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🏊🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♀️"
  else
    fail("`1F3CA 1F3FB 200D 2640 FE0F` doesn't match `woman swimming: light skin tone` (🏊🏻‍♀️)")
  end
end

it "`1F3CA 1F3FB 200D 2640` (minimally-qualified) should match `woman swimming: light skin tone` (🏊🏻‍♀)" do
  if m = "🏊🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🏊🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏻‍♀"
  else
    fail("`1F3CA 1F3FB 200D 2640` doesn't match `woman swimming: light skin tone` (🏊🏻‍♀)")
  end
end

it "`1F3CA 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman swimming: medium-light skin tone` (🏊🏼‍♀️)" do
  if m = "🏊🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🏊🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♀️"
  else
    fail("`1F3CA 1F3FC 200D 2640 FE0F` doesn't match `woman swimming: medium-light skin tone` (🏊🏼‍♀️)")
  end
end

it "`1F3CA 1F3FC 200D 2640` (minimally-qualified) should match `woman swimming: medium-light skin tone` (🏊🏼‍♀)" do
  if m = "🏊🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🏊🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏼‍♀"
  else
    fail("`1F3CA 1F3FC 200D 2640` doesn't match `woman swimming: medium-light skin tone` (🏊🏼‍♀)")
  end
end

it "`1F3CA 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman swimming: medium skin tone` (🏊🏽‍♀️)" do
  if m = "🏊🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🏊🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♀️"
  else
    fail("`1F3CA 1F3FD 200D 2640 FE0F` doesn't match `woman swimming: medium skin tone` (🏊🏽‍♀️)")
  end
end

it "`1F3CA 1F3FD 200D 2640` (minimally-qualified) should match `woman swimming: medium skin tone` (🏊🏽‍♀)" do
  if m = "🏊🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🏊🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏽‍♀"
  else
    fail("`1F3CA 1F3FD 200D 2640` doesn't match `woman swimming: medium skin tone` (🏊🏽‍♀)")
  end
end

it "`1F3CA 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman swimming: medium-dark skin tone` (🏊🏾‍♀️)" do
  if m = "🏊🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🏊🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♀️"
  else
    fail("`1F3CA 1F3FE 200D 2640 FE0F` doesn't match `woman swimming: medium-dark skin tone` (🏊🏾‍♀️)")
  end
end

it "`1F3CA 1F3FE 200D 2640` (minimally-qualified) should match `woman swimming: medium-dark skin tone` (🏊🏾‍♀)" do
  if m = "🏊🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🏊🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏾‍♀"
  else
    fail("`1F3CA 1F3FE 200D 2640` doesn't match `woman swimming: medium-dark skin tone` (🏊🏾‍♀)")
  end
end

it "`1F3CA 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman swimming: dark skin tone` (🏊🏿‍♀️)" do
  if m = "🏊🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🏊🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♀️"
  else
    fail("`1F3CA 1F3FF 200D 2640 FE0F` doesn't match `woman swimming: dark skin tone` (🏊🏿‍♀️)")
  end
end

it "`1F3CA 1F3FF 200D 2640` (minimally-qualified) should match `woman swimming: dark skin tone` (🏊🏿‍♀)" do
  if m = "🏊🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🏊🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏊🏿‍♀"
  else
    fail("`1F3CA 1F3FF 200D 2640` doesn't match `woman swimming: dark skin tone` (🏊🏿‍♀)")
  end
end

it "`26F9 FE0F` (fully-qualified) should match `person bouncing ball` (⛹️)" do
  if m = "⛹️".match(Emoji::EMOJI_REGEX)
    "⛹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️"
  else
    fail("`26F9 FE0F` doesn't match `person bouncing ball` (⛹️)")
  end
end

it "`26F9` (unqualified) should match `person bouncing ball` (⛹)" do
  if m = "⛹".match(Emoji::EMOJI_REGEX)
    "⛹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹"
  else
    fail("`26F9` doesn't match `person bouncing ball` (⛹)")
  end
end

it "`26F9 1F3FB` (fully-qualified) should match `person bouncing ball: light skin tone` (⛹🏻)" do
  if m = "⛹🏻".match(Emoji::EMOJI_REGEX)
    "⛹🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻"
  else
    fail("`26F9 1F3FB` doesn't match `person bouncing ball: light skin tone` (⛹🏻)")
  end
end

it "`26F9 1F3FC` (fully-qualified) should match `person bouncing ball: medium-light skin tone` (⛹🏼)" do
  if m = "⛹🏼".match(Emoji::EMOJI_REGEX)
    "⛹🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼"
  else
    fail("`26F9 1F3FC` doesn't match `person bouncing ball: medium-light skin tone` (⛹🏼)")
  end
end

it "`26F9 1F3FD` (fully-qualified) should match `person bouncing ball: medium skin tone` (⛹🏽)" do
  if m = "⛹🏽".match(Emoji::EMOJI_REGEX)
    "⛹🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽"
  else
    fail("`26F9 1F3FD` doesn't match `person bouncing ball: medium skin tone` (⛹🏽)")
  end
end

it "`26F9 1F3FE` (fully-qualified) should match `person bouncing ball: medium-dark skin tone` (⛹🏾)" do
  if m = "⛹🏾".match(Emoji::EMOJI_REGEX)
    "⛹🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾"
  else
    fail("`26F9 1F3FE` doesn't match `person bouncing ball: medium-dark skin tone` (⛹🏾)")
  end
end

it "`26F9 1F3FF` (fully-qualified) should match `person bouncing ball: dark skin tone` (⛹🏿)" do
  if m = "⛹🏿".match(Emoji::EMOJI_REGEX)
    "⛹🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿"
  else
    fail("`26F9 1F3FF` doesn't match `person bouncing ball: dark skin tone` (⛹🏿)")
  end
end

it "`26F9 FE0F 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball` (⛹️‍♂️)" do
  if m = "⛹️‍♂️".match(Emoji::EMOJI_REGEX)
    "⛹️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♂️"
  else
    fail("`26F9 FE0F 200D 2642 FE0F` doesn't match `man bouncing ball` (⛹️‍♂️)")
  end
end

it "`26F9 200D 2642 FE0F` (unqualified) should match `man bouncing ball` (⛹‍♂️)" do
  if m = "⛹‍♂️".match(Emoji::EMOJI_REGEX)
    "⛹‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♂️"
  else
    fail("`26F9 200D 2642 FE0F` doesn't match `man bouncing ball` (⛹‍♂️)")
  end
end

it "`26F9 FE0F 200D 2642` (unqualified) should match `man bouncing ball` (⛹️‍♂)" do
  if m = "⛹️‍♂".match(Emoji::EMOJI_REGEX)
    "⛹️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♂"
  else
    fail("`26F9 FE0F 200D 2642` doesn't match `man bouncing ball` (⛹️‍♂)")
  end
end

it "`26F9 200D 2642` (unqualified) should match `man bouncing ball` (⛹‍♂)" do
  if m = "⛹‍♂".match(Emoji::EMOJI_REGEX)
    "⛹‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♂"
  else
    fail("`26F9 200D 2642` doesn't match `man bouncing ball` (⛹‍♂)")
  end
end

it "`26F9 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: light skin tone` (⛹🏻‍♂️)" do
  if m = "⛹🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "⛹🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♂️"
  else
    fail("`26F9 1F3FB 200D 2642 FE0F` doesn't match `man bouncing ball: light skin tone` (⛹🏻‍♂️)")
  end
end

it "`26F9 1F3FB 200D 2642` (minimally-qualified) should match `man bouncing ball: light skin tone` (⛹🏻‍♂)" do
  if m = "⛹🏻‍♂".match(Emoji::EMOJI_REGEX)
    "⛹🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♂"
  else
    fail("`26F9 1F3FB 200D 2642` doesn't match `man bouncing ball: light skin tone` (⛹🏻‍♂)")
  end
end

it "`26F9 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: medium-light skin tone` (⛹🏼‍♂️)" do
  if m = "⛹🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "⛹🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♂️"
  else
    fail("`26F9 1F3FC 200D 2642 FE0F` doesn't match `man bouncing ball: medium-light skin tone` (⛹🏼‍♂️)")
  end
end

it "`26F9 1F3FC 200D 2642` (minimally-qualified) should match `man bouncing ball: medium-light skin tone` (⛹🏼‍♂)" do
  if m = "⛹🏼‍♂".match(Emoji::EMOJI_REGEX)
    "⛹🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♂"
  else
    fail("`26F9 1F3FC 200D 2642` doesn't match `man bouncing ball: medium-light skin tone` (⛹🏼‍♂)")
  end
end

it "`26F9 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: medium skin tone` (⛹🏽‍♂️)" do
  if m = "⛹🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "⛹🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♂️"
  else
    fail("`26F9 1F3FD 200D 2642 FE0F` doesn't match `man bouncing ball: medium skin tone` (⛹🏽‍♂️)")
  end
end

it "`26F9 1F3FD 200D 2642` (minimally-qualified) should match `man bouncing ball: medium skin tone` (⛹🏽‍♂)" do
  if m = "⛹🏽‍♂".match(Emoji::EMOJI_REGEX)
    "⛹🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♂"
  else
    fail("`26F9 1F3FD 200D 2642` doesn't match `man bouncing ball: medium skin tone` (⛹🏽‍♂)")
  end
end

it "`26F9 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: medium-dark skin tone` (⛹🏾‍♂️)" do
  if m = "⛹🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "⛹🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♂️"
  else
    fail("`26F9 1F3FE 200D 2642 FE0F` doesn't match `man bouncing ball: medium-dark skin tone` (⛹🏾‍♂️)")
  end
end

it "`26F9 1F3FE 200D 2642` (minimally-qualified) should match `man bouncing ball: medium-dark skin tone` (⛹🏾‍♂)" do
  if m = "⛹🏾‍♂".match(Emoji::EMOJI_REGEX)
    "⛹🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♂"
  else
    fail("`26F9 1F3FE 200D 2642` doesn't match `man bouncing ball: medium-dark skin tone` (⛹🏾‍♂)")
  end
end

it "`26F9 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man bouncing ball: dark skin tone` (⛹🏿‍♂️)" do
  if m = "⛹🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "⛹🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♂️"
  else
    fail("`26F9 1F3FF 200D 2642 FE0F` doesn't match `man bouncing ball: dark skin tone` (⛹🏿‍♂️)")
  end
end

it "`26F9 1F3FF 200D 2642` (minimally-qualified) should match `man bouncing ball: dark skin tone` (⛹🏿‍♂)" do
  if m = "⛹🏿‍♂".match(Emoji::EMOJI_REGEX)
    "⛹🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♂"
  else
    fail("`26F9 1F3FF 200D 2642` doesn't match `man bouncing ball: dark skin tone` (⛹🏿‍♂)")
  end
end

it "`26F9 FE0F 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball` (⛹️‍♀️)" do
  if m = "⛹️‍♀️".match(Emoji::EMOJI_REGEX)
    "⛹️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♀️"
  else
    fail("`26F9 FE0F 200D 2640 FE0F` doesn't match `woman bouncing ball` (⛹️‍♀️)")
  end
end

it "`26F9 200D 2640 FE0F` (unqualified) should match `woman bouncing ball` (⛹‍♀️)" do
  if m = "⛹‍♀️".match(Emoji::EMOJI_REGEX)
    "⛹‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♀️"
  else
    fail("`26F9 200D 2640 FE0F` doesn't match `woman bouncing ball` (⛹‍♀️)")
  end
end

it "`26F9 FE0F 200D 2640` (unqualified) should match `woman bouncing ball` (⛹️‍♀)" do
  if m = "⛹️‍♀".match(Emoji::EMOJI_REGEX)
    "⛹️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹️‍♀"
  else
    fail("`26F9 FE0F 200D 2640` doesn't match `woman bouncing ball` (⛹️‍♀)")
  end
end

it "`26F9 200D 2640` (unqualified) should match `woman bouncing ball` (⛹‍♀)" do
  if m = "⛹‍♀".match(Emoji::EMOJI_REGEX)
    "⛹‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹‍♀"
  else
    fail("`26F9 200D 2640` doesn't match `woman bouncing ball` (⛹‍♀)")
  end
end

it "`26F9 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: light skin tone` (⛹🏻‍♀️)" do
  if m = "⛹🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "⛹🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♀️"
  else
    fail("`26F9 1F3FB 200D 2640 FE0F` doesn't match `woman bouncing ball: light skin tone` (⛹🏻‍♀️)")
  end
end

it "`26F9 1F3FB 200D 2640` (minimally-qualified) should match `woman bouncing ball: light skin tone` (⛹🏻‍♀)" do
  if m = "⛹🏻‍♀".match(Emoji::EMOJI_REGEX)
    "⛹🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏻‍♀"
  else
    fail("`26F9 1F3FB 200D 2640` doesn't match `woman bouncing ball: light skin tone` (⛹🏻‍♀)")
  end
end

it "`26F9 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: medium-light skin tone` (⛹🏼‍♀️)" do
  if m = "⛹🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "⛹🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♀️"
  else
    fail("`26F9 1F3FC 200D 2640 FE0F` doesn't match `woman bouncing ball: medium-light skin tone` (⛹🏼‍♀️)")
  end
end

it "`26F9 1F3FC 200D 2640` (minimally-qualified) should match `woman bouncing ball: medium-light skin tone` (⛹🏼‍♀)" do
  if m = "⛹🏼‍♀".match(Emoji::EMOJI_REGEX)
    "⛹🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏼‍♀"
  else
    fail("`26F9 1F3FC 200D 2640` doesn't match `woman bouncing ball: medium-light skin tone` (⛹🏼‍♀)")
  end
end

it "`26F9 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: medium skin tone` (⛹🏽‍♀️)" do
  if m = "⛹🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "⛹🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♀️"
  else
    fail("`26F9 1F3FD 200D 2640 FE0F` doesn't match `woman bouncing ball: medium skin tone` (⛹🏽‍♀️)")
  end
end

it "`26F9 1F3FD 200D 2640` (minimally-qualified) should match `woman bouncing ball: medium skin tone` (⛹🏽‍♀)" do
  if m = "⛹🏽‍♀".match(Emoji::EMOJI_REGEX)
    "⛹🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏽‍♀"
  else
    fail("`26F9 1F3FD 200D 2640` doesn't match `woman bouncing ball: medium skin tone` (⛹🏽‍♀)")
  end
end

it "`26F9 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: medium-dark skin tone` (⛹🏾‍♀️)" do
  if m = "⛹🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "⛹🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♀️"
  else
    fail("`26F9 1F3FE 200D 2640 FE0F` doesn't match `woman bouncing ball: medium-dark skin tone` (⛹🏾‍♀️)")
  end
end

it "`26F9 1F3FE 200D 2640` (minimally-qualified) should match `woman bouncing ball: medium-dark skin tone` (⛹🏾‍♀)" do
  if m = "⛹🏾‍♀".match(Emoji::EMOJI_REGEX)
    "⛹🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏾‍♀"
  else
    fail("`26F9 1F3FE 200D 2640` doesn't match `woman bouncing ball: medium-dark skin tone` (⛹🏾‍♀)")
  end
end

it "`26F9 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman bouncing ball: dark skin tone` (⛹🏿‍♀️)" do
  if m = "⛹🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "⛹🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♀️"
  else
    fail("`26F9 1F3FF 200D 2640 FE0F` doesn't match `woman bouncing ball: dark skin tone` (⛹🏿‍♀️)")
  end
end

it "`26F9 1F3FF 200D 2640` (minimally-qualified) should match `woman bouncing ball: dark skin tone` (⛹🏿‍♀)" do
  if m = "⛹🏿‍♀".match(Emoji::EMOJI_REGEX)
    "⛹🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛹🏿‍♀"
  else
    fail("`26F9 1F3FF 200D 2640` doesn't match `woman bouncing ball: dark skin tone` (⛹🏿‍♀)")
  end
end

it "`1F3CB FE0F` (fully-qualified) should match `person lifting weights` (🏋️)" do
  if m = "🏋️".match(Emoji::EMOJI_REGEX)
    "🏋️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️"
  else
    fail("`1F3CB FE0F` doesn't match `person lifting weights` (🏋️)")
  end
end

it "`1F3CB` (unqualified) should match `person lifting weights` (🏋)" do
  if m = "🏋".match(Emoji::EMOJI_REGEX)
    "🏋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋"
  else
    fail("`1F3CB` doesn't match `person lifting weights` (🏋)")
  end
end

it "`1F3CB 1F3FB` (fully-qualified) should match `person lifting weights: light skin tone` (🏋🏻)" do
  if m = "🏋🏻".match(Emoji::EMOJI_REGEX)
    "🏋🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻"
  else
    fail("`1F3CB 1F3FB` doesn't match `person lifting weights: light skin tone` (🏋🏻)")
  end
end

it "`1F3CB 1F3FC` (fully-qualified) should match `person lifting weights: medium-light skin tone` (🏋🏼)" do
  if m = "🏋🏼".match(Emoji::EMOJI_REGEX)
    "🏋🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼"
  else
    fail("`1F3CB 1F3FC` doesn't match `person lifting weights: medium-light skin tone` (🏋🏼)")
  end
end

it "`1F3CB 1F3FD` (fully-qualified) should match `person lifting weights: medium skin tone` (🏋🏽)" do
  if m = "🏋🏽".match(Emoji::EMOJI_REGEX)
    "🏋🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽"
  else
    fail("`1F3CB 1F3FD` doesn't match `person lifting weights: medium skin tone` (🏋🏽)")
  end
end

it "`1F3CB 1F3FE` (fully-qualified) should match `person lifting weights: medium-dark skin tone` (🏋🏾)" do
  if m = "🏋🏾".match(Emoji::EMOJI_REGEX)
    "🏋🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾"
  else
    fail("`1F3CB 1F3FE` doesn't match `person lifting weights: medium-dark skin tone` (🏋🏾)")
  end
end

it "`1F3CB 1F3FF` (fully-qualified) should match `person lifting weights: dark skin tone` (🏋🏿)" do
  if m = "🏋🏿".match(Emoji::EMOJI_REGEX)
    "🏋🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿"
  else
    fail("`1F3CB 1F3FF` doesn't match `person lifting weights: dark skin tone` (🏋🏿)")
  end
end

it "`1F3CB FE0F 200D 2642 FE0F` (fully-qualified) should match `man lifting weights` (🏋️‍♂️)" do
  if m = "🏋️‍♂️".match(Emoji::EMOJI_REGEX)
    "🏋️‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♂️"
  else
    fail("`1F3CB FE0F 200D 2642 FE0F` doesn't match `man lifting weights` (🏋️‍♂️)")
  end
end

it "`1F3CB 200D 2642 FE0F` (unqualified) should match `man lifting weights` (🏋‍♂️)" do
  if m = "🏋‍♂️".match(Emoji::EMOJI_REGEX)
    "🏋‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♂️"
  else
    fail("`1F3CB 200D 2642 FE0F` doesn't match `man lifting weights` (🏋‍♂️)")
  end
end

it "`1F3CB FE0F 200D 2642` (unqualified) should match `man lifting weights` (🏋️‍♂)" do
  if m = "🏋️‍♂".match(Emoji::EMOJI_REGEX)
    "🏋️‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♂"
  else
    fail("`1F3CB FE0F 200D 2642` doesn't match `man lifting weights` (🏋️‍♂)")
  end
end

it "`1F3CB 200D 2642` (unqualified) should match `man lifting weights` (🏋‍♂)" do
  if m = "🏋‍♂".match(Emoji::EMOJI_REGEX)
    "🏋‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♂"
  else
    fail("`1F3CB 200D 2642` doesn't match `man lifting weights` (🏋‍♂)")
  end
end

it "`1F3CB 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: light skin tone` (🏋🏻‍♂️)" do
  if m = "🏋🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🏋🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♂️"
  else
    fail("`1F3CB 1F3FB 200D 2642 FE0F` doesn't match `man lifting weights: light skin tone` (🏋🏻‍♂️)")
  end
end

it "`1F3CB 1F3FB 200D 2642` (minimally-qualified) should match `man lifting weights: light skin tone` (🏋🏻‍♂)" do
  if m = "🏋🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🏋🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♂"
  else
    fail("`1F3CB 1F3FB 200D 2642` doesn't match `man lifting weights: light skin tone` (🏋🏻‍♂)")
  end
end

it "`1F3CB 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: medium-light skin tone` (🏋🏼‍♂️)" do
  if m = "🏋🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🏋🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♂️"
  else
    fail("`1F3CB 1F3FC 200D 2642 FE0F` doesn't match `man lifting weights: medium-light skin tone` (🏋🏼‍♂️)")
  end
end

it "`1F3CB 1F3FC 200D 2642` (minimally-qualified) should match `man lifting weights: medium-light skin tone` (🏋🏼‍♂)" do
  if m = "🏋🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🏋🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♂"
  else
    fail("`1F3CB 1F3FC 200D 2642` doesn't match `man lifting weights: medium-light skin tone` (🏋🏼‍♂)")
  end
end

it "`1F3CB 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: medium skin tone` (🏋🏽‍♂️)" do
  if m = "🏋🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🏋🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♂️"
  else
    fail("`1F3CB 1F3FD 200D 2642 FE0F` doesn't match `man lifting weights: medium skin tone` (🏋🏽‍♂️)")
  end
end

it "`1F3CB 1F3FD 200D 2642` (minimally-qualified) should match `man lifting weights: medium skin tone` (🏋🏽‍♂)" do
  if m = "🏋🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🏋🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♂"
  else
    fail("`1F3CB 1F3FD 200D 2642` doesn't match `man lifting weights: medium skin tone` (🏋🏽‍♂)")
  end
end

it "`1F3CB 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: medium-dark skin tone` (🏋🏾‍♂️)" do
  if m = "🏋🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🏋🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♂️"
  else
    fail("`1F3CB 1F3FE 200D 2642 FE0F` doesn't match `man lifting weights: medium-dark skin tone` (🏋🏾‍♂️)")
  end
end

it "`1F3CB 1F3FE 200D 2642` (minimally-qualified) should match `man lifting weights: medium-dark skin tone` (🏋🏾‍♂)" do
  if m = "🏋🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🏋🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♂"
  else
    fail("`1F3CB 1F3FE 200D 2642` doesn't match `man lifting weights: medium-dark skin tone` (🏋🏾‍♂)")
  end
end

it "`1F3CB 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man lifting weights: dark skin tone` (🏋🏿‍♂️)" do
  if m = "🏋🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🏋🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♂️"
  else
    fail("`1F3CB 1F3FF 200D 2642 FE0F` doesn't match `man lifting weights: dark skin tone` (🏋🏿‍♂️)")
  end
end

it "`1F3CB 1F3FF 200D 2642` (minimally-qualified) should match `man lifting weights: dark skin tone` (🏋🏿‍♂)" do
  if m = "🏋🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🏋🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♂"
  else
    fail("`1F3CB 1F3FF 200D 2642` doesn't match `man lifting weights: dark skin tone` (🏋🏿‍♂)")
  end
end

it "`1F3CB FE0F 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights` (🏋️‍♀️)" do
  if m = "🏋️‍♀️".match(Emoji::EMOJI_REGEX)
    "🏋️‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♀️"
  else
    fail("`1F3CB FE0F 200D 2640 FE0F` doesn't match `woman lifting weights` (🏋️‍♀️)")
  end
end

it "`1F3CB 200D 2640 FE0F` (unqualified) should match `woman lifting weights` (🏋‍♀️)" do
  if m = "🏋‍♀️".match(Emoji::EMOJI_REGEX)
    "🏋‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♀️"
  else
    fail("`1F3CB 200D 2640 FE0F` doesn't match `woman lifting weights` (🏋‍♀️)")
  end
end

it "`1F3CB FE0F 200D 2640` (unqualified) should match `woman lifting weights` (🏋️‍♀)" do
  if m = "🏋️‍♀".match(Emoji::EMOJI_REGEX)
    "🏋️‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋️‍♀"
  else
    fail("`1F3CB FE0F 200D 2640` doesn't match `woman lifting weights` (🏋️‍♀)")
  end
end

it "`1F3CB 200D 2640` (unqualified) should match `woman lifting weights` (🏋‍♀)" do
  if m = "🏋‍♀".match(Emoji::EMOJI_REGEX)
    "🏋‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋‍♀"
  else
    fail("`1F3CB 200D 2640` doesn't match `woman lifting weights` (🏋‍♀)")
  end
end

it "`1F3CB 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: light skin tone` (🏋🏻‍♀️)" do
  if m = "🏋🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🏋🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♀️"
  else
    fail("`1F3CB 1F3FB 200D 2640 FE0F` doesn't match `woman lifting weights: light skin tone` (🏋🏻‍♀️)")
  end
end

it "`1F3CB 1F3FB 200D 2640` (minimally-qualified) should match `woman lifting weights: light skin tone` (🏋🏻‍♀)" do
  if m = "🏋🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🏋🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏻‍♀"
  else
    fail("`1F3CB 1F3FB 200D 2640` doesn't match `woman lifting weights: light skin tone` (🏋🏻‍♀)")
  end
end

it "`1F3CB 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: medium-light skin tone` (🏋🏼‍♀️)" do
  if m = "🏋🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🏋🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♀️"
  else
    fail("`1F3CB 1F3FC 200D 2640 FE0F` doesn't match `woman lifting weights: medium-light skin tone` (🏋🏼‍♀️)")
  end
end

it "`1F3CB 1F3FC 200D 2640` (minimally-qualified) should match `woman lifting weights: medium-light skin tone` (🏋🏼‍♀)" do
  if m = "🏋🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🏋🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏼‍♀"
  else
    fail("`1F3CB 1F3FC 200D 2640` doesn't match `woman lifting weights: medium-light skin tone` (🏋🏼‍♀)")
  end
end

it "`1F3CB 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: medium skin tone` (🏋🏽‍♀️)" do
  if m = "🏋🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🏋🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♀️"
  else
    fail("`1F3CB 1F3FD 200D 2640 FE0F` doesn't match `woman lifting weights: medium skin tone` (🏋🏽‍♀️)")
  end
end

it "`1F3CB 1F3FD 200D 2640` (minimally-qualified) should match `woman lifting weights: medium skin tone` (🏋🏽‍♀)" do
  if m = "🏋🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🏋🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏽‍♀"
  else
    fail("`1F3CB 1F3FD 200D 2640` doesn't match `woman lifting weights: medium skin tone` (🏋🏽‍♀)")
  end
end

it "`1F3CB 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: medium-dark skin tone` (🏋🏾‍♀️)" do
  if m = "🏋🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🏋🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♀️"
  else
    fail("`1F3CB 1F3FE 200D 2640 FE0F` doesn't match `woman lifting weights: medium-dark skin tone` (🏋🏾‍♀️)")
  end
end

it "`1F3CB 1F3FE 200D 2640` (minimally-qualified) should match `woman lifting weights: medium-dark skin tone` (🏋🏾‍♀)" do
  if m = "🏋🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🏋🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏾‍♀"
  else
    fail("`1F3CB 1F3FE 200D 2640` doesn't match `woman lifting weights: medium-dark skin tone` (🏋🏾‍♀)")
  end
end

it "`1F3CB 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman lifting weights: dark skin tone` (🏋🏿‍♀️)" do
  if m = "🏋🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🏋🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♀️"
  else
    fail("`1F3CB 1F3FF 200D 2640 FE0F` doesn't match `woman lifting weights: dark skin tone` (🏋🏿‍♀️)")
  end
end

it "`1F3CB 1F3FF 200D 2640` (minimally-qualified) should match `woman lifting weights: dark skin tone` (🏋🏿‍♀)" do
  if m = "🏋🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🏋🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏋🏿‍♀"
  else
    fail("`1F3CB 1F3FF 200D 2640` doesn't match `woman lifting weights: dark skin tone` (🏋🏿‍♀)")
  end
end

it "`1F6B4` (fully-qualified) should match `person biking` (🚴)" do
  if m = "🚴".match(Emoji::EMOJI_REGEX)
    "🚴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴"
  else
    fail("`1F6B4` doesn't match `person biking` (🚴)")
  end
end

it "`1F6B4 1F3FB` (fully-qualified) should match `person biking: light skin tone` (🚴🏻)" do
  if m = "🚴🏻".match(Emoji::EMOJI_REGEX)
    "🚴🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻"
  else
    fail("`1F6B4 1F3FB` doesn't match `person biking: light skin tone` (🚴🏻)")
  end
end

it "`1F6B4 1F3FC` (fully-qualified) should match `person biking: medium-light skin tone` (🚴🏼)" do
  if m = "🚴🏼".match(Emoji::EMOJI_REGEX)
    "🚴🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼"
  else
    fail("`1F6B4 1F3FC` doesn't match `person biking: medium-light skin tone` (🚴🏼)")
  end
end

it "`1F6B4 1F3FD` (fully-qualified) should match `person biking: medium skin tone` (🚴🏽)" do
  if m = "🚴🏽".match(Emoji::EMOJI_REGEX)
    "🚴🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽"
  else
    fail("`1F6B4 1F3FD` doesn't match `person biking: medium skin tone` (🚴🏽)")
  end
end

it "`1F6B4 1F3FE` (fully-qualified) should match `person biking: medium-dark skin tone` (🚴🏾)" do
  if m = "🚴🏾".match(Emoji::EMOJI_REGEX)
    "🚴🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾"
  else
    fail("`1F6B4 1F3FE` doesn't match `person biking: medium-dark skin tone` (🚴🏾)")
  end
end

it "`1F6B4 1F3FF` (fully-qualified) should match `person biking: dark skin tone` (🚴🏿)" do
  if m = "🚴🏿".match(Emoji::EMOJI_REGEX)
    "🚴🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿"
  else
    fail("`1F6B4 1F3FF` doesn't match `person biking: dark skin tone` (🚴🏿)")
  end
end

it "`1F6B4 200D 2642 FE0F` (fully-qualified) should match `man biking` (🚴‍♂️)" do
  if m = "🚴‍♂️".match(Emoji::EMOJI_REGEX)
    "🚴‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♂️"
  else
    fail("`1F6B4 200D 2642 FE0F` doesn't match `man biking` (🚴‍♂️)")
  end
end

it "`1F6B4 200D 2642` (minimally-qualified) should match `man biking` (🚴‍♂)" do
  if m = "🚴‍♂".match(Emoji::EMOJI_REGEX)
    "🚴‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♂"
  else
    fail("`1F6B4 200D 2642` doesn't match `man biking` (🚴‍♂)")
  end
end

it "`1F6B4 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man biking: light skin tone` (🚴🏻‍♂️)" do
  if m = "🚴🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🚴🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♂️"
  else
    fail("`1F6B4 1F3FB 200D 2642 FE0F` doesn't match `man biking: light skin tone` (🚴🏻‍♂️)")
  end
end

it "`1F6B4 1F3FB 200D 2642` (minimally-qualified) should match `man biking: light skin tone` (🚴🏻‍♂)" do
  if m = "🚴🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🚴🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♂"
  else
    fail("`1F6B4 1F3FB 200D 2642` doesn't match `man biking: light skin tone` (🚴🏻‍♂)")
  end
end

it "`1F6B4 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man biking: medium-light skin tone` (🚴🏼‍♂️)" do
  if m = "🚴🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🚴🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♂️"
  else
    fail("`1F6B4 1F3FC 200D 2642 FE0F` doesn't match `man biking: medium-light skin tone` (🚴🏼‍♂️)")
  end
end

it "`1F6B4 1F3FC 200D 2642` (minimally-qualified) should match `man biking: medium-light skin tone` (🚴🏼‍♂)" do
  if m = "🚴🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🚴🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♂"
  else
    fail("`1F6B4 1F3FC 200D 2642` doesn't match `man biking: medium-light skin tone` (🚴🏼‍♂)")
  end
end

it "`1F6B4 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man biking: medium skin tone` (🚴🏽‍♂️)" do
  if m = "🚴🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🚴🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♂️"
  else
    fail("`1F6B4 1F3FD 200D 2642 FE0F` doesn't match `man biking: medium skin tone` (🚴🏽‍♂️)")
  end
end

it "`1F6B4 1F3FD 200D 2642` (minimally-qualified) should match `man biking: medium skin tone` (🚴🏽‍♂)" do
  if m = "🚴🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🚴🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♂"
  else
    fail("`1F6B4 1F3FD 200D 2642` doesn't match `man biking: medium skin tone` (🚴🏽‍♂)")
  end
end

it "`1F6B4 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man biking: medium-dark skin tone` (🚴🏾‍♂️)" do
  if m = "🚴🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🚴🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♂️"
  else
    fail("`1F6B4 1F3FE 200D 2642 FE0F` doesn't match `man biking: medium-dark skin tone` (🚴🏾‍♂️)")
  end
end

it "`1F6B4 1F3FE 200D 2642` (minimally-qualified) should match `man biking: medium-dark skin tone` (🚴🏾‍♂)" do
  if m = "🚴🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🚴🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♂"
  else
    fail("`1F6B4 1F3FE 200D 2642` doesn't match `man biking: medium-dark skin tone` (🚴🏾‍♂)")
  end
end

it "`1F6B4 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man biking: dark skin tone` (🚴🏿‍♂️)" do
  if m = "🚴🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🚴🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♂️"
  else
    fail("`1F6B4 1F3FF 200D 2642 FE0F` doesn't match `man biking: dark skin tone` (🚴🏿‍♂️)")
  end
end

it "`1F6B4 1F3FF 200D 2642` (minimally-qualified) should match `man biking: dark skin tone` (🚴🏿‍♂)" do
  if m = "🚴🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🚴🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♂"
  else
    fail("`1F6B4 1F3FF 200D 2642` doesn't match `man biking: dark skin tone` (🚴🏿‍♂)")
  end
end

it "`1F6B4 200D 2640 FE0F` (fully-qualified) should match `woman biking` (🚴‍♀️)" do
  if m = "🚴‍♀️".match(Emoji::EMOJI_REGEX)
    "🚴‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♀️"
  else
    fail("`1F6B4 200D 2640 FE0F` doesn't match `woman biking` (🚴‍♀️)")
  end
end

it "`1F6B4 200D 2640` (minimally-qualified) should match `woman biking` (🚴‍♀)" do
  if m = "🚴‍♀".match(Emoji::EMOJI_REGEX)
    "🚴‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴‍♀"
  else
    fail("`1F6B4 200D 2640` doesn't match `woman biking` (🚴‍♀)")
  end
end

it "`1F6B4 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman biking: light skin tone` (🚴🏻‍♀️)" do
  if m = "🚴🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🚴🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♀️"
  else
    fail("`1F6B4 1F3FB 200D 2640 FE0F` doesn't match `woman biking: light skin tone` (🚴🏻‍♀️)")
  end
end

it "`1F6B4 1F3FB 200D 2640` (minimally-qualified) should match `woman biking: light skin tone` (🚴🏻‍♀)" do
  if m = "🚴🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🚴🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏻‍♀"
  else
    fail("`1F6B4 1F3FB 200D 2640` doesn't match `woman biking: light skin tone` (🚴🏻‍♀)")
  end
end

it "`1F6B4 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman biking: medium-light skin tone` (🚴🏼‍♀️)" do
  if m = "🚴🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🚴🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♀️"
  else
    fail("`1F6B4 1F3FC 200D 2640 FE0F` doesn't match `woman biking: medium-light skin tone` (🚴🏼‍♀️)")
  end
end

it "`1F6B4 1F3FC 200D 2640` (minimally-qualified) should match `woman biking: medium-light skin tone` (🚴🏼‍♀)" do
  if m = "🚴🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🚴🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏼‍♀"
  else
    fail("`1F6B4 1F3FC 200D 2640` doesn't match `woman biking: medium-light skin tone` (🚴🏼‍♀)")
  end
end

it "`1F6B4 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman biking: medium skin tone` (🚴🏽‍♀️)" do
  if m = "🚴🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🚴🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♀️"
  else
    fail("`1F6B4 1F3FD 200D 2640 FE0F` doesn't match `woman biking: medium skin tone` (🚴🏽‍♀️)")
  end
end

it "`1F6B4 1F3FD 200D 2640` (minimally-qualified) should match `woman biking: medium skin tone` (🚴🏽‍♀)" do
  if m = "🚴🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🚴🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏽‍♀"
  else
    fail("`1F6B4 1F3FD 200D 2640` doesn't match `woman biking: medium skin tone` (🚴🏽‍♀)")
  end
end

it "`1F6B4 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman biking: medium-dark skin tone` (🚴🏾‍♀️)" do
  if m = "🚴🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🚴🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♀️"
  else
    fail("`1F6B4 1F3FE 200D 2640 FE0F` doesn't match `woman biking: medium-dark skin tone` (🚴🏾‍♀️)")
  end
end

it "`1F6B4 1F3FE 200D 2640` (minimally-qualified) should match `woman biking: medium-dark skin tone` (🚴🏾‍♀)" do
  if m = "🚴🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🚴🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏾‍♀"
  else
    fail("`1F6B4 1F3FE 200D 2640` doesn't match `woman biking: medium-dark skin tone` (🚴🏾‍♀)")
  end
end

it "`1F6B4 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman biking: dark skin tone` (🚴🏿‍♀️)" do
  if m = "🚴🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🚴🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♀️"
  else
    fail("`1F6B4 1F3FF 200D 2640 FE0F` doesn't match `woman biking: dark skin tone` (🚴🏿‍♀️)")
  end
end

it "`1F6B4 1F3FF 200D 2640` (minimally-qualified) should match `woman biking: dark skin tone` (🚴🏿‍♀)" do
  if m = "🚴🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🚴🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚴🏿‍♀"
  else
    fail("`1F6B4 1F3FF 200D 2640` doesn't match `woman biking: dark skin tone` (🚴🏿‍♀)")
  end
end

it "`1F6B5` (fully-qualified) should match `person mountain biking` (🚵)" do
  if m = "🚵".match(Emoji::EMOJI_REGEX)
    "🚵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵"
  else
    fail("`1F6B5` doesn't match `person mountain biking` (🚵)")
  end
end

it "`1F6B5 1F3FB` (fully-qualified) should match `person mountain biking: light skin tone` (🚵🏻)" do
  if m = "🚵🏻".match(Emoji::EMOJI_REGEX)
    "🚵🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻"
  else
    fail("`1F6B5 1F3FB` doesn't match `person mountain biking: light skin tone` (🚵🏻)")
  end
end

it "`1F6B5 1F3FC` (fully-qualified) should match `person mountain biking: medium-light skin tone` (🚵🏼)" do
  if m = "🚵🏼".match(Emoji::EMOJI_REGEX)
    "🚵🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼"
  else
    fail("`1F6B5 1F3FC` doesn't match `person mountain biking: medium-light skin tone` (🚵🏼)")
  end
end

it "`1F6B5 1F3FD` (fully-qualified) should match `person mountain biking: medium skin tone` (🚵🏽)" do
  if m = "🚵🏽".match(Emoji::EMOJI_REGEX)
    "🚵🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽"
  else
    fail("`1F6B5 1F3FD` doesn't match `person mountain biking: medium skin tone` (🚵🏽)")
  end
end

it "`1F6B5 1F3FE` (fully-qualified) should match `person mountain biking: medium-dark skin tone` (🚵🏾)" do
  if m = "🚵🏾".match(Emoji::EMOJI_REGEX)
    "🚵🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾"
  else
    fail("`1F6B5 1F3FE` doesn't match `person mountain biking: medium-dark skin tone` (🚵🏾)")
  end
end

it "`1F6B5 1F3FF` (fully-qualified) should match `person mountain biking: dark skin tone` (🚵🏿)" do
  if m = "🚵🏿".match(Emoji::EMOJI_REGEX)
    "🚵🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿"
  else
    fail("`1F6B5 1F3FF` doesn't match `person mountain biking: dark skin tone` (🚵🏿)")
  end
end

it "`1F6B5 200D 2642 FE0F` (fully-qualified) should match `man mountain biking` (🚵‍♂️)" do
  if m = "🚵‍♂️".match(Emoji::EMOJI_REGEX)
    "🚵‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♂️"
  else
    fail("`1F6B5 200D 2642 FE0F` doesn't match `man mountain biking` (🚵‍♂️)")
  end
end

it "`1F6B5 200D 2642` (minimally-qualified) should match `man mountain biking` (🚵‍♂)" do
  if m = "🚵‍♂".match(Emoji::EMOJI_REGEX)
    "🚵‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♂"
  else
    fail("`1F6B5 200D 2642` doesn't match `man mountain biking` (🚵‍♂)")
  end
end

it "`1F6B5 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: light skin tone` (🚵🏻‍♂️)" do
  if m = "🚵🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🚵🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♂️"
  else
    fail("`1F6B5 1F3FB 200D 2642 FE0F` doesn't match `man mountain biking: light skin tone` (🚵🏻‍♂️)")
  end
end

it "`1F6B5 1F3FB 200D 2642` (minimally-qualified) should match `man mountain biking: light skin tone` (🚵🏻‍♂)" do
  if m = "🚵🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🚵🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♂"
  else
    fail("`1F6B5 1F3FB 200D 2642` doesn't match `man mountain biking: light skin tone` (🚵🏻‍♂)")
  end
end

it "`1F6B5 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: medium-light skin tone` (🚵🏼‍♂️)" do
  if m = "🚵🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🚵🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♂️"
  else
    fail("`1F6B5 1F3FC 200D 2642 FE0F` doesn't match `man mountain biking: medium-light skin tone` (🚵🏼‍♂️)")
  end
end

it "`1F6B5 1F3FC 200D 2642` (minimally-qualified) should match `man mountain biking: medium-light skin tone` (🚵🏼‍♂)" do
  if m = "🚵🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🚵🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♂"
  else
    fail("`1F6B5 1F3FC 200D 2642` doesn't match `man mountain biking: medium-light skin tone` (🚵🏼‍♂)")
  end
end

it "`1F6B5 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: medium skin tone` (🚵🏽‍♂️)" do
  if m = "🚵🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🚵🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♂️"
  else
    fail("`1F6B5 1F3FD 200D 2642 FE0F` doesn't match `man mountain biking: medium skin tone` (🚵🏽‍♂️)")
  end
end

it "`1F6B5 1F3FD 200D 2642` (minimally-qualified) should match `man mountain biking: medium skin tone` (🚵🏽‍♂)" do
  if m = "🚵🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🚵🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♂"
  else
    fail("`1F6B5 1F3FD 200D 2642` doesn't match `man mountain biking: medium skin tone` (🚵🏽‍♂)")
  end
end

it "`1F6B5 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: medium-dark skin tone` (🚵🏾‍♂️)" do
  if m = "🚵🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🚵🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♂️"
  else
    fail("`1F6B5 1F3FE 200D 2642 FE0F` doesn't match `man mountain biking: medium-dark skin tone` (🚵🏾‍♂️)")
  end
end

it "`1F6B5 1F3FE 200D 2642` (minimally-qualified) should match `man mountain biking: medium-dark skin tone` (🚵🏾‍♂)" do
  if m = "🚵🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🚵🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♂"
  else
    fail("`1F6B5 1F3FE 200D 2642` doesn't match `man mountain biking: medium-dark skin tone` (🚵🏾‍♂)")
  end
end

it "`1F6B5 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man mountain biking: dark skin tone` (🚵🏿‍♂️)" do
  if m = "🚵🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🚵🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♂️"
  else
    fail("`1F6B5 1F3FF 200D 2642 FE0F` doesn't match `man mountain biking: dark skin tone` (🚵🏿‍♂️)")
  end
end

it "`1F6B5 1F3FF 200D 2642` (minimally-qualified) should match `man mountain biking: dark skin tone` (🚵🏿‍♂)" do
  if m = "🚵🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🚵🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♂"
  else
    fail("`1F6B5 1F3FF 200D 2642` doesn't match `man mountain biking: dark skin tone` (🚵🏿‍♂)")
  end
end

it "`1F6B5 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking` (🚵‍♀️)" do
  if m = "🚵‍♀️".match(Emoji::EMOJI_REGEX)
    "🚵‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♀️"
  else
    fail("`1F6B5 200D 2640 FE0F` doesn't match `woman mountain biking` (🚵‍♀️)")
  end
end

it "`1F6B5 200D 2640` (minimally-qualified) should match `woman mountain biking` (🚵‍♀)" do
  if m = "🚵‍♀".match(Emoji::EMOJI_REGEX)
    "🚵‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵‍♀"
  else
    fail("`1F6B5 200D 2640` doesn't match `woman mountain biking` (🚵‍♀)")
  end
end

it "`1F6B5 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: light skin tone` (🚵🏻‍♀️)" do
  if m = "🚵🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🚵🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♀️"
  else
    fail("`1F6B5 1F3FB 200D 2640 FE0F` doesn't match `woman mountain biking: light skin tone` (🚵🏻‍♀️)")
  end
end

it "`1F6B5 1F3FB 200D 2640` (minimally-qualified) should match `woman mountain biking: light skin tone` (🚵🏻‍♀)" do
  if m = "🚵🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🚵🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏻‍♀"
  else
    fail("`1F6B5 1F3FB 200D 2640` doesn't match `woman mountain biking: light skin tone` (🚵🏻‍♀)")
  end
end

it "`1F6B5 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: medium-light skin tone` (🚵🏼‍♀️)" do
  if m = "🚵🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🚵🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♀️"
  else
    fail("`1F6B5 1F3FC 200D 2640 FE0F` doesn't match `woman mountain biking: medium-light skin tone` (🚵🏼‍♀️)")
  end
end

it "`1F6B5 1F3FC 200D 2640` (minimally-qualified) should match `woman mountain biking: medium-light skin tone` (🚵🏼‍♀)" do
  if m = "🚵🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🚵🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏼‍♀"
  else
    fail("`1F6B5 1F3FC 200D 2640` doesn't match `woman mountain biking: medium-light skin tone` (🚵🏼‍♀)")
  end
end

it "`1F6B5 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: medium skin tone` (🚵🏽‍♀️)" do
  if m = "🚵🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🚵🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♀️"
  else
    fail("`1F6B5 1F3FD 200D 2640 FE0F` doesn't match `woman mountain biking: medium skin tone` (🚵🏽‍♀️)")
  end
end

it "`1F6B5 1F3FD 200D 2640` (minimally-qualified) should match `woman mountain biking: medium skin tone` (🚵🏽‍♀)" do
  if m = "🚵🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🚵🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏽‍♀"
  else
    fail("`1F6B5 1F3FD 200D 2640` doesn't match `woman mountain biking: medium skin tone` (🚵🏽‍♀)")
  end
end

it "`1F6B5 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: medium-dark skin tone` (🚵🏾‍♀️)" do
  if m = "🚵🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🚵🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♀️"
  else
    fail("`1F6B5 1F3FE 200D 2640 FE0F` doesn't match `woman mountain biking: medium-dark skin tone` (🚵🏾‍♀️)")
  end
end

it "`1F6B5 1F3FE 200D 2640` (minimally-qualified) should match `woman mountain biking: medium-dark skin tone` (🚵🏾‍♀)" do
  if m = "🚵🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🚵🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏾‍♀"
  else
    fail("`1F6B5 1F3FE 200D 2640` doesn't match `woman mountain biking: medium-dark skin tone` (🚵🏾‍♀)")
  end
end

it "`1F6B5 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman mountain biking: dark skin tone` (🚵🏿‍♀️)" do
  if m = "🚵🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🚵🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♀️"
  else
    fail("`1F6B5 1F3FF 200D 2640 FE0F` doesn't match `woman mountain biking: dark skin tone` (🚵🏿‍♀️)")
  end
end

it "`1F6B5 1F3FF 200D 2640` (minimally-qualified) should match `woman mountain biking: dark skin tone` (🚵🏿‍♀)" do
  if m = "🚵🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🚵🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚵🏿‍♀"
  else
    fail("`1F6B5 1F3FF 200D 2640` doesn't match `woman mountain biking: dark skin tone` (🚵🏿‍♀)")
  end
end

it "`1F938` (fully-qualified) should match `person cartwheeling` (🤸)" do
  if m = "🤸".match(Emoji::EMOJI_REGEX)
    "🤸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸"
  else
    fail("`1F938` doesn't match `person cartwheeling` (🤸)")
  end
end

it "`1F938 1F3FB` (fully-qualified) should match `person cartwheeling: light skin tone` (🤸🏻)" do
  if m = "🤸🏻".match(Emoji::EMOJI_REGEX)
    "🤸🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻"
  else
    fail("`1F938 1F3FB` doesn't match `person cartwheeling: light skin tone` (🤸🏻)")
  end
end

it "`1F938 1F3FC` (fully-qualified) should match `person cartwheeling: medium-light skin tone` (🤸🏼)" do
  if m = "🤸🏼".match(Emoji::EMOJI_REGEX)
    "🤸🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼"
  else
    fail("`1F938 1F3FC` doesn't match `person cartwheeling: medium-light skin tone` (🤸🏼)")
  end
end

it "`1F938 1F3FD` (fully-qualified) should match `person cartwheeling: medium skin tone` (🤸🏽)" do
  if m = "🤸🏽".match(Emoji::EMOJI_REGEX)
    "🤸🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽"
  else
    fail("`1F938 1F3FD` doesn't match `person cartwheeling: medium skin tone` (🤸🏽)")
  end
end

it "`1F938 1F3FE` (fully-qualified) should match `person cartwheeling: medium-dark skin tone` (🤸🏾)" do
  if m = "🤸🏾".match(Emoji::EMOJI_REGEX)
    "🤸🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾"
  else
    fail("`1F938 1F3FE` doesn't match `person cartwheeling: medium-dark skin tone` (🤸🏾)")
  end
end

it "`1F938 1F3FF` (fully-qualified) should match `person cartwheeling: dark skin tone` (🤸🏿)" do
  if m = "🤸🏿".match(Emoji::EMOJI_REGEX)
    "🤸🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿"
  else
    fail("`1F938 1F3FF` doesn't match `person cartwheeling: dark skin tone` (🤸🏿)")
  end
end

it "`1F938 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling` (🤸‍♂️)" do
  if m = "🤸‍♂️".match(Emoji::EMOJI_REGEX)
    "🤸‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♂️"
  else
    fail("`1F938 200D 2642 FE0F` doesn't match `man cartwheeling` (🤸‍♂️)")
  end
end

it "`1F938 200D 2642` (minimally-qualified) should match `man cartwheeling` (🤸‍♂)" do
  if m = "🤸‍♂".match(Emoji::EMOJI_REGEX)
    "🤸‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♂"
  else
    fail("`1F938 200D 2642` doesn't match `man cartwheeling` (🤸‍♂)")
  end
end

it "`1F938 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: light skin tone` (🤸🏻‍♂️)" do
  if m = "🤸🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🤸🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♂️"
  else
    fail("`1F938 1F3FB 200D 2642 FE0F` doesn't match `man cartwheeling: light skin tone` (🤸🏻‍♂️)")
  end
end

it "`1F938 1F3FB 200D 2642` (minimally-qualified) should match `man cartwheeling: light skin tone` (🤸🏻‍♂)" do
  if m = "🤸🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🤸🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♂"
  else
    fail("`1F938 1F3FB 200D 2642` doesn't match `man cartwheeling: light skin tone` (🤸🏻‍♂)")
  end
end

it "`1F938 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: medium-light skin tone` (🤸🏼‍♂️)" do
  if m = "🤸🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🤸🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♂️"
  else
    fail("`1F938 1F3FC 200D 2642 FE0F` doesn't match `man cartwheeling: medium-light skin tone` (🤸🏼‍♂️)")
  end
end

it "`1F938 1F3FC 200D 2642` (minimally-qualified) should match `man cartwheeling: medium-light skin tone` (🤸🏼‍♂)" do
  if m = "🤸🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🤸🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♂"
  else
    fail("`1F938 1F3FC 200D 2642` doesn't match `man cartwheeling: medium-light skin tone` (🤸🏼‍♂)")
  end
end

it "`1F938 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: medium skin tone` (🤸🏽‍♂️)" do
  if m = "🤸🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🤸🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♂️"
  else
    fail("`1F938 1F3FD 200D 2642 FE0F` doesn't match `man cartwheeling: medium skin tone` (🤸🏽‍♂️)")
  end
end

it "`1F938 1F3FD 200D 2642` (minimally-qualified) should match `man cartwheeling: medium skin tone` (🤸🏽‍♂)" do
  if m = "🤸🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🤸🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♂"
  else
    fail("`1F938 1F3FD 200D 2642` doesn't match `man cartwheeling: medium skin tone` (🤸🏽‍♂)")
  end
end

it "`1F938 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: medium-dark skin tone` (🤸🏾‍♂️)" do
  if m = "🤸🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🤸🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♂️"
  else
    fail("`1F938 1F3FE 200D 2642 FE0F` doesn't match `man cartwheeling: medium-dark skin tone` (🤸🏾‍♂️)")
  end
end

it "`1F938 1F3FE 200D 2642` (minimally-qualified) should match `man cartwheeling: medium-dark skin tone` (🤸🏾‍♂)" do
  if m = "🤸🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🤸🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♂"
  else
    fail("`1F938 1F3FE 200D 2642` doesn't match `man cartwheeling: medium-dark skin tone` (🤸🏾‍♂)")
  end
end

it "`1F938 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man cartwheeling: dark skin tone` (🤸🏿‍♂️)" do
  if m = "🤸🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🤸🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♂️"
  else
    fail("`1F938 1F3FF 200D 2642 FE0F` doesn't match `man cartwheeling: dark skin tone` (🤸🏿‍♂️)")
  end
end

it "`1F938 1F3FF 200D 2642` (minimally-qualified) should match `man cartwheeling: dark skin tone` (🤸🏿‍♂)" do
  if m = "🤸🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🤸🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♂"
  else
    fail("`1F938 1F3FF 200D 2642` doesn't match `man cartwheeling: dark skin tone` (🤸🏿‍♂)")
  end
end

it "`1F938 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling` (🤸‍♀️)" do
  if m = "🤸‍♀️".match(Emoji::EMOJI_REGEX)
    "🤸‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♀️"
  else
    fail("`1F938 200D 2640 FE0F` doesn't match `woman cartwheeling` (🤸‍♀️)")
  end
end

it "`1F938 200D 2640` (minimally-qualified) should match `woman cartwheeling` (🤸‍♀)" do
  if m = "🤸‍♀".match(Emoji::EMOJI_REGEX)
    "🤸‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸‍♀"
  else
    fail("`1F938 200D 2640` doesn't match `woman cartwheeling` (🤸‍♀)")
  end
end

it "`1F938 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: light skin tone` (🤸🏻‍♀️)" do
  if m = "🤸🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🤸🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♀️"
  else
    fail("`1F938 1F3FB 200D 2640 FE0F` doesn't match `woman cartwheeling: light skin tone` (🤸🏻‍♀️)")
  end
end

it "`1F938 1F3FB 200D 2640` (minimally-qualified) should match `woman cartwheeling: light skin tone` (🤸🏻‍♀)" do
  if m = "🤸🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🤸🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏻‍♀"
  else
    fail("`1F938 1F3FB 200D 2640` doesn't match `woman cartwheeling: light skin tone` (🤸🏻‍♀)")
  end
end

it "`1F938 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: medium-light skin tone` (🤸🏼‍♀️)" do
  if m = "🤸🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🤸🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♀️"
  else
    fail("`1F938 1F3FC 200D 2640 FE0F` doesn't match `woman cartwheeling: medium-light skin tone` (🤸🏼‍♀️)")
  end
end

it "`1F938 1F3FC 200D 2640` (minimally-qualified) should match `woman cartwheeling: medium-light skin tone` (🤸🏼‍♀)" do
  if m = "🤸🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🤸🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏼‍♀"
  else
    fail("`1F938 1F3FC 200D 2640` doesn't match `woman cartwheeling: medium-light skin tone` (🤸🏼‍♀)")
  end
end

it "`1F938 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: medium skin tone` (🤸🏽‍♀️)" do
  if m = "🤸🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🤸🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♀️"
  else
    fail("`1F938 1F3FD 200D 2640 FE0F` doesn't match `woman cartwheeling: medium skin tone` (🤸🏽‍♀️)")
  end
end

it "`1F938 1F3FD 200D 2640` (minimally-qualified) should match `woman cartwheeling: medium skin tone` (🤸🏽‍♀)" do
  if m = "🤸🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🤸🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏽‍♀"
  else
    fail("`1F938 1F3FD 200D 2640` doesn't match `woman cartwheeling: medium skin tone` (🤸🏽‍♀)")
  end
end

it "`1F938 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: medium-dark skin tone` (🤸🏾‍♀️)" do
  if m = "🤸🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🤸🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♀️"
  else
    fail("`1F938 1F3FE 200D 2640 FE0F` doesn't match `woman cartwheeling: medium-dark skin tone` (🤸🏾‍♀️)")
  end
end

it "`1F938 1F3FE 200D 2640` (minimally-qualified) should match `woman cartwheeling: medium-dark skin tone` (🤸🏾‍♀)" do
  if m = "🤸🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🤸🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏾‍♀"
  else
    fail("`1F938 1F3FE 200D 2640` doesn't match `woman cartwheeling: medium-dark skin tone` (🤸🏾‍♀)")
  end
end

it "`1F938 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman cartwheeling: dark skin tone` (🤸🏿‍♀️)" do
  if m = "🤸🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🤸🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♀️"
  else
    fail("`1F938 1F3FF 200D 2640 FE0F` doesn't match `woman cartwheeling: dark skin tone` (🤸🏿‍♀️)")
  end
end

it "`1F938 1F3FF 200D 2640` (minimally-qualified) should match `woman cartwheeling: dark skin tone` (🤸🏿‍♀)" do
  if m = "🤸🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🤸🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤸🏿‍♀"
  else
    fail("`1F938 1F3FF 200D 2640` doesn't match `woman cartwheeling: dark skin tone` (🤸🏿‍♀)")
  end
end

it "`1F93C` (fully-qualified) should match `people wrestling` (🤼)" do
  if m = "🤼".match(Emoji::EMOJI_REGEX)
    "🤼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼"
  else
    fail("`1F93C` doesn't match `people wrestling` (🤼)")
  end
end

it "`1F93C 200D 2642 FE0F` (fully-qualified) should match `men wrestling` (🤼‍♂️)" do
  if m = "🤼‍♂️".match(Emoji::EMOJI_REGEX)
    "🤼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♂️"
  else
    fail("`1F93C 200D 2642 FE0F` doesn't match `men wrestling` (🤼‍♂️)")
  end
end

it "`1F93C 200D 2642` (minimally-qualified) should match `men wrestling` (🤼‍♂)" do
  if m = "🤼‍♂".match(Emoji::EMOJI_REGEX)
    "🤼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♂"
  else
    fail("`1F93C 200D 2642` doesn't match `men wrestling` (🤼‍♂)")
  end
end

it "`1F93C 200D 2640 FE0F` (fully-qualified) should match `women wrestling` (🤼‍♀️)" do
  if m = "🤼‍♀️".match(Emoji::EMOJI_REGEX)
    "🤼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♀️"
  else
    fail("`1F93C 200D 2640 FE0F` doesn't match `women wrestling` (🤼‍♀️)")
  end
end

it "`1F93C 200D 2640` (minimally-qualified) should match `women wrestling` (🤼‍♀)" do
  if m = "🤼‍♀".match(Emoji::EMOJI_REGEX)
    "🤼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤼‍♀"
  else
    fail("`1F93C 200D 2640` doesn't match `women wrestling` (🤼‍♀)")
  end
end

it "`1F93D` (fully-qualified) should match `person playing water polo` (🤽)" do
  if m = "🤽".match(Emoji::EMOJI_REGEX)
    "🤽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽"
  else
    fail("`1F93D` doesn't match `person playing water polo` (🤽)")
  end
end

it "`1F93D 1F3FB` (fully-qualified) should match `person playing water polo: light skin tone` (🤽🏻)" do
  if m = "🤽🏻".match(Emoji::EMOJI_REGEX)
    "🤽🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻"
  else
    fail("`1F93D 1F3FB` doesn't match `person playing water polo: light skin tone` (🤽🏻)")
  end
end

it "`1F93D 1F3FC` (fully-qualified) should match `person playing water polo: medium-light skin tone` (🤽🏼)" do
  if m = "🤽🏼".match(Emoji::EMOJI_REGEX)
    "🤽🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼"
  else
    fail("`1F93D 1F3FC` doesn't match `person playing water polo: medium-light skin tone` (🤽🏼)")
  end
end

it "`1F93D 1F3FD` (fully-qualified) should match `person playing water polo: medium skin tone` (🤽🏽)" do
  if m = "🤽🏽".match(Emoji::EMOJI_REGEX)
    "🤽🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽"
  else
    fail("`1F93D 1F3FD` doesn't match `person playing water polo: medium skin tone` (🤽🏽)")
  end
end

it "`1F93D 1F3FE` (fully-qualified) should match `person playing water polo: medium-dark skin tone` (🤽🏾)" do
  if m = "🤽🏾".match(Emoji::EMOJI_REGEX)
    "🤽🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾"
  else
    fail("`1F93D 1F3FE` doesn't match `person playing water polo: medium-dark skin tone` (🤽🏾)")
  end
end

it "`1F93D 1F3FF` (fully-qualified) should match `person playing water polo: dark skin tone` (🤽🏿)" do
  if m = "🤽🏿".match(Emoji::EMOJI_REGEX)
    "🤽🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿"
  else
    fail("`1F93D 1F3FF` doesn't match `person playing water polo: dark skin tone` (🤽🏿)")
  end
end

it "`1F93D 200D 2642 FE0F` (fully-qualified) should match `man playing water polo` (🤽‍♂️)" do
  if m = "🤽‍♂️".match(Emoji::EMOJI_REGEX)
    "🤽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♂️"
  else
    fail("`1F93D 200D 2642 FE0F` doesn't match `man playing water polo` (🤽‍♂️)")
  end
end

it "`1F93D 200D 2642` (minimally-qualified) should match `man playing water polo` (🤽‍♂)" do
  if m = "🤽‍♂".match(Emoji::EMOJI_REGEX)
    "🤽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♂"
  else
    fail("`1F93D 200D 2642` doesn't match `man playing water polo` (🤽‍♂)")
  end
end

it "`1F93D 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: light skin tone` (🤽🏻‍♂️)" do
  if m = "🤽🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🤽🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♂️"
  else
    fail("`1F93D 1F3FB 200D 2642 FE0F` doesn't match `man playing water polo: light skin tone` (🤽🏻‍♂️)")
  end
end

it "`1F93D 1F3FB 200D 2642` (minimally-qualified) should match `man playing water polo: light skin tone` (🤽🏻‍♂)" do
  if m = "🤽🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🤽🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♂"
  else
    fail("`1F93D 1F3FB 200D 2642` doesn't match `man playing water polo: light skin tone` (🤽🏻‍♂)")
  end
end

it "`1F93D 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: medium-light skin tone` (🤽🏼‍♂️)" do
  if m = "🤽🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🤽🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♂️"
  else
    fail("`1F93D 1F3FC 200D 2642 FE0F` doesn't match `man playing water polo: medium-light skin tone` (🤽🏼‍♂️)")
  end
end

it "`1F93D 1F3FC 200D 2642` (minimally-qualified) should match `man playing water polo: medium-light skin tone` (🤽🏼‍♂)" do
  if m = "🤽🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🤽🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♂"
  else
    fail("`1F93D 1F3FC 200D 2642` doesn't match `man playing water polo: medium-light skin tone` (🤽🏼‍♂)")
  end
end

it "`1F93D 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: medium skin tone` (🤽🏽‍♂️)" do
  if m = "🤽🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🤽🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♂️"
  else
    fail("`1F93D 1F3FD 200D 2642 FE0F` doesn't match `man playing water polo: medium skin tone` (🤽🏽‍♂️)")
  end
end

it "`1F93D 1F3FD 200D 2642` (minimally-qualified) should match `man playing water polo: medium skin tone` (🤽🏽‍♂)" do
  if m = "🤽🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🤽🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♂"
  else
    fail("`1F93D 1F3FD 200D 2642` doesn't match `man playing water polo: medium skin tone` (🤽🏽‍♂)")
  end
end

it "`1F93D 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: medium-dark skin tone` (🤽🏾‍♂️)" do
  if m = "🤽🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🤽🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♂️"
  else
    fail("`1F93D 1F3FE 200D 2642 FE0F` doesn't match `man playing water polo: medium-dark skin tone` (🤽🏾‍♂️)")
  end
end

it "`1F93D 1F3FE 200D 2642` (minimally-qualified) should match `man playing water polo: medium-dark skin tone` (🤽🏾‍♂)" do
  if m = "🤽🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🤽🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♂"
  else
    fail("`1F93D 1F3FE 200D 2642` doesn't match `man playing water polo: medium-dark skin tone` (🤽🏾‍♂)")
  end
end

it "`1F93D 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man playing water polo: dark skin tone` (🤽🏿‍♂️)" do
  if m = "🤽🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🤽🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♂️"
  else
    fail("`1F93D 1F3FF 200D 2642 FE0F` doesn't match `man playing water polo: dark skin tone` (🤽🏿‍♂️)")
  end
end

it "`1F93D 1F3FF 200D 2642` (minimally-qualified) should match `man playing water polo: dark skin tone` (🤽🏿‍♂)" do
  if m = "🤽🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🤽🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♂"
  else
    fail("`1F93D 1F3FF 200D 2642` doesn't match `man playing water polo: dark skin tone` (🤽🏿‍♂)")
  end
end

it "`1F93D 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo` (🤽‍♀️)" do
  if m = "🤽‍♀️".match(Emoji::EMOJI_REGEX)
    "🤽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♀️"
  else
    fail("`1F93D 200D 2640 FE0F` doesn't match `woman playing water polo` (🤽‍♀️)")
  end
end

it "`1F93D 200D 2640` (minimally-qualified) should match `woman playing water polo` (🤽‍♀)" do
  if m = "🤽‍♀".match(Emoji::EMOJI_REGEX)
    "🤽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽‍♀"
  else
    fail("`1F93D 200D 2640` doesn't match `woman playing water polo` (🤽‍♀)")
  end
end

it "`1F93D 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: light skin tone` (🤽🏻‍♀️)" do
  if m = "🤽🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🤽🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♀️"
  else
    fail("`1F93D 1F3FB 200D 2640 FE0F` doesn't match `woman playing water polo: light skin tone` (🤽🏻‍♀️)")
  end
end

it "`1F93D 1F3FB 200D 2640` (minimally-qualified) should match `woman playing water polo: light skin tone` (🤽🏻‍♀)" do
  if m = "🤽🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🤽🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏻‍♀"
  else
    fail("`1F93D 1F3FB 200D 2640` doesn't match `woman playing water polo: light skin tone` (🤽🏻‍♀)")
  end
end

it "`1F93D 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: medium-light skin tone` (🤽🏼‍♀️)" do
  if m = "🤽🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🤽🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♀️"
  else
    fail("`1F93D 1F3FC 200D 2640 FE0F` doesn't match `woman playing water polo: medium-light skin tone` (🤽🏼‍♀️)")
  end
end

it "`1F93D 1F3FC 200D 2640` (minimally-qualified) should match `woman playing water polo: medium-light skin tone` (🤽🏼‍♀)" do
  if m = "🤽🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🤽🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏼‍♀"
  else
    fail("`1F93D 1F3FC 200D 2640` doesn't match `woman playing water polo: medium-light skin tone` (🤽🏼‍♀)")
  end
end

it "`1F93D 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: medium skin tone` (🤽🏽‍♀️)" do
  if m = "🤽🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🤽🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♀️"
  else
    fail("`1F93D 1F3FD 200D 2640 FE0F` doesn't match `woman playing water polo: medium skin tone` (🤽🏽‍♀️)")
  end
end

it "`1F93D 1F3FD 200D 2640` (minimally-qualified) should match `woman playing water polo: medium skin tone` (🤽🏽‍♀)" do
  if m = "🤽🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🤽🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏽‍♀"
  else
    fail("`1F93D 1F3FD 200D 2640` doesn't match `woman playing water polo: medium skin tone` (🤽🏽‍♀)")
  end
end

it "`1F93D 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: medium-dark skin tone` (🤽🏾‍♀️)" do
  if m = "🤽🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🤽🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♀️"
  else
    fail("`1F93D 1F3FE 200D 2640 FE0F` doesn't match `woman playing water polo: medium-dark skin tone` (🤽🏾‍♀️)")
  end
end

it "`1F93D 1F3FE 200D 2640` (minimally-qualified) should match `woman playing water polo: medium-dark skin tone` (🤽🏾‍♀)" do
  if m = "🤽🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🤽🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏾‍♀"
  else
    fail("`1F93D 1F3FE 200D 2640` doesn't match `woman playing water polo: medium-dark skin tone` (🤽🏾‍♀)")
  end
end

it "`1F93D 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman playing water polo: dark skin tone` (🤽🏿‍♀️)" do
  if m = "🤽🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🤽🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♀️"
  else
    fail("`1F93D 1F3FF 200D 2640 FE0F` doesn't match `woman playing water polo: dark skin tone` (🤽🏿‍♀️)")
  end
end

it "`1F93D 1F3FF 200D 2640` (minimally-qualified) should match `woman playing water polo: dark skin tone` (🤽🏿‍♀)" do
  if m = "🤽🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🤽🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤽🏿‍♀"
  else
    fail("`1F93D 1F3FF 200D 2640` doesn't match `woman playing water polo: dark skin tone` (🤽🏿‍♀)")
  end
end

it "`1F93E` (fully-qualified) should match `person playing handball` (🤾)" do
  if m = "🤾".match(Emoji::EMOJI_REGEX)
    "🤾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾"
  else
    fail("`1F93E` doesn't match `person playing handball` (🤾)")
  end
end

it "`1F93E 1F3FB` (fully-qualified) should match `person playing handball: light skin tone` (🤾🏻)" do
  if m = "🤾🏻".match(Emoji::EMOJI_REGEX)
    "🤾🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻"
  else
    fail("`1F93E 1F3FB` doesn't match `person playing handball: light skin tone` (🤾🏻)")
  end
end

it "`1F93E 1F3FC` (fully-qualified) should match `person playing handball: medium-light skin tone` (🤾🏼)" do
  if m = "🤾🏼".match(Emoji::EMOJI_REGEX)
    "🤾🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼"
  else
    fail("`1F93E 1F3FC` doesn't match `person playing handball: medium-light skin tone` (🤾🏼)")
  end
end

it "`1F93E 1F3FD` (fully-qualified) should match `person playing handball: medium skin tone` (🤾🏽)" do
  if m = "🤾🏽".match(Emoji::EMOJI_REGEX)
    "🤾🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽"
  else
    fail("`1F93E 1F3FD` doesn't match `person playing handball: medium skin tone` (🤾🏽)")
  end
end

it "`1F93E 1F3FE` (fully-qualified) should match `person playing handball: medium-dark skin tone` (🤾🏾)" do
  if m = "🤾🏾".match(Emoji::EMOJI_REGEX)
    "🤾🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾"
  else
    fail("`1F93E 1F3FE` doesn't match `person playing handball: medium-dark skin tone` (🤾🏾)")
  end
end

it "`1F93E 1F3FF` (fully-qualified) should match `person playing handball: dark skin tone` (🤾🏿)" do
  if m = "🤾🏿".match(Emoji::EMOJI_REGEX)
    "🤾🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿"
  else
    fail("`1F93E 1F3FF` doesn't match `person playing handball: dark skin tone` (🤾🏿)")
  end
end

it "`1F93E 200D 2642 FE0F` (fully-qualified) should match `man playing handball` (🤾‍♂️)" do
  if m = "🤾‍♂️".match(Emoji::EMOJI_REGEX)
    "🤾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♂️"
  else
    fail("`1F93E 200D 2642 FE0F` doesn't match `man playing handball` (🤾‍♂️)")
  end
end

it "`1F93E 200D 2642` (minimally-qualified) should match `man playing handball` (🤾‍♂)" do
  if m = "🤾‍♂".match(Emoji::EMOJI_REGEX)
    "🤾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♂"
  else
    fail("`1F93E 200D 2642` doesn't match `man playing handball` (🤾‍♂)")
  end
end

it "`1F93E 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man playing handball: light skin tone` (🤾🏻‍♂️)" do
  if m = "🤾🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🤾🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♂️"
  else
    fail("`1F93E 1F3FB 200D 2642 FE0F` doesn't match `man playing handball: light skin tone` (🤾🏻‍♂️)")
  end
end

it "`1F93E 1F3FB 200D 2642` (minimally-qualified) should match `man playing handball: light skin tone` (🤾🏻‍♂)" do
  if m = "🤾🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🤾🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♂"
  else
    fail("`1F93E 1F3FB 200D 2642` doesn't match `man playing handball: light skin tone` (🤾🏻‍♂)")
  end
end

it "`1F93E 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man playing handball: medium-light skin tone` (🤾🏼‍♂️)" do
  if m = "🤾🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🤾🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♂️"
  else
    fail("`1F93E 1F3FC 200D 2642 FE0F` doesn't match `man playing handball: medium-light skin tone` (🤾🏼‍♂️)")
  end
end

it "`1F93E 1F3FC 200D 2642` (minimally-qualified) should match `man playing handball: medium-light skin tone` (🤾🏼‍♂)" do
  if m = "🤾🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🤾🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♂"
  else
    fail("`1F93E 1F3FC 200D 2642` doesn't match `man playing handball: medium-light skin tone` (🤾🏼‍♂)")
  end
end

it "`1F93E 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man playing handball: medium skin tone` (🤾🏽‍♂️)" do
  if m = "🤾🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🤾🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♂️"
  else
    fail("`1F93E 1F3FD 200D 2642 FE0F` doesn't match `man playing handball: medium skin tone` (🤾🏽‍♂️)")
  end
end

it "`1F93E 1F3FD 200D 2642` (minimally-qualified) should match `man playing handball: medium skin tone` (🤾🏽‍♂)" do
  if m = "🤾🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🤾🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♂"
  else
    fail("`1F93E 1F3FD 200D 2642` doesn't match `man playing handball: medium skin tone` (🤾🏽‍♂)")
  end
end

it "`1F93E 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man playing handball: medium-dark skin tone` (🤾🏾‍♂️)" do
  if m = "🤾🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🤾🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♂️"
  else
    fail("`1F93E 1F3FE 200D 2642 FE0F` doesn't match `man playing handball: medium-dark skin tone` (🤾🏾‍♂️)")
  end
end

it "`1F93E 1F3FE 200D 2642` (minimally-qualified) should match `man playing handball: medium-dark skin tone` (🤾🏾‍♂)" do
  if m = "🤾🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🤾🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♂"
  else
    fail("`1F93E 1F3FE 200D 2642` doesn't match `man playing handball: medium-dark skin tone` (🤾🏾‍♂)")
  end
end

it "`1F93E 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man playing handball: dark skin tone` (🤾🏿‍♂️)" do
  if m = "🤾🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🤾🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♂️"
  else
    fail("`1F93E 1F3FF 200D 2642 FE0F` doesn't match `man playing handball: dark skin tone` (🤾🏿‍♂️)")
  end
end

it "`1F93E 1F3FF 200D 2642` (minimally-qualified) should match `man playing handball: dark skin tone` (🤾🏿‍♂)" do
  if m = "🤾🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🤾🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♂"
  else
    fail("`1F93E 1F3FF 200D 2642` doesn't match `man playing handball: dark skin tone` (🤾🏿‍♂)")
  end
end

it "`1F93E 200D 2640 FE0F` (fully-qualified) should match `woman playing handball` (🤾‍♀️)" do
  if m = "🤾‍♀️".match(Emoji::EMOJI_REGEX)
    "🤾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♀️"
  else
    fail("`1F93E 200D 2640 FE0F` doesn't match `woman playing handball` (🤾‍♀️)")
  end
end

it "`1F93E 200D 2640` (minimally-qualified) should match `woman playing handball` (🤾‍♀)" do
  if m = "🤾‍♀".match(Emoji::EMOJI_REGEX)
    "🤾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾‍♀"
  else
    fail("`1F93E 200D 2640` doesn't match `woman playing handball` (🤾‍♀)")
  end
end

it "`1F93E 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: light skin tone` (🤾🏻‍♀️)" do
  if m = "🤾🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🤾🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♀️"
  else
    fail("`1F93E 1F3FB 200D 2640 FE0F` doesn't match `woman playing handball: light skin tone` (🤾🏻‍♀️)")
  end
end

it "`1F93E 1F3FB 200D 2640` (minimally-qualified) should match `woman playing handball: light skin tone` (🤾🏻‍♀)" do
  if m = "🤾🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🤾🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏻‍♀"
  else
    fail("`1F93E 1F3FB 200D 2640` doesn't match `woman playing handball: light skin tone` (🤾🏻‍♀)")
  end
end

it "`1F93E 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: medium-light skin tone` (🤾🏼‍♀️)" do
  if m = "🤾🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🤾🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♀️"
  else
    fail("`1F93E 1F3FC 200D 2640 FE0F` doesn't match `woman playing handball: medium-light skin tone` (🤾🏼‍♀️)")
  end
end

it "`1F93E 1F3FC 200D 2640` (minimally-qualified) should match `woman playing handball: medium-light skin tone` (🤾🏼‍♀)" do
  if m = "🤾🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🤾🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏼‍♀"
  else
    fail("`1F93E 1F3FC 200D 2640` doesn't match `woman playing handball: medium-light skin tone` (🤾🏼‍♀)")
  end
end

it "`1F93E 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: medium skin tone` (🤾🏽‍♀️)" do
  if m = "🤾🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🤾🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♀️"
  else
    fail("`1F93E 1F3FD 200D 2640 FE0F` doesn't match `woman playing handball: medium skin tone` (🤾🏽‍♀️)")
  end
end

it "`1F93E 1F3FD 200D 2640` (minimally-qualified) should match `woman playing handball: medium skin tone` (🤾🏽‍♀)" do
  if m = "🤾🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🤾🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏽‍♀"
  else
    fail("`1F93E 1F3FD 200D 2640` doesn't match `woman playing handball: medium skin tone` (🤾🏽‍♀)")
  end
end

it "`1F93E 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: medium-dark skin tone` (🤾🏾‍♀️)" do
  if m = "🤾🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🤾🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♀️"
  else
    fail("`1F93E 1F3FE 200D 2640 FE0F` doesn't match `woman playing handball: medium-dark skin tone` (🤾🏾‍♀️)")
  end
end

it "`1F93E 1F3FE 200D 2640` (minimally-qualified) should match `woman playing handball: medium-dark skin tone` (🤾🏾‍♀)" do
  if m = "🤾🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🤾🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏾‍♀"
  else
    fail("`1F93E 1F3FE 200D 2640` doesn't match `woman playing handball: medium-dark skin tone` (🤾🏾‍♀)")
  end
end

it "`1F93E 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman playing handball: dark skin tone` (🤾🏿‍♀️)" do
  if m = "🤾🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🤾🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♀️"
  else
    fail("`1F93E 1F3FF 200D 2640 FE0F` doesn't match `woman playing handball: dark skin tone` (🤾🏿‍♀️)")
  end
end

it "`1F93E 1F3FF 200D 2640` (minimally-qualified) should match `woman playing handball: dark skin tone` (🤾🏿‍♀)" do
  if m = "🤾🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🤾🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤾🏿‍♀"
  else
    fail("`1F93E 1F3FF 200D 2640` doesn't match `woman playing handball: dark skin tone` (🤾🏿‍♀)")
  end
end

it "`1F939` (fully-qualified) should match `person juggling` (🤹)" do
  if m = "🤹".match(Emoji::EMOJI_REGEX)
    "🤹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹"
  else
    fail("`1F939` doesn't match `person juggling` (🤹)")
  end
end

it "`1F939 1F3FB` (fully-qualified) should match `person juggling: light skin tone` (🤹🏻)" do
  if m = "🤹🏻".match(Emoji::EMOJI_REGEX)
    "🤹🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻"
  else
    fail("`1F939 1F3FB` doesn't match `person juggling: light skin tone` (🤹🏻)")
  end
end

it "`1F939 1F3FC` (fully-qualified) should match `person juggling: medium-light skin tone` (🤹🏼)" do
  if m = "🤹🏼".match(Emoji::EMOJI_REGEX)
    "🤹🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼"
  else
    fail("`1F939 1F3FC` doesn't match `person juggling: medium-light skin tone` (🤹🏼)")
  end
end

it "`1F939 1F3FD` (fully-qualified) should match `person juggling: medium skin tone` (🤹🏽)" do
  if m = "🤹🏽".match(Emoji::EMOJI_REGEX)
    "🤹🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽"
  else
    fail("`1F939 1F3FD` doesn't match `person juggling: medium skin tone` (🤹🏽)")
  end
end

it "`1F939 1F3FE` (fully-qualified) should match `person juggling: medium-dark skin tone` (🤹🏾)" do
  if m = "🤹🏾".match(Emoji::EMOJI_REGEX)
    "🤹🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾"
  else
    fail("`1F939 1F3FE` doesn't match `person juggling: medium-dark skin tone` (🤹🏾)")
  end
end

it "`1F939 1F3FF` (fully-qualified) should match `person juggling: dark skin tone` (🤹🏿)" do
  if m = "🤹🏿".match(Emoji::EMOJI_REGEX)
    "🤹🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿"
  else
    fail("`1F939 1F3FF` doesn't match `person juggling: dark skin tone` (🤹🏿)")
  end
end

it "`1F939 200D 2642 FE0F` (fully-qualified) should match `man juggling` (🤹‍♂️)" do
  if m = "🤹‍♂️".match(Emoji::EMOJI_REGEX)
    "🤹‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♂️"
  else
    fail("`1F939 200D 2642 FE0F` doesn't match `man juggling` (🤹‍♂️)")
  end
end

it "`1F939 200D 2642` (minimally-qualified) should match `man juggling` (🤹‍♂)" do
  if m = "🤹‍♂".match(Emoji::EMOJI_REGEX)
    "🤹‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♂"
  else
    fail("`1F939 200D 2642` doesn't match `man juggling` (🤹‍♂)")
  end
end

it "`1F939 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man juggling: light skin tone` (🤹🏻‍♂️)" do
  if m = "🤹🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🤹🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♂️"
  else
    fail("`1F939 1F3FB 200D 2642 FE0F` doesn't match `man juggling: light skin tone` (🤹🏻‍♂️)")
  end
end

it "`1F939 1F3FB 200D 2642` (minimally-qualified) should match `man juggling: light skin tone` (🤹🏻‍♂)" do
  if m = "🤹🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🤹🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♂"
  else
    fail("`1F939 1F3FB 200D 2642` doesn't match `man juggling: light skin tone` (🤹🏻‍♂)")
  end
end

it "`1F939 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man juggling: medium-light skin tone` (🤹🏼‍♂️)" do
  if m = "🤹🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🤹🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♂️"
  else
    fail("`1F939 1F3FC 200D 2642 FE0F` doesn't match `man juggling: medium-light skin tone` (🤹🏼‍♂️)")
  end
end

it "`1F939 1F3FC 200D 2642` (minimally-qualified) should match `man juggling: medium-light skin tone` (🤹🏼‍♂)" do
  if m = "🤹🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🤹🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♂"
  else
    fail("`1F939 1F3FC 200D 2642` doesn't match `man juggling: medium-light skin tone` (🤹🏼‍♂)")
  end
end

it "`1F939 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man juggling: medium skin tone` (🤹🏽‍♂️)" do
  if m = "🤹🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🤹🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♂️"
  else
    fail("`1F939 1F3FD 200D 2642 FE0F` doesn't match `man juggling: medium skin tone` (🤹🏽‍♂️)")
  end
end

it "`1F939 1F3FD 200D 2642` (minimally-qualified) should match `man juggling: medium skin tone` (🤹🏽‍♂)" do
  if m = "🤹🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🤹🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♂"
  else
    fail("`1F939 1F3FD 200D 2642` doesn't match `man juggling: medium skin tone` (🤹🏽‍♂)")
  end
end

it "`1F939 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man juggling: medium-dark skin tone` (🤹🏾‍♂️)" do
  if m = "🤹🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🤹🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♂️"
  else
    fail("`1F939 1F3FE 200D 2642 FE0F` doesn't match `man juggling: medium-dark skin tone` (🤹🏾‍♂️)")
  end
end

it "`1F939 1F3FE 200D 2642` (minimally-qualified) should match `man juggling: medium-dark skin tone` (🤹🏾‍♂)" do
  if m = "🤹🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🤹🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♂"
  else
    fail("`1F939 1F3FE 200D 2642` doesn't match `man juggling: medium-dark skin tone` (🤹🏾‍♂)")
  end
end

it "`1F939 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man juggling: dark skin tone` (🤹🏿‍♂️)" do
  if m = "🤹🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🤹🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♂️"
  else
    fail("`1F939 1F3FF 200D 2642 FE0F` doesn't match `man juggling: dark skin tone` (🤹🏿‍♂️)")
  end
end

it "`1F939 1F3FF 200D 2642` (minimally-qualified) should match `man juggling: dark skin tone` (🤹🏿‍♂)" do
  if m = "🤹🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🤹🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♂"
  else
    fail("`1F939 1F3FF 200D 2642` doesn't match `man juggling: dark skin tone` (🤹🏿‍♂)")
  end
end

it "`1F939 200D 2640 FE0F` (fully-qualified) should match `woman juggling` (🤹‍♀️)" do
  if m = "🤹‍♀️".match(Emoji::EMOJI_REGEX)
    "🤹‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♀️"
  else
    fail("`1F939 200D 2640 FE0F` doesn't match `woman juggling` (🤹‍♀️)")
  end
end

it "`1F939 200D 2640` (minimally-qualified) should match `woman juggling` (🤹‍♀)" do
  if m = "🤹‍♀".match(Emoji::EMOJI_REGEX)
    "🤹‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹‍♀"
  else
    fail("`1F939 200D 2640` doesn't match `woman juggling` (🤹‍♀)")
  end
end

it "`1F939 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman juggling: light skin tone` (🤹🏻‍♀️)" do
  if m = "🤹🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🤹🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♀️"
  else
    fail("`1F939 1F3FB 200D 2640 FE0F` doesn't match `woman juggling: light skin tone` (🤹🏻‍♀️)")
  end
end

it "`1F939 1F3FB 200D 2640` (minimally-qualified) should match `woman juggling: light skin tone` (🤹🏻‍♀)" do
  if m = "🤹🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🤹🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏻‍♀"
  else
    fail("`1F939 1F3FB 200D 2640` doesn't match `woman juggling: light skin tone` (🤹🏻‍♀)")
  end
end

it "`1F939 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman juggling: medium-light skin tone` (🤹🏼‍♀️)" do
  if m = "🤹🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🤹🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♀️"
  else
    fail("`1F939 1F3FC 200D 2640 FE0F` doesn't match `woman juggling: medium-light skin tone` (🤹🏼‍♀️)")
  end
end

it "`1F939 1F3FC 200D 2640` (minimally-qualified) should match `woman juggling: medium-light skin tone` (🤹🏼‍♀)" do
  if m = "🤹🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🤹🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏼‍♀"
  else
    fail("`1F939 1F3FC 200D 2640` doesn't match `woman juggling: medium-light skin tone` (🤹🏼‍♀)")
  end
end

it "`1F939 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman juggling: medium skin tone` (🤹🏽‍♀️)" do
  if m = "🤹🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🤹🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♀️"
  else
    fail("`1F939 1F3FD 200D 2640 FE0F` doesn't match `woman juggling: medium skin tone` (🤹🏽‍♀️)")
  end
end

it "`1F939 1F3FD 200D 2640` (minimally-qualified) should match `woman juggling: medium skin tone` (🤹🏽‍♀)" do
  if m = "🤹🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🤹🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏽‍♀"
  else
    fail("`1F939 1F3FD 200D 2640` doesn't match `woman juggling: medium skin tone` (🤹🏽‍♀)")
  end
end

it "`1F939 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman juggling: medium-dark skin tone` (🤹🏾‍♀️)" do
  if m = "🤹🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🤹🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♀️"
  else
    fail("`1F939 1F3FE 200D 2640 FE0F` doesn't match `woman juggling: medium-dark skin tone` (🤹🏾‍♀️)")
  end
end

it "`1F939 1F3FE 200D 2640` (minimally-qualified) should match `woman juggling: medium-dark skin tone` (🤹🏾‍♀)" do
  if m = "🤹🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🤹🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏾‍♀"
  else
    fail("`1F939 1F3FE 200D 2640` doesn't match `woman juggling: medium-dark skin tone` (🤹🏾‍♀)")
  end
end

it "`1F939 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman juggling: dark skin tone` (🤹🏿‍♀️)" do
  if m = "🤹🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🤹🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♀️"
  else
    fail("`1F939 1F3FF 200D 2640 FE0F` doesn't match `woman juggling: dark skin tone` (🤹🏿‍♀️)")
  end
end

it "`1F939 1F3FF 200D 2640` (minimally-qualified) should match `woman juggling: dark skin tone` (🤹🏿‍♀)" do
  if m = "🤹🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🤹🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤹🏿‍♀"
  else
    fail("`1F939 1F3FF 200D 2640` doesn't match `woman juggling: dark skin tone` (🤹🏿‍♀)")
  end
end

it "`1F9D8` (fully-qualified) should match `person in lotus position` (🧘)" do
  if m = "🧘".match(Emoji::EMOJI_REGEX)
    "🧘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘"
  else
    fail("`1F9D8` doesn't match `person in lotus position` (🧘)")
  end
end

it "`1F9D8 1F3FB` (fully-qualified) should match `person in lotus position: light skin tone` (🧘🏻)" do
  if m = "🧘🏻".match(Emoji::EMOJI_REGEX)
    "🧘🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻"
  else
    fail("`1F9D8 1F3FB` doesn't match `person in lotus position: light skin tone` (🧘🏻)")
  end
end

it "`1F9D8 1F3FC` (fully-qualified) should match `person in lotus position: medium-light skin tone` (🧘🏼)" do
  if m = "🧘🏼".match(Emoji::EMOJI_REGEX)
    "🧘🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼"
  else
    fail("`1F9D8 1F3FC` doesn't match `person in lotus position: medium-light skin tone` (🧘🏼)")
  end
end

it "`1F9D8 1F3FD` (fully-qualified) should match `person in lotus position: medium skin tone` (🧘🏽)" do
  if m = "🧘🏽".match(Emoji::EMOJI_REGEX)
    "🧘🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽"
  else
    fail("`1F9D8 1F3FD` doesn't match `person in lotus position: medium skin tone` (🧘🏽)")
  end
end

it "`1F9D8 1F3FE` (fully-qualified) should match `person in lotus position: medium-dark skin tone` (🧘🏾)" do
  if m = "🧘🏾".match(Emoji::EMOJI_REGEX)
    "🧘🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾"
  else
    fail("`1F9D8 1F3FE` doesn't match `person in lotus position: medium-dark skin tone` (🧘🏾)")
  end
end

it "`1F9D8 1F3FF` (fully-qualified) should match `person in lotus position: dark skin tone` (🧘🏿)" do
  if m = "🧘🏿".match(Emoji::EMOJI_REGEX)
    "🧘🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿"
  else
    fail("`1F9D8 1F3FF` doesn't match `person in lotus position: dark skin tone` (🧘🏿)")
  end
end

it "`1F9D8 200D 2642 FE0F` (fully-qualified) should match `man in lotus position` (🧘‍♂️)" do
  if m = "🧘‍♂️".match(Emoji::EMOJI_REGEX)
    "🧘‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♂️"
  else
    fail("`1F9D8 200D 2642 FE0F` doesn't match `man in lotus position` (🧘‍♂️)")
  end
end

it "`1F9D8 200D 2642` (minimally-qualified) should match `man in lotus position` (🧘‍♂)" do
  if m = "🧘‍♂".match(Emoji::EMOJI_REGEX)
    "🧘‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♂"
  else
    fail("`1F9D8 200D 2642` doesn't match `man in lotus position` (🧘‍♂)")
  end
end

it "`1F9D8 1F3FB 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: light skin tone` (🧘🏻‍♂️)" do
  if m = "🧘🏻‍♂️".match(Emoji::EMOJI_REGEX)
    "🧘🏻‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♂️"
  else
    fail("`1F9D8 1F3FB 200D 2642 FE0F` doesn't match `man in lotus position: light skin tone` (🧘🏻‍♂️)")
  end
end

it "`1F9D8 1F3FB 200D 2642` (minimally-qualified) should match `man in lotus position: light skin tone` (🧘🏻‍♂)" do
  if m = "🧘🏻‍♂".match(Emoji::EMOJI_REGEX)
    "🧘🏻‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♂"
  else
    fail("`1F9D8 1F3FB 200D 2642` doesn't match `man in lotus position: light skin tone` (🧘🏻‍♂)")
  end
end

it "`1F9D8 1F3FC 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: medium-light skin tone` (🧘🏼‍♂️)" do
  if m = "🧘🏼‍♂️".match(Emoji::EMOJI_REGEX)
    "🧘🏼‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♂️"
  else
    fail("`1F9D8 1F3FC 200D 2642 FE0F` doesn't match `man in lotus position: medium-light skin tone` (🧘🏼‍♂️)")
  end
end

it "`1F9D8 1F3FC 200D 2642` (minimally-qualified) should match `man in lotus position: medium-light skin tone` (🧘🏼‍♂)" do
  if m = "🧘🏼‍♂".match(Emoji::EMOJI_REGEX)
    "🧘🏼‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♂"
  else
    fail("`1F9D8 1F3FC 200D 2642` doesn't match `man in lotus position: medium-light skin tone` (🧘🏼‍♂)")
  end
end

it "`1F9D8 1F3FD 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: medium skin tone` (🧘🏽‍♂️)" do
  if m = "🧘🏽‍♂️".match(Emoji::EMOJI_REGEX)
    "🧘🏽‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♂️"
  else
    fail("`1F9D8 1F3FD 200D 2642 FE0F` doesn't match `man in lotus position: medium skin tone` (🧘🏽‍♂️)")
  end
end

it "`1F9D8 1F3FD 200D 2642` (minimally-qualified) should match `man in lotus position: medium skin tone` (🧘🏽‍♂)" do
  if m = "🧘🏽‍♂".match(Emoji::EMOJI_REGEX)
    "🧘🏽‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♂"
  else
    fail("`1F9D8 1F3FD 200D 2642` doesn't match `man in lotus position: medium skin tone` (🧘🏽‍♂)")
  end
end

it "`1F9D8 1F3FE 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: medium-dark skin tone` (🧘🏾‍♂️)" do
  if m = "🧘🏾‍♂️".match(Emoji::EMOJI_REGEX)
    "🧘🏾‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♂️"
  else
    fail("`1F9D8 1F3FE 200D 2642 FE0F` doesn't match `man in lotus position: medium-dark skin tone` (🧘🏾‍♂️)")
  end
end

it "`1F9D8 1F3FE 200D 2642` (minimally-qualified) should match `man in lotus position: medium-dark skin tone` (🧘🏾‍♂)" do
  if m = "🧘🏾‍♂".match(Emoji::EMOJI_REGEX)
    "🧘🏾‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♂"
  else
    fail("`1F9D8 1F3FE 200D 2642` doesn't match `man in lotus position: medium-dark skin tone` (🧘🏾‍♂)")
  end
end

it "`1F9D8 1F3FF 200D 2642 FE0F` (fully-qualified) should match `man in lotus position: dark skin tone` (🧘🏿‍♂️)" do
  if m = "🧘🏿‍♂️".match(Emoji::EMOJI_REGEX)
    "🧘🏿‍♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♂️"
  else
    fail("`1F9D8 1F3FF 200D 2642 FE0F` doesn't match `man in lotus position: dark skin tone` (🧘🏿‍♂️)")
  end
end

it "`1F9D8 1F3FF 200D 2642` (minimally-qualified) should match `man in lotus position: dark skin tone` (🧘🏿‍♂)" do
  if m = "🧘🏿‍♂".match(Emoji::EMOJI_REGEX)
    "🧘🏿‍♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♂"
  else
    fail("`1F9D8 1F3FF 200D 2642` doesn't match `man in lotus position: dark skin tone` (🧘🏿‍♂)")
  end
end

it "`1F9D8 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position` (🧘‍♀️)" do
  if m = "🧘‍♀️".match(Emoji::EMOJI_REGEX)
    "🧘‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♀️"
  else
    fail("`1F9D8 200D 2640 FE0F` doesn't match `woman in lotus position` (🧘‍♀️)")
  end
end

it "`1F9D8 200D 2640` (minimally-qualified) should match `woman in lotus position` (🧘‍♀)" do
  if m = "🧘‍♀".match(Emoji::EMOJI_REGEX)
    "🧘‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘‍♀"
  else
    fail("`1F9D8 200D 2640` doesn't match `woman in lotus position` (🧘‍♀)")
  end
end

it "`1F9D8 1F3FB 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: light skin tone` (🧘🏻‍♀️)" do
  if m = "🧘🏻‍♀️".match(Emoji::EMOJI_REGEX)
    "🧘🏻‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♀️"
  else
    fail("`1F9D8 1F3FB 200D 2640 FE0F` doesn't match `woman in lotus position: light skin tone` (🧘🏻‍♀️)")
  end
end

it "`1F9D8 1F3FB 200D 2640` (minimally-qualified) should match `woman in lotus position: light skin tone` (🧘🏻‍♀)" do
  if m = "🧘🏻‍♀".match(Emoji::EMOJI_REGEX)
    "🧘🏻‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏻‍♀"
  else
    fail("`1F9D8 1F3FB 200D 2640` doesn't match `woman in lotus position: light skin tone` (🧘🏻‍♀)")
  end
end

it "`1F9D8 1F3FC 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: medium-light skin tone` (🧘🏼‍♀️)" do
  if m = "🧘🏼‍♀️".match(Emoji::EMOJI_REGEX)
    "🧘🏼‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♀️"
  else
    fail("`1F9D8 1F3FC 200D 2640 FE0F` doesn't match `woman in lotus position: medium-light skin tone` (🧘🏼‍♀️)")
  end
end

it "`1F9D8 1F3FC 200D 2640` (minimally-qualified) should match `woman in lotus position: medium-light skin tone` (🧘🏼‍♀)" do
  if m = "🧘🏼‍♀".match(Emoji::EMOJI_REGEX)
    "🧘🏼‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏼‍♀"
  else
    fail("`1F9D8 1F3FC 200D 2640` doesn't match `woman in lotus position: medium-light skin tone` (🧘🏼‍♀)")
  end
end

it "`1F9D8 1F3FD 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: medium skin tone` (🧘🏽‍♀️)" do
  if m = "🧘🏽‍♀️".match(Emoji::EMOJI_REGEX)
    "🧘🏽‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♀️"
  else
    fail("`1F9D8 1F3FD 200D 2640 FE0F` doesn't match `woman in lotus position: medium skin tone` (🧘🏽‍♀️)")
  end
end

it "`1F9D8 1F3FD 200D 2640` (minimally-qualified) should match `woman in lotus position: medium skin tone` (🧘🏽‍♀)" do
  if m = "🧘🏽‍♀".match(Emoji::EMOJI_REGEX)
    "🧘🏽‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏽‍♀"
  else
    fail("`1F9D8 1F3FD 200D 2640` doesn't match `woman in lotus position: medium skin tone` (🧘🏽‍♀)")
  end
end

it "`1F9D8 1F3FE 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: medium-dark skin tone` (🧘🏾‍♀️)" do
  if m = "🧘🏾‍♀️".match(Emoji::EMOJI_REGEX)
    "🧘🏾‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♀️"
  else
    fail("`1F9D8 1F3FE 200D 2640 FE0F` doesn't match `woman in lotus position: medium-dark skin tone` (🧘🏾‍♀️)")
  end
end

it "`1F9D8 1F3FE 200D 2640` (minimally-qualified) should match `woman in lotus position: medium-dark skin tone` (🧘🏾‍♀)" do
  if m = "🧘🏾‍♀".match(Emoji::EMOJI_REGEX)
    "🧘🏾‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏾‍♀"
  else
    fail("`1F9D8 1F3FE 200D 2640` doesn't match `woman in lotus position: medium-dark skin tone` (🧘🏾‍♀)")
  end
end

it "`1F9D8 1F3FF 200D 2640 FE0F` (fully-qualified) should match `woman in lotus position: dark skin tone` (🧘🏿‍♀️)" do
  if m = "🧘🏿‍♀️".match(Emoji::EMOJI_REGEX)
    "🧘🏿‍♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♀️"
  else
    fail("`1F9D8 1F3FF 200D 2640 FE0F` doesn't match `woman in lotus position: dark skin tone` (🧘🏿‍♀️)")
  end
end

it "`1F9D8 1F3FF 200D 2640` (minimally-qualified) should match `woman in lotus position: dark skin tone` (🧘🏿‍♀)" do
  if m = "🧘🏿‍♀".match(Emoji::EMOJI_REGEX)
    "🧘🏿‍♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧘🏿‍♀"
  else
    fail("`1F9D8 1F3FF 200D 2640` doesn't match `woman in lotus position: dark skin tone` (🧘🏿‍♀)")
  end
end

it "`1F6C0` (fully-qualified) should match `person taking bath` (🛀)" do
  if m = "🛀".match(Emoji::EMOJI_REGEX)
    "🛀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀"
  else
    fail("`1F6C0` doesn't match `person taking bath` (🛀)")
  end
end

it "`1F6C0 1F3FB` (fully-qualified) should match `person taking bath: light skin tone` (🛀🏻)" do
  if m = "🛀🏻".match(Emoji::EMOJI_REGEX)
    "🛀🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏻"
  else
    fail("`1F6C0 1F3FB` doesn't match `person taking bath: light skin tone` (🛀🏻)")
  end
end

it "`1F6C0 1F3FC` (fully-qualified) should match `person taking bath: medium-light skin tone` (🛀🏼)" do
  if m = "🛀🏼".match(Emoji::EMOJI_REGEX)
    "🛀🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏼"
  else
    fail("`1F6C0 1F3FC` doesn't match `person taking bath: medium-light skin tone` (🛀🏼)")
  end
end

it "`1F6C0 1F3FD` (fully-qualified) should match `person taking bath: medium skin tone` (🛀🏽)" do
  if m = "🛀🏽".match(Emoji::EMOJI_REGEX)
    "🛀🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏽"
  else
    fail("`1F6C0 1F3FD` doesn't match `person taking bath: medium skin tone` (🛀🏽)")
  end
end

it "`1F6C0 1F3FE` (fully-qualified) should match `person taking bath: medium-dark skin tone` (🛀🏾)" do
  if m = "🛀🏾".match(Emoji::EMOJI_REGEX)
    "🛀🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏾"
  else
    fail("`1F6C0 1F3FE` doesn't match `person taking bath: medium-dark skin tone` (🛀🏾)")
  end
end

it "`1F6C0 1F3FF` (fully-qualified) should match `person taking bath: dark skin tone` (🛀🏿)" do
  if m = "🛀🏿".match(Emoji::EMOJI_REGEX)
    "🛀🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛀🏿"
  else
    fail("`1F6C0 1F3FF` doesn't match `person taking bath: dark skin tone` (🛀🏿)")
  end
end

it "`1F6CC` (fully-qualified) should match `person in bed` (🛌)" do
  if m = "🛌".match(Emoji::EMOJI_REGEX)
    "🛌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌"
  else
    fail("`1F6CC` doesn't match `person in bed` (🛌)")
  end
end

it "`1F6CC 1F3FB` (fully-qualified) should match `person in bed: light skin tone` (🛌🏻)" do
  if m = "🛌🏻".match(Emoji::EMOJI_REGEX)
    "🛌🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏻"
  else
    fail("`1F6CC 1F3FB` doesn't match `person in bed: light skin tone` (🛌🏻)")
  end
end

it "`1F6CC 1F3FC` (fully-qualified) should match `person in bed: medium-light skin tone` (🛌🏼)" do
  if m = "🛌🏼".match(Emoji::EMOJI_REGEX)
    "🛌🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏼"
  else
    fail("`1F6CC 1F3FC` doesn't match `person in bed: medium-light skin tone` (🛌🏼)")
  end
end

it "`1F6CC 1F3FD` (fully-qualified) should match `person in bed: medium skin tone` (🛌🏽)" do
  if m = "🛌🏽".match(Emoji::EMOJI_REGEX)
    "🛌🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏽"
  else
    fail("`1F6CC 1F3FD` doesn't match `person in bed: medium skin tone` (🛌🏽)")
  end
end

it "`1F6CC 1F3FE` (fully-qualified) should match `person in bed: medium-dark skin tone` (🛌🏾)" do
  if m = "🛌🏾".match(Emoji::EMOJI_REGEX)
    "🛌🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏾"
  else
    fail("`1F6CC 1F3FE` doesn't match `person in bed: medium-dark skin tone` (🛌🏾)")
  end
end

it "`1F6CC 1F3FF` (fully-qualified) should match `person in bed: dark skin tone` (🛌🏿)" do
  if m = "🛌🏿".match(Emoji::EMOJI_REGEX)
    "🛌🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛌🏿"
  else
    fail("`1F6CC 1F3FF` doesn't match `person in bed: dark skin tone` (🛌🏿)")
  end
end

it "`1F9D1 200D 1F91D 200D 1F9D1` (fully-qualified) should match `people holding hands` (🧑‍🤝‍🧑)" do
  if m = "🧑‍🤝‍🧑".match(Emoji::EMOJI_REGEX)
    "🧑‍🤝‍🧑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑‍🤝‍🧑"
  else
    fail("`1F9D1 200D 1F91D 200D 1F9D1` doesn't match `people holding hands` (🧑‍🤝‍🧑)")
  end
end

it "`1F9D1 1F3FB 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: light skin tone` (🧑🏻‍🤝‍🧑🏻)" do
  if m = "🧑🏻‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX)
    "🧑🏻‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏻‍🤝‍🧑🏻"
  else
    fail("`1F9D1 1F3FB 200D 1F91D 200D 1F9D1 1F3FB` doesn't match `people holding hands: light skin tone` (🧑🏻‍🤝‍🧑🏻)")
  end
end

it "`1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: medium-light skin tone, light skin tone` (🧑🏼‍🤝‍🧑🏻)" do
  if m = "🧑🏼‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX)
    "🧑🏼‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏼‍🤝‍🧑🏻"
  else
    fail("`1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FB` doesn't match `people holding hands: medium-light skin tone, light skin tone` (🧑🏼‍🤝‍🧑🏻)")
  end
end

it "`1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: medium-light skin tone` (🧑🏼‍🤝‍🧑🏼)" do
  if m = "🧑🏼‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX)
    "🧑🏼‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏼‍🤝‍🧑🏼"
  else
    fail("`1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FC` doesn't match `people holding hands: medium-light skin tone` (🧑🏼‍🤝‍🧑🏼)")
  end
end

it "`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: medium skin tone, light skin tone` (🧑🏽‍🤝‍🧑🏻)" do
  if m = "🧑🏽‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX)
    "🧑🏽‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽‍🤝‍🧑🏻"
  else
    fail("`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FB` doesn't match `people holding hands: medium skin tone, light skin tone` (🧑🏽‍🤝‍🧑🏻)")
  end
end

it "`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: medium skin tone, medium-light skin tone` (🧑🏽‍🤝‍🧑🏼)" do
  if m = "🧑🏽‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX)
    "🧑🏽‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽‍🤝‍🧑🏼"
  else
    fail("`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FC` doesn't match `people holding hands: medium skin tone, medium-light skin tone` (🧑🏽‍🤝‍🧑🏼)")
  end
end

it "`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FD` (fully-qualified) should match `people holding hands: medium skin tone` (🧑🏽‍🤝‍🧑🏽)" do
  if m = "🧑🏽‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX)
    "🧑🏽‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏽‍🤝‍🧑🏽"
  else
    fail("`1F9D1 1F3FD 200D 1F91D 200D 1F9D1 1F3FD` doesn't match `people holding hands: medium skin tone` (🧑🏽‍🤝‍🧑🏽)")
  end
end

it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: medium-dark skin tone, light skin tone` (🧑🏾‍🤝‍🧑🏻)" do
  if m = "🧑🏾‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX)
    "🧑🏾‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏻"
  else
    fail("`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FB` doesn't match `people holding hands: medium-dark skin tone, light skin tone` (🧑🏾‍🤝‍🧑🏻)")
  end
end

it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: medium-dark skin tone, medium-light skin tone` (🧑🏾‍🤝‍🧑🏼)" do
  if m = "🧑🏾‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX)
    "🧑🏾‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏼"
  else
    fail("`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FC` doesn't match `people holding hands: medium-dark skin tone, medium-light skin tone` (🧑🏾‍🤝‍🧑🏼)")
  end
end

it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FD` (fully-qualified) should match `people holding hands: medium-dark skin tone, medium skin tone` (🧑🏾‍🤝‍🧑🏽)" do
  if m = "🧑🏾‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX)
    "🧑🏾‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏽"
  else
    fail("`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FD` doesn't match `people holding hands: medium-dark skin tone, medium skin tone` (🧑🏾‍🤝‍🧑🏽)")
  end
end

it "`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FE` (fully-qualified) should match `people holding hands: medium-dark skin tone` (🧑🏾‍🤝‍🧑🏾)" do
  if m = "🧑🏾‍🤝‍🧑🏾".match(Emoji::EMOJI_REGEX)
    "🧑🏾‍🤝‍🧑🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏾‍🤝‍🧑🏾"
  else
    fail("`1F9D1 1F3FE 200D 1F91D 200D 1F9D1 1F3FE` doesn't match `people holding hands: medium-dark skin tone` (🧑🏾‍🤝‍🧑🏾)")
  end
end

it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FB` (fully-qualified) should match `people holding hands: dark skin tone, light skin tone` (🧑🏿‍🤝‍🧑🏻)" do
  if m = "🧑🏿‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX)
    "🧑🏿‍🤝‍🧑🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏻"
  else
    fail("`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FB` doesn't match `people holding hands: dark skin tone, light skin tone` (🧑🏿‍🤝‍🧑🏻)")
  end
end

it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FC` (fully-qualified) should match `people holding hands: dark skin tone, medium-light skin tone` (🧑🏿‍🤝‍🧑🏼)" do
  if m = "🧑🏿‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX)
    "🧑🏿‍🤝‍🧑🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏼"
  else
    fail("`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FC` doesn't match `people holding hands: dark skin tone, medium-light skin tone` (🧑🏿‍🤝‍🧑🏼)")
  end
end

it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FD` (fully-qualified) should match `people holding hands: dark skin tone, medium skin tone` (🧑🏿‍🤝‍🧑🏽)" do
  if m = "🧑🏿‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX)
    "🧑🏿‍🤝‍🧑🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏽"
  else
    fail("`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FD` doesn't match `people holding hands: dark skin tone, medium skin tone` (🧑🏿‍🤝‍🧑🏽)")
  end
end

it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FE` (fully-qualified) should match `people holding hands: dark skin tone, medium-dark skin tone` (🧑🏿‍🤝‍🧑🏾)" do
  if m = "🧑🏿‍🤝‍🧑🏾".match(Emoji::EMOJI_REGEX)
    "🧑🏿‍🤝‍🧑🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏾"
  else
    fail("`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FE` doesn't match `people holding hands: dark skin tone, medium-dark skin tone` (🧑🏿‍🤝‍🧑🏾)")
  end
end

it "`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FF` (fully-qualified) should match `people holding hands: dark skin tone` (🧑🏿‍🤝‍🧑🏿)" do
  if m = "🧑🏿‍🤝‍🧑🏿".match(Emoji::EMOJI_REGEX)
    "🧑🏿‍🤝‍🧑🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧑🏿‍🤝‍🧑🏿"
  else
    fail("`1F9D1 1F3FF 200D 1F91D 200D 1F9D1 1F3FF` doesn't match `people holding hands: dark skin tone` (🧑🏿‍🤝‍🧑🏿)")
  end
end

it "`1F46D` (fully-qualified) should match `women holding hands` (👭)" do
  if m = "👭".match(Emoji::EMOJI_REGEX)
    "👭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭"
  else
    fail("`1F46D` doesn't match `women holding hands` (👭)")
  end
end

it "`1F46D 1F3FB` (fully-qualified) should match `women holding hands: light skin tone` (👭🏻)" do
  if m = "👭🏻".match(Emoji::EMOJI_REGEX)
    "👭🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏻"
  else
    fail("`1F46D 1F3FB` doesn't match `women holding hands: light skin tone` (👭🏻)")
  end
end

it "`1F469 1F3FC 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: medium-light skin tone, light skin tone` (👩🏼‍🤝‍👩🏻)" do
  if m = "👩🏼‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👩🏻"
  else
    fail("`1F469 1F3FC 200D 1F91D 200D 1F469 1F3FB` doesn't match `women holding hands: medium-light skin tone, light skin tone` (👩🏼‍🤝‍👩🏻)")
  end
end

it "`1F46D 1F3FC` (fully-qualified) should match `women holding hands: medium-light skin tone` (👭🏼)" do
  if m = "👭🏼".match(Emoji::EMOJI_REGEX)
    "👭🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏼"
  else
    fail("`1F46D 1F3FC` doesn't match `women holding hands: medium-light skin tone` (👭🏼)")
  end
end

it "`1F469 1F3FD 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: medium skin tone, light skin tone` (👩🏽‍🤝‍👩🏻)" do
  if m = "👩🏽‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👩🏻"
  else
    fail("`1F469 1F3FD 200D 1F91D 200D 1F469 1F3FB` doesn't match `women holding hands: medium skin tone, light skin tone` (👩🏽‍🤝‍👩🏻)")
  end
end

it "`1F469 1F3FD 200D 1F91D 200D 1F469 1F3FC` (fully-qualified) should match `women holding hands: medium skin tone, medium-light skin tone` (👩🏽‍🤝‍👩🏼)" do
  if m = "👩🏽‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👩🏼"
  else
    fail("`1F469 1F3FD 200D 1F91D 200D 1F469 1F3FC` doesn't match `women holding hands: medium skin tone, medium-light skin tone` (👩🏽‍🤝‍👩🏼)")
  end
end

it "`1F46D 1F3FD` (fully-qualified) should match `women holding hands: medium skin tone` (👭🏽)" do
  if m = "👭🏽".match(Emoji::EMOJI_REGEX)
    "👭🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏽"
  else
    fail("`1F46D 1F3FD` doesn't match `women holding hands: medium skin tone` (👭🏽)")
  end
end

it "`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: medium-dark skin tone, light skin tone` (👩🏾‍🤝‍👩🏻)" do
  if m = "👩🏾‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👩🏻"
  else
    fail("`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FB` doesn't match `women holding hands: medium-dark skin tone, light skin tone` (👩🏾‍🤝‍👩🏻)")
  end
end

it "`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FC` (fully-qualified) should match `women holding hands: medium-dark skin tone, medium-light skin tone` (👩🏾‍🤝‍👩🏼)" do
  if m = "👩🏾‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👩🏼"
  else
    fail("`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FC` doesn't match `women holding hands: medium-dark skin tone, medium-light skin tone` (👩🏾‍🤝‍👩🏼)")
  end
end

it "`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FD` (fully-qualified) should match `women holding hands: medium-dark skin tone, medium skin tone` (👩🏾‍🤝‍👩🏽)" do
  if m = "👩🏾‍🤝‍👩🏽".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🤝‍👩🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👩🏽"
  else
    fail("`1F469 1F3FE 200D 1F91D 200D 1F469 1F3FD` doesn't match `women holding hands: medium-dark skin tone, medium skin tone` (👩🏾‍🤝‍👩🏽)")
  end
end

it "`1F46D 1F3FE` (fully-qualified) should match `women holding hands: medium-dark skin tone` (👭🏾)" do
  if m = "👭🏾".match(Emoji::EMOJI_REGEX)
    "👭🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏾"
  else
    fail("`1F46D 1F3FE` doesn't match `women holding hands: medium-dark skin tone` (👭🏾)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FB` (fully-qualified) should match `women holding hands: dark skin tone, light skin tone` (👩🏿‍🤝‍👩🏻)" do
  if m = "👩🏿‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👩🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏻"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FB` doesn't match `women holding hands: dark skin tone, light skin tone` (👩🏿‍🤝‍👩🏻)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FC` (fully-qualified) should match `women holding hands: dark skin tone, medium-light skin tone` (👩🏿‍🤝‍👩🏼)" do
  if m = "👩🏿‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👩🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏼"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FC` doesn't match `women holding hands: dark skin tone, medium-light skin tone` (👩🏿‍🤝‍👩🏼)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FD` (fully-qualified) should match `women holding hands: dark skin tone, medium skin tone` (👩🏿‍🤝‍👩🏽)" do
  if m = "👩🏿‍🤝‍👩🏽".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👩🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏽"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FD` doesn't match `women holding hands: dark skin tone, medium skin tone` (👩🏿‍🤝‍👩🏽)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FE` (fully-qualified) should match `women holding hands: dark skin tone, medium-dark skin tone` (👩🏿‍🤝‍👩🏾)" do
  if m = "👩🏿‍🤝‍👩🏾".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👩🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👩🏾"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F469 1F3FE` doesn't match `women holding hands: dark skin tone, medium-dark skin tone` (👩🏿‍🤝‍👩🏾)")
  end
end

it "`1F46D 1F3FF` (fully-qualified) should match `women holding hands: dark skin tone` (👭🏿)" do
  if m = "👭🏿".match(Emoji::EMOJI_REGEX)
    "👭🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👭🏿"
  else
    fail("`1F46D 1F3FF` doesn't match `women holding hands: dark skin tone` (👭🏿)")
  end
end

it "`1F46B` (fully-qualified) should match `woman and man holding hands` (👫)" do
  if m = "👫".match(Emoji::EMOJI_REGEX)
    "👫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫"
  else
    fail("`1F46B` doesn't match `woman and man holding hands` (👫)")
  end
end

it "`1F46B 1F3FB` (fully-qualified) should match `woman and man holding hands: light skin tone` (👫🏻)" do
  if m = "👫🏻".match(Emoji::EMOJI_REGEX)
    "👫🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏻"
  else
    fail("`1F46B 1F3FB` doesn't match `woman and man holding hands: light skin tone` (👫🏻)")
  end
end

it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: light skin tone, medium-light skin tone` (👩🏻‍🤝‍👨🏼)" do
  if m = "👩🏻‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏼"
  else
    fail("`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FC` doesn't match `woman and man holding hands: light skin tone, medium-light skin tone` (👩🏻‍🤝‍👨🏼)")
  end
end

it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: light skin tone, medium skin tone` (👩🏻‍🤝‍👨🏽)" do
  if m = "👩🏻‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏽"
  else
    fail("`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FD` doesn't match `woman and man holding hands: light skin tone, medium skin tone` (👩🏻‍🤝‍👨🏽)")
  end
end

it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: light skin tone, medium-dark skin tone` (👩🏻‍🤝‍👨🏾)" do
  if m = "👩🏻‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏾"
  else
    fail("`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FE` doesn't match `woman and man holding hands: light skin tone, medium-dark skin tone` (👩🏻‍🤝‍👨🏾)")
  end
end

it "`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: light skin tone, dark skin tone` (👩🏻‍🤝‍👨🏿)" do
  if m = "👩🏻‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX)
    "👩🏻‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏻‍🤝‍👨🏿"
  else
    fail("`1F469 1F3FB 200D 1F91D 200D 1F468 1F3FF` doesn't match `woman and man holding hands: light skin tone, dark skin tone` (👩🏻‍🤝‍👨🏿)")
  end
end

it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, light skin tone` (👩🏼‍🤝‍👨🏻)" do
  if m = "👩🏼‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏻"
  else
    fail("`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FB` doesn't match `woman and man holding hands: medium-light skin tone, light skin tone` (👩🏼‍🤝‍👨🏻)")
  end
end

it "`1F46B 1F3FC` (fully-qualified) should match `woman and man holding hands: medium-light skin tone` (👫🏼)" do
  if m = "👫🏼".match(Emoji::EMOJI_REGEX)
    "👫🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏼"
  else
    fail("`1F46B 1F3FC` doesn't match `woman and man holding hands: medium-light skin tone` (👫🏼)")
  end
end

it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, medium skin tone` (👩🏼‍🤝‍👨🏽)" do
  if m = "👩🏼‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏽"
  else
    fail("`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FD` doesn't match `woman and man holding hands: medium-light skin tone, medium skin tone` (👩🏼‍🤝‍👨🏽)")
  end
end

it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, medium-dark skin tone` (👩🏼‍🤝‍👨🏾)" do
  if m = "👩🏼‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏾"
  else
    fail("`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FE` doesn't match `woman and man holding hands: medium-light skin tone, medium-dark skin tone` (👩🏼‍🤝‍👨🏾)")
  end
end

it "`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: medium-light skin tone, dark skin tone` (👩🏼‍🤝‍👨🏿)" do
  if m = "👩🏼‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX)
    "👩🏼‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏼‍🤝‍👨🏿"
  else
    fail("`1F469 1F3FC 200D 1F91D 200D 1F468 1F3FF` doesn't match `woman and man holding hands: medium-light skin tone, dark skin tone` (👩🏼‍🤝‍👨🏿)")
  end
end

it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: medium skin tone, light skin tone` (👩🏽‍🤝‍👨🏻)" do
  if m = "👩🏽‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏻"
  else
    fail("`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FB` doesn't match `woman and man holding hands: medium skin tone, light skin tone` (👩🏽‍🤝‍👨🏻)")
  end
end

it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: medium skin tone, medium-light skin tone` (👩🏽‍🤝‍👨🏼)" do
  if m = "👩🏽‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏼"
  else
    fail("`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FC` doesn't match `woman and man holding hands: medium skin tone, medium-light skin tone` (👩🏽‍🤝‍👨🏼)")
  end
end

it "`1F46B 1F3FD` (fully-qualified) should match `woman and man holding hands: medium skin tone` (👫🏽)" do
  if m = "👫🏽".match(Emoji::EMOJI_REGEX)
    "👫🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏽"
  else
    fail("`1F46B 1F3FD` doesn't match `woman and man holding hands: medium skin tone` (👫🏽)")
  end
end

it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: medium skin tone, medium-dark skin tone` (👩🏽‍🤝‍👨🏾)" do
  if m = "👩🏽‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏾"
  else
    fail("`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FE` doesn't match `woman and man holding hands: medium skin tone, medium-dark skin tone` (👩🏽‍🤝‍👨🏾)")
  end
end

it "`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: medium skin tone, dark skin tone` (👩🏽‍🤝‍👨🏿)" do
  if m = "👩🏽‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX)
    "👩🏽‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏽‍🤝‍👨🏿"
  else
    fail("`1F469 1F3FD 200D 1F91D 200D 1F468 1F3FF` doesn't match `woman and man holding hands: medium skin tone, dark skin tone` (👩🏽‍🤝‍👨🏿)")
  end
end

it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, light skin tone` (👩🏾‍🤝‍👨🏻)" do
  if m = "👩🏾‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏻"
  else
    fail("`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FB` doesn't match `woman and man holding hands: medium-dark skin tone, light skin tone` (👩🏾‍🤝‍👨🏻)")
  end
end

it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, medium-light skin tone` (👩🏾‍🤝‍👨🏼)" do
  if m = "👩🏾‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏼"
  else
    fail("`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FC` doesn't match `woman and man holding hands: medium-dark skin tone, medium-light skin tone` (👩🏾‍🤝‍👨🏼)")
  end
end

it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, medium skin tone` (👩🏾‍🤝‍👨🏽)" do
  if m = "👩🏾‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏽"
  else
    fail("`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FD` doesn't match `woman and man holding hands: medium-dark skin tone, medium skin tone` (👩🏾‍🤝‍👨🏽)")
  end
end

it "`1F46B 1F3FE` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone` (👫🏾)" do
  if m = "👫🏾".match(Emoji::EMOJI_REGEX)
    "👫🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏾"
  else
    fail("`1F46B 1F3FE` doesn't match `woman and man holding hands: medium-dark skin tone` (👫🏾)")
  end
end

it "`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FF` (fully-qualified) should match `woman and man holding hands: medium-dark skin tone, dark skin tone` (👩🏾‍🤝‍👨🏿)" do
  if m = "👩🏾‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX)
    "👩🏾‍🤝‍👨🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏾‍🤝‍👨🏿"
  else
    fail("`1F469 1F3FE 200D 1F91D 200D 1F468 1F3FF` doesn't match `woman and man holding hands: medium-dark skin tone, dark skin tone` (👩🏾‍🤝‍👨🏿)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `woman and man holding hands: dark skin tone, light skin tone` (👩🏿‍🤝‍👨🏻)" do
  if m = "👩🏿‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏻"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FB` doesn't match `woman and man holding hands: dark skin tone, light skin tone` (👩🏿‍🤝‍👨🏻)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `woman and man holding hands: dark skin tone, medium-light skin tone` (👩🏿‍🤝‍👨🏼)" do
  if m = "👩🏿‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏼"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FC` doesn't match `woman and man holding hands: dark skin tone, medium-light skin tone` (👩🏿‍🤝‍👨🏼)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `woman and man holding hands: dark skin tone, medium skin tone` (👩🏿‍🤝‍👨🏽)" do
  if m = "👩🏿‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏽"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FD` doesn't match `woman and man holding hands: dark skin tone, medium skin tone` (👩🏿‍🤝‍👨🏽)")
  end
end

it "`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `woman and man holding hands: dark skin tone, medium-dark skin tone` (👩🏿‍🤝‍👨🏾)" do
  if m = "👩🏿‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX)
    "👩🏿‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩🏿‍🤝‍👨🏾"
  else
    fail("`1F469 1F3FF 200D 1F91D 200D 1F468 1F3FE` doesn't match `woman and man holding hands: dark skin tone, medium-dark skin tone` (👩🏿‍🤝‍👨🏾)")
  end
end

it "`1F46B 1F3FF` (fully-qualified) should match `woman and man holding hands: dark skin tone` (👫🏿)" do
  if m = "👫🏿".match(Emoji::EMOJI_REGEX)
    "👫🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👫🏿"
  else
    fail("`1F46B 1F3FF` doesn't match `woman and man holding hands: dark skin tone` (👫🏿)")
  end
end

it "`1F46C` (fully-qualified) should match `men holding hands` (👬)" do
  if m = "👬".match(Emoji::EMOJI_REGEX)
    "👬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬"
  else
    fail("`1F46C` doesn't match `men holding hands` (👬)")
  end
end

it "`1F46C 1F3FB` (fully-qualified) should match `men holding hands: light skin tone` (👬🏻)" do
  if m = "👬🏻".match(Emoji::EMOJI_REGEX)
    "👬🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏻"
  else
    fail("`1F46C 1F3FB` doesn't match `men holding hands: light skin tone` (👬🏻)")
  end
end

it "`1F468 1F3FC 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: medium-light skin tone, light skin tone` (👨🏼‍🤝‍👨🏻)" do
  if m = "👨🏼‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👨🏼‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏼‍🤝‍👨🏻"
  else
    fail("`1F468 1F3FC 200D 1F91D 200D 1F468 1F3FB` doesn't match `men holding hands: medium-light skin tone, light skin tone` (👨🏼‍🤝‍👨🏻)")
  end
end

it "`1F46C 1F3FC` (fully-qualified) should match `men holding hands: medium-light skin tone` (👬🏼)" do
  if m = "👬🏼".match(Emoji::EMOJI_REGEX)
    "👬🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏼"
  else
    fail("`1F46C 1F3FC` doesn't match `men holding hands: medium-light skin tone` (👬🏼)")
  end
end

it "`1F468 1F3FD 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: medium skin tone, light skin tone` (👨🏽‍🤝‍👨🏻)" do
  if m = "👨🏽‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🤝‍👨🏻"
  else
    fail("`1F468 1F3FD 200D 1F91D 200D 1F468 1F3FB` doesn't match `men holding hands: medium skin tone, light skin tone` (👨🏽‍🤝‍👨🏻)")
  end
end

it "`1F468 1F3FD 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `men holding hands: medium skin tone, medium-light skin tone` (👨🏽‍🤝‍👨🏼)" do
  if m = "👨🏽‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX)
    "👨🏽‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏽‍🤝‍👨🏼"
  else
    fail("`1F468 1F3FD 200D 1F91D 200D 1F468 1F3FC` doesn't match `men holding hands: medium skin tone, medium-light skin tone` (👨🏽‍🤝‍👨🏼)")
  end
end

it "`1F46C 1F3FD` (fully-qualified) should match `men holding hands: medium skin tone` (👬🏽)" do
  if m = "👬🏽".match(Emoji::EMOJI_REGEX)
    "👬🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏽"
  else
    fail("`1F46C 1F3FD` doesn't match `men holding hands: medium skin tone` (👬🏽)")
  end
end

it "`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: medium-dark skin tone, light skin tone` (👨🏾‍🤝‍👨🏻)" do
  if m = "👨🏾‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🤝‍👨🏻"
  else
    fail("`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FB` doesn't match `men holding hands: medium-dark skin tone, light skin tone` (👨🏾‍🤝‍👨🏻)")
  end
end

it "`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `men holding hands: medium-dark skin tone, medium-light skin tone` (👨🏾‍🤝‍👨🏼)" do
  if m = "👨🏾‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🤝‍👨🏼"
  else
    fail("`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FC` doesn't match `men holding hands: medium-dark skin tone, medium-light skin tone` (👨🏾‍🤝‍👨🏼)")
  end
end

it "`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `men holding hands: medium-dark skin tone, medium skin tone` (👨🏾‍🤝‍👨🏽)" do
  if m = "👨🏾‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX)
    "👨🏾‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏾‍🤝‍👨🏽"
  else
    fail("`1F468 1F3FE 200D 1F91D 200D 1F468 1F3FD` doesn't match `men holding hands: medium-dark skin tone, medium skin tone` (👨🏾‍🤝‍👨🏽)")
  end
end

it "`1F46C 1F3FE` (fully-qualified) should match `men holding hands: medium-dark skin tone` (👬🏾)" do
  if m = "👬🏾".match(Emoji::EMOJI_REGEX)
    "👬🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏾"
  else
    fail("`1F46C 1F3FE` doesn't match `men holding hands: medium-dark skin tone` (👬🏾)")
  end
end

it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FB` (fully-qualified) should match `men holding hands: dark skin tone, light skin tone` (👨🏿‍🤝‍👨🏻)" do
  if m = "👨🏿‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🤝‍👨🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏻"
  else
    fail("`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FB` doesn't match `men holding hands: dark skin tone, light skin tone` (👨🏿‍🤝‍👨🏻)")
  end
end

it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FC` (fully-qualified) should match `men holding hands: dark skin tone, medium-light skin tone` (👨🏿‍🤝‍👨🏼)" do
  if m = "👨🏿‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🤝‍👨🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏼"
  else
    fail("`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FC` doesn't match `men holding hands: dark skin tone, medium-light skin tone` (👨🏿‍🤝‍👨🏼)")
  end
end

it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FD` (fully-qualified) should match `men holding hands: dark skin tone, medium skin tone` (👨🏿‍🤝‍👨🏽)" do
  if m = "👨🏿‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🤝‍👨🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏽"
  else
    fail("`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FD` doesn't match `men holding hands: dark skin tone, medium skin tone` (👨🏿‍🤝‍👨🏽)")
  end
end

it "`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FE` (fully-qualified) should match `men holding hands: dark skin tone, medium-dark skin tone` (👨🏿‍🤝‍👨🏾)" do
  if m = "👨🏿‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX)
    "👨🏿‍🤝‍👨🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨🏿‍🤝‍👨🏾"
  else
    fail("`1F468 1F3FF 200D 1F91D 200D 1F468 1F3FE` doesn't match `men holding hands: dark skin tone, medium-dark skin tone` (👨🏿‍🤝‍👨🏾)")
  end
end

it "`1F46C 1F3FF` (fully-qualified) should match `men holding hands: dark skin tone` (👬🏿)" do
  if m = "👬🏿".match(Emoji::EMOJI_REGEX)
    "👬🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👬🏿"
  else
    fail("`1F46C 1F3FF` doesn't match `men holding hands: dark skin tone` (👬🏿)")
  end
end

it "`1F48F` (fully-qualified) should match `kiss` (💏)" do
  if m = "💏".match(Emoji::EMOJI_REGEX)
    "💏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💏"
  else
    fail("`1F48F` doesn't match `kiss` (💏)")
  end
end

it "`1F469 200D 2764 FE0F 200D 1F48B 200D 1F468` (fully-qualified) should match `kiss: woman, man` (👩‍❤️‍💋‍👨)" do
  if m = "👩‍❤️‍💋‍👨".match(Emoji::EMOJI_REGEX)
    "👩‍❤️‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍💋‍👨"
  else
    fail("`1F469 200D 2764 FE0F 200D 1F48B 200D 1F468` doesn't match `kiss: woman, man` (👩‍❤️‍💋‍👨)")
  end
end

it "`1F469 200D 2764 200D 1F48B 200D 1F468` (minimally-qualified) should match `kiss: woman, man` (👩‍❤‍💋‍👨)" do
  if m = "👩‍❤‍💋‍👨".match(Emoji::EMOJI_REGEX)
    "👩‍❤‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍💋‍👨"
  else
    fail("`1F469 200D 2764 200D 1F48B 200D 1F468` doesn't match `kiss: woman, man` (👩‍❤‍💋‍👨)")
  end
end

it "`1F468 200D 2764 FE0F 200D 1F48B 200D 1F468` (fully-qualified) should match `kiss: man, man` (👨‍❤️‍💋‍👨)" do
  if m = "👨‍❤️‍💋‍👨".match(Emoji::EMOJI_REGEX)
    "👨‍❤️‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤️‍💋‍👨"
  else
    fail("`1F468 200D 2764 FE0F 200D 1F48B 200D 1F468` doesn't match `kiss: man, man` (👨‍❤️‍💋‍👨)")
  end
end

it "`1F468 200D 2764 200D 1F48B 200D 1F468` (minimally-qualified) should match `kiss: man, man` (👨‍❤‍💋‍👨)" do
  if m = "👨‍❤‍💋‍👨".match(Emoji::EMOJI_REGEX)
    "👨‍❤‍💋‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤‍💋‍👨"
  else
    fail("`1F468 200D 2764 200D 1F48B 200D 1F468` doesn't match `kiss: man, man` (👨‍❤‍💋‍👨)")
  end
end

it "`1F469 200D 2764 FE0F 200D 1F48B 200D 1F469` (fully-qualified) should match `kiss: woman, woman` (👩‍❤️‍💋‍👩)" do
  if m = "👩‍❤️‍💋‍👩".match(Emoji::EMOJI_REGEX)
    "👩‍❤️‍💋‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍💋‍👩"
  else
    fail("`1F469 200D 2764 FE0F 200D 1F48B 200D 1F469` doesn't match `kiss: woman, woman` (👩‍❤️‍💋‍👩)")
  end
end

it "`1F469 200D 2764 200D 1F48B 200D 1F469` (minimally-qualified) should match `kiss: woman, woman` (👩‍❤‍💋‍👩)" do
  if m = "👩‍❤‍💋‍👩".match(Emoji::EMOJI_REGEX)
    "👩‍❤‍💋‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍💋‍👩"
  else
    fail("`1F469 200D 2764 200D 1F48B 200D 1F469` doesn't match `kiss: woman, woman` (👩‍❤‍💋‍👩)")
  end
end

it "`1F491` (fully-qualified) should match `couple with heart` (💑)" do
  if m = "💑".match(Emoji::EMOJI_REGEX)
    "💑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💑"
  else
    fail("`1F491` doesn't match `couple with heart` (💑)")
  end
end

it "`1F469 200D 2764 FE0F 200D 1F468` (fully-qualified) should match `couple with heart: woman, man` (👩‍❤️‍👨)" do
  if m = "👩‍❤️‍👨".match(Emoji::EMOJI_REGEX)
    "👩‍❤️‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍👨"
  else
    fail("`1F469 200D 2764 FE0F 200D 1F468` doesn't match `couple with heart: woman, man` (👩‍❤️‍👨)")
  end
end

it "`1F469 200D 2764 200D 1F468` (minimally-qualified) should match `couple with heart: woman, man` (👩‍❤‍👨)" do
  if m = "👩‍❤‍👨".match(Emoji::EMOJI_REGEX)
    "👩‍❤‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍👨"
  else
    fail("`1F469 200D 2764 200D 1F468` doesn't match `couple with heart: woman, man` (👩‍❤‍👨)")
  end
end

it "`1F468 200D 2764 FE0F 200D 1F468` (fully-qualified) should match `couple with heart: man, man` (👨‍❤️‍👨)" do
  if m = "👨‍❤️‍👨".match(Emoji::EMOJI_REGEX)
    "👨‍❤️‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤️‍👨"
  else
    fail("`1F468 200D 2764 FE0F 200D 1F468` doesn't match `couple with heart: man, man` (👨‍❤️‍👨)")
  end
end

it "`1F468 200D 2764 200D 1F468` (minimally-qualified) should match `couple with heart: man, man` (👨‍❤‍👨)" do
  if m = "👨‍❤‍👨".match(Emoji::EMOJI_REGEX)
    "👨‍❤‍👨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍❤‍👨"
  else
    fail("`1F468 200D 2764 200D 1F468` doesn't match `couple with heart: man, man` (👨‍❤‍👨)")
  end
end

it "`1F469 200D 2764 FE0F 200D 1F469` (fully-qualified) should match `couple with heart: woman, woman` (👩‍❤️‍👩)" do
  if m = "👩‍❤️‍👩".match(Emoji::EMOJI_REGEX)
    "👩‍❤️‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤️‍👩"
  else
    fail("`1F469 200D 2764 FE0F 200D 1F469` doesn't match `couple with heart: woman, woman` (👩‍❤️‍👩)")
  end
end

it "`1F469 200D 2764 200D 1F469` (minimally-qualified) should match `couple with heart: woman, woman` (👩‍❤‍👩)" do
  if m = "👩‍❤‍👩".match(Emoji::EMOJI_REGEX)
    "👩‍❤‍👩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍❤‍👩"
  else
    fail("`1F469 200D 2764 200D 1F469` doesn't match `couple with heart: woman, woman` (👩‍❤‍👩)")
  end
end

it "`1F46A` (fully-qualified) should match `family` (👪)" do
  if m = "👪".match(Emoji::EMOJI_REGEX)
    "👪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👪"
  else
    fail("`1F46A` doesn't match `family` (👪)")
  end
end

it "`1F468 200D 1F469 200D 1F466` (fully-qualified) should match `family: man, woman, boy` (👨‍👩‍👦)" do
  if m = "👨‍👩‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👩‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👦"
  else
    fail("`1F468 200D 1F469 200D 1F466` doesn't match `family: man, woman, boy` (👨‍👩‍👦)")
  end
end

it "`1F468 200D 1F469 200D 1F467` (fully-qualified) should match `family: man, woman, girl` (👨‍👩‍👧)" do
  if m = "👨‍👩‍👧".match(Emoji::EMOJI_REGEX)
    "👨‍👩‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👧"
  else
    fail("`1F468 200D 1F469 200D 1F467` doesn't match `family: man, woman, girl` (👨‍👩‍👧)")
  end
end

it "`1F468 200D 1F469 200D 1F467 200D 1F466` (fully-qualified) should match `family: man, woman, girl, boy` (👨‍👩‍👧‍👦)" do
  if m = "👨‍👩‍👧‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👩‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👧‍👦"
  else
    fail("`1F468 200D 1F469 200D 1F467 200D 1F466` doesn't match `family: man, woman, girl, boy` (👨‍👩‍👧‍👦)")
  end
end

it "`1F468 200D 1F469 200D 1F466 200D 1F466` (fully-qualified) should match `family: man, woman, boy, boy` (👨‍👩‍👦‍👦)" do
  if m = "👨‍👩‍👦‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👩‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👦‍👦"
  else
    fail("`1F468 200D 1F469 200D 1F466 200D 1F466` doesn't match `family: man, woman, boy, boy` (👨‍👩‍👦‍👦)")
  end
end

it "`1F468 200D 1F469 200D 1F467 200D 1F467` (fully-qualified) should match `family: man, woman, girl, girl` (👨‍👩‍👧‍👧)" do
  if m = "👨‍👩‍👧‍👧".match(Emoji::EMOJI_REGEX)
    "👨‍👩‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👩‍👧‍👧"
  else
    fail("`1F468 200D 1F469 200D 1F467 200D 1F467` doesn't match `family: man, woman, girl, girl` (👨‍👩‍👧‍👧)")
  end
end

it "`1F468 200D 1F468 200D 1F466` (fully-qualified) should match `family: man, man, boy` (👨‍👨‍👦)" do
  if m = "👨‍👨‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👨‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👦"
  else
    fail("`1F468 200D 1F468 200D 1F466` doesn't match `family: man, man, boy` (👨‍👨‍👦)")
  end
end

it "`1F468 200D 1F468 200D 1F467` (fully-qualified) should match `family: man, man, girl` (👨‍👨‍👧)" do
  if m = "👨‍👨‍👧".match(Emoji::EMOJI_REGEX)
    "👨‍👨‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👧"
  else
    fail("`1F468 200D 1F468 200D 1F467` doesn't match `family: man, man, girl` (👨‍👨‍👧)")
  end
end

it "`1F468 200D 1F468 200D 1F467 200D 1F466` (fully-qualified) should match `family: man, man, girl, boy` (👨‍👨‍👧‍👦)" do
  if m = "👨‍👨‍👧‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👨‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👧‍👦"
  else
    fail("`1F468 200D 1F468 200D 1F467 200D 1F466` doesn't match `family: man, man, girl, boy` (👨‍👨‍👧‍👦)")
  end
end

it "`1F468 200D 1F468 200D 1F466 200D 1F466` (fully-qualified) should match `family: man, man, boy, boy` (👨‍👨‍👦‍👦)" do
  if m = "👨‍👨‍👦‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👨‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👦‍👦"
  else
    fail("`1F468 200D 1F468 200D 1F466 200D 1F466` doesn't match `family: man, man, boy, boy` (👨‍👨‍👦‍👦)")
  end
end

it "`1F468 200D 1F468 200D 1F467 200D 1F467` (fully-qualified) should match `family: man, man, girl, girl` (👨‍👨‍👧‍👧)" do
  if m = "👨‍👨‍👧‍👧".match(Emoji::EMOJI_REGEX)
    "👨‍👨‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👨‍👧‍👧"
  else
    fail("`1F468 200D 1F468 200D 1F467 200D 1F467` doesn't match `family: man, man, girl, girl` (👨‍👨‍👧‍👧)")
  end
end

it "`1F469 200D 1F469 200D 1F466` (fully-qualified) should match `family: woman, woman, boy` (👩‍👩‍👦)" do
  if m = "👩‍👩‍👦".match(Emoji::EMOJI_REGEX)
    "👩‍👩‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👦"
  else
    fail("`1F469 200D 1F469 200D 1F466` doesn't match `family: woman, woman, boy` (👩‍👩‍👦)")
  end
end

it "`1F469 200D 1F469 200D 1F467` (fully-qualified) should match `family: woman, woman, girl` (👩‍👩‍👧)" do
  if m = "👩‍👩‍👧".match(Emoji::EMOJI_REGEX)
    "👩‍👩‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👧"
  else
    fail("`1F469 200D 1F469 200D 1F467` doesn't match `family: woman, woman, girl` (👩‍👩‍👧)")
  end
end

it "`1F469 200D 1F469 200D 1F467 200D 1F466` (fully-qualified) should match `family: woman, woman, girl, boy` (👩‍👩‍👧‍👦)" do
  if m = "👩‍👩‍👧‍👦".match(Emoji::EMOJI_REGEX)
    "👩‍👩‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👧‍👦"
  else
    fail("`1F469 200D 1F469 200D 1F467 200D 1F466` doesn't match `family: woman, woman, girl, boy` (👩‍👩‍👧‍👦)")
  end
end

it "`1F469 200D 1F469 200D 1F466 200D 1F466` (fully-qualified) should match `family: woman, woman, boy, boy` (👩‍👩‍👦‍👦)" do
  if m = "👩‍👩‍👦‍👦".match(Emoji::EMOJI_REGEX)
    "👩‍👩‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👦‍👦"
  else
    fail("`1F469 200D 1F469 200D 1F466 200D 1F466` doesn't match `family: woman, woman, boy, boy` (👩‍👩‍👦‍👦)")
  end
end

it "`1F469 200D 1F469 200D 1F467 200D 1F467` (fully-qualified) should match `family: woman, woman, girl, girl` (👩‍👩‍👧‍👧)" do
  if m = "👩‍👩‍👧‍👧".match(Emoji::EMOJI_REGEX)
    "👩‍👩‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👩‍👧‍👧"
  else
    fail("`1F469 200D 1F469 200D 1F467 200D 1F467` doesn't match `family: woman, woman, girl, girl` (👩‍👩‍👧‍👧)")
  end
end

it "`1F468 200D 1F466` (fully-qualified) should match `family: man, boy` (👨‍👦)" do
  if m = "👨‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👦"
  else
    fail("`1F468 200D 1F466` doesn't match `family: man, boy` (👨‍👦)")
  end
end

it "`1F468 200D 1F466 200D 1F466` (fully-qualified) should match `family: man, boy, boy` (👨‍👦‍👦)" do
  if m = "👨‍👦‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👦‍👦"
  else
    fail("`1F468 200D 1F466 200D 1F466` doesn't match `family: man, boy, boy` (👨‍👦‍👦)")
  end
end

it "`1F468 200D 1F467` (fully-qualified) should match `family: man, girl` (👨‍👧)" do
  if m = "👨‍👧".match(Emoji::EMOJI_REGEX)
    "👨‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👧"
  else
    fail("`1F468 200D 1F467` doesn't match `family: man, girl` (👨‍👧)")
  end
end

it "`1F468 200D 1F467 200D 1F466` (fully-qualified) should match `family: man, girl, boy` (👨‍👧‍👦)" do
  if m = "👨‍👧‍👦".match(Emoji::EMOJI_REGEX)
    "👨‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👧‍👦"
  else
    fail("`1F468 200D 1F467 200D 1F466` doesn't match `family: man, girl, boy` (👨‍👧‍👦)")
  end
end

it "`1F468 200D 1F467 200D 1F467` (fully-qualified) should match `family: man, girl, girl` (👨‍👧‍👧)" do
  if m = "👨‍👧‍👧".match(Emoji::EMOJI_REGEX)
    "👨‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👨‍👧‍👧"
  else
    fail("`1F468 200D 1F467 200D 1F467` doesn't match `family: man, girl, girl` (👨‍👧‍👧)")
  end
end

it "`1F469 200D 1F466` (fully-qualified) should match `family: woman, boy` (👩‍👦)" do
  if m = "👩‍👦".match(Emoji::EMOJI_REGEX)
    "👩‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👦"
  else
    fail("`1F469 200D 1F466` doesn't match `family: woman, boy` (👩‍👦)")
  end
end

it "`1F469 200D 1F466 200D 1F466` (fully-qualified) should match `family: woman, boy, boy` (👩‍👦‍👦)" do
  if m = "👩‍👦‍👦".match(Emoji::EMOJI_REGEX)
    "👩‍👦‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👦‍👦"
  else
    fail("`1F469 200D 1F466 200D 1F466` doesn't match `family: woman, boy, boy` (👩‍👦‍👦)")
  end
end

it "`1F469 200D 1F467` (fully-qualified) should match `family: woman, girl` (👩‍👧)" do
  if m = "👩‍👧".match(Emoji::EMOJI_REGEX)
    "👩‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👧"
  else
    fail("`1F469 200D 1F467` doesn't match `family: woman, girl` (👩‍👧)")
  end
end

it "`1F469 200D 1F467 200D 1F466` (fully-qualified) should match `family: woman, girl, boy` (👩‍👧‍👦)" do
  if m = "👩‍👧‍👦".match(Emoji::EMOJI_REGEX)
    "👩‍👧‍👦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👧‍👦"
  else
    fail("`1F469 200D 1F467 200D 1F466` doesn't match `family: woman, girl, boy` (👩‍👧‍👦)")
  end
end

it "`1F469 200D 1F467 200D 1F467` (fully-qualified) should match `family: woman, girl, girl` (👩‍👧‍👧)" do
  if m = "👩‍👧‍👧".match(Emoji::EMOJI_REGEX)
    "👩‍👧‍👧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👩‍👧‍👧"
  else
    fail("`1F469 200D 1F467 200D 1F467` doesn't match `family: woman, girl, girl` (👩‍👧‍👧)")
  end
end

it "`1F5E3 FE0F` (fully-qualified) should match `speaking head` (🗣️)" do
  if m = "🗣️".match(Emoji::EMOJI_REGEX)
    "🗣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗣️"
  else
    fail("`1F5E3 FE0F` doesn't match `speaking head` (🗣️)")
  end
end

it "`1F5E3` (unqualified) should match `speaking head` (🗣)" do
  if m = "🗣".match(Emoji::EMOJI_REGEX)
    "🗣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗣"
  else
    fail("`1F5E3` doesn't match `speaking head` (🗣)")
  end
end

it "`1F464` (fully-qualified) should match `bust in silhouette` (👤)" do
  if m = "👤".match(Emoji::EMOJI_REGEX)
    "👤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👤"
  else
    fail("`1F464` doesn't match `bust in silhouette` (👤)")
  end
end

it "`1F465` (fully-qualified) should match `busts in silhouette` (👥)" do
  if m = "👥".match(Emoji::EMOJI_REGEX)
    "👥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👥"
  else
    fail("`1F465` doesn't match `busts in silhouette` (👥)")
  end
end

it "`1F463` (fully-qualified) should match `footprints` (👣)" do
  if m = "👣".match(Emoji::EMOJI_REGEX)
    "👣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👣"
  else
    fail("`1F463` doesn't match `footprints` (👣)")
  end
end

it "`1F3FB` (component) should match `light skin tone` (🏻)" do
  if m = "🏻".match(Emoji::EMOJI_REGEX)
    "🏻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏻"
  else
    fail("`1F3FB` doesn't match `light skin tone` (🏻)")
  end
end

it "`1F3FC` (component) should match `medium-light skin tone` (🏼)" do
  if m = "🏼".match(Emoji::EMOJI_REGEX)
    "🏼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏼"
  else
    fail("`1F3FC` doesn't match `medium-light skin tone` (🏼)")
  end
end

it "`1F3FD` (component) should match `medium skin tone` (🏽)" do
  if m = "🏽".match(Emoji::EMOJI_REGEX)
    "🏽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏽"
  else
    fail("`1F3FD` doesn't match `medium skin tone` (🏽)")
  end
end

it "`1F3FE` (component) should match `medium-dark skin tone` (🏾)" do
  if m = "🏾".match(Emoji::EMOJI_REGEX)
    "🏾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏾"
  else
    fail("`1F3FE` doesn't match `medium-dark skin tone` (🏾)")
  end
end

it "`1F3FF` (component) should match `dark skin tone` (🏿)" do
  if m = "🏿".match(Emoji::EMOJI_REGEX)
    "🏿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏿"
  else
    fail("`1F3FF` doesn't match `dark skin tone` (🏿)")
  end
end

it "`1F9B0` (component) should match `red hair` (🦰)" do
  if m = "🦰".match(Emoji::EMOJI_REGEX)
    "🦰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦰"
  else
    fail("`1F9B0` doesn't match `red hair` (🦰)")
  end
end

it "`1F9B1` (component) should match `curly hair` (🦱)" do
  if m = "🦱".match(Emoji::EMOJI_REGEX)
    "🦱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦱"
  else
    fail("`1F9B1` doesn't match `curly hair` (🦱)")
  end
end

it "`1F9B3` (component) should match `white hair` (🦳)" do
  if m = "🦳".match(Emoji::EMOJI_REGEX)
    "🦳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦳"
  else
    fail("`1F9B3` doesn't match `white hair` (🦳)")
  end
end

it "`1F9B2` (component) should match `bald` (🦲)" do
  if m = "🦲".match(Emoji::EMOJI_REGEX)
    "🦲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦲"
  else
    fail("`1F9B2` doesn't match `bald` (🦲)")
  end
end

it "`1F435` (fully-qualified) should match `monkey face` (🐵)" do
  if m = "🐵".match(Emoji::EMOJI_REGEX)
    "🐵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐵"
  else
    fail("`1F435` doesn't match `monkey face` (🐵)")
  end
end

it "`1F412` (fully-qualified) should match `monkey` (🐒)" do
  if m = "🐒".match(Emoji::EMOJI_REGEX)
    "🐒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐒"
  else
    fail("`1F412` doesn't match `monkey` (🐒)")
  end
end

it "`1F98D` (fully-qualified) should match `gorilla` (🦍)" do
  if m = "🦍".match(Emoji::EMOJI_REGEX)
    "🦍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦍"
  else
    fail("`1F98D` doesn't match `gorilla` (🦍)")
  end
end

it "`1F9A7` (fully-qualified) should match `orangutan` (🦧)" do
  if m = "🦧".match(Emoji::EMOJI_REGEX)
    "🦧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦧"
  else
    fail("`1F9A7` doesn't match `orangutan` (🦧)")
  end
end

it "`1F436` (fully-qualified) should match `dog face` (🐶)" do
  if m = "🐶".match(Emoji::EMOJI_REGEX)
    "🐶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐶"
  else
    fail("`1F436` doesn't match `dog face` (🐶)")
  end
end

it "`1F415` (fully-qualified) should match `dog` (🐕)" do
  if m = "🐕".match(Emoji::EMOJI_REGEX)
    "🐕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐕"
  else
    fail("`1F415` doesn't match `dog` (🐕)")
  end
end

it "`1F9AE` (fully-qualified) should match `guide dog` (🦮)" do
  if m = "🦮".match(Emoji::EMOJI_REGEX)
    "🦮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦮"
  else
    fail("`1F9AE` doesn't match `guide dog` (🦮)")
  end
end

it "`1F415 200D 1F9BA` (fully-qualified) should match `service dog` (🐕‍🦺)" do
  if m = "🐕‍🦺".match(Emoji::EMOJI_REGEX)
    "🐕‍🦺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐕‍🦺"
  else
    fail("`1F415 200D 1F9BA` doesn't match `service dog` (🐕‍🦺)")
  end
end

it "`1F429` (fully-qualified) should match `poodle` (🐩)" do
  if m = "🐩".match(Emoji::EMOJI_REGEX)
    "🐩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐩"
  else
    fail("`1F429` doesn't match `poodle` (🐩)")
  end
end

it "`1F43A` (fully-qualified) should match `wolf` (🐺)" do
  if m = "🐺".match(Emoji::EMOJI_REGEX)
    "🐺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐺"
  else
    fail("`1F43A` doesn't match `wolf` (🐺)")
  end
end

it "`1F98A` (fully-qualified) should match `fox` (🦊)" do
  if m = "🦊".match(Emoji::EMOJI_REGEX)
    "🦊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦊"
  else
    fail("`1F98A` doesn't match `fox` (🦊)")
  end
end

it "`1F99D` (fully-qualified) should match `raccoon` (🦝)" do
  if m = "🦝".match(Emoji::EMOJI_REGEX)
    "🦝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦝"
  else
    fail("`1F99D` doesn't match `raccoon` (🦝)")
  end
end

it "`1F431` (fully-qualified) should match `cat face` (🐱)" do
  if m = "🐱".match(Emoji::EMOJI_REGEX)
    "🐱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐱"
  else
    fail("`1F431` doesn't match `cat face` (🐱)")
  end
end

it "`1F408` (fully-qualified) should match `cat` (🐈)" do
  if m = "🐈".match(Emoji::EMOJI_REGEX)
    "🐈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐈"
  else
    fail("`1F408` doesn't match `cat` (🐈)")
  end
end

it "`1F981` (fully-qualified) should match `lion` (🦁)" do
  if m = "🦁".match(Emoji::EMOJI_REGEX)
    "🦁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦁"
  else
    fail("`1F981` doesn't match `lion` (🦁)")
  end
end

it "`1F42F` (fully-qualified) should match `tiger face` (🐯)" do
  if m = "🐯".match(Emoji::EMOJI_REGEX)
    "🐯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐯"
  else
    fail("`1F42F` doesn't match `tiger face` (🐯)")
  end
end

it "`1F405` (fully-qualified) should match `tiger` (🐅)" do
  if m = "🐅".match(Emoji::EMOJI_REGEX)
    "🐅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐅"
  else
    fail("`1F405` doesn't match `tiger` (🐅)")
  end
end

it "`1F406` (fully-qualified) should match `leopard` (🐆)" do
  if m = "🐆".match(Emoji::EMOJI_REGEX)
    "🐆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐆"
  else
    fail("`1F406` doesn't match `leopard` (🐆)")
  end
end

it "`1F434` (fully-qualified) should match `horse face` (🐴)" do
  if m = "🐴".match(Emoji::EMOJI_REGEX)
    "🐴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐴"
  else
    fail("`1F434` doesn't match `horse face` (🐴)")
  end
end

it "`1F40E` (fully-qualified) should match `horse` (🐎)" do
  if m = "🐎".match(Emoji::EMOJI_REGEX)
    "🐎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐎"
  else
    fail("`1F40E` doesn't match `horse` (🐎)")
  end
end

it "`1F984` (fully-qualified) should match `unicorn` (🦄)" do
  if m = "🦄".match(Emoji::EMOJI_REGEX)
    "🦄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦄"
  else
    fail("`1F984` doesn't match `unicorn` (🦄)")
  end
end

it "`1F993` (fully-qualified) should match `zebra` (🦓)" do
  if m = "🦓".match(Emoji::EMOJI_REGEX)
    "🦓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦓"
  else
    fail("`1F993` doesn't match `zebra` (🦓)")
  end
end

it "`1F98C` (fully-qualified) should match `deer` (🦌)" do
  if m = "🦌".match(Emoji::EMOJI_REGEX)
    "🦌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦌"
  else
    fail("`1F98C` doesn't match `deer` (🦌)")
  end
end

it "`1F42E` (fully-qualified) should match `cow face` (🐮)" do
  if m = "🐮".match(Emoji::EMOJI_REGEX)
    "🐮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐮"
  else
    fail("`1F42E` doesn't match `cow face` (🐮)")
  end
end

it "`1F402` (fully-qualified) should match `ox` (🐂)" do
  if m = "🐂".match(Emoji::EMOJI_REGEX)
    "🐂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐂"
  else
    fail("`1F402` doesn't match `ox` (🐂)")
  end
end

it "`1F403` (fully-qualified) should match `water buffalo` (🐃)" do
  if m = "🐃".match(Emoji::EMOJI_REGEX)
    "🐃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐃"
  else
    fail("`1F403` doesn't match `water buffalo` (🐃)")
  end
end

it "`1F404` (fully-qualified) should match `cow` (🐄)" do
  if m = "🐄".match(Emoji::EMOJI_REGEX)
    "🐄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐄"
  else
    fail("`1F404` doesn't match `cow` (🐄)")
  end
end

it "`1F437` (fully-qualified) should match `pig face` (🐷)" do
  if m = "🐷".match(Emoji::EMOJI_REGEX)
    "🐷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐷"
  else
    fail("`1F437` doesn't match `pig face` (🐷)")
  end
end

it "`1F416` (fully-qualified) should match `pig` (🐖)" do
  if m = "🐖".match(Emoji::EMOJI_REGEX)
    "🐖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐖"
  else
    fail("`1F416` doesn't match `pig` (🐖)")
  end
end

it "`1F417` (fully-qualified) should match `boar` (🐗)" do
  if m = "🐗".match(Emoji::EMOJI_REGEX)
    "🐗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐗"
  else
    fail("`1F417` doesn't match `boar` (🐗)")
  end
end

it "`1F43D` (fully-qualified) should match `pig nose` (🐽)" do
  if m = "🐽".match(Emoji::EMOJI_REGEX)
    "🐽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐽"
  else
    fail("`1F43D` doesn't match `pig nose` (🐽)")
  end
end

it "`1F40F` (fully-qualified) should match `ram` (🐏)" do
  if m = "🐏".match(Emoji::EMOJI_REGEX)
    "🐏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐏"
  else
    fail("`1F40F` doesn't match `ram` (🐏)")
  end
end

it "`1F411` (fully-qualified) should match `ewe` (🐑)" do
  if m = "🐑".match(Emoji::EMOJI_REGEX)
    "🐑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐑"
  else
    fail("`1F411` doesn't match `ewe` (🐑)")
  end
end

it "`1F410` (fully-qualified) should match `goat` (🐐)" do
  if m = "🐐".match(Emoji::EMOJI_REGEX)
    "🐐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐐"
  else
    fail("`1F410` doesn't match `goat` (🐐)")
  end
end

it "`1F42A` (fully-qualified) should match `camel` (🐪)" do
  if m = "🐪".match(Emoji::EMOJI_REGEX)
    "🐪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐪"
  else
    fail("`1F42A` doesn't match `camel` (🐪)")
  end
end

it "`1F42B` (fully-qualified) should match `two-hump camel` (🐫)" do
  if m = "🐫".match(Emoji::EMOJI_REGEX)
    "🐫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐫"
  else
    fail("`1F42B` doesn't match `two-hump camel` (🐫)")
  end
end

it "`1F999` (fully-qualified) should match `llama` (🦙)" do
  if m = "🦙".match(Emoji::EMOJI_REGEX)
    "🦙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦙"
  else
    fail("`1F999` doesn't match `llama` (🦙)")
  end
end

it "`1F992` (fully-qualified) should match `giraffe` (🦒)" do
  if m = "🦒".match(Emoji::EMOJI_REGEX)
    "🦒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦒"
  else
    fail("`1F992` doesn't match `giraffe` (🦒)")
  end
end

it "`1F418` (fully-qualified) should match `elephant` (🐘)" do
  if m = "🐘".match(Emoji::EMOJI_REGEX)
    "🐘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐘"
  else
    fail("`1F418` doesn't match `elephant` (🐘)")
  end
end

it "`1F98F` (fully-qualified) should match `rhinoceros` (🦏)" do
  if m = "🦏".match(Emoji::EMOJI_REGEX)
    "🦏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦏"
  else
    fail("`1F98F` doesn't match `rhinoceros` (🦏)")
  end
end

it "`1F99B` (fully-qualified) should match `hippopotamus` (🦛)" do
  if m = "🦛".match(Emoji::EMOJI_REGEX)
    "🦛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦛"
  else
    fail("`1F99B` doesn't match `hippopotamus` (🦛)")
  end
end

it "`1F42D` (fully-qualified) should match `mouse face` (🐭)" do
  if m = "🐭".match(Emoji::EMOJI_REGEX)
    "🐭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐭"
  else
    fail("`1F42D` doesn't match `mouse face` (🐭)")
  end
end

it "`1F401` (fully-qualified) should match `mouse` (🐁)" do
  if m = "🐁".match(Emoji::EMOJI_REGEX)
    "🐁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐁"
  else
    fail("`1F401` doesn't match `mouse` (🐁)")
  end
end

it "`1F400` (fully-qualified) should match `rat` (🐀)" do
  if m = "🐀".match(Emoji::EMOJI_REGEX)
    "🐀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐀"
  else
    fail("`1F400` doesn't match `rat` (🐀)")
  end
end

it "`1F439` (fully-qualified) should match `hamster` (🐹)" do
  if m = "🐹".match(Emoji::EMOJI_REGEX)
    "🐹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐹"
  else
    fail("`1F439` doesn't match `hamster` (🐹)")
  end
end

it "`1F430` (fully-qualified) should match `rabbit face` (🐰)" do
  if m = "🐰".match(Emoji::EMOJI_REGEX)
    "🐰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐰"
  else
    fail("`1F430` doesn't match `rabbit face` (🐰)")
  end
end

it "`1F407` (fully-qualified) should match `rabbit` (🐇)" do
  if m = "🐇".match(Emoji::EMOJI_REGEX)
    "🐇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐇"
  else
    fail("`1F407` doesn't match `rabbit` (🐇)")
  end
end

it "`1F43F FE0F` (fully-qualified) should match `chipmunk` (🐿️)" do
  if m = "🐿️".match(Emoji::EMOJI_REGEX)
    "🐿️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐿️"
  else
    fail("`1F43F FE0F` doesn't match `chipmunk` (🐿️)")
  end
end

it "`1F43F` (unqualified) should match `chipmunk` (🐿)" do
  if m = "🐿".match(Emoji::EMOJI_REGEX)
    "🐿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐿"
  else
    fail("`1F43F` doesn't match `chipmunk` (🐿)")
  end
end

it "`1F994` (fully-qualified) should match `hedgehog` (🦔)" do
  if m = "🦔".match(Emoji::EMOJI_REGEX)
    "🦔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦔"
  else
    fail("`1F994` doesn't match `hedgehog` (🦔)")
  end
end

it "`1F987` (fully-qualified) should match `bat` (🦇)" do
  if m = "🦇".match(Emoji::EMOJI_REGEX)
    "🦇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦇"
  else
    fail("`1F987` doesn't match `bat` (🦇)")
  end
end

it "`1F43B` (fully-qualified) should match `bear` (🐻)" do
  if m = "🐻".match(Emoji::EMOJI_REGEX)
    "🐻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐻"
  else
    fail("`1F43B` doesn't match `bear` (🐻)")
  end
end

it "`1F428` (fully-qualified) should match `koala` (🐨)" do
  if m = "🐨".match(Emoji::EMOJI_REGEX)
    "🐨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐨"
  else
    fail("`1F428` doesn't match `koala` (🐨)")
  end
end

it "`1F43C` (fully-qualified) should match `panda` (🐼)" do
  if m = "🐼".match(Emoji::EMOJI_REGEX)
    "🐼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐼"
  else
    fail("`1F43C` doesn't match `panda` (🐼)")
  end
end

it "`1F9A5` (fully-qualified) should match `sloth` (🦥)" do
  if m = "🦥".match(Emoji::EMOJI_REGEX)
    "🦥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦥"
  else
    fail("`1F9A5` doesn't match `sloth` (🦥)")
  end
end

it "`1F9A6` (fully-qualified) should match `otter` (🦦)" do
  if m = "🦦".match(Emoji::EMOJI_REGEX)
    "🦦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦦"
  else
    fail("`1F9A6` doesn't match `otter` (🦦)")
  end
end

it "`1F9A8` (fully-qualified) should match `skunk` (🦨)" do
  if m = "🦨".match(Emoji::EMOJI_REGEX)
    "🦨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦨"
  else
    fail("`1F9A8` doesn't match `skunk` (🦨)")
  end
end

it "`1F998` (fully-qualified) should match `kangaroo` (🦘)" do
  if m = "🦘".match(Emoji::EMOJI_REGEX)
    "🦘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦘"
  else
    fail("`1F998` doesn't match `kangaroo` (🦘)")
  end
end

it "`1F9A1` (fully-qualified) should match `badger` (🦡)" do
  if m = "🦡".match(Emoji::EMOJI_REGEX)
    "🦡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦡"
  else
    fail("`1F9A1` doesn't match `badger` (🦡)")
  end
end

it "`1F43E` (fully-qualified) should match `paw prints` (🐾)" do
  if m = "🐾".match(Emoji::EMOJI_REGEX)
    "🐾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐾"
  else
    fail("`1F43E` doesn't match `paw prints` (🐾)")
  end
end

it "`1F983` (fully-qualified) should match `turkey` (🦃)" do
  if m = "🦃".match(Emoji::EMOJI_REGEX)
    "🦃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦃"
  else
    fail("`1F983` doesn't match `turkey` (🦃)")
  end
end

it "`1F414` (fully-qualified) should match `chicken` (🐔)" do
  if m = "🐔".match(Emoji::EMOJI_REGEX)
    "🐔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐔"
  else
    fail("`1F414` doesn't match `chicken` (🐔)")
  end
end

it "`1F413` (fully-qualified) should match `rooster` (🐓)" do
  if m = "🐓".match(Emoji::EMOJI_REGEX)
    "🐓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐓"
  else
    fail("`1F413` doesn't match `rooster` (🐓)")
  end
end

it "`1F423` (fully-qualified) should match `hatching chick` (🐣)" do
  if m = "🐣".match(Emoji::EMOJI_REGEX)
    "🐣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐣"
  else
    fail("`1F423` doesn't match `hatching chick` (🐣)")
  end
end

it "`1F424` (fully-qualified) should match `baby chick` (🐤)" do
  if m = "🐤".match(Emoji::EMOJI_REGEX)
    "🐤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐤"
  else
    fail("`1F424` doesn't match `baby chick` (🐤)")
  end
end

it "`1F425` (fully-qualified) should match `front-facing baby chick` (🐥)" do
  if m = "🐥".match(Emoji::EMOJI_REGEX)
    "🐥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐥"
  else
    fail("`1F425` doesn't match `front-facing baby chick` (🐥)")
  end
end

it "`1F426` (fully-qualified) should match `bird` (🐦)" do
  if m = "🐦".match(Emoji::EMOJI_REGEX)
    "🐦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐦"
  else
    fail("`1F426` doesn't match `bird` (🐦)")
  end
end

it "`1F427` (fully-qualified) should match `penguin` (🐧)" do
  if m = "🐧".match(Emoji::EMOJI_REGEX)
    "🐧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐧"
  else
    fail("`1F427` doesn't match `penguin` (🐧)")
  end
end

it "`1F54A FE0F` (fully-qualified) should match `dove` (🕊️)" do
  if m = "🕊️".match(Emoji::EMOJI_REGEX)
    "🕊️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕊️"
  else
    fail("`1F54A FE0F` doesn't match `dove` (🕊️)")
  end
end

it "`1F54A` (unqualified) should match `dove` (🕊)" do
  if m = "🕊".match(Emoji::EMOJI_REGEX)
    "🕊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕊"
  else
    fail("`1F54A` doesn't match `dove` (🕊)")
  end
end

it "`1F985` (fully-qualified) should match `eagle` (🦅)" do
  if m = "🦅".match(Emoji::EMOJI_REGEX)
    "🦅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦅"
  else
    fail("`1F985` doesn't match `eagle` (🦅)")
  end
end

it "`1F986` (fully-qualified) should match `duck` (🦆)" do
  if m = "🦆".match(Emoji::EMOJI_REGEX)
    "🦆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦆"
  else
    fail("`1F986` doesn't match `duck` (🦆)")
  end
end

it "`1F9A2` (fully-qualified) should match `swan` (🦢)" do
  if m = "🦢".match(Emoji::EMOJI_REGEX)
    "🦢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦢"
  else
    fail("`1F9A2` doesn't match `swan` (🦢)")
  end
end

it "`1F989` (fully-qualified) should match `owl` (🦉)" do
  if m = "🦉".match(Emoji::EMOJI_REGEX)
    "🦉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦉"
  else
    fail("`1F989` doesn't match `owl` (🦉)")
  end
end

it "`1F9A9` (fully-qualified) should match `flamingo` (🦩)" do
  if m = "🦩".match(Emoji::EMOJI_REGEX)
    "🦩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦩"
  else
    fail("`1F9A9` doesn't match `flamingo` (🦩)")
  end
end

it "`1F99A` (fully-qualified) should match `peacock` (🦚)" do
  if m = "🦚".match(Emoji::EMOJI_REGEX)
    "🦚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦚"
  else
    fail("`1F99A` doesn't match `peacock` (🦚)")
  end
end

it "`1F99C` (fully-qualified) should match `parrot` (🦜)" do
  if m = "🦜".match(Emoji::EMOJI_REGEX)
    "🦜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦜"
  else
    fail("`1F99C` doesn't match `parrot` (🦜)")
  end
end

it "`1F438` (fully-qualified) should match `frog` (🐸)" do
  if m = "🐸".match(Emoji::EMOJI_REGEX)
    "🐸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐸"
  else
    fail("`1F438` doesn't match `frog` (🐸)")
  end
end

it "`1F40A` (fully-qualified) should match `crocodile` (🐊)" do
  if m = "🐊".match(Emoji::EMOJI_REGEX)
    "🐊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐊"
  else
    fail("`1F40A` doesn't match `crocodile` (🐊)")
  end
end

it "`1F422` (fully-qualified) should match `turtle` (🐢)" do
  if m = "🐢".match(Emoji::EMOJI_REGEX)
    "🐢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐢"
  else
    fail("`1F422` doesn't match `turtle` (🐢)")
  end
end

it "`1F98E` (fully-qualified) should match `lizard` (🦎)" do
  if m = "🦎".match(Emoji::EMOJI_REGEX)
    "🦎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦎"
  else
    fail("`1F98E` doesn't match `lizard` (🦎)")
  end
end

it "`1F40D` (fully-qualified) should match `snake` (🐍)" do
  if m = "🐍".match(Emoji::EMOJI_REGEX)
    "🐍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐍"
  else
    fail("`1F40D` doesn't match `snake` (🐍)")
  end
end

it "`1F432` (fully-qualified) should match `dragon face` (🐲)" do
  if m = "🐲".match(Emoji::EMOJI_REGEX)
    "🐲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐲"
  else
    fail("`1F432` doesn't match `dragon face` (🐲)")
  end
end

it "`1F409` (fully-qualified) should match `dragon` (🐉)" do
  if m = "🐉".match(Emoji::EMOJI_REGEX)
    "🐉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐉"
  else
    fail("`1F409` doesn't match `dragon` (🐉)")
  end
end

it "`1F995` (fully-qualified) should match `sauropod` (🦕)" do
  if m = "🦕".match(Emoji::EMOJI_REGEX)
    "🦕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦕"
  else
    fail("`1F995` doesn't match `sauropod` (🦕)")
  end
end

it "`1F996` (fully-qualified) should match `T-Rex` (🦖)" do
  if m = "🦖".match(Emoji::EMOJI_REGEX)
    "🦖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦖"
  else
    fail("`1F996` doesn't match `T-Rex` (🦖)")
  end
end

it "`1F433` (fully-qualified) should match `spouting whale` (🐳)" do
  if m = "🐳".match(Emoji::EMOJI_REGEX)
    "🐳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐳"
  else
    fail("`1F433` doesn't match `spouting whale` (🐳)")
  end
end

it "`1F40B` (fully-qualified) should match `whale` (🐋)" do
  if m = "🐋".match(Emoji::EMOJI_REGEX)
    "🐋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐋"
  else
    fail("`1F40B` doesn't match `whale` (🐋)")
  end
end

it "`1F42C` (fully-qualified) should match `dolphin` (🐬)" do
  if m = "🐬".match(Emoji::EMOJI_REGEX)
    "🐬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐬"
  else
    fail("`1F42C` doesn't match `dolphin` (🐬)")
  end
end

it "`1F41F` (fully-qualified) should match `fish` (🐟)" do
  if m = "🐟".match(Emoji::EMOJI_REGEX)
    "🐟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐟"
  else
    fail("`1F41F` doesn't match `fish` (🐟)")
  end
end

it "`1F420` (fully-qualified) should match `tropical fish` (🐠)" do
  if m = "🐠".match(Emoji::EMOJI_REGEX)
    "🐠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐠"
  else
    fail("`1F420` doesn't match `tropical fish` (🐠)")
  end
end

it "`1F421` (fully-qualified) should match `blowfish` (🐡)" do
  if m = "🐡".match(Emoji::EMOJI_REGEX)
    "🐡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐡"
  else
    fail("`1F421` doesn't match `blowfish` (🐡)")
  end
end

it "`1F988` (fully-qualified) should match `shark` (🦈)" do
  if m = "🦈".match(Emoji::EMOJI_REGEX)
    "🦈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦈"
  else
    fail("`1F988` doesn't match `shark` (🦈)")
  end
end

it "`1F419` (fully-qualified) should match `octopus` (🐙)" do
  if m = "🐙".match(Emoji::EMOJI_REGEX)
    "🐙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐙"
  else
    fail("`1F419` doesn't match `octopus` (🐙)")
  end
end

it "`1F41A` (fully-qualified) should match `spiral shell` (🐚)" do
  if m = "🐚".match(Emoji::EMOJI_REGEX)
    "🐚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐚"
  else
    fail("`1F41A` doesn't match `spiral shell` (🐚)")
  end
end

it "`1F40C` (fully-qualified) should match `snail` (🐌)" do
  if m = "🐌".match(Emoji::EMOJI_REGEX)
    "🐌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐌"
  else
    fail("`1F40C` doesn't match `snail` (🐌)")
  end
end

it "`1F98B` (fully-qualified) should match `butterfly` (🦋)" do
  if m = "🦋".match(Emoji::EMOJI_REGEX)
    "🦋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦋"
  else
    fail("`1F98B` doesn't match `butterfly` (🦋)")
  end
end

it "`1F41B` (fully-qualified) should match `bug` (🐛)" do
  if m = "🐛".match(Emoji::EMOJI_REGEX)
    "🐛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐛"
  else
    fail("`1F41B` doesn't match `bug` (🐛)")
  end
end

it "`1F41C` (fully-qualified) should match `ant` (🐜)" do
  if m = "🐜".match(Emoji::EMOJI_REGEX)
    "🐜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐜"
  else
    fail("`1F41C` doesn't match `ant` (🐜)")
  end
end

it "`1F41D` (fully-qualified) should match `honeybee` (🐝)" do
  if m = "🐝".match(Emoji::EMOJI_REGEX)
    "🐝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐝"
  else
    fail("`1F41D` doesn't match `honeybee` (🐝)")
  end
end

it "`1F41E` (fully-qualified) should match `lady beetle` (🐞)" do
  if m = "🐞".match(Emoji::EMOJI_REGEX)
    "🐞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🐞"
  else
    fail("`1F41E` doesn't match `lady beetle` (🐞)")
  end
end

it "`1F997` (fully-qualified) should match `cricket` (🦗)" do
  if m = "🦗".match(Emoji::EMOJI_REGEX)
    "🦗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦗"
  else
    fail("`1F997` doesn't match `cricket` (🦗)")
  end
end

it "`1F577 FE0F` (fully-qualified) should match `spider` (🕷️)" do
  if m = "🕷️".match(Emoji::EMOJI_REGEX)
    "🕷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕷️"
  else
    fail("`1F577 FE0F` doesn't match `spider` (🕷️)")
  end
end

it "`1F577` (unqualified) should match `spider` (🕷)" do
  if m = "🕷".match(Emoji::EMOJI_REGEX)
    "🕷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕷"
  else
    fail("`1F577` doesn't match `spider` (🕷)")
  end
end

it "`1F578 FE0F` (fully-qualified) should match `spider web` (🕸️)" do
  if m = "🕸️".match(Emoji::EMOJI_REGEX)
    "🕸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕸️"
  else
    fail("`1F578 FE0F` doesn't match `spider web` (🕸️)")
  end
end

it "`1F578` (unqualified) should match `spider web` (🕸)" do
  if m = "🕸".match(Emoji::EMOJI_REGEX)
    "🕸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕸"
  else
    fail("`1F578` doesn't match `spider web` (🕸)")
  end
end

it "`1F982` (fully-qualified) should match `scorpion` (🦂)" do
  if m = "🦂".match(Emoji::EMOJI_REGEX)
    "🦂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦂"
  else
    fail("`1F982` doesn't match `scorpion` (🦂)")
  end
end

it "`1F99F` (fully-qualified) should match `mosquito` (🦟)" do
  if m = "🦟".match(Emoji::EMOJI_REGEX)
    "🦟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦟"
  else
    fail("`1F99F` doesn't match `mosquito` (🦟)")
  end
end

it "`1F9A0` (fully-qualified) should match `microbe` (🦠)" do
  if m = "🦠".match(Emoji::EMOJI_REGEX)
    "🦠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦠"
  else
    fail("`1F9A0` doesn't match `microbe` (🦠)")
  end
end

it "`1F490` (fully-qualified) should match `bouquet` (💐)" do
  if m = "💐".match(Emoji::EMOJI_REGEX)
    "💐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💐"
  else
    fail("`1F490` doesn't match `bouquet` (💐)")
  end
end

it "`1F338` (fully-qualified) should match `cherry blossom` (🌸)" do
  if m = "🌸".match(Emoji::EMOJI_REGEX)
    "🌸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌸"
  else
    fail("`1F338` doesn't match `cherry blossom` (🌸)")
  end
end

it "`1F4AE` (fully-qualified) should match `white flower` (💮)" do
  if m = "💮".match(Emoji::EMOJI_REGEX)
    "💮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💮"
  else
    fail("`1F4AE` doesn't match `white flower` (💮)")
  end
end

it "`1F3F5 FE0F` (fully-qualified) should match `rosette` (🏵️)" do
  if m = "🏵️".match(Emoji::EMOJI_REGEX)
    "🏵️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏵️"
  else
    fail("`1F3F5 FE0F` doesn't match `rosette` (🏵️)")
  end
end

it "`1F3F5` (unqualified) should match `rosette` (🏵)" do
  if m = "🏵".match(Emoji::EMOJI_REGEX)
    "🏵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏵"
  else
    fail("`1F3F5` doesn't match `rosette` (🏵)")
  end
end

it "`1F339` (fully-qualified) should match `rose` (🌹)" do
  if m = "🌹".match(Emoji::EMOJI_REGEX)
    "🌹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌹"
  else
    fail("`1F339` doesn't match `rose` (🌹)")
  end
end

it "`1F940` (fully-qualified) should match `wilted flower` (🥀)" do
  if m = "🥀".match(Emoji::EMOJI_REGEX)
    "🥀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥀"
  else
    fail("`1F940` doesn't match `wilted flower` (🥀)")
  end
end

it "`1F33A` (fully-qualified) should match `hibiscus` (🌺)" do
  if m = "🌺".match(Emoji::EMOJI_REGEX)
    "🌺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌺"
  else
    fail("`1F33A` doesn't match `hibiscus` (🌺)")
  end
end

it "`1F33B` (fully-qualified) should match `sunflower` (🌻)" do
  if m = "🌻".match(Emoji::EMOJI_REGEX)
    "🌻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌻"
  else
    fail("`1F33B` doesn't match `sunflower` (🌻)")
  end
end

it "`1F33C` (fully-qualified) should match `blossom` (🌼)" do
  if m = "🌼".match(Emoji::EMOJI_REGEX)
    "🌼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌼"
  else
    fail("`1F33C` doesn't match `blossom` (🌼)")
  end
end

it "`1F337` (fully-qualified) should match `tulip` (🌷)" do
  if m = "🌷".match(Emoji::EMOJI_REGEX)
    "🌷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌷"
  else
    fail("`1F337` doesn't match `tulip` (🌷)")
  end
end

it "`1F331` (fully-qualified) should match `seedling` (🌱)" do
  if m = "🌱".match(Emoji::EMOJI_REGEX)
    "🌱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌱"
  else
    fail("`1F331` doesn't match `seedling` (🌱)")
  end
end

it "`1F332` (fully-qualified) should match `evergreen tree` (🌲)" do
  if m = "🌲".match(Emoji::EMOJI_REGEX)
    "🌲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌲"
  else
    fail("`1F332` doesn't match `evergreen tree` (🌲)")
  end
end

it "`1F333` (fully-qualified) should match `deciduous tree` (🌳)" do
  if m = "🌳".match(Emoji::EMOJI_REGEX)
    "🌳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌳"
  else
    fail("`1F333` doesn't match `deciduous tree` (🌳)")
  end
end

it "`1F334` (fully-qualified) should match `palm tree` (🌴)" do
  if m = "🌴".match(Emoji::EMOJI_REGEX)
    "🌴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌴"
  else
    fail("`1F334` doesn't match `palm tree` (🌴)")
  end
end

it "`1F335` (fully-qualified) should match `cactus` (🌵)" do
  if m = "🌵".match(Emoji::EMOJI_REGEX)
    "🌵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌵"
  else
    fail("`1F335` doesn't match `cactus` (🌵)")
  end
end

it "`1F33E` (fully-qualified) should match `sheaf of rice` (🌾)" do
  if m = "🌾".match(Emoji::EMOJI_REGEX)
    "🌾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌾"
  else
    fail("`1F33E` doesn't match `sheaf of rice` (🌾)")
  end
end

it "`1F33F` (fully-qualified) should match `herb` (🌿)" do
  if m = "🌿".match(Emoji::EMOJI_REGEX)
    "🌿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌿"
  else
    fail("`1F33F` doesn't match `herb` (🌿)")
  end
end

it "`2618 FE0F` (fully-qualified) should match `shamrock` (☘️)" do
  if m = "☘️".match(Emoji::EMOJI_REGEX)
    "☘️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☘️"
  else
    fail("`2618 FE0F` doesn't match `shamrock` (☘️)")
  end
end

it "`2618` (unqualified) should match `shamrock` (☘)" do
  if m = "☘".match(Emoji::EMOJI_REGEX)
    "☘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☘"
  else
    fail("`2618` doesn't match `shamrock` (☘)")
  end
end

it "`1F340` (fully-qualified) should match `four leaf clover` (🍀)" do
  if m = "🍀".match(Emoji::EMOJI_REGEX)
    "🍀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍀"
  else
    fail("`1F340` doesn't match `four leaf clover` (🍀)")
  end
end

it "`1F341` (fully-qualified) should match `maple leaf` (🍁)" do
  if m = "🍁".match(Emoji::EMOJI_REGEX)
    "🍁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍁"
  else
    fail("`1F341` doesn't match `maple leaf` (🍁)")
  end
end

it "`1F342` (fully-qualified) should match `fallen leaf` (🍂)" do
  if m = "🍂".match(Emoji::EMOJI_REGEX)
    "🍂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍂"
  else
    fail("`1F342` doesn't match `fallen leaf` (🍂)")
  end
end

it "`1F343` (fully-qualified) should match `leaf fluttering in wind` (🍃)" do
  if m = "🍃".match(Emoji::EMOJI_REGEX)
    "🍃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍃"
  else
    fail("`1F343` doesn't match `leaf fluttering in wind` (🍃)")
  end
end

it "`1F347` (fully-qualified) should match `grapes` (🍇)" do
  if m = "🍇".match(Emoji::EMOJI_REGEX)
    "🍇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍇"
  else
    fail("`1F347` doesn't match `grapes` (🍇)")
  end
end

it "`1F348` (fully-qualified) should match `melon` (🍈)" do
  if m = "🍈".match(Emoji::EMOJI_REGEX)
    "🍈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍈"
  else
    fail("`1F348` doesn't match `melon` (🍈)")
  end
end

it "`1F349` (fully-qualified) should match `watermelon` (🍉)" do
  if m = "🍉".match(Emoji::EMOJI_REGEX)
    "🍉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍉"
  else
    fail("`1F349` doesn't match `watermelon` (🍉)")
  end
end

it "`1F34A` (fully-qualified) should match `tangerine` (🍊)" do
  if m = "🍊".match(Emoji::EMOJI_REGEX)
    "🍊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍊"
  else
    fail("`1F34A` doesn't match `tangerine` (🍊)")
  end
end

it "`1F34B` (fully-qualified) should match `lemon` (🍋)" do
  if m = "🍋".match(Emoji::EMOJI_REGEX)
    "🍋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍋"
  else
    fail("`1F34B` doesn't match `lemon` (🍋)")
  end
end

it "`1F34C` (fully-qualified) should match `banana` (🍌)" do
  if m = "🍌".match(Emoji::EMOJI_REGEX)
    "🍌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍌"
  else
    fail("`1F34C` doesn't match `banana` (🍌)")
  end
end

it "`1F34D` (fully-qualified) should match `pineapple` (🍍)" do
  if m = "🍍".match(Emoji::EMOJI_REGEX)
    "🍍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍍"
  else
    fail("`1F34D` doesn't match `pineapple` (🍍)")
  end
end

it "`1F96D` (fully-qualified) should match `mango` (🥭)" do
  if m = "🥭".match(Emoji::EMOJI_REGEX)
    "🥭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥭"
  else
    fail("`1F96D` doesn't match `mango` (🥭)")
  end
end

it "`1F34E` (fully-qualified) should match `red apple` (🍎)" do
  if m = "🍎".match(Emoji::EMOJI_REGEX)
    "🍎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍎"
  else
    fail("`1F34E` doesn't match `red apple` (🍎)")
  end
end

it "`1F34F` (fully-qualified) should match `green apple` (🍏)" do
  if m = "🍏".match(Emoji::EMOJI_REGEX)
    "🍏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍏"
  else
    fail("`1F34F` doesn't match `green apple` (🍏)")
  end
end

it "`1F350` (fully-qualified) should match `pear` (🍐)" do
  if m = "🍐".match(Emoji::EMOJI_REGEX)
    "🍐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍐"
  else
    fail("`1F350` doesn't match `pear` (🍐)")
  end
end

it "`1F351` (fully-qualified) should match `peach` (🍑)" do
  if m = "🍑".match(Emoji::EMOJI_REGEX)
    "🍑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍑"
  else
    fail("`1F351` doesn't match `peach` (🍑)")
  end
end

it "`1F352` (fully-qualified) should match `cherries` (🍒)" do
  if m = "🍒".match(Emoji::EMOJI_REGEX)
    "🍒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍒"
  else
    fail("`1F352` doesn't match `cherries` (🍒)")
  end
end

it "`1F353` (fully-qualified) should match `strawberry` (🍓)" do
  if m = "🍓".match(Emoji::EMOJI_REGEX)
    "🍓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍓"
  else
    fail("`1F353` doesn't match `strawberry` (🍓)")
  end
end

it "`1F95D` (fully-qualified) should match `kiwi fruit` (🥝)" do
  if m = "🥝".match(Emoji::EMOJI_REGEX)
    "🥝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥝"
  else
    fail("`1F95D` doesn't match `kiwi fruit` (🥝)")
  end
end

it "`1F345` (fully-qualified) should match `tomato` (🍅)" do
  if m = "🍅".match(Emoji::EMOJI_REGEX)
    "🍅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍅"
  else
    fail("`1F345` doesn't match `tomato` (🍅)")
  end
end

it "`1F965` (fully-qualified) should match `coconut` (🥥)" do
  if m = "🥥".match(Emoji::EMOJI_REGEX)
    "🥥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥥"
  else
    fail("`1F965` doesn't match `coconut` (🥥)")
  end
end

it "`1F951` (fully-qualified) should match `avocado` (🥑)" do
  if m = "🥑".match(Emoji::EMOJI_REGEX)
    "🥑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥑"
  else
    fail("`1F951` doesn't match `avocado` (🥑)")
  end
end

it "`1F346` (fully-qualified) should match `eggplant` (🍆)" do
  if m = "🍆".match(Emoji::EMOJI_REGEX)
    "🍆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍆"
  else
    fail("`1F346` doesn't match `eggplant` (🍆)")
  end
end

it "`1F954` (fully-qualified) should match `potato` (🥔)" do
  if m = "🥔".match(Emoji::EMOJI_REGEX)
    "🥔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥔"
  else
    fail("`1F954` doesn't match `potato` (🥔)")
  end
end

it "`1F955` (fully-qualified) should match `carrot` (🥕)" do
  if m = "🥕".match(Emoji::EMOJI_REGEX)
    "🥕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥕"
  else
    fail("`1F955` doesn't match `carrot` (🥕)")
  end
end

it "`1F33D` (fully-qualified) should match `ear of corn` (🌽)" do
  if m = "🌽".match(Emoji::EMOJI_REGEX)
    "🌽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌽"
  else
    fail("`1F33D` doesn't match `ear of corn` (🌽)")
  end
end

it "`1F336 FE0F` (fully-qualified) should match `hot pepper` (🌶️)" do
  if m = "🌶️".match(Emoji::EMOJI_REGEX)
    "🌶️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌶️"
  else
    fail("`1F336 FE0F` doesn't match `hot pepper` (🌶️)")
  end
end

it "`1F336` (unqualified) should match `hot pepper` (🌶)" do
  if m = "🌶".match(Emoji::EMOJI_REGEX)
    "🌶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌶"
  else
    fail("`1F336` doesn't match `hot pepper` (🌶)")
  end
end

it "`1F952` (fully-qualified) should match `cucumber` (🥒)" do
  if m = "🥒".match(Emoji::EMOJI_REGEX)
    "🥒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥒"
  else
    fail("`1F952` doesn't match `cucumber` (🥒)")
  end
end

it "`1F96C` (fully-qualified) should match `leafy green` (🥬)" do
  if m = "🥬".match(Emoji::EMOJI_REGEX)
    "🥬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥬"
  else
    fail("`1F96C` doesn't match `leafy green` (🥬)")
  end
end

it "`1F966` (fully-qualified) should match `broccoli` (🥦)" do
  if m = "🥦".match(Emoji::EMOJI_REGEX)
    "🥦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥦"
  else
    fail("`1F966` doesn't match `broccoli` (🥦)")
  end
end

it "`1F9C4` (fully-qualified) should match `garlic` (🧄)" do
  if m = "🧄".match(Emoji::EMOJI_REGEX)
    "🧄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧄"
  else
    fail("`1F9C4` doesn't match `garlic` (🧄)")
  end
end

it "`1F9C5` (fully-qualified) should match `onion` (🧅)" do
  if m = "🧅".match(Emoji::EMOJI_REGEX)
    "🧅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧅"
  else
    fail("`1F9C5` doesn't match `onion` (🧅)")
  end
end

it "`1F344` (fully-qualified) should match `mushroom` (🍄)" do
  if m = "🍄".match(Emoji::EMOJI_REGEX)
    "🍄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍄"
  else
    fail("`1F344` doesn't match `mushroom` (🍄)")
  end
end

it "`1F95C` (fully-qualified) should match `peanuts` (🥜)" do
  if m = "🥜".match(Emoji::EMOJI_REGEX)
    "🥜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥜"
  else
    fail("`1F95C` doesn't match `peanuts` (🥜)")
  end
end

it "`1F330` (fully-qualified) should match `chestnut` (🌰)" do
  if m = "🌰".match(Emoji::EMOJI_REGEX)
    "🌰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌰"
  else
    fail("`1F330` doesn't match `chestnut` (🌰)")
  end
end

it "`1F35E` (fully-qualified) should match `bread` (🍞)" do
  if m = "🍞".match(Emoji::EMOJI_REGEX)
    "🍞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍞"
  else
    fail("`1F35E` doesn't match `bread` (🍞)")
  end
end

it "`1F950` (fully-qualified) should match `croissant` (🥐)" do
  if m = "🥐".match(Emoji::EMOJI_REGEX)
    "🥐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥐"
  else
    fail("`1F950` doesn't match `croissant` (🥐)")
  end
end

it "`1F956` (fully-qualified) should match `baguette bread` (🥖)" do
  if m = "🥖".match(Emoji::EMOJI_REGEX)
    "🥖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥖"
  else
    fail("`1F956` doesn't match `baguette bread` (🥖)")
  end
end

it "`1F968` (fully-qualified) should match `pretzel` (🥨)" do
  if m = "🥨".match(Emoji::EMOJI_REGEX)
    "🥨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥨"
  else
    fail("`1F968` doesn't match `pretzel` (🥨)")
  end
end

it "`1F96F` (fully-qualified) should match `bagel` (🥯)" do
  if m = "🥯".match(Emoji::EMOJI_REGEX)
    "🥯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥯"
  else
    fail("`1F96F` doesn't match `bagel` (🥯)")
  end
end

it "`1F95E` (fully-qualified) should match `pancakes` (🥞)" do
  if m = "🥞".match(Emoji::EMOJI_REGEX)
    "🥞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥞"
  else
    fail("`1F95E` doesn't match `pancakes` (🥞)")
  end
end

it "`1F9C7` (fully-qualified) should match `waffle` (🧇)" do
  if m = "🧇".match(Emoji::EMOJI_REGEX)
    "🧇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧇"
  else
    fail("`1F9C7` doesn't match `waffle` (🧇)")
  end
end

it "`1F9C0` (fully-qualified) should match `cheese wedge` (🧀)" do
  if m = "🧀".match(Emoji::EMOJI_REGEX)
    "🧀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧀"
  else
    fail("`1F9C0` doesn't match `cheese wedge` (🧀)")
  end
end

it "`1F356` (fully-qualified) should match `meat on bone` (🍖)" do
  if m = "🍖".match(Emoji::EMOJI_REGEX)
    "🍖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍖"
  else
    fail("`1F356` doesn't match `meat on bone` (🍖)")
  end
end

it "`1F357` (fully-qualified) should match `poultry leg` (🍗)" do
  if m = "🍗".match(Emoji::EMOJI_REGEX)
    "🍗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍗"
  else
    fail("`1F357` doesn't match `poultry leg` (🍗)")
  end
end

it "`1F969` (fully-qualified) should match `cut of meat` (🥩)" do
  if m = "🥩".match(Emoji::EMOJI_REGEX)
    "🥩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥩"
  else
    fail("`1F969` doesn't match `cut of meat` (🥩)")
  end
end

it "`1F953` (fully-qualified) should match `bacon` (🥓)" do
  if m = "🥓".match(Emoji::EMOJI_REGEX)
    "🥓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥓"
  else
    fail("`1F953` doesn't match `bacon` (🥓)")
  end
end

it "`1F354` (fully-qualified) should match `hamburger` (🍔)" do
  if m = "🍔".match(Emoji::EMOJI_REGEX)
    "🍔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍔"
  else
    fail("`1F354` doesn't match `hamburger` (🍔)")
  end
end

it "`1F35F` (fully-qualified) should match `french fries` (🍟)" do
  if m = "🍟".match(Emoji::EMOJI_REGEX)
    "🍟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍟"
  else
    fail("`1F35F` doesn't match `french fries` (🍟)")
  end
end

it "`1F355` (fully-qualified) should match `pizza` (🍕)" do
  if m = "🍕".match(Emoji::EMOJI_REGEX)
    "🍕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍕"
  else
    fail("`1F355` doesn't match `pizza` (🍕)")
  end
end

it "`1F32D` (fully-qualified) should match `hot dog` (🌭)" do
  if m = "🌭".match(Emoji::EMOJI_REGEX)
    "🌭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌭"
  else
    fail("`1F32D` doesn't match `hot dog` (🌭)")
  end
end

it "`1F96A` (fully-qualified) should match `sandwich` (🥪)" do
  if m = "🥪".match(Emoji::EMOJI_REGEX)
    "🥪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥪"
  else
    fail("`1F96A` doesn't match `sandwich` (🥪)")
  end
end

it "`1F32E` (fully-qualified) should match `taco` (🌮)" do
  if m = "🌮".match(Emoji::EMOJI_REGEX)
    "🌮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌮"
  else
    fail("`1F32E` doesn't match `taco` (🌮)")
  end
end

it "`1F32F` (fully-qualified) should match `burrito` (🌯)" do
  if m = "🌯".match(Emoji::EMOJI_REGEX)
    "🌯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌯"
  else
    fail("`1F32F` doesn't match `burrito` (🌯)")
  end
end

it "`1F959` (fully-qualified) should match `stuffed flatbread` (🥙)" do
  if m = "🥙".match(Emoji::EMOJI_REGEX)
    "🥙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥙"
  else
    fail("`1F959` doesn't match `stuffed flatbread` (🥙)")
  end
end

it "`1F9C6` (fully-qualified) should match `falafel` (🧆)" do
  if m = "🧆".match(Emoji::EMOJI_REGEX)
    "🧆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧆"
  else
    fail("`1F9C6` doesn't match `falafel` (🧆)")
  end
end

it "`1F95A` (fully-qualified) should match `egg` (🥚)" do
  if m = "🥚".match(Emoji::EMOJI_REGEX)
    "🥚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥚"
  else
    fail("`1F95A` doesn't match `egg` (🥚)")
  end
end

it "`1F373` (fully-qualified) should match `cooking` (🍳)" do
  if m = "🍳".match(Emoji::EMOJI_REGEX)
    "🍳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍳"
  else
    fail("`1F373` doesn't match `cooking` (🍳)")
  end
end

it "`1F958` (fully-qualified) should match `shallow pan of food` (🥘)" do
  if m = "🥘".match(Emoji::EMOJI_REGEX)
    "🥘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥘"
  else
    fail("`1F958` doesn't match `shallow pan of food` (🥘)")
  end
end

it "`1F372` (fully-qualified) should match `pot of food` (🍲)" do
  if m = "🍲".match(Emoji::EMOJI_REGEX)
    "🍲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍲"
  else
    fail("`1F372` doesn't match `pot of food` (🍲)")
  end
end

it "`1F963` (fully-qualified) should match `bowl with spoon` (🥣)" do
  if m = "🥣".match(Emoji::EMOJI_REGEX)
    "🥣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥣"
  else
    fail("`1F963` doesn't match `bowl with spoon` (🥣)")
  end
end

it "`1F957` (fully-qualified) should match `green salad` (🥗)" do
  if m = "🥗".match(Emoji::EMOJI_REGEX)
    "🥗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥗"
  else
    fail("`1F957` doesn't match `green salad` (🥗)")
  end
end

it "`1F37F` (fully-qualified) should match `popcorn` (🍿)" do
  if m = "🍿".match(Emoji::EMOJI_REGEX)
    "🍿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍿"
  else
    fail("`1F37F` doesn't match `popcorn` (🍿)")
  end
end

it "`1F9C8` (fully-qualified) should match `butter` (🧈)" do
  if m = "🧈".match(Emoji::EMOJI_REGEX)
    "🧈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧈"
  else
    fail("`1F9C8` doesn't match `butter` (🧈)")
  end
end

it "`1F9C2` (fully-qualified) should match `salt` (🧂)" do
  if m = "🧂".match(Emoji::EMOJI_REGEX)
    "🧂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧂"
  else
    fail("`1F9C2` doesn't match `salt` (🧂)")
  end
end

it "`1F96B` (fully-qualified) should match `canned food` (🥫)" do
  if m = "🥫".match(Emoji::EMOJI_REGEX)
    "🥫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥫"
  else
    fail("`1F96B` doesn't match `canned food` (🥫)")
  end
end

it "`1F371` (fully-qualified) should match `bento box` (🍱)" do
  if m = "🍱".match(Emoji::EMOJI_REGEX)
    "🍱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍱"
  else
    fail("`1F371` doesn't match `bento box` (🍱)")
  end
end

it "`1F358` (fully-qualified) should match `rice cracker` (🍘)" do
  if m = "🍘".match(Emoji::EMOJI_REGEX)
    "🍘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍘"
  else
    fail("`1F358` doesn't match `rice cracker` (🍘)")
  end
end

it "`1F359` (fully-qualified) should match `rice ball` (🍙)" do
  if m = "🍙".match(Emoji::EMOJI_REGEX)
    "🍙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍙"
  else
    fail("`1F359` doesn't match `rice ball` (🍙)")
  end
end

it "`1F35A` (fully-qualified) should match `cooked rice` (🍚)" do
  if m = "🍚".match(Emoji::EMOJI_REGEX)
    "🍚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍚"
  else
    fail("`1F35A` doesn't match `cooked rice` (🍚)")
  end
end

it "`1F35B` (fully-qualified) should match `curry rice` (🍛)" do
  if m = "🍛".match(Emoji::EMOJI_REGEX)
    "🍛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍛"
  else
    fail("`1F35B` doesn't match `curry rice` (🍛)")
  end
end

it "`1F35C` (fully-qualified) should match `steaming bowl` (🍜)" do
  if m = "🍜".match(Emoji::EMOJI_REGEX)
    "🍜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍜"
  else
    fail("`1F35C` doesn't match `steaming bowl` (🍜)")
  end
end

it "`1F35D` (fully-qualified) should match `spaghetti` (🍝)" do
  if m = "🍝".match(Emoji::EMOJI_REGEX)
    "🍝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍝"
  else
    fail("`1F35D` doesn't match `spaghetti` (🍝)")
  end
end

it "`1F360` (fully-qualified) should match `roasted sweet potato` (🍠)" do
  if m = "🍠".match(Emoji::EMOJI_REGEX)
    "🍠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍠"
  else
    fail("`1F360` doesn't match `roasted sweet potato` (🍠)")
  end
end

it "`1F362` (fully-qualified) should match `oden` (🍢)" do
  if m = "🍢".match(Emoji::EMOJI_REGEX)
    "🍢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍢"
  else
    fail("`1F362` doesn't match `oden` (🍢)")
  end
end

it "`1F363` (fully-qualified) should match `sushi` (🍣)" do
  if m = "🍣".match(Emoji::EMOJI_REGEX)
    "🍣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍣"
  else
    fail("`1F363` doesn't match `sushi` (🍣)")
  end
end

it "`1F364` (fully-qualified) should match `fried shrimp` (🍤)" do
  if m = "🍤".match(Emoji::EMOJI_REGEX)
    "🍤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍤"
  else
    fail("`1F364` doesn't match `fried shrimp` (🍤)")
  end
end

it "`1F365` (fully-qualified) should match `fish cake with swirl` (🍥)" do
  if m = "🍥".match(Emoji::EMOJI_REGEX)
    "🍥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍥"
  else
    fail("`1F365` doesn't match `fish cake with swirl` (🍥)")
  end
end

it "`1F96E` (fully-qualified) should match `moon cake` (🥮)" do
  if m = "🥮".match(Emoji::EMOJI_REGEX)
    "🥮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥮"
  else
    fail("`1F96E` doesn't match `moon cake` (🥮)")
  end
end

it "`1F361` (fully-qualified) should match `dango` (🍡)" do
  if m = "🍡".match(Emoji::EMOJI_REGEX)
    "🍡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍡"
  else
    fail("`1F361` doesn't match `dango` (🍡)")
  end
end

it "`1F95F` (fully-qualified) should match `dumpling` (🥟)" do
  if m = "🥟".match(Emoji::EMOJI_REGEX)
    "🥟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥟"
  else
    fail("`1F95F` doesn't match `dumpling` (🥟)")
  end
end

it "`1F960` (fully-qualified) should match `fortune cookie` (🥠)" do
  if m = "🥠".match(Emoji::EMOJI_REGEX)
    "🥠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥠"
  else
    fail("`1F960` doesn't match `fortune cookie` (🥠)")
  end
end

it "`1F961` (fully-qualified) should match `takeout box` (🥡)" do
  if m = "🥡".match(Emoji::EMOJI_REGEX)
    "🥡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥡"
  else
    fail("`1F961` doesn't match `takeout box` (🥡)")
  end
end

it "`1F980` (fully-qualified) should match `crab` (🦀)" do
  if m = "🦀".match(Emoji::EMOJI_REGEX)
    "🦀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦀"
  else
    fail("`1F980` doesn't match `crab` (🦀)")
  end
end

it "`1F99E` (fully-qualified) should match `lobster` (🦞)" do
  if m = "🦞".match(Emoji::EMOJI_REGEX)
    "🦞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦞"
  else
    fail("`1F99E` doesn't match `lobster` (🦞)")
  end
end

it "`1F990` (fully-qualified) should match `shrimp` (🦐)" do
  if m = "🦐".match(Emoji::EMOJI_REGEX)
    "🦐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦐"
  else
    fail("`1F990` doesn't match `shrimp` (🦐)")
  end
end

it "`1F991` (fully-qualified) should match `squid` (🦑)" do
  if m = "🦑".match(Emoji::EMOJI_REGEX)
    "🦑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦑"
  else
    fail("`1F991` doesn't match `squid` (🦑)")
  end
end

it "`1F9AA` (fully-qualified) should match `oyster` (🦪)" do
  if m = "🦪".match(Emoji::EMOJI_REGEX)
    "🦪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦪"
  else
    fail("`1F9AA` doesn't match `oyster` (🦪)")
  end
end

it "`1F366` (fully-qualified) should match `soft ice cream` (🍦)" do
  if m = "🍦".match(Emoji::EMOJI_REGEX)
    "🍦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍦"
  else
    fail("`1F366` doesn't match `soft ice cream` (🍦)")
  end
end

it "`1F367` (fully-qualified) should match `shaved ice` (🍧)" do
  if m = "🍧".match(Emoji::EMOJI_REGEX)
    "🍧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍧"
  else
    fail("`1F367` doesn't match `shaved ice` (🍧)")
  end
end

it "`1F368` (fully-qualified) should match `ice cream` (🍨)" do
  if m = "🍨".match(Emoji::EMOJI_REGEX)
    "🍨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍨"
  else
    fail("`1F368` doesn't match `ice cream` (🍨)")
  end
end

it "`1F369` (fully-qualified) should match `doughnut` (🍩)" do
  if m = "🍩".match(Emoji::EMOJI_REGEX)
    "🍩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍩"
  else
    fail("`1F369` doesn't match `doughnut` (🍩)")
  end
end

it "`1F36A` (fully-qualified) should match `cookie` (🍪)" do
  if m = "🍪".match(Emoji::EMOJI_REGEX)
    "🍪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍪"
  else
    fail("`1F36A` doesn't match `cookie` (🍪)")
  end
end

it "`1F382` (fully-qualified) should match `birthday cake` (🎂)" do
  if m = "🎂".match(Emoji::EMOJI_REGEX)
    "🎂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎂"
  else
    fail("`1F382` doesn't match `birthday cake` (🎂)")
  end
end

it "`1F370` (fully-qualified) should match `shortcake` (🍰)" do
  if m = "🍰".match(Emoji::EMOJI_REGEX)
    "🍰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍰"
  else
    fail("`1F370` doesn't match `shortcake` (🍰)")
  end
end

it "`1F9C1` (fully-qualified) should match `cupcake` (🧁)" do
  if m = "🧁".match(Emoji::EMOJI_REGEX)
    "🧁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧁"
  else
    fail("`1F9C1` doesn't match `cupcake` (🧁)")
  end
end

it "`1F967` (fully-qualified) should match `pie` (🥧)" do
  if m = "🥧".match(Emoji::EMOJI_REGEX)
    "🥧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥧"
  else
    fail("`1F967` doesn't match `pie` (🥧)")
  end
end

it "`1F36B` (fully-qualified) should match `chocolate bar` (🍫)" do
  if m = "🍫".match(Emoji::EMOJI_REGEX)
    "🍫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍫"
  else
    fail("`1F36B` doesn't match `chocolate bar` (🍫)")
  end
end

it "`1F36C` (fully-qualified) should match `candy` (🍬)" do
  if m = "🍬".match(Emoji::EMOJI_REGEX)
    "🍬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍬"
  else
    fail("`1F36C` doesn't match `candy` (🍬)")
  end
end

it "`1F36D` (fully-qualified) should match `lollipop` (🍭)" do
  if m = "🍭".match(Emoji::EMOJI_REGEX)
    "🍭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍭"
  else
    fail("`1F36D` doesn't match `lollipop` (🍭)")
  end
end

it "`1F36E` (fully-qualified) should match `custard` (🍮)" do
  if m = "🍮".match(Emoji::EMOJI_REGEX)
    "🍮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍮"
  else
    fail("`1F36E` doesn't match `custard` (🍮)")
  end
end

it "`1F36F` (fully-qualified) should match `honey pot` (🍯)" do
  if m = "🍯".match(Emoji::EMOJI_REGEX)
    "🍯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍯"
  else
    fail("`1F36F` doesn't match `honey pot` (🍯)")
  end
end

it "`1F37C` (fully-qualified) should match `baby bottle` (🍼)" do
  if m = "🍼".match(Emoji::EMOJI_REGEX)
    "🍼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍼"
  else
    fail("`1F37C` doesn't match `baby bottle` (🍼)")
  end
end

it "`1F95B` (fully-qualified) should match `glass of milk` (🥛)" do
  if m = "🥛".match(Emoji::EMOJI_REGEX)
    "🥛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥛"
  else
    fail("`1F95B` doesn't match `glass of milk` (🥛)")
  end
end

it "`2615` (fully-qualified) should match `hot beverage` (☕)" do
  if m = "☕".match(Emoji::EMOJI_REGEX)
    "☕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☕"
  else
    fail("`2615` doesn't match `hot beverage` (☕)")
  end
end

it "`1F375` (fully-qualified) should match `teacup without handle` (🍵)" do
  if m = "🍵".match(Emoji::EMOJI_REGEX)
    "🍵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍵"
  else
    fail("`1F375` doesn't match `teacup without handle` (🍵)")
  end
end

it "`1F376` (fully-qualified) should match `sake` (🍶)" do
  if m = "🍶".match(Emoji::EMOJI_REGEX)
    "🍶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍶"
  else
    fail("`1F376` doesn't match `sake` (🍶)")
  end
end

it "`1F37E` (fully-qualified) should match `bottle with popping cork` (🍾)" do
  if m = "🍾".match(Emoji::EMOJI_REGEX)
    "🍾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍾"
  else
    fail("`1F37E` doesn't match `bottle with popping cork` (🍾)")
  end
end

it "`1F377` (fully-qualified) should match `wine glass` (🍷)" do
  if m = "🍷".match(Emoji::EMOJI_REGEX)
    "🍷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍷"
  else
    fail("`1F377` doesn't match `wine glass` (🍷)")
  end
end

it "`1F378` (fully-qualified) should match `cocktail glass` (🍸)" do
  if m = "🍸".match(Emoji::EMOJI_REGEX)
    "🍸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍸"
  else
    fail("`1F378` doesn't match `cocktail glass` (🍸)")
  end
end

it "`1F379` (fully-qualified) should match `tropical drink` (🍹)" do
  if m = "🍹".match(Emoji::EMOJI_REGEX)
    "🍹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍹"
  else
    fail("`1F379` doesn't match `tropical drink` (🍹)")
  end
end

it "`1F37A` (fully-qualified) should match `beer mug` (🍺)" do
  if m = "🍺".match(Emoji::EMOJI_REGEX)
    "🍺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍺"
  else
    fail("`1F37A` doesn't match `beer mug` (🍺)")
  end
end

it "`1F37B` (fully-qualified) should match `clinking beer mugs` (🍻)" do
  if m = "🍻".match(Emoji::EMOJI_REGEX)
    "🍻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍻"
  else
    fail("`1F37B` doesn't match `clinking beer mugs` (🍻)")
  end
end

it "`1F942` (fully-qualified) should match `clinking glasses` (🥂)" do
  if m = "🥂".match(Emoji::EMOJI_REGEX)
    "🥂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥂"
  else
    fail("`1F942` doesn't match `clinking glasses` (🥂)")
  end
end

it "`1F943` (fully-qualified) should match `tumbler glass` (🥃)" do
  if m = "🥃".match(Emoji::EMOJI_REGEX)
    "🥃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥃"
  else
    fail("`1F943` doesn't match `tumbler glass` (🥃)")
  end
end

it "`1F964` (fully-qualified) should match `cup with straw` (🥤)" do
  if m = "🥤".match(Emoji::EMOJI_REGEX)
    "🥤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥤"
  else
    fail("`1F964` doesn't match `cup with straw` (🥤)")
  end
end

it "`1F9C3` (fully-qualified) should match `beverage box` (🧃)" do
  if m = "🧃".match(Emoji::EMOJI_REGEX)
    "🧃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧃"
  else
    fail("`1F9C3` doesn't match `beverage box` (🧃)")
  end
end

it "`1F9C9` (fully-qualified) should match `mate` (🧉)" do
  if m = "🧉".match(Emoji::EMOJI_REGEX)
    "🧉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧉"
  else
    fail("`1F9C9` doesn't match `mate` (🧉)")
  end
end

it "`1F9CA` (fully-qualified) should match `ice cube` (🧊)" do
  if m = "🧊".match(Emoji::EMOJI_REGEX)
    "🧊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧊"
  else
    fail("`1F9CA` doesn't match `ice cube` (🧊)")
  end
end

it "`1F962` (fully-qualified) should match `chopsticks` (🥢)" do
  if m = "🥢".match(Emoji::EMOJI_REGEX)
    "🥢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥢"
  else
    fail("`1F962` doesn't match `chopsticks` (🥢)")
  end
end

it "`1F37D FE0F` (fully-qualified) should match `fork and knife with plate` (🍽️)" do
  if m = "🍽️".match(Emoji::EMOJI_REGEX)
    "🍽️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍽️"
  else
    fail("`1F37D FE0F` doesn't match `fork and knife with plate` (🍽️)")
  end
end

it "`1F37D` (unqualified) should match `fork and knife with plate` (🍽)" do
  if m = "🍽".match(Emoji::EMOJI_REGEX)
    "🍽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍽"
  else
    fail("`1F37D` doesn't match `fork and knife with plate` (🍽)")
  end
end

it "`1F374` (fully-qualified) should match `fork and knife` (🍴)" do
  if m = "🍴".match(Emoji::EMOJI_REGEX)
    "🍴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🍴"
  else
    fail("`1F374` doesn't match `fork and knife` (🍴)")
  end
end

it "`1F944` (fully-qualified) should match `spoon` (🥄)" do
  if m = "🥄".match(Emoji::EMOJI_REGEX)
    "🥄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥄"
  else
    fail("`1F944` doesn't match `spoon` (🥄)")
  end
end

it "`1F52A` (fully-qualified) should match `kitchen knife` (🔪)" do
  if m = "🔪".match(Emoji::EMOJI_REGEX)
    "🔪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔪"
  else
    fail("`1F52A` doesn't match `kitchen knife` (🔪)")
  end
end

it "`1F3FA` (fully-qualified) should match `amphora` (🏺)" do
  if m = "🏺".match(Emoji::EMOJI_REGEX)
    "🏺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏺"
  else
    fail("`1F3FA` doesn't match `amphora` (🏺)")
  end
end

it "`1F30D` (fully-qualified) should match `globe showing Europe-Africa` (🌍)" do
  if m = "🌍".match(Emoji::EMOJI_REGEX)
    "🌍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌍"
  else
    fail("`1F30D` doesn't match `globe showing Europe-Africa` (🌍)")
  end
end

it "`1F30E` (fully-qualified) should match `globe showing Americas` (🌎)" do
  if m = "🌎".match(Emoji::EMOJI_REGEX)
    "🌎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌎"
  else
    fail("`1F30E` doesn't match `globe showing Americas` (🌎)")
  end
end

it "`1F30F` (fully-qualified) should match `globe showing Asia-Australia` (🌏)" do
  if m = "🌏".match(Emoji::EMOJI_REGEX)
    "🌏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌏"
  else
    fail("`1F30F` doesn't match `globe showing Asia-Australia` (🌏)")
  end
end

it "`1F310` (fully-qualified) should match `globe with meridians` (🌐)" do
  if m = "🌐".match(Emoji::EMOJI_REGEX)
    "🌐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌐"
  else
    fail("`1F310` doesn't match `globe with meridians` (🌐)")
  end
end

it "`1F5FA FE0F` (fully-qualified) should match `world map` (🗺️)" do
  if m = "🗺️".match(Emoji::EMOJI_REGEX)
    "🗺️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗺️"
  else
    fail("`1F5FA FE0F` doesn't match `world map` (🗺️)")
  end
end

it "`1F5FA` (unqualified) should match `world map` (🗺)" do
  if m = "🗺".match(Emoji::EMOJI_REGEX)
    "🗺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗺"
  else
    fail("`1F5FA` doesn't match `world map` (🗺)")
  end
end

it "`1F5FE` (fully-qualified) should match `map of Japan` (🗾)" do
  if m = "🗾".match(Emoji::EMOJI_REGEX)
    "🗾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗾"
  else
    fail("`1F5FE` doesn't match `map of Japan` (🗾)")
  end
end

it "`1F9ED` (fully-qualified) should match `compass` (🧭)" do
  if m = "🧭".match(Emoji::EMOJI_REGEX)
    "🧭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧭"
  else
    fail("`1F9ED` doesn't match `compass` (🧭)")
  end
end

it "`1F3D4 FE0F` (fully-qualified) should match `snow-capped mountain` (🏔️)" do
  if m = "🏔️".match(Emoji::EMOJI_REGEX)
    "🏔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏔️"
  else
    fail("`1F3D4 FE0F` doesn't match `snow-capped mountain` (🏔️)")
  end
end

it "`1F3D4` (unqualified) should match `snow-capped mountain` (🏔)" do
  if m = "🏔".match(Emoji::EMOJI_REGEX)
    "🏔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏔"
  else
    fail("`1F3D4` doesn't match `snow-capped mountain` (🏔)")
  end
end

it "`26F0 FE0F` (fully-qualified) should match `mountain` (⛰️)" do
  if m = "⛰️".match(Emoji::EMOJI_REGEX)
    "⛰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛰️"
  else
    fail("`26F0 FE0F` doesn't match `mountain` (⛰️)")
  end
end

it "`26F0` (unqualified) should match `mountain` (⛰)" do
  if m = "⛰".match(Emoji::EMOJI_REGEX)
    "⛰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛰"
  else
    fail("`26F0` doesn't match `mountain` (⛰)")
  end
end

it "`1F30B` (fully-qualified) should match `volcano` (🌋)" do
  if m = "🌋".match(Emoji::EMOJI_REGEX)
    "🌋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌋"
  else
    fail("`1F30B` doesn't match `volcano` (🌋)")
  end
end

it "`1F5FB` (fully-qualified) should match `mount fuji` (🗻)" do
  if m = "🗻".match(Emoji::EMOJI_REGEX)
    "🗻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗻"
  else
    fail("`1F5FB` doesn't match `mount fuji` (🗻)")
  end
end

it "`1F3D5 FE0F` (fully-qualified) should match `camping` (🏕️)" do
  if m = "🏕️".match(Emoji::EMOJI_REGEX)
    "🏕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏕️"
  else
    fail("`1F3D5 FE0F` doesn't match `camping` (🏕️)")
  end
end

it "`1F3D5` (unqualified) should match `camping` (🏕)" do
  if m = "🏕".match(Emoji::EMOJI_REGEX)
    "🏕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏕"
  else
    fail("`1F3D5` doesn't match `camping` (🏕)")
  end
end

it "`1F3D6 FE0F` (fully-qualified) should match `beach with umbrella` (🏖️)" do
  if m = "🏖️".match(Emoji::EMOJI_REGEX)
    "🏖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏖️"
  else
    fail("`1F3D6 FE0F` doesn't match `beach with umbrella` (🏖️)")
  end
end

it "`1F3D6` (unqualified) should match `beach with umbrella` (🏖)" do
  if m = "🏖".match(Emoji::EMOJI_REGEX)
    "🏖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏖"
  else
    fail("`1F3D6` doesn't match `beach with umbrella` (🏖)")
  end
end

it "`1F3DC FE0F` (fully-qualified) should match `desert` (🏜️)" do
  if m = "🏜️".match(Emoji::EMOJI_REGEX)
    "🏜️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏜️"
  else
    fail("`1F3DC FE0F` doesn't match `desert` (🏜️)")
  end
end

it "`1F3DC` (unqualified) should match `desert` (🏜)" do
  if m = "🏜".match(Emoji::EMOJI_REGEX)
    "🏜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏜"
  else
    fail("`1F3DC` doesn't match `desert` (🏜)")
  end
end

it "`1F3DD FE0F` (fully-qualified) should match `desert island` (🏝️)" do
  if m = "🏝️".match(Emoji::EMOJI_REGEX)
    "🏝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏝️"
  else
    fail("`1F3DD FE0F` doesn't match `desert island` (🏝️)")
  end
end

it "`1F3DD` (unqualified) should match `desert island` (🏝)" do
  if m = "🏝".match(Emoji::EMOJI_REGEX)
    "🏝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏝"
  else
    fail("`1F3DD` doesn't match `desert island` (🏝)")
  end
end

it "`1F3DE FE0F` (fully-qualified) should match `national park` (🏞️)" do
  if m = "🏞️".match(Emoji::EMOJI_REGEX)
    "🏞️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏞️"
  else
    fail("`1F3DE FE0F` doesn't match `national park` (🏞️)")
  end
end

it "`1F3DE` (unqualified) should match `national park` (🏞)" do
  if m = "🏞".match(Emoji::EMOJI_REGEX)
    "🏞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏞"
  else
    fail("`1F3DE` doesn't match `national park` (🏞)")
  end
end

it "`1F3DF FE0F` (fully-qualified) should match `stadium` (🏟️)" do
  if m = "🏟️".match(Emoji::EMOJI_REGEX)
    "🏟️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏟️"
  else
    fail("`1F3DF FE0F` doesn't match `stadium` (🏟️)")
  end
end

it "`1F3DF` (unqualified) should match `stadium` (🏟)" do
  if m = "🏟".match(Emoji::EMOJI_REGEX)
    "🏟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏟"
  else
    fail("`1F3DF` doesn't match `stadium` (🏟)")
  end
end

it "`1F3DB FE0F` (fully-qualified) should match `classical building` (🏛️)" do
  if m = "🏛️".match(Emoji::EMOJI_REGEX)
    "🏛️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏛️"
  else
    fail("`1F3DB FE0F` doesn't match `classical building` (🏛️)")
  end
end

it "`1F3DB` (unqualified) should match `classical building` (🏛)" do
  if m = "🏛".match(Emoji::EMOJI_REGEX)
    "🏛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏛"
  else
    fail("`1F3DB` doesn't match `classical building` (🏛)")
  end
end

it "`1F3D7 FE0F` (fully-qualified) should match `building construction` (🏗️)" do
  if m = "🏗️".match(Emoji::EMOJI_REGEX)
    "🏗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏗️"
  else
    fail("`1F3D7 FE0F` doesn't match `building construction` (🏗️)")
  end
end

it "`1F3D7` (unqualified) should match `building construction` (🏗)" do
  if m = "🏗".match(Emoji::EMOJI_REGEX)
    "🏗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏗"
  else
    fail("`1F3D7` doesn't match `building construction` (🏗)")
  end
end

it "`1F9F1` (fully-qualified) should match `brick` (🧱)" do
  if m = "🧱".match(Emoji::EMOJI_REGEX)
    "🧱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧱"
  else
    fail("`1F9F1` doesn't match `brick` (🧱)")
  end
end

it "`1F3D8 FE0F` (fully-qualified) should match `houses` (🏘️)" do
  if m = "🏘️".match(Emoji::EMOJI_REGEX)
    "🏘️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏘️"
  else
    fail("`1F3D8 FE0F` doesn't match `houses` (🏘️)")
  end
end

it "`1F3D8` (unqualified) should match `houses` (🏘)" do
  if m = "🏘".match(Emoji::EMOJI_REGEX)
    "🏘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏘"
  else
    fail("`1F3D8` doesn't match `houses` (🏘)")
  end
end

it "`1F3DA FE0F` (fully-qualified) should match `derelict house` (🏚️)" do
  if m = "🏚️".match(Emoji::EMOJI_REGEX)
    "🏚️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏚️"
  else
    fail("`1F3DA FE0F` doesn't match `derelict house` (🏚️)")
  end
end

it "`1F3DA` (unqualified) should match `derelict house` (🏚)" do
  if m = "🏚".match(Emoji::EMOJI_REGEX)
    "🏚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏚"
  else
    fail("`1F3DA` doesn't match `derelict house` (🏚)")
  end
end

it "`1F3E0` (fully-qualified) should match `house` (🏠)" do
  if m = "🏠".match(Emoji::EMOJI_REGEX)
    "🏠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏠"
  else
    fail("`1F3E0` doesn't match `house` (🏠)")
  end
end

it "`1F3E1` (fully-qualified) should match `house with garden` (🏡)" do
  if m = "🏡".match(Emoji::EMOJI_REGEX)
    "🏡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏡"
  else
    fail("`1F3E1` doesn't match `house with garden` (🏡)")
  end
end

it "`1F3E2` (fully-qualified) should match `office building` (🏢)" do
  if m = "🏢".match(Emoji::EMOJI_REGEX)
    "🏢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏢"
  else
    fail("`1F3E2` doesn't match `office building` (🏢)")
  end
end

it "`1F3E3` (fully-qualified) should match `Japanese post office` (🏣)" do
  if m = "🏣".match(Emoji::EMOJI_REGEX)
    "🏣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏣"
  else
    fail("`1F3E3` doesn't match `Japanese post office` (🏣)")
  end
end

it "`1F3E4` (fully-qualified) should match `post office` (🏤)" do
  if m = "🏤".match(Emoji::EMOJI_REGEX)
    "🏤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏤"
  else
    fail("`1F3E4` doesn't match `post office` (🏤)")
  end
end

it "`1F3E5` (fully-qualified) should match `hospital` (🏥)" do
  if m = "🏥".match(Emoji::EMOJI_REGEX)
    "🏥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏥"
  else
    fail("`1F3E5` doesn't match `hospital` (🏥)")
  end
end

it "`1F3E6` (fully-qualified) should match `bank` (🏦)" do
  if m = "🏦".match(Emoji::EMOJI_REGEX)
    "🏦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏦"
  else
    fail("`1F3E6` doesn't match `bank` (🏦)")
  end
end

it "`1F3E8` (fully-qualified) should match `hotel` (🏨)" do
  if m = "🏨".match(Emoji::EMOJI_REGEX)
    "🏨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏨"
  else
    fail("`1F3E8` doesn't match `hotel` (🏨)")
  end
end

it "`1F3E9` (fully-qualified) should match `love hotel` (🏩)" do
  if m = "🏩".match(Emoji::EMOJI_REGEX)
    "🏩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏩"
  else
    fail("`1F3E9` doesn't match `love hotel` (🏩)")
  end
end

it "`1F3EA` (fully-qualified) should match `convenience store` (🏪)" do
  if m = "🏪".match(Emoji::EMOJI_REGEX)
    "🏪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏪"
  else
    fail("`1F3EA` doesn't match `convenience store` (🏪)")
  end
end

it "`1F3EB` (fully-qualified) should match `school` (🏫)" do
  if m = "🏫".match(Emoji::EMOJI_REGEX)
    "🏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏫"
  else
    fail("`1F3EB` doesn't match `school` (🏫)")
  end
end

it "`1F3EC` (fully-qualified) should match `department store` (🏬)" do
  if m = "🏬".match(Emoji::EMOJI_REGEX)
    "🏬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏬"
  else
    fail("`1F3EC` doesn't match `department store` (🏬)")
  end
end

it "`1F3ED` (fully-qualified) should match `factory` (🏭)" do
  if m = "🏭".match(Emoji::EMOJI_REGEX)
    "🏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏭"
  else
    fail("`1F3ED` doesn't match `factory` (🏭)")
  end
end

it "`1F3EF` (fully-qualified) should match `Japanese castle` (🏯)" do
  if m = "🏯".match(Emoji::EMOJI_REGEX)
    "🏯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏯"
  else
    fail("`1F3EF` doesn't match `Japanese castle` (🏯)")
  end
end

it "`1F3F0` (fully-qualified) should match `castle` (🏰)" do
  if m = "🏰".match(Emoji::EMOJI_REGEX)
    "🏰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏰"
  else
    fail("`1F3F0` doesn't match `castle` (🏰)")
  end
end

it "`1F492` (fully-qualified) should match `wedding` (💒)" do
  if m = "💒".match(Emoji::EMOJI_REGEX)
    "💒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💒"
  else
    fail("`1F492` doesn't match `wedding` (💒)")
  end
end

it "`1F5FC` (fully-qualified) should match `Tokyo tower` (🗼)" do
  if m = "🗼".match(Emoji::EMOJI_REGEX)
    "🗼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗼"
  else
    fail("`1F5FC` doesn't match `Tokyo tower` (🗼)")
  end
end

it "`1F5FD` (fully-qualified) should match `Statue of Liberty` (🗽)" do
  if m = "🗽".match(Emoji::EMOJI_REGEX)
    "🗽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗽"
  else
    fail("`1F5FD` doesn't match `Statue of Liberty` (🗽)")
  end
end

it "`26EA` (fully-qualified) should match `church` (⛪)" do
  if m = "⛪".match(Emoji::EMOJI_REGEX)
    "⛪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛪"
  else
    fail("`26EA` doesn't match `church` (⛪)")
  end
end

it "`1F54C` (fully-qualified) should match `mosque` (🕌)" do
  if m = "🕌".match(Emoji::EMOJI_REGEX)
    "🕌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕌"
  else
    fail("`1F54C` doesn't match `mosque` (🕌)")
  end
end

it "`1F6D5` (fully-qualified) should match `hindu temple` (🛕)" do
  if m = "🛕".match(Emoji::EMOJI_REGEX)
    "🛕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛕"
  else
    fail("`1F6D5` doesn't match `hindu temple` (🛕)")
  end
end

it "`1F54D` (fully-qualified) should match `synagogue` (🕍)" do
  if m = "🕍".match(Emoji::EMOJI_REGEX)
    "🕍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕍"
  else
    fail("`1F54D` doesn't match `synagogue` (🕍)")
  end
end

it "`26E9 FE0F` (fully-qualified) should match `shinto shrine` (⛩️)" do
  if m = "⛩️".match(Emoji::EMOJI_REGEX)
    "⛩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛩️"
  else
    fail("`26E9 FE0F` doesn't match `shinto shrine` (⛩️)")
  end
end

it "`26E9` (unqualified) should match `shinto shrine` (⛩)" do
  if m = "⛩".match(Emoji::EMOJI_REGEX)
    "⛩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛩"
  else
    fail("`26E9` doesn't match `shinto shrine` (⛩)")
  end
end

it "`1F54B` (fully-qualified) should match `kaaba` (🕋)" do
  if m = "🕋".match(Emoji::EMOJI_REGEX)
    "🕋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕋"
  else
    fail("`1F54B` doesn't match `kaaba` (🕋)")
  end
end

it "`26F2` (fully-qualified) should match `fountain` (⛲)" do
  if m = "⛲".match(Emoji::EMOJI_REGEX)
    "⛲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛲"
  else
    fail("`26F2` doesn't match `fountain` (⛲)")
  end
end

it "`26FA` (fully-qualified) should match `tent` (⛺)" do
  if m = "⛺".match(Emoji::EMOJI_REGEX)
    "⛺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛺"
  else
    fail("`26FA` doesn't match `tent` (⛺)")
  end
end

it "`1F301` (fully-qualified) should match `foggy` (🌁)" do
  if m = "🌁".match(Emoji::EMOJI_REGEX)
    "🌁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌁"
  else
    fail("`1F301` doesn't match `foggy` (🌁)")
  end
end

it "`1F303` (fully-qualified) should match `night with stars` (🌃)" do
  if m = "🌃".match(Emoji::EMOJI_REGEX)
    "🌃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌃"
  else
    fail("`1F303` doesn't match `night with stars` (🌃)")
  end
end

it "`1F3D9 FE0F` (fully-qualified) should match `cityscape` (🏙️)" do
  if m = "🏙️".match(Emoji::EMOJI_REGEX)
    "🏙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏙️"
  else
    fail("`1F3D9 FE0F` doesn't match `cityscape` (🏙️)")
  end
end

it "`1F3D9` (unqualified) should match `cityscape` (🏙)" do
  if m = "🏙".match(Emoji::EMOJI_REGEX)
    "🏙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏙"
  else
    fail("`1F3D9` doesn't match `cityscape` (🏙)")
  end
end

it "`1F304` (fully-qualified) should match `sunrise over mountains` (🌄)" do
  if m = "🌄".match(Emoji::EMOJI_REGEX)
    "🌄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌄"
  else
    fail("`1F304` doesn't match `sunrise over mountains` (🌄)")
  end
end

it "`1F305` (fully-qualified) should match `sunrise` (🌅)" do
  if m = "🌅".match(Emoji::EMOJI_REGEX)
    "🌅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌅"
  else
    fail("`1F305` doesn't match `sunrise` (🌅)")
  end
end

it "`1F306` (fully-qualified) should match `cityscape at dusk` (🌆)" do
  if m = "🌆".match(Emoji::EMOJI_REGEX)
    "🌆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌆"
  else
    fail("`1F306` doesn't match `cityscape at dusk` (🌆)")
  end
end

it "`1F307` (fully-qualified) should match `sunset` (🌇)" do
  if m = "🌇".match(Emoji::EMOJI_REGEX)
    "🌇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌇"
  else
    fail("`1F307` doesn't match `sunset` (🌇)")
  end
end

it "`1F309` (fully-qualified) should match `bridge at night` (🌉)" do
  if m = "🌉".match(Emoji::EMOJI_REGEX)
    "🌉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌉"
  else
    fail("`1F309` doesn't match `bridge at night` (🌉)")
  end
end

it "`2668 FE0F` (fully-qualified) should match `hot springs` (♨️)" do
  if m = "♨️".match(Emoji::EMOJI_REGEX)
    "♨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♨️"
  else
    fail("`2668 FE0F` doesn't match `hot springs` (♨️)")
  end
end

it "`2668` (unqualified) should match `hot springs` (♨)" do
  if m = "♨".match(Emoji::EMOJI_REGEX)
    "♨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♨"
  else
    fail("`2668` doesn't match `hot springs` (♨)")
  end
end

it "`1F3A0` (fully-qualified) should match `carousel horse` (🎠)" do
  if m = "🎠".match(Emoji::EMOJI_REGEX)
    "🎠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎠"
  else
    fail("`1F3A0` doesn't match `carousel horse` (🎠)")
  end
end

it "`1F3A1` (fully-qualified) should match `ferris wheel` (🎡)" do
  if m = "🎡".match(Emoji::EMOJI_REGEX)
    "🎡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎡"
  else
    fail("`1F3A1` doesn't match `ferris wheel` (🎡)")
  end
end

it "`1F3A2` (fully-qualified) should match `roller coaster` (🎢)" do
  if m = "🎢".match(Emoji::EMOJI_REGEX)
    "🎢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎢"
  else
    fail("`1F3A2` doesn't match `roller coaster` (🎢)")
  end
end

it "`1F488` (fully-qualified) should match `barber pole` (💈)" do
  if m = "💈".match(Emoji::EMOJI_REGEX)
    "💈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💈"
  else
    fail("`1F488` doesn't match `barber pole` (💈)")
  end
end

it "`1F3AA` (fully-qualified) should match `circus tent` (🎪)" do
  if m = "🎪".match(Emoji::EMOJI_REGEX)
    "🎪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎪"
  else
    fail("`1F3AA` doesn't match `circus tent` (🎪)")
  end
end

it "`1F682` (fully-qualified) should match `locomotive` (🚂)" do
  if m = "🚂".match(Emoji::EMOJI_REGEX)
    "🚂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚂"
  else
    fail("`1F682` doesn't match `locomotive` (🚂)")
  end
end

it "`1F683` (fully-qualified) should match `railway car` (🚃)" do
  if m = "🚃".match(Emoji::EMOJI_REGEX)
    "🚃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚃"
  else
    fail("`1F683` doesn't match `railway car` (🚃)")
  end
end

it "`1F684` (fully-qualified) should match `high-speed train` (🚄)" do
  if m = "🚄".match(Emoji::EMOJI_REGEX)
    "🚄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚄"
  else
    fail("`1F684` doesn't match `high-speed train` (🚄)")
  end
end

it "`1F685` (fully-qualified) should match `bullet train` (🚅)" do
  if m = "🚅".match(Emoji::EMOJI_REGEX)
    "🚅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚅"
  else
    fail("`1F685` doesn't match `bullet train` (🚅)")
  end
end

it "`1F686` (fully-qualified) should match `train` (🚆)" do
  if m = "🚆".match(Emoji::EMOJI_REGEX)
    "🚆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚆"
  else
    fail("`1F686` doesn't match `train` (🚆)")
  end
end

it "`1F687` (fully-qualified) should match `metro` (🚇)" do
  if m = "🚇".match(Emoji::EMOJI_REGEX)
    "🚇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚇"
  else
    fail("`1F687` doesn't match `metro` (🚇)")
  end
end

it "`1F688` (fully-qualified) should match `light rail` (🚈)" do
  if m = "🚈".match(Emoji::EMOJI_REGEX)
    "🚈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚈"
  else
    fail("`1F688` doesn't match `light rail` (🚈)")
  end
end

it "`1F689` (fully-qualified) should match `station` (🚉)" do
  if m = "🚉".match(Emoji::EMOJI_REGEX)
    "🚉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚉"
  else
    fail("`1F689` doesn't match `station` (🚉)")
  end
end

it "`1F68A` (fully-qualified) should match `tram` (🚊)" do
  if m = "🚊".match(Emoji::EMOJI_REGEX)
    "🚊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚊"
  else
    fail("`1F68A` doesn't match `tram` (🚊)")
  end
end

it "`1F69D` (fully-qualified) should match `monorail` (🚝)" do
  if m = "🚝".match(Emoji::EMOJI_REGEX)
    "🚝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚝"
  else
    fail("`1F69D` doesn't match `monorail` (🚝)")
  end
end

it "`1F69E` (fully-qualified) should match `mountain railway` (🚞)" do
  if m = "🚞".match(Emoji::EMOJI_REGEX)
    "🚞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚞"
  else
    fail("`1F69E` doesn't match `mountain railway` (🚞)")
  end
end

it "`1F68B` (fully-qualified) should match `tram car` (🚋)" do
  if m = "🚋".match(Emoji::EMOJI_REGEX)
    "🚋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚋"
  else
    fail("`1F68B` doesn't match `tram car` (🚋)")
  end
end

it "`1F68C` (fully-qualified) should match `bus` (🚌)" do
  if m = "🚌".match(Emoji::EMOJI_REGEX)
    "🚌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚌"
  else
    fail("`1F68C` doesn't match `bus` (🚌)")
  end
end

it "`1F68D` (fully-qualified) should match `oncoming bus` (🚍)" do
  if m = "🚍".match(Emoji::EMOJI_REGEX)
    "🚍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚍"
  else
    fail("`1F68D` doesn't match `oncoming bus` (🚍)")
  end
end

it "`1F68E` (fully-qualified) should match `trolleybus` (🚎)" do
  if m = "🚎".match(Emoji::EMOJI_REGEX)
    "🚎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚎"
  else
    fail("`1F68E` doesn't match `trolleybus` (🚎)")
  end
end

it "`1F690` (fully-qualified) should match `minibus` (🚐)" do
  if m = "🚐".match(Emoji::EMOJI_REGEX)
    "🚐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚐"
  else
    fail("`1F690` doesn't match `minibus` (🚐)")
  end
end

it "`1F691` (fully-qualified) should match `ambulance` (🚑)" do
  if m = "🚑".match(Emoji::EMOJI_REGEX)
    "🚑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚑"
  else
    fail("`1F691` doesn't match `ambulance` (🚑)")
  end
end

it "`1F692` (fully-qualified) should match `fire engine` (🚒)" do
  if m = "🚒".match(Emoji::EMOJI_REGEX)
    "🚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚒"
  else
    fail("`1F692` doesn't match `fire engine` (🚒)")
  end
end

it "`1F693` (fully-qualified) should match `police car` (🚓)" do
  if m = "🚓".match(Emoji::EMOJI_REGEX)
    "🚓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚓"
  else
    fail("`1F693` doesn't match `police car` (🚓)")
  end
end

it "`1F694` (fully-qualified) should match `oncoming police car` (🚔)" do
  if m = "🚔".match(Emoji::EMOJI_REGEX)
    "🚔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚔"
  else
    fail("`1F694` doesn't match `oncoming police car` (🚔)")
  end
end

it "`1F695` (fully-qualified) should match `taxi` (🚕)" do
  if m = "🚕".match(Emoji::EMOJI_REGEX)
    "🚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚕"
  else
    fail("`1F695` doesn't match `taxi` (🚕)")
  end
end

it "`1F696` (fully-qualified) should match `oncoming taxi` (🚖)" do
  if m = "🚖".match(Emoji::EMOJI_REGEX)
    "🚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚖"
  else
    fail("`1F696` doesn't match `oncoming taxi` (🚖)")
  end
end

it "`1F697` (fully-qualified) should match `automobile` (🚗)" do
  if m = "🚗".match(Emoji::EMOJI_REGEX)
    "🚗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚗"
  else
    fail("`1F697` doesn't match `automobile` (🚗)")
  end
end

it "`1F698` (fully-qualified) should match `oncoming automobile` (🚘)" do
  if m = "🚘".match(Emoji::EMOJI_REGEX)
    "🚘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚘"
  else
    fail("`1F698` doesn't match `oncoming automobile` (🚘)")
  end
end

it "`1F699` (fully-qualified) should match `sport utility vehicle` (🚙)" do
  if m = "🚙".match(Emoji::EMOJI_REGEX)
    "🚙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚙"
  else
    fail("`1F699` doesn't match `sport utility vehicle` (🚙)")
  end
end

it "`1F69A` (fully-qualified) should match `delivery truck` (🚚)" do
  if m = "🚚".match(Emoji::EMOJI_REGEX)
    "🚚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚚"
  else
    fail("`1F69A` doesn't match `delivery truck` (🚚)")
  end
end

it "`1F69B` (fully-qualified) should match `articulated lorry` (🚛)" do
  if m = "🚛".match(Emoji::EMOJI_REGEX)
    "🚛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚛"
  else
    fail("`1F69B` doesn't match `articulated lorry` (🚛)")
  end
end

it "`1F69C` (fully-qualified) should match `tractor` (🚜)" do
  if m = "🚜".match(Emoji::EMOJI_REGEX)
    "🚜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚜"
  else
    fail("`1F69C` doesn't match `tractor` (🚜)")
  end
end

it "`1F3CE FE0F` (fully-qualified) should match `racing car` (🏎️)" do
  if m = "🏎️".match(Emoji::EMOJI_REGEX)
    "🏎️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏎️"
  else
    fail("`1F3CE FE0F` doesn't match `racing car` (🏎️)")
  end
end

it "`1F3CE` (unqualified) should match `racing car` (🏎)" do
  if m = "🏎".match(Emoji::EMOJI_REGEX)
    "🏎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏎"
  else
    fail("`1F3CE` doesn't match `racing car` (🏎)")
  end
end

it "`1F3CD FE0F` (fully-qualified) should match `motorcycle` (🏍️)" do
  if m = "🏍️".match(Emoji::EMOJI_REGEX)
    "🏍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏍️"
  else
    fail("`1F3CD FE0F` doesn't match `motorcycle` (🏍️)")
  end
end

it "`1F3CD` (unqualified) should match `motorcycle` (🏍)" do
  if m = "🏍".match(Emoji::EMOJI_REGEX)
    "🏍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏍"
  else
    fail("`1F3CD` doesn't match `motorcycle` (🏍)")
  end
end

it "`1F6F5` (fully-qualified) should match `motor scooter` (🛵)" do
  if m = "🛵".match(Emoji::EMOJI_REGEX)
    "🛵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛵"
  else
    fail("`1F6F5` doesn't match `motor scooter` (🛵)")
  end
end

it "`1F9BD` (fully-qualified) should match `manual wheelchair` (🦽)" do
  if m = "🦽".match(Emoji::EMOJI_REGEX)
    "🦽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦽"
  else
    fail("`1F9BD` doesn't match `manual wheelchair` (🦽)")
  end
end

it "`1F9BC` (fully-qualified) should match `motorized wheelchair` (🦼)" do
  if m = "🦼".match(Emoji::EMOJI_REGEX)
    "🦼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦼"
  else
    fail("`1F9BC` doesn't match `motorized wheelchair` (🦼)")
  end
end

it "`1F6FA` (fully-qualified) should match `auto rickshaw` (🛺)" do
  if m = "🛺".match(Emoji::EMOJI_REGEX)
    "🛺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛺"
  else
    fail("`1F6FA` doesn't match `auto rickshaw` (🛺)")
  end
end

it "`1F6B2` (fully-qualified) should match `bicycle` (🚲)" do
  if m = "🚲".match(Emoji::EMOJI_REGEX)
    "🚲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚲"
  else
    fail("`1F6B2` doesn't match `bicycle` (🚲)")
  end
end

it "`1F6F4` (fully-qualified) should match `kick scooter` (🛴)" do
  if m = "🛴".match(Emoji::EMOJI_REGEX)
    "🛴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛴"
  else
    fail("`1F6F4` doesn't match `kick scooter` (🛴)")
  end
end

it "`1F6F9` (fully-qualified) should match `skateboard` (🛹)" do
  if m = "🛹".match(Emoji::EMOJI_REGEX)
    "🛹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛹"
  else
    fail("`1F6F9` doesn't match `skateboard` (🛹)")
  end
end

it "`1F68F` (fully-qualified) should match `bus stop` (🚏)" do
  if m = "🚏".match(Emoji::EMOJI_REGEX)
    "🚏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚏"
  else
    fail("`1F68F` doesn't match `bus stop` (🚏)")
  end
end

it "`1F6E3 FE0F` (fully-qualified) should match `motorway` (🛣️)" do
  if m = "🛣️".match(Emoji::EMOJI_REGEX)
    "🛣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛣️"
  else
    fail("`1F6E3 FE0F` doesn't match `motorway` (🛣️)")
  end
end

it "`1F6E3` (unqualified) should match `motorway` (🛣)" do
  if m = "🛣".match(Emoji::EMOJI_REGEX)
    "🛣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛣"
  else
    fail("`1F6E3` doesn't match `motorway` (🛣)")
  end
end

it "`1F6E4 FE0F` (fully-qualified) should match `railway track` (🛤️)" do
  if m = "🛤️".match(Emoji::EMOJI_REGEX)
    "🛤️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛤️"
  else
    fail("`1F6E4 FE0F` doesn't match `railway track` (🛤️)")
  end
end

it "`1F6E4` (unqualified) should match `railway track` (🛤)" do
  if m = "🛤".match(Emoji::EMOJI_REGEX)
    "🛤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛤"
  else
    fail("`1F6E4` doesn't match `railway track` (🛤)")
  end
end

it "`1F6E2 FE0F` (fully-qualified) should match `oil drum` (🛢️)" do
  if m = "🛢️".match(Emoji::EMOJI_REGEX)
    "🛢️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛢️"
  else
    fail("`1F6E2 FE0F` doesn't match `oil drum` (🛢️)")
  end
end

it "`1F6E2` (unqualified) should match `oil drum` (🛢)" do
  if m = "🛢".match(Emoji::EMOJI_REGEX)
    "🛢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛢"
  else
    fail("`1F6E2` doesn't match `oil drum` (🛢)")
  end
end

it "`26FD` (fully-qualified) should match `fuel pump` (⛽)" do
  if m = "⛽".match(Emoji::EMOJI_REGEX)
    "⛽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛽"
  else
    fail("`26FD` doesn't match `fuel pump` (⛽)")
  end
end

it "`1F6A8` (fully-qualified) should match `police car light` (🚨)" do
  if m = "🚨".match(Emoji::EMOJI_REGEX)
    "🚨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚨"
  else
    fail("`1F6A8` doesn't match `police car light` (🚨)")
  end
end

it "`1F6A5` (fully-qualified) should match `horizontal traffic light` (🚥)" do
  if m = "🚥".match(Emoji::EMOJI_REGEX)
    "🚥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚥"
  else
    fail("`1F6A5` doesn't match `horizontal traffic light` (🚥)")
  end
end

it "`1F6A6` (fully-qualified) should match `vertical traffic light` (🚦)" do
  if m = "🚦".match(Emoji::EMOJI_REGEX)
    "🚦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚦"
  else
    fail("`1F6A6` doesn't match `vertical traffic light` (🚦)")
  end
end

it "`1F6D1` (fully-qualified) should match `stop sign` (🛑)" do
  if m = "🛑".match(Emoji::EMOJI_REGEX)
    "🛑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛑"
  else
    fail("`1F6D1` doesn't match `stop sign` (🛑)")
  end
end

it "`1F6A7` (fully-qualified) should match `construction` (🚧)" do
  if m = "🚧".match(Emoji::EMOJI_REGEX)
    "🚧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚧"
  else
    fail("`1F6A7` doesn't match `construction` (🚧)")
  end
end

it "`2693` (fully-qualified) should match `anchor` (⚓)" do
  if m = "⚓".match(Emoji::EMOJI_REGEX)
    "⚓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚓"
  else
    fail("`2693` doesn't match `anchor` (⚓)")
  end
end

it "`26F5` (fully-qualified) should match `sailboat` (⛵)" do
  if m = "⛵".match(Emoji::EMOJI_REGEX)
    "⛵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛵"
  else
    fail("`26F5` doesn't match `sailboat` (⛵)")
  end
end

it "`1F6F6` (fully-qualified) should match `canoe` (🛶)" do
  if m = "🛶".match(Emoji::EMOJI_REGEX)
    "🛶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛶"
  else
    fail("`1F6F6` doesn't match `canoe` (🛶)")
  end
end

it "`1F6A4` (fully-qualified) should match `speedboat` (🚤)" do
  if m = "🚤".match(Emoji::EMOJI_REGEX)
    "🚤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚤"
  else
    fail("`1F6A4` doesn't match `speedboat` (🚤)")
  end
end

it "`1F6F3 FE0F` (fully-qualified) should match `passenger ship` (🛳️)" do
  if m = "🛳️".match(Emoji::EMOJI_REGEX)
    "🛳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛳️"
  else
    fail("`1F6F3 FE0F` doesn't match `passenger ship` (🛳️)")
  end
end

it "`1F6F3` (unqualified) should match `passenger ship` (🛳)" do
  if m = "🛳".match(Emoji::EMOJI_REGEX)
    "🛳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛳"
  else
    fail("`1F6F3` doesn't match `passenger ship` (🛳)")
  end
end

it "`26F4 FE0F` (fully-qualified) should match `ferry` (⛴️)" do
  if m = "⛴️".match(Emoji::EMOJI_REGEX)
    "⛴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛴️"
  else
    fail("`26F4 FE0F` doesn't match `ferry` (⛴️)")
  end
end

it "`26F4` (unqualified) should match `ferry` (⛴)" do
  if m = "⛴".match(Emoji::EMOJI_REGEX)
    "⛴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛴"
  else
    fail("`26F4` doesn't match `ferry` (⛴)")
  end
end

it "`1F6E5 FE0F` (fully-qualified) should match `motor boat` (🛥️)" do
  if m = "🛥️".match(Emoji::EMOJI_REGEX)
    "🛥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛥️"
  else
    fail("`1F6E5 FE0F` doesn't match `motor boat` (🛥️)")
  end
end

it "`1F6E5` (unqualified) should match `motor boat` (🛥)" do
  if m = "🛥".match(Emoji::EMOJI_REGEX)
    "🛥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛥"
  else
    fail("`1F6E5` doesn't match `motor boat` (🛥)")
  end
end

it "`1F6A2` (fully-qualified) should match `ship` (🚢)" do
  if m = "🚢".match(Emoji::EMOJI_REGEX)
    "🚢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚢"
  else
    fail("`1F6A2` doesn't match `ship` (🚢)")
  end
end

it "`2708 FE0F` (fully-qualified) should match `airplane` (✈️)" do
  if m = "✈️".match(Emoji::EMOJI_REGEX)
    "✈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✈️"
  else
    fail("`2708 FE0F` doesn't match `airplane` (✈️)")
  end
end

it "`2708` (unqualified) should match `airplane` (✈)" do
  if m = "✈".match(Emoji::EMOJI_REGEX)
    "✈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✈"
  else
    fail("`2708` doesn't match `airplane` (✈)")
  end
end

it "`1F6E9 FE0F` (fully-qualified) should match `small airplane` (🛩️)" do
  if m = "🛩️".match(Emoji::EMOJI_REGEX)
    "🛩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛩️"
  else
    fail("`1F6E9 FE0F` doesn't match `small airplane` (🛩️)")
  end
end

it "`1F6E9` (unqualified) should match `small airplane` (🛩)" do
  if m = "🛩".match(Emoji::EMOJI_REGEX)
    "🛩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛩"
  else
    fail("`1F6E9` doesn't match `small airplane` (🛩)")
  end
end

it "`1F6EB` (fully-qualified) should match `airplane departure` (🛫)" do
  if m = "🛫".match(Emoji::EMOJI_REGEX)
    "🛫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛫"
  else
    fail("`1F6EB` doesn't match `airplane departure` (🛫)")
  end
end

it "`1F6EC` (fully-qualified) should match `airplane arrival` (🛬)" do
  if m = "🛬".match(Emoji::EMOJI_REGEX)
    "🛬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛬"
  else
    fail("`1F6EC` doesn't match `airplane arrival` (🛬)")
  end
end

it "`1FA82` (fully-qualified) should match `parachute` (🪂)" do
  if m = "🪂".match(Emoji::EMOJI_REGEX)
    "🪂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪂"
  else
    fail("`1FA82` doesn't match `parachute` (🪂)")
  end
end

it "`1F4BA` (fully-qualified) should match `seat` (💺)" do
  if m = "💺".match(Emoji::EMOJI_REGEX)
    "💺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💺"
  else
    fail("`1F4BA` doesn't match `seat` (💺)")
  end
end

it "`1F681` (fully-qualified) should match `helicopter` (🚁)" do
  if m = "🚁".match(Emoji::EMOJI_REGEX)
    "🚁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚁"
  else
    fail("`1F681` doesn't match `helicopter` (🚁)")
  end
end

it "`1F69F` (fully-qualified) should match `suspension railway` (🚟)" do
  if m = "🚟".match(Emoji::EMOJI_REGEX)
    "🚟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚟"
  else
    fail("`1F69F` doesn't match `suspension railway` (🚟)")
  end
end

it "`1F6A0` (fully-qualified) should match `mountain cableway` (🚠)" do
  if m = "🚠".match(Emoji::EMOJI_REGEX)
    "🚠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚠"
  else
    fail("`1F6A0` doesn't match `mountain cableway` (🚠)")
  end
end

it "`1F6A1` (fully-qualified) should match `aerial tramway` (🚡)" do
  if m = "🚡".match(Emoji::EMOJI_REGEX)
    "🚡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚡"
  else
    fail("`1F6A1` doesn't match `aerial tramway` (🚡)")
  end
end

it "`1F6F0 FE0F` (fully-qualified) should match `satellite` (🛰️)" do
  if m = "🛰️".match(Emoji::EMOJI_REGEX)
    "🛰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛰️"
  else
    fail("`1F6F0 FE0F` doesn't match `satellite` (🛰️)")
  end
end

it "`1F6F0` (unqualified) should match `satellite` (🛰)" do
  if m = "🛰".match(Emoji::EMOJI_REGEX)
    "🛰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛰"
  else
    fail("`1F6F0` doesn't match `satellite` (🛰)")
  end
end

it "`1F680` (fully-qualified) should match `rocket` (🚀)" do
  if m = "🚀".match(Emoji::EMOJI_REGEX)
    "🚀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚀"
  else
    fail("`1F680` doesn't match `rocket` (🚀)")
  end
end

it "`1F6F8` (fully-qualified) should match `flying saucer` (🛸)" do
  if m = "🛸".match(Emoji::EMOJI_REGEX)
    "🛸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛸"
  else
    fail("`1F6F8` doesn't match `flying saucer` (🛸)")
  end
end

it "`1F6CE FE0F` (fully-qualified) should match `bellhop bell` (🛎️)" do
  if m = "🛎️".match(Emoji::EMOJI_REGEX)
    "🛎️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛎️"
  else
    fail("`1F6CE FE0F` doesn't match `bellhop bell` (🛎️)")
  end
end

it "`1F6CE` (unqualified) should match `bellhop bell` (🛎)" do
  if m = "🛎".match(Emoji::EMOJI_REGEX)
    "🛎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛎"
  else
    fail("`1F6CE` doesn't match `bellhop bell` (🛎)")
  end
end

it "`1F9F3` (fully-qualified) should match `luggage` (🧳)" do
  if m = "🧳".match(Emoji::EMOJI_REGEX)
    "🧳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧳"
  else
    fail("`1F9F3` doesn't match `luggage` (🧳)")
  end
end

it "`231B` (fully-qualified) should match `hourglass done` (⌛)" do
  if m = "⌛".match(Emoji::EMOJI_REGEX)
    "⌛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌛"
  else
    fail("`231B` doesn't match `hourglass done` (⌛)")
  end
end

it "`23F3` (fully-qualified) should match `hourglass not done` (⏳)" do
  if m = "⏳".match(Emoji::EMOJI_REGEX)
    "⏳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏳"
  else
    fail("`23F3` doesn't match `hourglass not done` (⏳)")
  end
end

it "`231A` (fully-qualified) should match `watch` (⌚)" do
  if m = "⌚".match(Emoji::EMOJI_REGEX)
    "⌚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌚"
  else
    fail("`231A` doesn't match `watch` (⌚)")
  end
end

it "`23F0` (fully-qualified) should match `alarm clock` (⏰)" do
  if m = "⏰".match(Emoji::EMOJI_REGEX)
    "⏰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏰"
  else
    fail("`23F0` doesn't match `alarm clock` (⏰)")
  end
end

it "`23F1 FE0F` (fully-qualified) should match `stopwatch` (⏱️)" do
  if m = "⏱️".match(Emoji::EMOJI_REGEX)
    "⏱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏱️"
  else
    fail("`23F1 FE0F` doesn't match `stopwatch` (⏱️)")
  end
end

it "`23F1` (unqualified) should match `stopwatch` (⏱)" do
  if m = "⏱".match(Emoji::EMOJI_REGEX)
    "⏱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏱"
  else
    fail("`23F1` doesn't match `stopwatch` (⏱)")
  end
end

it "`23F2 FE0F` (fully-qualified) should match `timer clock` (⏲️)" do
  if m = "⏲️".match(Emoji::EMOJI_REGEX)
    "⏲️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏲️"
  else
    fail("`23F2 FE0F` doesn't match `timer clock` (⏲️)")
  end
end

it "`23F2` (unqualified) should match `timer clock` (⏲)" do
  if m = "⏲".match(Emoji::EMOJI_REGEX)
    "⏲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏲"
  else
    fail("`23F2` doesn't match `timer clock` (⏲)")
  end
end

it "`1F570 FE0F` (fully-qualified) should match `mantelpiece clock` (🕰️)" do
  if m = "🕰️".match(Emoji::EMOJI_REGEX)
    "🕰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕰️"
  else
    fail("`1F570 FE0F` doesn't match `mantelpiece clock` (🕰️)")
  end
end

it "`1F570` (unqualified) should match `mantelpiece clock` (🕰)" do
  if m = "🕰".match(Emoji::EMOJI_REGEX)
    "🕰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕰"
  else
    fail("`1F570` doesn't match `mantelpiece clock` (🕰)")
  end
end

it "`1F55B` (fully-qualified) should match `twelve o’clock` (🕛)" do
  if m = "🕛".match(Emoji::EMOJI_REGEX)
    "🕛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕛"
  else
    fail("`1F55B` doesn't match `twelve o’clock` (🕛)")
  end
end

it "`1F567` (fully-qualified) should match `twelve-thirty` (🕧)" do
  if m = "🕧".match(Emoji::EMOJI_REGEX)
    "🕧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕧"
  else
    fail("`1F567` doesn't match `twelve-thirty` (🕧)")
  end
end

it "`1F550` (fully-qualified) should match `one o’clock` (🕐)" do
  if m = "🕐".match(Emoji::EMOJI_REGEX)
    "🕐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕐"
  else
    fail("`1F550` doesn't match `one o’clock` (🕐)")
  end
end

it "`1F55C` (fully-qualified) should match `one-thirty` (🕜)" do
  if m = "🕜".match(Emoji::EMOJI_REGEX)
    "🕜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕜"
  else
    fail("`1F55C` doesn't match `one-thirty` (🕜)")
  end
end

it "`1F551` (fully-qualified) should match `two o’clock` (🕑)" do
  if m = "🕑".match(Emoji::EMOJI_REGEX)
    "🕑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕑"
  else
    fail("`1F551` doesn't match `two o’clock` (🕑)")
  end
end

it "`1F55D` (fully-qualified) should match `two-thirty` (🕝)" do
  if m = "🕝".match(Emoji::EMOJI_REGEX)
    "🕝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕝"
  else
    fail("`1F55D` doesn't match `two-thirty` (🕝)")
  end
end

it "`1F552` (fully-qualified) should match `three o’clock` (🕒)" do
  if m = "🕒".match(Emoji::EMOJI_REGEX)
    "🕒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕒"
  else
    fail("`1F552` doesn't match `three o’clock` (🕒)")
  end
end

it "`1F55E` (fully-qualified) should match `three-thirty` (🕞)" do
  if m = "🕞".match(Emoji::EMOJI_REGEX)
    "🕞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕞"
  else
    fail("`1F55E` doesn't match `three-thirty` (🕞)")
  end
end

it "`1F553` (fully-qualified) should match `four o’clock` (🕓)" do
  if m = "🕓".match(Emoji::EMOJI_REGEX)
    "🕓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕓"
  else
    fail("`1F553` doesn't match `four o’clock` (🕓)")
  end
end

it "`1F55F` (fully-qualified) should match `four-thirty` (🕟)" do
  if m = "🕟".match(Emoji::EMOJI_REGEX)
    "🕟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕟"
  else
    fail("`1F55F` doesn't match `four-thirty` (🕟)")
  end
end

it "`1F554` (fully-qualified) should match `five o’clock` (🕔)" do
  if m = "🕔".match(Emoji::EMOJI_REGEX)
    "🕔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕔"
  else
    fail("`1F554` doesn't match `five o’clock` (🕔)")
  end
end

it "`1F560` (fully-qualified) should match `five-thirty` (🕠)" do
  if m = "🕠".match(Emoji::EMOJI_REGEX)
    "🕠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕠"
  else
    fail("`1F560` doesn't match `five-thirty` (🕠)")
  end
end

it "`1F555` (fully-qualified) should match `six o’clock` (🕕)" do
  if m = "🕕".match(Emoji::EMOJI_REGEX)
    "🕕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕕"
  else
    fail("`1F555` doesn't match `six o’clock` (🕕)")
  end
end

it "`1F561` (fully-qualified) should match `six-thirty` (🕡)" do
  if m = "🕡".match(Emoji::EMOJI_REGEX)
    "🕡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕡"
  else
    fail("`1F561` doesn't match `six-thirty` (🕡)")
  end
end

it "`1F556` (fully-qualified) should match `seven o’clock` (🕖)" do
  if m = "🕖".match(Emoji::EMOJI_REGEX)
    "🕖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕖"
  else
    fail("`1F556` doesn't match `seven o’clock` (🕖)")
  end
end

it "`1F562` (fully-qualified) should match `seven-thirty` (🕢)" do
  if m = "🕢".match(Emoji::EMOJI_REGEX)
    "🕢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕢"
  else
    fail("`1F562` doesn't match `seven-thirty` (🕢)")
  end
end

it "`1F557` (fully-qualified) should match `eight o’clock` (🕗)" do
  if m = "🕗".match(Emoji::EMOJI_REGEX)
    "🕗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕗"
  else
    fail("`1F557` doesn't match `eight o’clock` (🕗)")
  end
end

it "`1F563` (fully-qualified) should match `eight-thirty` (🕣)" do
  if m = "🕣".match(Emoji::EMOJI_REGEX)
    "🕣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕣"
  else
    fail("`1F563` doesn't match `eight-thirty` (🕣)")
  end
end

it "`1F558` (fully-qualified) should match `nine o’clock` (🕘)" do
  if m = "🕘".match(Emoji::EMOJI_REGEX)
    "🕘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕘"
  else
    fail("`1F558` doesn't match `nine o’clock` (🕘)")
  end
end

it "`1F564` (fully-qualified) should match `nine-thirty` (🕤)" do
  if m = "🕤".match(Emoji::EMOJI_REGEX)
    "🕤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕤"
  else
    fail("`1F564` doesn't match `nine-thirty` (🕤)")
  end
end

it "`1F559` (fully-qualified) should match `ten o’clock` (🕙)" do
  if m = "🕙".match(Emoji::EMOJI_REGEX)
    "🕙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕙"
  else
    fail("`1F559` doesn't match `ten o’clock` (🕙)")
  end
end

it "`1F565` (fully-qualified) should match `ten-thirty` (🕥)" do
  if m = "🕥".match(Emoji::EMOJI_REGEX)
    "🕥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕥"
  else
    fail("`1F565` doesn't match `ten-thirty` (🕥)")
  end
end

it "`1F55A` (fully-qualified) should match `eleven o’clock` (🕚)" do
  if m = "🕚".match(Emoji::EMOJI_REGEX)
    "🕚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕚"
  else
    fail("`1F55A` doesn't match `eleven o’clock` (🕚)")
  end
end

it "`1F566` (fully-qualified) should match `eleven-thirty` (🕦)" do
  if m = "🕦".match(Emoji::EMOJI_REGEX)
    "🕦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕦"
  else
    fail("`1F566` doesn't match `eleven-thirty` (🕦)")
  end
end

it "`1F311` (fully-qualified) should match `new moon` (🌑)" do
  if m = "🌑".match(Emoji::EMOJI_REGEX)
    "🌑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌑"
  else
    fail("`1F311` doesn't match `new moon` (🌑)")
  end
end

it "`1F312` (fully-qualified) should match `waxing crescent moon` (🌒)" do
  if m = "🌒".match(Emoji::EMOJI_REGEX)
    "🌒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌒"
  else
    fail("`1F312` doesn't match `waxing crescent moon` (🌒)")
  end
end

it "`1F313` (fully-qualified) should match `first quarter moon` (🌓)" do
  if m = "🌓".match(Emoji::EMOJI_REGEX)
    "🌓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌓"
  else
    fail("`1F313` doesn't match `first quarter moon` (🌓)")
  end
end

it "`1F314` (fully-qualified) should match `waxing gibbous moon` (🌔)" do
  if m = "🌔".match(Emoji::EMOJI_REGEX)
    "🌔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌔"
  else
    fail("`1F314` doesn't match `waxing gibbous moon` (🌔)")
  end
end

it "`1F315` (fully-qualified) should match `full moon` (🌕)" do
  if m = "🌕".match(Emoji::EMOJI_REGEX)
    "🌕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌕"
  else
    fail("`1F315` doesn't match `full moon` (🌕)")
  end
end

it "`1F316` (fully-qualified) should match `waning gibbous moon` (🌖)" do
  if m = "🌖".match(Emoji::EMOJI_REGEX)
    "🌖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌖"
  else
    fail("`1F316` doesn't match `waning gibbous moon` (🌖)")
  end
end

it "`1F317` (fully-qualified) should match `last quarter moon` (🌗)" do
  if m = "🌗".match(Emoji::EMOJI_REGEX)
    "🌗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌗"
  else
    fail("`1F317` doesn't match `last quarter moon` (🌗)")
  end
end

it "`1F318` (fully-qualified) should match `waning crescent moon` (🌘)" do
  if m = "🌘".match(Emoji::EMOJI_REGEX)
    "🌘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌘"
  else
    fail("`1F318` doesn't match `waning crescent moon` (🌘)")
  end
end

it "`1F319` (fully-qualified) should match `crescent moon` (🌙)" do
  if m = "🌙".match(Emoji::EMOJI_REGEX)
    "🌙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌙"
  else
    fail("`1F319` doesn't match `crescent moon` (🌙)")
  end
end

it "`1F31A` (fully-qualified) should match `new moon face` (🌚)" do
  if m = "🌚".match(Emoji::EMOJI_REGEX)
    "🌚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌚"
  else
    fail("`1F31A` doesn't match `new moon face` (🌚)")
  end
end

it "`1F31B` (fully-qualified) should match `first quarter moon face` (🌛)" do
  if m = "🌛".match(Emoji::EMOJI_REGEX)
    "🌛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌛"
  else
    fail("`1F31B` doesn't match `first quarter moon face` (🌛)")
  end
end

it "`1F31C` (fully-qualified) should match `last quarter moon face` (🌜)" do
  if m = "🌜".match(Emoji::EMOJI_REGEX)
    "🌜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌜"
  else
    fail("`1F31C` doesn't match `last quarter moon face` (🌜)")
  end
end

it "`1F321 FE0F` (fully-qualified) should match `thermometer` (🌡️)" do
  if m = "🌡️".match(Emoji::EMOJI_REGEX)
    "🌡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌡️"
  else
    fail("`1F321 FE0F` doesn't match `thermometer` (🌡️)")
  end
end

it "`1F321` (unqualified) should match `thermometer` (🌡)" do
  if m = "🌡".match(Emoji::EMOJI_REGEX)
    "🌡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌡"
  else
    fail("`1F321` doesn't match `thermometer` (🌡)")
  end
end

it "`2600 FE0F` (fully-qualified) should match `sun` (☀️)" do
  if m = "☀️".match(Emoji::EMOJI_REGEX)
    "☀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☀️"
  else
    fail("`2600 FE0F` doesn't match `sun` (☀️)")
  end
end

it "`2600` (unqualified) should match `sun` (☀)" do
  if m = "☀".match(Emoji::EMOJI_REGEX)
    "☀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☀"
  else
    fail("`2600` doesn't match `sun` (☀)")
  end
end

it "`1F31D` (fully-qualified) should match `full moon face` (🌝)" do
  if m = "🌝".match(Emoji::EMOJI_REGEX)
    "🌝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌝"
  else
    fail("`1F31D` doesn't match `full moon face` (🌝)")
  end
end

it "`1F31E` (fully-qualified) should match `sun with face` (🌞)" do
  if m = "🌞".match(Emoji::EMOJI_REGEX)
    "🌞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌞"
  else
    fail("`1F31E` doesn't match `sun with face` (🌞)")
  end
end

it "`1FA90` (fully-qualified) should match `ringed planet` (🪐)" do
  if m = "🪐".match(Emoji::EMOJI_REGEX)
    "🪐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪐"
  else
    fail("`1FA90` doesn't match `ringed planet` (🪐)")
  end
end

it "`2B50` (fully-qualified) should match `star` (⭐)" do
  if m = "⭐".match(Emoji::EMOJI_REGEX)
    "⭐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⭐"
  else
    fail("`2B50` doesn't match `star` (⭐)")
  end
end

it "`1F31F` (fully-qualified) should match `glowing star` (🌟)" do
  if m = "🌟".match(Emoji::EMOJI_REGEX)
    "🌟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌟"
  else
    fail("`1F31F` doesn't match `glowing star` (🌟)")
  end
end

it "`1F320` (fully-qualified) should match `shooting star` (🌠)" do
  if m = "🌠".match(Emoji::EMOJI_REGEX)
    "🌠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌠"
  else
    fail("`1F320` doesn't match `shooting star` (🌠)")
  end
end

it "`1F30C` (fully-qualified) should match `milky way` (🌌)" do
  if m = "🌌".match(Emoji::EMOJI_REGEX)
    "🌌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌌"
  else
    fail("`1F30C` doesn't match `milky way` (🌌)")
  end
end

it "`2601 FE0F` (fully-qualified) should match `cloud` (☁️)" do
  if m = "☁️".match(Emoji::EMOJI_REGEX)
    "☁️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☁️"
  else
    fail("`2601 FE0F` doesn't match `cloud` (☁️)")
  end
end

it "`2601` (unqualified) should match `cloud` (☁)" do
  if m = "☁".match(Emoji::EMOJI_REGEX)
    "☁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☁"
  else
    fail("`2601` doesn't match `cloud` (☁)")
  end
end

it "`26C5` (fully-qualified) should match `sun behind cloud` (⛅)" do
  if m = "⛅".match(Emoji::EMOJI_REGEX)
    "⛅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛅"
  else
    fail("`26C5` doesn't match `sun behind cloud` (⛅)")
  end
end

it "`26C8 FE0F` (fully-qualified) should match `cloud with lightning and rain` (⛈️)" do
  if m = "⛈️".match(Emoji::EMOJI_REGEX)
    "⛈️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛈️"
  else
    fail("`26C8 FE0F` doesn't match `cloud with lightning and rain` (⛈️)")
  end
end

it "`26C8` (unqualified) should match `cloud with lightning and rain` (⛈)" do
  if m = "⛈".match(Emoji::EMOJI_REGEX)
    "⛈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛈"
  else
    fail("`26C8` doesn't match `cloud with lightning and rain` (⛈)")
  end
end

it "`1F324 FE0F` (fully-qualified) should match `sun behind small cloud` (🌤️)" do
  if m = "🌤️".match(Emoji::EMOJI_REGEX)
    "🌤️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌤️"
  else
    fail("`1F324 FE0F` doesn't match `sun behind small cloud` (🌤️)")
  end
end

it "`1F324` (unqualified) should match `sun behind small cloud` (🌤)" do
  if m = "🌤".match(Emoji::EMOJI_REGEX)
    "🌤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌤"
  else
    fail("`1F324` doesn't match `sun behind small cloud` (🌤)")
  end
end

it "`1F325 FE0F` (fully-qualified) should match `sun behind large cloud` (🌥️)" do
  if m = "🌥️".match(Emoji::EMOJI_REGEX)
    "🌥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌥️"
  else
    fail("`1F325 FE0F` doesn't match `sun behind large cloud` (🌥️)")
  end
end

it "`1F325` (unqualified) should match `sun behind large cloud` (🌥)" do
  if m = "🌥".match(Emoji::EMOJI_REGEX)
    "🌥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌥"
  else
    fail("`1F325` doesn't match `sun behind large cloud` (🌥)")
  end
end

it "`1F326 FE0F` (fully-qualified) should match `sun behind rain cloud` (🌦️)" do
  if m = "🌦️".match(Emoji::EMOJI_REGEX)
    "🌦️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌦️"
  else
    fail("`1F326 FE0F` doesn't match `sun behind rain cloud` (🌦️)")
  end
end

it "`1F326` (unqualified) should match `sun behind rain cloud` (🌦)" do
  if m = "🌦".match(Emoji::EMOJI_REGEX)
    "🌦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌦"
  else
    fail("`1F326` doesn't match `sun behind rain cloud` (🌦)")
  end
end

it "`1F327 FE0F` (fully-qualified) should match `cloud with rain` (🌧️)" do
  if m = "🌧️".match(Emoji::EMOJI_REGEX)
    "🌧️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌧️"
  else
    fail("`1F327 FE0F` doesn't match `cloud with rain` (🌧️)")
  end
end

it "`1F327` (unqualified) should match `cloud with rain` (🌧)" do
  if m = "🌧".match(Emoji::EMOJI_REGEX)
    "🌧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌧"
  else
    fail("`1F327` doesn't match `cloud with rain` (🌧)")
  end
end

it "`1F328 FE0F` (fully-qualified) should match `cloud with snow` (🌨️)" do
  if m = "🌨️".match(Emoji::EMOJI_REGEX)
    "🌨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌨️"
  else
    fail("`1F328 FE0F` doesn't match `cloud with snow` (🌨️)")
  end
end

it "`1F328` (unqualified) should match `cloud with snow` (🌨)" do
  if m = "🌨".match(Emoji::EMOJI_REGEX)
    "🌨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌨"
  else
    fail("`1F328` doesn't match `cloud with snow` (🌨)")
  end
end

it "`1F329 FE0F` (fully-qualified) should match `cloud with lightning` (🌩️)" do
  if m = "🌩️".match(Emoji::EMOJI_REGEX)
    "🌩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌩️"
  else
    fail("`1F329 FE0F` doesn't match `cloud with lightning` (🌩️)")
  end
end

it "`1F329` (unqualified) should match `cloud with lightning` (🌩)" do
  if m = "🌩".match(Emoji::EMOJI_REGEX)
    "🌩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌩"
  else
    fail("`1F329` doesn't match `cloud with lightning` (🌩)")
  end
end

it "`1F32A FE0F` (fully-qualified) should match `tornado` (🌪️)" do
  if m = "🌪️".match(Emoji::EMOJI_REGEX)
    "🌪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌪️"
  else
    fail("`1F32A FE0F` doesn't match `tornado` (🌪️)")
  end
end

it "`1F32A` (unqualified) should match `tornado` (🌪)" do
  if m = "🌪".match(Emoji::EMOJI_REGEX)
    "🌪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌪"
  else
    fail("`1F32A` doesn't match `tornado` (🌪)")
  end
end

it "`1F32B FE0F` (fully-qualified) should match `fog` (🌫️)" do
  if m = "🌫️".match(Emoji::EMOJI_REGEX)
    "🌫️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌫️"
  else
    fail("`1F32B FE0F` doesn't match `fog` (🌫️)")
  end
end

it "`1F32B` (unqualified) should match `fog` (🌫)" do
  if m = "🌫".match(Emoji::EMOJI_REGEX)
    "🌫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌫"
  else
    fail("`1F32B` doesn't match `fog` (🌫)")
  end
end

it "`1F32C FE0F` (fully-qualified) should match `wind face` (🌬️)" do
  if m = "🌬️".match(Emoji::EMOJI_REGEX)
    "🌬️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌬️"
  else
    fail("`1F32C FE0F` doesn't match `wind face` (🌬️)")
  end
end

it "`1F32C` (unqualified) should match `wind face` (🌬)" do
  if m = "🌬".match(Emoji::EMOJI_REGEX)
    "🌬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌬"
  else
    fail("`1F32C` doesn't match `wind face` (🌬)")
  end
end

it "`1F300` (fully-qualified) should match `cyclone` (🌀)" do
  if m = "🌀".match(Emoji::EMOJI_REGEX)
    "🌀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌀"
  else
    fail("`1F300` doesn't match `cyclone` (🌀)")
  end
end

it "`1F308` (fully-qualified) should match `rainbow` (🌈)" do
  if m = "🌈".match(Emoji::EMOJI_REGEX)
    "🌈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌈"
  else
    fail("`1F308` doesn't match `rainbow` (🌈)")
  end
end

it "`1F302` (fully-qualified) should match `closed umbrella` (🌂)" do
  if m = "🌂".match(Emoji::EMOJI_REGEX)
    "🌂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌂"
  else
    fail("`1F302` doesn't match `closed umbrella` (🌂)")
  end
end

it "`2602 FE0F` (fully-qualified) should match `umbrella` (☂️)" do
  if m = "☂️".match(Emoji::EMOJI_REGEX)
    "☂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☂️"
  else
    fail("`2602 FE0F` doesn't match `umbrella` (☂️)")
  end
end

it "`2602` (unqualified) should match `umbrella` (☂)" do
  if m = "☂".match(Emoji::EMOJI_REGEX)
    "☂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☂"
  else
    fail("`2602` doesn't match `umbrella` (☂)")
  end
end

it "`2614` (fully-qualified) should match `umbrella with rain drops` (☔)" do
  if m = "☔".match(Emoji::EMOJI_REGEX)
    "☔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☔"
  else
    fail("`2614` doesn't match `umbrella with rain drops` (☔)")
  end
end

it "`26F1 FE0F` (fully-qualified) should match `umbrella on ground` (⛱️)" do
  if m = "⛱️".match(Emoji::EMOJI_REGEX)
    "⛱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛱️"
  else
    fail("`26F1 FE0F` doesn't match `umbrella on ground` (⛱️)")
  end
end

it "`26F1` (unqualified) should match `umbrella on ground` (⛱)" do
  if m = "⛱".match(Emoji::EMOJI_REGEX)
    "⛱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛱"
  else
    fail("`26F1` doesn't match `umbrella on ground` (⛱)")
  end
end

it "`26A1` (fully-qualified) should match `high voltage` (⚡)" do
  if m = "⚡".match(Emoji::EMOJI_REGEX)
    "⚡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚡"
  else
    fail("`26A1` doesn't match `high voltage` (⚡)")
  end
end

it "`2744 FE0F` (fully-qualified) should match `snowflake` (❄️)" do
  if m = "❄️".match(Emoji::EMOJI_REGEX)
    "❄️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❄️"
  else
    fail("`2744 FE0F` doesn't match `snowflake` (❄️)")
  end
end

it "`2744` (unqualified) should match `snowflake` (❄)" do
  if m = "❄".match(Emoji::EMOJI_REGEX)
    "❄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❄"
  else
    fail("`2744` doesn't match `snowflake` (❄)")
  end
end

it "`2603 FE0F` (fully-qualified) should match `snowman` (☃️)" do
  if m = "☃️".match(Emoji::EMOJI_REGEX)
    "☃️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☃️"
  else
    fail("`2603 FE0F` doesn't match `snowman` (☃️)")
  end
end

it "`2603` (unqualified) should match `snowman` (☃)" do
  if m = "☃".match(Emoji::EMOJI_REGEX)
    "☃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☃"
  else
    fail("`2603` doesn't match `snowman` (☃)")
  end
end

it "`26C4` (fully-qualified) should match `snowman without snow` (⛄)" do
  if m = "⛄".match(Emoji::EMOJI_REGEX)
    "⛄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛄"
  else
    fail("`26C4` doesn't match `snowman without snow` (⛄)")
  end
end

it "`2604 FE0F` (fully-qualified) should match `comet` (☄️)" do
  if m = "☄️".match(Emoji::EMOJI_REGEX)
    "☄️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☄️"
  else
    fail("`2604 FE0F` doesn't match `comet` (☄️)")
  end
end

it "`2604` (unqualified) should match `comet` (☄)" do
  if m = "☄".match(Emoji::EMOJI_REGEX)
    "☄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☄"
  else
    fail("`2604` doesn't match `comet` (☄)")
  end
end

it "`1F525` (fully-qualified) should match `fire` (🔥)" do
  if m = "🔥".match(Emoji::EMOJI_REGEX)
    "🔥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔥"
  else
    fail("`1F525` doesn't match `fire` (🔥)")
  end
end

it "`1F4A7` (fully-qualified) should match `droplet` (💧)" do
  if m = "💧".match(Emoji::EMOJI_REGEX)
    "💧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💧"
  else
    fail("`1F4A7` doesn't match `droplet` (💧)")
  end
end

it "`1F30A` (fully-qualified) should match `water wave` (🌊)" do
  if m = "🌊".match(Emoji::EMOJI_REGEX)
    "🌊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🌊"
  else
    fail("`1F30A` doesn't match `water wave` (🌊)")
  end
end

it "`1F383` (fully-qualified) should match `jack-o-lantern` (🎃)" do
  if m = "🎃".match(Emoji::EMOJI_REGEX)
    "🎃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎃"
  else
    fail("`1F383` doesn't match `jack-o-lantern` (🎃)")
  end
end

it "`1F384` (fully-qualified) should match `Christmas tree` (🎄)" do
  if m = "🎄".match(Emoji::EMOJI_REGEX)
    "🎄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎄"
  else
    fail("`1F384` doesn't match `Christmas tree` (🎄)")
  end
end

it "`1F386` (fully-qualified) should match `fireworks` (🎆)" do
  if m = "🎆".match(Emoji::EMOJI_REGEX)
    "🎆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎆"
  else
    fail("`1F386` doesn't match `fireworks` (🎆)")
  end
end

it "`1F387` (fully-qualified) should match `sparkler` (🎇)" do
  if m = "🎇".match(Emoji::EMOJI_REGEX)
    "🎇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎇"
  else
    fail("`1F387` doesn't match `sparkler` (🎇)")
  end
end

it "`1F9E8` (fully-qualified) should match `firecracker` (🧨)" do
  if m = "🧨".match(Emoji::EMOJI_REGEX)
    "🧨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧨"
  else
    fail("`1F9E8` doesn't match `firecracker` (🧨)")
  end
end

it "`2728` (fully-qualified) should match `sparkles` (✨)" do
  if m = "✨".match(Emoji::EMOJI_REGEX)
    "✨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✨"
  else
    fail("`2728` doesn't match `sparkles` (✨)")
  end
end

it "`1F388` (fully-qualified) should match `balloon` (🎈)" do
  if m = "🎈".match(Emoji::EMOJI_REGEX)
    "🎈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎈"
  else
    fail("`1F388` doesn't match `balloon` (🎈)")
  end
end

it "`1F389` (fully-qualified) should match `party popper` (🎉)" do
  if m = "🎉".match(Emoji::EMOJI_REGEX)
    "🎉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎉"
  else
    fail("`1F389` doesn't match `party popper` (🎉)")
  end
end

it "`1F38A` (fully-qualified) should match `confetti ball` (🎊)" do
  if m = "🎊".match(Emoji::EMOJI_REGEX)
    "🎊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎊"
  else
    fail("`1F38A` doesn't match `confetti ball` (🎊)")
  end
end

it "`1F38B` (fully-qualified) should match `tanabata tree` (🎋)" do
  if m = "🎋".match(Emoji::EMOJI_REGEX)
    "🎋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎋"
  else
    fail("`1F38B` doesn't match `tanabata tree` (🎋)")
  end
end

it "`1F38D` (fully-qualified) should match `pine decoration` (🎍)" do
  if m = "🎍".match(Emoji::EMOJI_REGEX)
    "🎍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎍"
  else
    fail("`1F38D` doesn't match `pine decoration` (🎍)")
  end
end

it "`1F38E` (fully-qualified) should match `Japanese dolls` (🎎)" do
  if m = "🎎".match(Emoji::EMOJI_REGEX)
    "🎎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎎"
  else
    fail("`1F38E` doesn't match `Japanese dolls` (🎎)")
  end
end

it "`1F38F` (fully-qualified) should match `carp streamer` (🎏)" do
  if m = "🎏".match(Emoji::EMOJI_REGEX)
    "🎏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎏"
  else
    fail("`1F38F` doesn't match `carp streamer` (🎏)")
  end
end

it "`1F390` (fully-qualified) should match `wind chime` (🎐)" do
  if m = "🎐".match(Emoji::EMOJI_REGEX)
    "🎐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎐"
  else
    fail("`1F390` doesn't match `wind chime` (🎐)")
  end
end

it "`1F391` (fully-qualified) should match `moon viewing ceremony` (🎑)" do
  if m = "🎑".match(Emoji::EMOJI_REGEX)
    "🎑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎑"
  else
    fail("`1F391` doesn't match `moon viewing ceremony` (🎑)")
  end
end

it "`1F9E7` (fully-qualified) should match `red envelope` (🧧)" do
  if m = "🧧".match(Emoji::EMOJI_REGEX)
    "🧧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧧"
  else
    fail("`1F9E7` doesn't match `red envelope` (🧧)")
  end
end

it "`1F380` (fully-qualified) should match `ribbon` (🎀)" do
  if m = "🎀".match(Emoji::EMOJI_REGEX)
    "🎀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎀"
  else
    fail("`1F380` doesn't match `ribbon` (🎀)")
  end
end

it "`1F381` (fully-qualified) should match `wrapped gift` (🎁)" do
  if m = "🎁".match(Emoji::EMOJI_REGEX)
    "🎁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎁"
  else
    fail("`1F381` doesn't match `wrapped gift` (🎁)")
  end
end

it "`1F397 FE0F` (fully-qualified) should match `reminder ribbon` (🎗️)" do
  if m = "🎗️".match(Emoji::EMOJI_REGEX)
    "🎗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎗️"
  else
    fail("`1F397 FE0F` doesn't match `reminder ribbon` (🎗️)")
  end
end

it "`1F397` (unqualified) should match `reminder ribbon` (🎗)" do
  if m = "🎗".match(Emoji::EMOJI_REGEX)
    "🎗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎗"
  else
    fail("`1F397` doesn't match `reminder ribbon` (🎗)")
  end
end

it "`1F39F FE0F` (fully-qualified) should match `admission tickets` (🎟️)" do
  if m = "🎟️".match(Emoji::EMOJI_REGEX)
    "🎟️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎟️"
  else
    fail("`1F39F FE0F` doesn't match `admission tickets` (🎟️)")
  end
end

it "`1F39F` (unqualified) should match `admission tickets` (🎟)" do
  if m = "🎟".match(Emoji::EMOJI_REGEX)
    "🎟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎟"
  else
    fail("`1F39F` doesn't match `admission tickets` (🎟)")
  end
end

it "`1F3AB` (fully-qualified) should match `ticket` (🎫)" do
  if m = "🎫".match(Emoji::EMOJI_REGEX)
    "🎫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎫"
  else
    fail("`1F3AB` doesn't match `ticket` (🎫)")
  end
end

it "`1F396 FE0F` (fully-qualified) should match `military medal` (🎖️)" do
  if m = "🎖️".match(Emoji::EMOJI_REGEX)
    "🎖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎖️"
  else
    fail("`1F396 FE0F` doesn't match `military medal` (🎖️)")
  end
end

it "`1F396` (unqualified) should match `military medal` (🎖)" do
  if m = "🎖".match(Emoji::EMOJI_REGEX)
    "🎖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎖"
  else
    fail("`1F396` doesn't match `military medal` (🎖)")
  end
end

it "`1F3C6` (fully-qualified) should match `trophy` (🏆)" do
  if m = "🏆".match(Emoji::EMOJI_REGEX)
    "🏆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏆"
  else
    fail("`1F3C6` doesn't match `trophy` (🏆)")
  end
end

it "`1F3C5` (fully-qualified) should match `sports medal` (🏅)" do
  if m = "🏅".match(Emoji::EMOJI_REGEX)
    "🏅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏅"
  else
    fail("`1F3C5` doesn't match `sports medal` (🏅)")
  end
end

it "`1F947` (fully-qualified) should match `1st place medal` (🥇)" do
  if m = "🥇".match(Emoji::EMOJI_REGEX)
    "🥇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥇"
  else
    fail("`1F947` doesn't match `1st place medal` (🥇)")
  end
end

it "`1F948` (fully-qualified) should match `2nd place medal` (🥈)" do
  if m = "🥈".match(Emoji::EMOJI_REGEX)
    "🥈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥈"
  else
    fail("`1F948` doesn't match `2nd place medal` (🥈)")
  end
end

it "`1F949` (fully-qualified) should match `3rd place medal` (🥉)" do
  if m = "🥉".match(Emoji::EMOJI_REGEX)
    "🥉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥉"
  else
    fail("`1F949` doesn't match `3rd place medal` (🥉)")
  end
end

it "`26BD` (fully-qualified) should match `soccer ball` (⚽)" do
  if m = "⚽".match(Emoji::EMOJI_REGEX)
    "⚽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚽"
  else
    fail("`26BD` doesn't match `soccer ball` (⚽)")
  end
end

it "`26BE` (fully-qualified) should match `baseball` (⚾)" do
  if m = "⚾".match(Emoji::EMOJI_REGEX)
    "⚾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚾"
  else
    fail("`26BE` doesn't match `baseball` (⚾)")
  end
end

it "`1F94E` (fully-qualified) should match `softball` (🥎)" do
  if m = "🥎".match(Emoji::EMOJI_REGEX)
    "🥎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥎"
  else
    fail("`1F94E` doesn't match `softball` (🥎)")
  end
end

it "`1F3C0` (fully-qualified) should match `basketball` (🏀)" do
  if m = "🏀".match(Emoji::EMOJI_REGEX)
    "🏀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏀"
  else
    fail("`1F3C0` doesn't match `basketball` (🏀)")
  end
end

it "`1F3D0` (fully-qualified) should match `volleyball` (🏐)" do
  if m = "🏐".match(Emoji::EMOJI_REGEX)
    "🏐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏐"
  else
    fail("`1F3D0` doesn't match `volleyball` (🏐)")
  end
end

it "`1F3C8` (fully-qualified) should match `american football` (🏈)" do
  if m = "🏈".match(Emoji::EMOJI_REGEX)
    "🏈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏈"
  else
    fail("`1F3C8` doesn't match `american football` (🏈)")
  end
end

it "`1F3C9` (fully-qualified) should match `rugby football` (🏉)" do
  if m = "🏉".match(Emoji::EMOJI_REGEX)
    "🏉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏉"
  else
    fail("`1F3C9` doesn't match `rugby football` (🏉)")
  end
end

it "`1F3BE` (fully-qualified) should match `tennis` (🎾)" do
  if m = "🎾".match(Emoji::EMOJI_REGEX)
    "🎾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎾"
  else
    fail("`1F3BE` doesn't match `tennis` (🎾)")
  end
end

it "`1F94F` (fully-qualified) should match `flying disc` (🥏)" do
  if m = "🥏".match(Emoji::EMOJI_REGEX)
    "🥏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥏"
  else
    fail("`1F94F` doesn't match `flying disc` (🥏)")
  end
end

it "`1F3B3` (fully-qualified) should match `bowling` (🎳)" do
  if m = "🎳".match(Emoji::EMOJI_REGEX)
    "🎳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎳"
  else
    fail("`1F3B3` doesn't match `bowling` (🎳)")
  end
end

it "`1F3CF` (fully-qualified) should match `cricket game` (🏏)" do
  if m = "🏏".match(Emoji::EMOJI_REGEX)
    "🏏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏏"
  else
    fail("`1F3CF` doesn't match `cricket game` (🏏)")
  end
end

it "`1F3D1` (fully-qualified) should match `field hockey` (🏑)" do
  if m = "🏑".match(Emoji::EMOJI_REGEX)
    "🏑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏑"
  else
    fail("`1F3D1` doesn't match `field hockey` (🏑)")
  end
end

it "`1F3D2` (fully-qualified) should match `ice hockey` (🏒)" do
  if m = "🏒".match(Emoji::EMOJI_REGEX)
    "🏒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏒"
  else
    fail("`1F3D2` doesn't match `ice hockey` (🏒)")
  end
end

it "`1F94D` (fully-qualified) should match `lacrosse` (🥍)" do
  if m = "🥍".match(Emoji::EMOJI_REGEX)
    "🥍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥍"
  else
    fail("`1F94D` doesn't match `lacrosse` (🥍)")
  end
end

it "`1F3D3` (fully-qualified) should match `ping pong` (🏓)" do
  if m = "🏓".match(Emoji::EMOJI_REGEX)
    "🏓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏓"
  else
    fail("`1F3D3` doesn't match `ping pong` (🏓)")
  end
end

it "`1F3F8` (fully-qualified) should match `badminton` (🏸)" do
  if m = "🏸".match(Emoji::EMOJI_REGEX)
    "🏸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏸"
  else
    fail("`1F3F8` doesn't match `badminton` (🏸)")
  end
end

it "`1F94A` (fully-qualified) should match `boxing glove` (🥊)" do
  if m = "🥊".match(Emoji::EMOJI_REGEX)
    "🥊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥊"
  else
    fail("`1F94A` doesn't match `boxing glove` (🥊)")
  end
end

it "`1F94B` (fully-qualified) should match `martial arts uniform` (🥋)" do
  if m = "🥋".match(Emoji::EMOJI_REGEX)
    "🥋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥋"
  else
    fail("`1F94B` doesn't match `martial arts uniform` (🥋)")
  end
end

it "`1F945` (fully-qualified) should match `goal net` (🥅)" do
  if m = "🥅".match(Emoji::EMOJI_REGEX)
    "🥅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥅"
  else
    fail("`1F945` doesn't match `goal net` (🥅)")
  end
end

it "`26F3` (fully-qualified) should match `flag in hole` (⛳)" do
  if m = "⛳".match(Emoji::EMOJI_REGEX)
    "⛳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛳"
  else
    fail("`26F3` doesn't match `flag in hole` (⛳)")
  end
end

it "`26F8 FE0F` (fully-qualified) should match `ice skate` (⛸️)" do
  if m = "⛸️".match(Emoji::EMOJI_REGEX)
    "⛸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛸️"
  else
    fail("`26F8 FE0F` doesn't match `ice skate` (⛸️)")
  end
end

it "`26F8` (unqualified) should match `ice skate` (⛸)" do
  if m = "⛸".match(Emoji::EMOJI_REGEX)
    "⛸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛸"
  else
    fail("`26F8` doesn't match `ice skate` (⛸)")
  end
end

it "`1F3A3` (fully-qualified) should match `fishing pole` (🎣)" do
  if m = "🎣".match(Emoji::EMOJI_REGEX)
    "🎣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎣"
  else
    fail("`1F3A3` doesn't match `fishing pole` (🎣)")
  end
end

it "`1F93F` (fully-qualified) should match `diving mask` (🤿)" do
  if m = "🤿".match(Emoji::EMOJI_REGEX)
    "🤿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🤿"
  else
    fail("`1F93F` doesn't match `diving mask` (🤿)")
  end
end

it "`1F3BD` (fully-qualified) should match `running shirt` (🎽)" do
  if m = "🎽".match(Emoji::EMOJI_REGEX)
    "🎽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎽"
  else
    fail("`1F3BD` doesn't match `running shirt` (🎽)")
  end
end

it "`1F3BF` (fully-qualified) should match `skis` (🎿)" do
  if m = "🎿".match(Emoji::EMOJI_REGEX)
    "🎿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎿"
  else
    fail("`1F3BF` doesn't match `skis` (🎿)")
  end
end

it "`1F6F7` (fully-qualified) should match `sled` (🛷)" do
  if m = "🛷".match(Emoji::EMOJI_REGEX)
    "🛷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛷"
  else
    fail("`1F6F7` doesn't match `sled` (🛷)")
  end
end

it "`1F94C` (fully-qualified) should match `curling stone` (🥌)" do
  if m = "🥌".match(Emoji::EMOJI_REGEX)
    "🥌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥌"
  else
    fail("`1F94C` doesn't match `curling stone` (🥌)")
  end
end

it "`1F3AF` (fully-qualified) should match `direct hit` (🎯)" do
  if m = "🎯".match(Emoji::EMOJI_REGEX)
    "🎯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎯"
  else
    fail("`1F3AF` doesn't match `direct hit` (🎯)")
  end
end

it "`1FA80` (fully-qualified) should match `yo-yo` (🪀)" do
  if m = "🪀".match(Emoji::EMOJI_REGEX)
    "🪀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪀"
  else
    fail("`1FA80` doesn't match `yo-yo` (🪀)")
  end
end

it "`1FA81` (fully-qualified) should match `kite` (🪁)" do
  if m = "🪁".match(Emoji::EMOJI_REGEX)
    "🪁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪁"
  else
    fail("`1FA81` doesn't match `kite` (🪁)")
  end
end

it "`1F3B1` (fully-qualified) should match `pool 8 ball` (🎱)" do
  if m = "🎱".match(Emoji::EMOJI_REGEX)
    "🎱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎱"
  else
    fail("`1F3B1` doesn't match `pool 8 ball` (🎱)")
  end
end

it "`1F52E` (fully-qualified) should match `crystal ball` (🔮)" do
  if m = "🔮".match(Emoji::EMOJI_REGEX)
    "🔮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔮"
  else
    fail("`1F52E` doesn't match `crystal ball` (🔮)")
  end
end

it "`1F9FF` (fully-qualified) should match `nazar amulet` (🧿)" do
  if m = "🧿".match(Emoji::EMOJI_REGEX)
    "🧿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧿"
  else
    fail("`1F9FF` doesn't match `nazar amulet` (🧿)")
  end
end

it "`1F3AE` (fully-qualified) should match `video game` (🎮)" do
  if m = "🎮".match(Emoji::EMOJI_REGEX)
    "🎮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎮"
  else
    fail("`1F3AE` doesn't match `video game` (🎮)")
  end
end

it "`1F579 FE0F` (fully-qualified) should match `joystick` (🕹️)" do
  if m = "🕹️".match(Emoji::EMOJI_REGEX)
    "🕹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕹️"
  else
    fail("`1F579 FE0F` doesn't match `joystick` (🕹️)")
  end
end

it "`1F579` (unqualified) should match `joystick` (🕹)" do
  if m = "🕹".match(Emoji::EMOJI_REGEX)
    "🕹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕹"
  else
    fail("`1F579` doesn't match `joystick` (🕹)")
  end
end

it "`1F3B0` (fully-qualified) should match `slot machine` (🎰)" do
  if m = "🎰".match(Emoji::EMOJI_REGEX)
    "🎰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎰"
  else
    fail("`1F3B0` doesn't match `slot machine` (🎰)")
  end
end

it "`1F3B2` (fully-qualified) should match `game die` (🎲)" do
  if m = "🎲".match(Emoji::EMOJI_REGEX)
    "🎲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎲"
  else
    fail("`1F3B2` doesn't match `game die` (🎲)")
  end
end

it "`1F9E9` (fully-qualified) should match `puzzle piece` (🧩)" do
  if m = "🧩".match(Emoji::EMOJI_REGEX)
    "🧩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧩"
  else
    fail("`1F9E9` doesn't match `puzzle piece` (🧩)")
  end
end

it "`1F9F8` (fully-qualified) should match `teddy bear` (🧸)" do
  if m = "🧸".match(Emoji::EMOJI_REGEX)
    "🧸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧸"
  else
    fail("`1F9F8` doesn't match `teddy bear` (🧸)")
  end
end

it "`2660 FE0F` (fully-qualified) should match `spade suit` (♠️)" do
  if m = "♠️".match(Emoji::EMOJI_REGEX)
    "♠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♠️"
  else
    fail("`2660 FE0F` doesn't match `spade suit` (♠️)")
  end
end

it "`2660` (unqualified) should match `spade suit` (♠)" do
  if m = "♠".match(Emoji::EMOJI_REGEX)
    "♠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♠"
  else
    fail("`2660` doesn't match `spade suit` (♠)")
  end
end

it "`2665 FE0F` (fully-qualified) should match `heart suit` (♥️)" do
  if m = "♥️".match(Emoji::EMOJI_REGEX)
    "♥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♥️"
  else
    fail("`2665 FE0F` doesn't match `heart suit` (♥️)")
  end
end

it "`2665` (unqualified) should match `heart suit` (♥)" do
  if m = "♥".match(Emoji::EMOJI_REGEX)
    "♥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♥"
  else
    fail("`2665` doesn't match `heart suit` (♥)")
  end
end

it "`2666 FE0F` (fully-qualified) should match `diamond suit` (♦️)" do
  if m = "♦️".match(Emoji::EMOJI_REGEX)
    "♦️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♦️"
  else
    fail("`2666 FE0F` doesn't match `diamond suit` (♦️)")
  end
end

it "`2666` (unqualified) should match `diamond suit` (♦)" do
  if m = "♦".match(Emoji::EMOJI_REGEX)
    "♦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♦"
  else
    fail("`2666` doesn't match `diamond suit` (♦)")
  end
end

it "`2663 FE0F` (fully-qualified) should match `club suit` (♣️)" do
  if m = "♣️".match(Emoji::EMOJI_REGEX)
    "♣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♣️"
  else
    fail("`2663 FE0F` doesn't match `club suit` (♣️)")
  end
end

it "`2663` (unqualified) should match `club suit` (♣)" do
  if m = "♣".match(Emoji::EMOJI_REGEX)
    "♣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♣"
  else
    fail("`2663` doesn't match `club suit` (♣)")
  end
end

it "`265F FE0F` (fully-qualified) should match `chess pawn` (♟️)" do
  if m = "♟️".match(Emoji::EMOJI_REGEX)
    "♟️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♟️"
  else
    fail("`265F FE0F` doesn't match `chess pawn` (♟️)")
  end
end

it "`265F` (unqualified) should match `chess pawn` (♟)" do
  if m = "♟".match(Emoji::EMOJI_REGEX)
    "♟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♟"
  else
    fail("`265F` doesn't match `chess pawn` (♟)")
  end
end

it "`1F0CF` (fully-qualified) should match `joker` (🃏)" do
  if m = "🃏".match(Emoji::EMOJI_REGEX)
    "🃏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🃏"
  else
    fail("`1F0CF` doesn't match `joker` (🃏)")
  end
end

it "`1F004` (fully-qualified) should match `mahjong red dragon` (🀄)" do
  if m = "🀄".match(Emoji::EMOJI_REGEX)
    "🀄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🀄"
  else
    fail("`1F004` doesn't match `mahjong red dragon` (🀄)")
  end
end

it "`1F3B4` (fully-qualified) should match `flower playing cards` (🎴)" do
  if m = "🎴".match(Emoji::EMOJI_REGEX)
    "🎴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎴"
  else
    fail("`1F3B4` doesn't match `flower playing cards` (🎴)")
  end
end

it "`1F3AD` (fully-qualified) should match `performing arts` (🎭)" do
  if m = "🎭".match(Emoji::EMOJI_REGEX)
    "🎭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎭"
  else
    fail("`1F3AD` doesn't match `performing arts` (🎭)")
  end
end

it "`1F5BC FE0F` (fully-qualified) should match `framed picture` (🖼️)" do
  if m = "🖼️".match(Emoji::EMOJI_REGEX)
    "🖼️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖼️"
  else
    fail("`1F5BC FE0F` doesn't match `framed picture` (🖼️)")
  end
end

it "`1F5BC` (unqualified) should match `framed picture` (🖼)" do
  if m = "🖼".match(Emoji::EMOJI_REGEX)
    "🖼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖼"
  else
    fail("`1F5BC` doesn't match `framed picture` (🖼)")
  end
end

it "`1F3A8` (fully-qualified) should match `artist palette` (🎨)" do
  if m = "🎨".match(Emoji::EMOJI_REGEX)
    "🎨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎨"
  else
    fail("`1F3A8` doesn't match `artist palette` (🎨)")
  end
end

it "`1F9F5` (fully-qualified) should match `thread` (🧵)" do
  if m = "🧵".match(Emoji::EMOJI_REGEX)
    "🧵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧵"
  else
    fail("`1F9F5` doesn't match `thread` (🧵)")
  end
end

it "`1F9F6` (fully-qualified) should match `yarn` (🧶)" do
  if m = "🧶".match(Emoji::EMOJI_REGEX)
    "🧶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧶"
  else
    fail("`1F9F6` doesn't match `yarn` (🧶)")
  end
end

it "`1F453` (fully-qualified) should match `glasses` (👓)" do
  if m = "👓".match(Emoji::EMOJI_REGEX)
    "👓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👓"
  else
    fail("`1F453` doesn't match `glasses` (👓)")
  end
end

it "`1F576 FE0F` (fully-qualified) should match `sunglasses` (🕶️)" do
  if m = "🕶️".match(Emoji::EMOJI_REGEX)
    "🕶️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕶️"
  else
    fail("`1F576 FE0F` doesn't match `sunglasses` (🕶️)")
  end
end

it "`1F576` (unqualified) should match `sunglasses` (🕶)" do
  if m = "🕶".match(Emoji::EMOJI_REGEX)
    "🕶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕶"
  else
    fail("`1F576` doesn't match `sunglasses` (🕶)")
  end
end

it "`1F97D` (fully-qualified) should match `goggles` (🥽)" do
  if m = "🥽".match(Emoji::EMOJI_REGEX)
    "🥽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥽"
  else
    fail("`1F97D` doesn't match `goggles` (🥽)")
  end
end

it "`1F97C` (fully-qualified) should match `lab coat` (🥼)" do
  if m = "🥼".match(Emoji::EMOJI_REGEX)
    "🥼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥼"
  else
    fail("`1F97C` doesn't match `lab coat` (🥼)")
  end
end

it "`1F9BA` (fully-qualified) should match `safety vest` (🦺)" do
  if m = "🦺".match(Emoji::EMOJI_REGEX)
    "🦺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦺"
  else
    fail("`1F9BA` doesn't match `safety vest` (🦺)")
  end
end

it "`1F454` (fully-qualified) should match `necktie` (👔)" do
  if m = "👔".match(Emoji::EMOJI_REGEX)
    "👔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👔"
  else
    fail("`1F454` doesn't match `necktie` (👔)")
  end
end

it "`1F455` (fully-qualified) should match `t-shirt` (👕)" do
  if m = "👕".match(Emoji::EMOJI_REGEX)
    "👕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👕"
  else
    fail("`1F455` doesn't match `t-shirt` (👕)")
  end
end

it "`1F456` (fully-qualified) should match `jeans` (👖)" do
  if m = "👖".match(Emoji::EMOJI_REGEX)
    "👖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👖"
  else
    fail("`1F456` doesn't match `jeans` (👖)")
  end
end

it "`1F9E3` (fully-qualified) should match `scarf` (🧣)" do
  if m = "🧣".match(Emoji::EMOJI_REGEX)
    "🧣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧣"
  else
    fail("`1F9E3` doesn't match `scarf` (🧣)")
  end
end

it "`1F9E4` (fully-qualified) should match `gloves` (🧤)" do
  if m = "🧤".match(Emoji::EMOJI_REGEX)
    "🧤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧤"
  else
    fail("`1F9E4` doesn't match `gloves` (🧤)")
  end
end

it "`1F9E5` (fully-qualified) should match `coat` (🧥)" do
  if m = "🧥".match(Emoji::EMOJI_REGEX)
    "🧥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧥"
  else
    fail("`1F9E5` doesn't match `coat` (🧥)")
  end
end

it "`1F9E6` (fully-qualified) should match `socks` (🧦)" do
  if m = "🧦".match(Emoji::EMOJI_REGEX)
    "🧦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧦"
  else
    fail("`1F9E6` doesn't match `socks` (🧦)")
  end
end

it "`1F457` (fully-qualified) should match `dress` (👗)" do
  if m = "👗".match(Emoji::EMOJI_REGEX)
    "👗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👗"
  else
    fail("`1F457` doesn't match `dress` (👗)")
  end
end

it "`1F458` (fully-qualified) should match `kimono` (👘)" do
  if m = "👘".match(Emoji::EMOJI_REGEX)
    "👘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👘"
  else
    fail("`1F458` doesn't match `kimono` (👘)")
  end
end

it "`1F97B` (fully-qualified) should match `sari` (🥻)" do
  if m = "🥻".match(Emoji::EMOJI_REGEX)
    "🥻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥻"
  else
    fail("`1F97B` doesn't match `sari` (🥻)")
  end
end

it "`1FA71` (fully-qualified) should match `one-piece swimsuit` (🩱)" do
  if m = "🩱".match(Emoji::EMOJI_REGEX)
    "🩱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩱"
  else
    fail("`1FA71` doesn't match `one-piece swimsuit` (🩱)")
  end
end

it "`1FA72` (fully-qualified) should match `swim brief` (🩲)" do
  if m = "🩲".match(Emoji::EMOJI_REGEX)
    "🩲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩲"
  else
    fail("`1FA72` doesn't match `swim brief` (🩲)")
  end
end

it "`1FA73` (fully-qualified) should match `shorts` (🩳)" do
  if m = "🩳".match(Emoji::EMOJI_REGEX)
    "🩳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩳"
  else
    fail("`1FA73` doesn't match `shorts` (🩳)")
  end
end

it "`1F459` (fully-qualified) should match `bikini` (👙)" do
  if m = "👙".match(Emoji::EMOJI_REGEX)
    "👙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👙"
  else
    fail("`1F459` doesn't match `bikini` (👙)")
  end
end

it "`1F45A` (fully-qualified) should match `woman’s clothes` (👚)" do
  if m = "👚".match(Emoji::EMOJI_REGEX)
    "👚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👚"
  else
    fail("`1F45A` doesn't match `woman’s clothes` (👚)")
  end
end

it "`1F45B` (fully-qualified) should match `purse` (👛)" do
  if m = "👛".match(Emoji::EMOJI_REGEX)
    "👛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👛"
  else
    fail("`1F45B` doesn't match `purse` (👛)")
  end
end

it "`1F45C` (fully-qualified) should match `handbag` (👜)" do
  if m = "👜".match(Emoji::EMOJI_REGEX)
    "👜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👜"
  else
    fail("`1F45C` doesn't match `handbag` (👜)")
  end
end

it "`1F45D` (fully-qualified) should match `clutch bag` (👝)" do
  if m = "👝".match(Emoji::EMOJI_REGEX)
    "👝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👝"
  else
    fail("`1F45D` doesn't match `clutch bag` (👝)")
  end
end

it "`1F6CD FE0F` (fully-qualified) should match `shopping bags` (🛍️)" do
  if m = "🛍️".match(Emoji::EMOJI_REGEX)
    "🛍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛍️"
  else
    fail("`1F6CD FE0F` doesn't match `shopping bags` (🛍️)")
  end
end

it "`1F6CD` (unqualified) should match `shopping bags` (🛍)" do
  if m = "🛍".match(Emoji::EMOJI_REGEX)
    "🛍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛍"
  else
    fail("`1F6CD` doesn't match `shopping bags` (🛍)")
  end
end

it "`1F392` (fully-qualified) should match `backpack` (🎒)" do
  if m = "🎒".match(Emoji::EMOJI_REGEX)
    "🎒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎒"
  else
    fail("`1F392` doesn't match `backpack` (🎒)")
  end
end

it "`1F45E` (fully-qualified) should match `man’s shoe` (👞)" do
  if m = "👞".match(Emoji::EMOJI_REGEX)
    "👞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👞"
  else
    fail("`1F45E` doesn't match `man’s shoe` (👞)")
  end
end

it "`1F45F` (fully-qualified) should match `running shoe` (👟)" do
  if m = "👟".match(Emoji::EMOJI_REGEX)
    "👟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👟"
  else
    fail("`1F45F` doesn't match `running shoe` (👟)")
  end
end

it "`1F97E` (fully-qualified) should match `hiking boot` (🥾)" do
  if m = "🥾".match(Emoji::EMOJI_REGEX)
    "🥾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥾"
  else
    fail("`1F97E` doesn't match `hiking boot` (🥾)")
  end
end

it "`1F97F` (fully-qualified) should match `flat shoe` (🥿)" do
  if m = "🥿".match(Emoji::EMOJI_REGEX)
    "🥿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥿"
  else
    fail("`1F97F` doesn't match `flat shoe` (🥿)")
  end
end

it "`1F460` (fully-qualified) should match `high-heeled shoe` (👠)" do
  if m = "👠".match(Emoji::EMOJI_REGEX)
    "👠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👠"
  else
    fail("`1F460` doesn't match `high-heeled shoe` (👠)")
  end
end

it "`1F461` (fully-qualified) should match `woman’s sandal` (👡)" do
  if m = "👡".match(Emoji::EMOJI_REGEX)
    "👡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👡"
  else
    fail("`1F461` doesn't match `woman’s sandal` (👡)")
  end
end

it "`1FA70` (fully-qualified) should match `ballet shoes` (🩰)" do
  if m = "🩰".match(Emoji::EMOJI_REGEX)
    "🩰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩰"
  else
    fail("`1FA70` doesn't match `ballet shoes` (🩰)")
  end
end

it "`1F462` (fully-qualified) should match `woman’s boot` (👢)" do
  if m = "👢".match(Emoji::EMOJI_REGEX)
    "👢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👢"
  else
    fail("`1F462` doesn't match `woman’s boot` (👢)")
  end
end

it "`1F451` (fully-qualified) should match `crown` (👑)" do
  if m = "👑".match(Emoji::EMOJI_REGEX)
    "👑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👑"
  else
    fail("`1F451` doesn't match `crown` (👑)")
  end
end

it "`1F452` (fully-qualified) should match `woman’s hat` (👒)" do
  if m = "👒".match(Emoji::EMOJI_REGEX)
    "👒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "👒"
  else
    fail("`1F452` doesn't match `woman’s hat` (👒)")
  end
end

it "`1F3A9` (fully-qualified) should match `top hat` (🎩)" do
  if m = "🎩".match(Emoji::EMOJI_REGEX)
    "🎩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎩"
  else
    fail("`1F3A9` doesn't match `top hat` (🎩)")
  end
end

it "`1F393` (fully-qualified) should match `graduation cap` (🎓)" do
  if m = "🎓".match(Emoji::EMOJI_REGEX)
    "🎓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎓"
  else
    fail("`1F393` doesn't match `graduation cap` (🎓)")
  end
end

it "`1F9E2` (fully-qualified) should match `billed cap` (🧢)" do
  if m = "🧢".match(Emoji::EMOJI_REGEX)
    "🧢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧢"
  else
    fail("`1F9E2` doesn't match `billed cap` (🧢)")
  end
end

it "`26D1 FE0F` (fully-qualified) should match `rescue worker’s helmet` (⛑️)" do
  if m = "⛑️".match(Emoji::EMOJI_REGEX)
    "⛑️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛑️"
  else
    fail("`26D1 FE0F` doesn't match `rescue worker’s helmet` (⛑️)")
  end
end

it "`26D1` (unqualified) should match `rescue worker’s helmet` (⛑)" do
  if m = "⛑".match(Emoji::EMOJI_REGEX)
    "⛑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛑"
  else
    fail("`26D1` doesn't match `rescue worker’s helmet` (⛑)")
  end
end

it "`1F4FF` (fully-qualified) should match `prayer beads` (📿)" do
  if m = "📿".match(Emoji::EMOJI_REGEX)
    "📿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📿"
  else
    fail("`1F4FF` doesn't match `prayer beads` (📿)")
  end
end

it "`1F484` (fully-qualified) should match `lipstick` (💄)" do
  if m = "💄".match(Emoji::EMOJI_REGEX)
    "💄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💄"
  else
    fail("`1F484` doesn't match `lipstick` (💄)")
  end
end

it "`1F48D` (fully-qualified) should match `ring` (💍)" do
  if m = "💍".match(Emoji::EMOJI_REGEX)
    "💍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💍"
  else
    fail("`1F48D` doesn't match `ring` (💍)")
  end
end

it "`1F48E` (fully-qualified) should match `gem stone` (💎)" do
  if m = "💎".match(Emoji::EMOJI_REGEX)
    "💎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💎"
  else
    fail("`1F48E` doesn't match `gem stone` (💎)")
  end
end

it "`1F507` (fully-qualified) should match `muted speaker` (🔇)" do
  if m = "🔇".match(Emoji::EMOJI_REGEX)
    "🔇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔇"
  else
    fail("`1F507` doesn't match `muted speaker` (🔇)")
  end
end

it "`1F508` (fully-qualified) should match `speaker low volume` (🔈)" do
  if m = "🔈".match(Emoji::EMOJI_REGEX)
    "🔈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔈"
  else
    fail("`1F508` doesn't match `speaker low volume` (🔈)")
  end
end

it "`1F509` (fully-qualified) should match `speaker medium volume` (🔉)" do
  if m = "🔉".match(Emoji::EMOJI_REGEX)
    "🔉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔉"
  else
    fail("`1F509` doesn't match `speaker medium volume` (🔉)")
  end
end

it "`1F50A` (fully-qualified) should match `speaker high volume` (🔊)" do
  if m = "🔊".match(Emoji::EMOJI_REGEX)
    "🔊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔊"
  else
    fail("`1F50A` doesn't match `speaker high volume` (🔊)")
  end
end

it "`1F4E2` (fully-qualified) should match `loudspeaker` (📢)" do
  if m = "📢".match(Emoji::EMOJI_REGEX)
    "📢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📢"
  else
    fail("`1F4E2` doesn't match `loudspeaker` (📢)")
  end
end

it "`1F4E3` (fully-qualified) should match `megaphone` (📣)" do
  if m = "📣".match(Emoji::EMOJI_REGEX)
    "📣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📣"
  else
    fail("`1F4E3` doesn't match `megaphone` (📣)")
  end
end

it "`1F4EF` (fully-qualified) should match `postal horn` (📯)" do
  if m = "📯".match(Emoji::EMOJI_REGEX)
    "📯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📯"
  else
    fail("`1F4EF` doesn't match `postal horn` (📯)")
  end
end

it "`1F514` (fully-qualified) should match `bell` (🔔)" do
  if m = "🔔".match(Emoji::EMOJI_REGEX)
    "🔔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔔"
  else
    fail("`1F514` doesn't match `bell` (🔔)")
  end
end

it "`1F515` (fully-qualified) should match `bell with slash` (🔕)" do
  if m = "🔕".match(Emoji::EMOJI_REGEX)
    "🔕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔕"
  else
    fail("`1F515` doesn't match `bell with slash` (🔕)")
  end
end

it "`1F3BC` (fully-qualified) should match `musical score` (🎼)" do
  if m = "🎼".match(Emoji::EMOJI_REGEX)
    "🎼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎼"
  else
    fail("`1F3BC` doesn't match `musical score` (🎼)")
  end
end

it "`1F3B5` (fully-qualified) should match `musical note` (🎵)" do
  if m = "🎵".match(Emoji::EMOJI_REGEX)
    "🎵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎵"
  else
    fail("`1F3B5` doesn't match `musical note` (🎵)")
  end
end

it "`1F3B6` (fully-qualified) should match `musical notes` (🎶)" do
  if m = "🎶".match(Emoji::EMOJI_REGEX)
    "🎶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎶"
  else
    fail("`1F3B6` doesn't match `musical notes` (🎶)")
  end
end

it "`1F399 FE0F` (fully-qualified) should match `studio microphone` (🎙️)" do
  if m = "🎙️".match(Emoji::EMOJI_REGEX)
    "🎙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎙️"
  else
    fail("`1F399 FE0F` doesn't match `studio microphone` (🎙️)")
  end
end

it "`1F399` (unqualified) should match `studio microphone` (🎙)" do
  if m = "🎙".match(Emoji::EMOJI_REGEX)
    "🎙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎙"
  else
    fail("`1F399` doesn't match `studio microphone` (🎙)")
  end
end

it "`1F39A FE0F` (fully-qualified) should match `level slider` (🎚️)" do
  if m = "🎚️".match(Emoji::EMOJI_REGEX)
    "🎚️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎚️"
  else
    fail("`1F39A FE0F` doesn't match `level slider` (🎚️)")
  end
end

it "`1F39A` (unqualified) should match `level slider` (🎚)" do
  if m = "🎚".match(Emoji::EMOJI_REGEX)
    "🎚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎚"
  else
    fail("`1F39A` doesn't match `level slider` (🎚)")
  end
end

it "`1F39B FE0F` (fully-qualified) should match `control knobs` (🎛️)" do
  if m = "🎛️".match(Emoji::EMOJI_REGEX)
    "🎛️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎛️"
  else
    fail("`1F39B FE0F` doesn't match `control knobs` (🎛️)")
  end
end

it "`1F39B` (unqualified) should match `control knobs` (🎛)" do
  if m = "🎛".match(Emoji::EMOJI_REGEX)
    "🎛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎛"
  else
    fail("`1F39B` doesn't match `control knobs` (🎛)")
  end
end

it "`1F3A4` (fully-qualified) should match `microphone` (🎤)" do
  if m = "🎤".match(Emoji::EMOJI_REGEX)
    "🎤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎤"
  else
    fail("`1F3A4` doesn't match `microphone` (🎤)")
  end
end

it "`1F3A7` (fully-qualified) should match `headphone` (🎧)" do
  if m = "🎧".match(Emoji::EMOJI_REGEX)
    "🎧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎧"
  else
    fail("`1F3A7` doesn't match `headphone` (🎧)")
  end
end

it "`1F4FB` (fully-qualified) should match `radio` (📻)" do
  if m = "📻".match(Emoji::EMOJI_REGEX)
    "📻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📻"
  else
    fail("`1F4FB` doesn't match `radio` (📻)")
  end
end

it "`1F3B7` (fully-qualified) should match `saxophone` (🎷)" do
  if m = "🎷".match(Emoji::EMOJI_REGEX)
    "🎷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎷"
  else
    fail("`1F3B7` doesn't match `saxophone` (🎷)")
  end
end

it "`1F3B8` (fully-qualified) should match `guitar` (🎸)" do
  if m = "🎸".match(Emoji::EMOJI_REGEX)
    "🎸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎸"
  else
    fail("`1F3B8` doesn't match `guitar` (🎸)")
  end
end

it "`1F3B9` (fully-qualified) should match `musical keyboard` (🎹)" do
  if m = "🎹".match(Emoji::EMOJI_REGEX)
    "🎹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎹"
  else
    fail("`1F3B9` doesn't match `musical keyboard` (🎹)")
  end
end

it "`1F3BA` (fully-qualified) should match `trumpet` (🎺)" do
  if m = "🎺".match(Emoji::EMOJI_REGEX)
    "🎺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎺"
  else
    fail("`1F3BA` doesn't match `trumpet` (🎺)")
  end
end

it "`1F3BB` (fully-qualified) should match `violin` (🎻)" do
  if m = "🎻".match(Emoji::EMOJI_REGEX)
    "🎻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎻"
  else
    fail("`1F3BB` doesn't match `violin` (🎻)")
  end
end

it "`1FA95` (fully-qualified) should match `banjo` (🪕)" do
  if m = "🪕".match(Emoji::EMOJI_REGEX)
    "🪕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪕"
  else
    fail("`1FA95` doesn't match `banjo` (🪕)")
  end
end

it "`1F941` (fully-qualified) should match `drum` (🥁)" do
  if m = "🥁".match(Emoji::EMOJI_REGEX)
    "🥁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🥁"
  else
    fail("`1F941` doesn't match `drum` (🥁)")
  end
end

it "`1F4F1` (fully-qualified) should match `mobile phone` (📱)" do
  if m = "📱".match(Emoji::EMOJI_REGEX)
    "📱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📱"
  else
    fail("`1F4F1` doesn't match `mobile phone` (📱)")
  end
end

it "`1F4F2` (fully-qualified) should match `mobile phone with arrow` (📲)" do
  if m = "📲".match(Emoji::EMOJI_REGEX)
    "📲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📲"
  else
    fail("`1F4F2` doesn't match `mobile phone with arrow` (📲)")
  end
end

it "`260E FE0F` (fully-qualified) should match `telephone` (☎️)" do
  if m = "☎️".match(Emoji::EMOJI_REGEX)
    "☎️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☎️"
  else
    fail("`260E FE0F` doesn't match `telephone` (☎️)")
  end
end

it "`260E` (unqualified) should match `telephone` (☎)" do
  if m = "☎".match(Emoji::EMOJI_REGEX)
    "☎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☎"
  else
    fail("`260E` doesn't match `telephone` (☎)")
  end
end

it "`1F4DE` (fully-qualified) should match `telephone receiver` (📞)" do
  if m = "📞".match(Emoji::EMOJI_REGEX)
    "📞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📞"
  else
    fail("`1F4DE` doesn't match `telephone receiver` (📞)")
  end
end

it "`1F4DF` (fully-qualified) should match `pager` (📟)" do
  if m = "📟".match(Emoji::EMOJI_REGEX)
    "📟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📟"
  else
    fail("`1F4DF` doesn't match `pager` (📟)")
  end
end

it "`1F4E0` (fully-qualified) should match `fax machine` (📠)" do
  if m = "📠".match(Emoji::EMOJI_REGEX)
    "📠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📠"
  else
    fail("`1F4E0` doesn't match `fax machine` (📠)")
  end
end

it "`1F50B` (fully-qualified) should match `battery` (🔋)" do
  if m = "🔋".match(Emoji::EMOJI_REGEX)
    "🔋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔋"
  else
    fail("`1F50B` doesn't match `battery` (🔋)")
  end
end

it "`1F50C` (fully-qualified) should match `electric plug` (🔌)" do
  if m = "🔌".match(Emoji::EMOJI_REGEX)
    "🔌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔌"
  else
    fail("`1F50C` doesn't match `electric plug` (🔌)")
  end
end

it "`1F4BB` (fully-qualified) should match `laptop computer` (💻)" do
  if m = "💻".match(Emoji::EMOJI_REGEX)
    "💻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💻"
  else
    fail("`1F4BB` doesn't match `laptop computer` (💻)")
  end
end

it "`1F5A5 FE0F` (fully-qualified) should match `desktop computer` (🖥️)" do
  if m = "🖥️".match(Emoji::EMOJI_REGEX)
    "🖥️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖥️"
  else
    fail("`1F5A5 FE0F` doesn't match `desktop computer` (🖥️)")
  end
end

it "`1F5A5` (unqualified) should match `desktop computer` (🖥)" do
  if m = "🖥".match(Emoji::EMOJI_REGEX)
    "🖥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖥"
  else
    fail("`1F5A5` doesn't match `desktop computer` (🖥)")
  end
end

it "`1F5A8 FE0F` (fully-qualified) should match `printer` (🖨️)" do
  if m = "🖨️".match(Emoji::EMOJI_REGEX)
    "🖨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖨️"
  else
    fail("`1F5A8 FE0F` doesn't match `printer` (🖨️)")
  end
end

it "`1F5A8` (unqualified) should match `printer` (🖨)" do
  if m = "🖨".match(Emoji::EMOJI_REGEX)
    "🖨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖨"
  else
    fail("`1F5A8` doesn't match `printer` (🖨)")
  end
end

it "`2328 FE0F` (fully-qualified) should match `keyboard` (⌨️)" do
  if m = "⌨️".match(Emoji::EMOJI_REGEX)
    "⌨️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌨️"
  else
    fail("`2328 FE0F` doesn't match `keyboard` (⌨️)")
  end
end

it "`2328` (unqualified) should match `keyboard` (⌨)" do
  if m = "⌨".match(Emoji::EMOJI_REGEX)
    "⌨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⌨"
  else
    fail("`2328` doesn't match `keyboard` (⌨)")
  end
end

it "`1F5B1 FE0F` (fully-qualified) should match `computer mouse` (🖱️)" do
  if m = "🖱️".match(Emoji::EMOJI_REGEX)
    "🖱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖱️"
  else
    fail("`1F5B1 FE0F` doesn't match `computer mouse` (🖱️)")
  end
end

it "`1F5B1` (unqualified) should match `computer mouse` (🖱)" do
  if m = "🖱".match(Emoji::EMOJI_REGEX)
    "🖱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖱"
  else
    fail("`1F5B1` doesn't match `computer mouse` (🖱)")
  end
end

it "`1F5B2 FE0F` (fully-qualified) should match `trackball` (🖲️)" do
  if m = "🖲️".match(Emoji::EMOJI_REGEX)
    "🖲️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖲️"
  else
    fail("`1F5B2 FE0F` doesn't match `trackball` (🖲️)")
  end
end

it "`1F5B2` (unqualified) should match `trackball` (🖲)" do
  if m = "🖲".match(Emoji::EMOJI_REGEX)
    "🖲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖲"
  else
    fail("`1F5B2` doesn't match `trackball` (🖲)")
  end
end

it "`1F4BD` (fully-qualified) should match `computer disk` (💽)" do
  if m = "💽".match(Emoji::EMOJI_REGEX)
    "💽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💽"
  else
    fail("`1F4BD` doesn't match `computer disk` (💽)")
  end
end

it "`1F4BE` (fully-qualified) should match `floppy disk` (💾)" do
  if m = "💾".match(Emoji::EMOJI_REGEX)
    "💾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💾"
  else
    fail("`1F4BE` doesn't match `floppy disk` (💾)")
  end
end

it "`1F4BF` (fully-qualified) should match `optical disk` (💿)" do
  if m = "💿".match(Emoji::EMOJI_REGEX)
    "💿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💿"
  else
    fail("`1F4BF` doesn't match `optical disk` (💿)")
  end
end

it "`1F4C0` (fully-qualified) should match `dvd` (📀)" do
  if m = "📀".match(Emoji::EMOJI_REGEX)
    "📀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📀"
  else
    fail("`1F4C0` doesn't match `dvd` (📀)")
  end
end

it "`1F9EE` (fully-qualified) should match `abacus` (🧮)" do
  if m = "🧮".match(Emoji::EMOJI_REGEX)
    "🧮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧮"
  else
    fail("`1F9EE` doesn't match `abacus` (🧮)")
  end
end

it "`1F3A5` (fully-qualified) should match `movie camera` (🎥)" do
  if m = "🎥".match(Emoji::EMOJI_REGEX)
    "🎥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎥"
  else
    fail("`1F3A5` doesn't match `movie camera` (🎥)")
  end
end

it "`1F39E FE0F` (fully-qualified) should match `film frames` (🎞️)" do
  if m = "🎞️".match(Emoji::EMOJI_REGEX)
    "🎞️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎞️"
  else
    fail("`1F39E FE0F` doesn't match `film frames` (🎞️)")
  end
end

it "`1F39E` (unqualified) should match `film frames` (🎞)" do
  if m = "🎞".match(Emoji::EMOJI_REGEX)
    "🎞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎞"
  else
    fail("`1F39E` doesn't match `film frames` (🎞)")
  end
end

it "`1F4FD FE0F` (fully-qualified) should match `film projector` (📽️)" do
  if m = "📽️".match(Emoji::EMOJI_REGEX)
    "📽️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📽️"
  else
    fail("`1F4FD FE0F` doesn't match `film projector` (📽️)")
  end
end

it "`1F4FD` (unqualified) should match `film projector` (📽)" do
  if m = "📽".match(Emoji::EMOJI_REGEX)
    "📽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📽"
  else
    fail("`1F4FD` doesn't match `film projector` (📽)")
  end
end

it "`1F3AC` (fully-qualified) should match `clapper board` (🎬)" do
  if m = "🎬".match(Emoji::EMOJI_REGEX)
    "🎬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎬"
  else
    fail("`1F3AC` doesn't match `clapper board` (🎬)")
  end
end

it "`1F4FA` (fully-qualified) should match `television` (📺)" do
  if m = "📺".match(Emoji::EMOJI_REGEX)
    "📺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📺"
  else
    fail("`1F4FA` doesn't match `television` (📺)")
  end
end

it "`1F4F7` (fully-qualified) should match `camera` (📷)" do
  if m = "📷".match(Emoji::EMOJI_REGEX)
    "📷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📷"
  else
    fail("`1F4F7` doesn't match `camera` (📷)")
  end
end

it "`1F4F8` (fully-qualified) should match `camera with flash` (📸)" do
  if m = "📸".match(Emoji::EMOJI_REGEX)
    "📸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📸"
  else
    fail("`1F4F8` doesn't match `camera with flash` (📸)")
  end
end

it "`1F4F9` (fully-qualified) should match `video camera` (📹)" do
  if m = "📹".match(Emoji::EMOJI_REGEX)
    "📹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📹"
  else
    fail("`1F4F9` doesn't match `video camera` (📹)")
  end
end

it "`1F4FC` (fully-qualified) should match `videocassette` (📼)" do
  if m = "📼".match(Emoji::EMOJI_REGEX)
    "📼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📼"
  else
    fail("`1F4FC` doesn't match `videocassette` (📼)")
  end
end

it "`1F50D` (fully-qualified) should match `magnifying glass tilted left` (🔍)" do
  if m = "🔍".match(Emoji::EMOJI_REGEX)
    "🔍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔍"
  else
    fail("`1F50D` doesn't match `magnifying glass tilted left` (🔍)")
  end
end

it "`1F50E` (fully-qualified) should match `magnifying glass tilted right` (🔎)" do
  if m = "🔎".match(Emoji::EMOJI_REGEX)
    "🔎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔎"
  else
    fail("`1F50E` doesn't match `magnifying glass tilted right` (🔎)")
  end
end

it "`1F56F FE0F` (fully-qualified) should match `candle` (🕯️)" do
  if m = "🕯️".match(Emoji::EMOJI_REGEX)
    "🕯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕯️"
  else
    fail("`1F56F FE0F` doesn't match `candle` (🕯️)")
  end
end

it "`1F56F` (unqualified) should match `candle` (🕯)" do
  if m = "🕯".match(Emoji::EMOJI_REGEX)
    "🕯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕯"
  else
    fail("`1F56F` doesn't match `candle` (🕯)")
  end
end

it "`1F4A1` (fully-qualified) should match `light bulb` (💡)" do
  if m = "💡".match(Emoji::EMOJI_REGEX)
    "💡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💡"
  else
    fail("`1F4A1` doesn't match `light bulb` (💡)")
  end
end

it "`1F526` (fully-qualified) should match `flashlight` (🔦)" do
  if m = "🔦".match(Emoji::EMOJI_REGEX)
    "🔦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔦"
  else
    fail("`1F526` doesn't match `flashlight` (🔦)")
  end
end

it "`1F3EE` (fully-qualified) should match `red paper lantern` (🏮)" do
  if m = "🏮".match(Emoji::EMOJI_REGEX)
    "🏮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏮"
  else
    fail("`1F3EE` doesn't match `red paper lantern` (🏮)")
  end
end

it "`1FA94` (fully-qualified) should match `diya lamp` (🪔)" do
  if m = "🪔".match(Emoji::EMOJI_REGEX)
    "🪔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪔"
  else
    fail("`1FA94` doesn't match `diya lamp` (🪔)")
  end
end

it "`1F4D4` (fully-qualified) should match `notebook with decorative cover` (📔)" do
  if m = "📔".match(Emoji::EMOJI_REGEX)
    "📔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📔"
  else
    fail("`1F4D4` doesn't match `notebook with decorative cover` (📔)")
  end
end

it "`1F4D5` (fully-qualified) should match `closed book` (📕)" do
  if m = "📕".match(Emoji::EMOJI_REGEX)
    "📕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📕"
  else
    fail("`1F4D5` doesn't match `closed book` (📕)")
  end
end

it "`1F4D6` (fully-qualified) should match `open book` (📖)" do
  if m = "📖".match(Emoji::EMOJI_REGEX)
    "📖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📖"
  else
    fail("`1F4D6` doesn't match `open book` (📖)")
  end
end

it "`1F4D7` (fully-qualified) should match `green book` (📗)" do
  if m = "📗".match(Emoji::EMOJI_REGEX)
    "📗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📗"
  else
    fail("`1F4D7` doesn't match `green book` (📗)")
  end
end

it "`1F4D8` (fully-qualified) should match `blue book` (📘)" do
  if m = "📘".match(Emoji::EMOJI_REGEX)
    "📘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📘"
  else
    fail("`1F4D8` doesn't match `blue book` (📘)")
  end
end

it "`1F4D9` (fully-qualified) should match `orange book` (📙)" do
  if m = "📙".match(Emoji::EMOJI_REGEX)
    "📙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📙"
  else
    fail("`1F4D9` doesn't match `orange book` (📙)")
  end
end

it "`1F4DA` (fully-qualified) should match `books` (📚)" do
  if m = "📚".match(Emoji::EMOJI_REGEX)
    "📚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📚"
  else
    fail("`1F4DA` doesn't match `books` (📚)")
  end
end

it "`1F4D3` (fully-qualified) should match `notebook` (📓)" do
  if m = "📓".match(Emoji::EMOJI_REGEX)
    "📓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📓"
  else
    fail("`1F4D3` doesn't match `notebook` (📓)")
  end
end

it "`1F4D2` (fully-qualified) should match `ledger` (📒)" do
  if m = "📒".match(Emoji::EMOJI_REGEX)
    "📒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📒"
  else
    fail("`1F4D2` doesn't match `ledger` (📒)")
  end
end

it "`1F4C3` (fully-qualified) should match `page with curl` (📃)" do
  if m = "📃".match(Emoji::EMOJI_REGEX)
    "📃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📃"
  else
    fail("`1F4C3` doesn't match `page with curl` (📃)")
  end
end

it "`1F4DC` (fully-qualified) should match `scroll` (📜)" do
  if m = "📜".match(Emoji::EMOJI_REGEX)
    "📜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📜"
  else
    fail("`1F4DC` doesn't match `scroll` (📜)")
  end
end

it "`1F4C4` (fully-qualified) should match `page facing up` (📄)" do
  if m = "📄".match(Emoji::EMOJI_REGEX)
    "📄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📄"
  else
    fail("`1F4C4` doesn't match `page facing up` (📄)")
  end
end

it "`1F4F0` (fully-qualified) should match `newspaper` (📰)" do
  if m = "📰".match(Emoji::EMOJI_REGEX)
    "📰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📰"
  else
    fail("`1F4F0` doesn't match `newspaper` (📰)")
  end
end

it "`1F5DE FE0F` (fully-qualified) should match `rolled-up newspaper` (🗞️)" do
  if m = "🗞️".match(Emoji::EMOJI_REGEX)
    "🗞️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗞️"
  else
    fail("`1F5DE FE0F` doesn't match `rolled-up newspaper` (🗞️)")
  end
end

it "`1F5DE` (unqualified) should match `rolled-up newspaper` (🗞)" do
  if m = "🗞".match(Emoji::EMOJI_REGEX)
    "🗞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗞"
  else
    fail("`1F5DE` doesn't match `rolled-up newspaper` (🗞)")
  end
end

it "`1F4D1` (fully-qualified) should match `bookmark tabs` (📑)" do
  if m = "📑".match(Emoji::EMOJI_REGEX)
    "📑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📑"
  else
    fail("`1F4D1` doesn't match `bookmark tabs` (📑)")
  end
end

it "`1F516` (fully-qualified) should match `bookmark` (🔖)" do
  if m = "🔖".match(Emoji::EMOJI_REGEX)
    "🔖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔖"
  else
    fail("`1F516` doesn't match `bookmark` (🔖)")
  end
end

it "`1F3F7 FE0F` (fully-qualified) should match `label` (🏷️)" do
  if m = "🏷️".match(Emoji::EMOJI_REGEX)
    "🏷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏷️"
  else
    fail("`1F3F7 FE0F` doesn't match `label` (🏷️)")
  end
end

it "`1F3F7` (unqualified) should match `label` (🏷)" do
  if m = "🏷".match(Emoji::EMOJI_REGEX)
    "🏷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏷"
  else
    fail("`1F3F7` doesn't match `label` (🏷)")
  end
end

it "`1F4B0` (fully-qualified) should match `money bag` (💰)" do
  if m = "💰".match(Emoji::EMOJI_REGEX)
    "💰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💰"
  else
    fail("`1F4B0` doesn't match `money bag` (💰)")
  end
end

it "`1F4B4` (fully-qualified) should match `yen banknote` (💴)" do
  if m = "💴".match(Emoji::EMOJI_REGEX)
    "💴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💴"
  else
    fail("`1F4B4` doesn't match `yen banknote` (💴)")
  end
end

it "`1F4B5` (fully-qualified) should match `dollar banknote` (💵)" do
  if m = "💵".match(Emoji::EMOJI_REGEX)
    "💵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💵"
  else
    fail("`1F4B5` doesn't match `dollar banknote` (💵)")
  end
end

it "`1F4B6` (fully-qualified) should match `euro banknote` (💶)" do
  if m = "💶".match(Emoji::EMOJI_REGEX)
    "💶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💶"
  else
    fail("`1F4B6` doesn't match `euro banknote` (💶)")
  end
end

it "`1F4B7` (fully-qualified) should match `pound banknote` (💷)" do
  if m = "💷".match(Emoji::EMOJI_REGEX)
    "💷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💷"
  else
    fail("`1F4B7` doesn't match `pound banknote` (💷)")
  end
end

it "`1F4B8` (fully-qualified) should match `money with wings` (💸)" do
  if m = "💸".match(Emoji::EMOJI_REGEX)
    "💸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💸"
  else
    fail("`1F4B8` doesn't match `money with wings` (💸)")
  end
end

it "`1F4B3` (fully-qualified) should match `credit card` (💳)" do
  if m = "💳".match(Emoji::EMOJI_REGEX)
    "💳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💳"
  else
    fail("`1F4B3` doesn't match `credit card` (💳)")
  end
end

it "`1F9FE` (fully-qualified) should match `receipt` (🧾)" do
  if m = "🧾".match(Emoji::EMOJI_REGEX)
    "🧾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧾"
  else
    fail("`1F9FE` doesn't match `receipt` (🧾)")
  end
end

it "`1F4B9` (fully-qualified) should match `chart increasing with yen` (💹)" do
  if m = "💹".match(Emoji::EMOJI_REGEX)
    "💹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💹"
  else
    fail("`1F4B9` doesn't match `chart increasing with yen` (💹)")
  end
end

it "`1F4B1` (fully-qualified) should match `currency exchange` (💱)" do
  if m = "💱".match(Emoji::EMOJI_REGEX)
    "💱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💱"
  else
    fail("`1F4B1` doesn't match `currency exchange` (💱)")
  end
end

it "`1F4B2` (fully-qualified) should match `heavy dollar sign` (💲)" do
  if m = "💲".match(Emoji::EMOJI_REGEX)
    "💲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💲"
  else
    fail("`1F4B2` doesn't match `heavy dollar sign` (💲)")
  end
end

it "`2709 FE0F` (fully-qualified) should match `envelope` (✉️)" do
  if m = "✉️".match(Emoji::EMOJI_REGEX)
    "✉️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✉️"
  else
    fail("`2709 FE0F` doesn't match `envelope` (✉️)")
  end
end

it "`2709` (unqualified) should match `envelope` (✉)" do
  if m = "✉".match(Emoji::EMOJI_REGEX)
    "✉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✉"
  else
    fail("`2709` doesn't match `envelope` (✉)")
  end
end

it "`1F4E7` (fully-qualified) should match `e-mail` (📧)" do
  if m = "📧".match(Emoji::EMOJI_REGEX)
    "📧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📧"
  else
    fail("`1F4E7` doesn't match `e-mail` (📧)")
  end
end

it "`1F4E8` (fully-qualified) should match `incoming envelope` (📨)" do
  if m = "📨".match(Emoji::EMOJI_REGEX)
    "📨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📨"
  else
    fail("`1F4E8` doesn't match `incoming envelope` (📨)")
  end
end

it "`1F4E9` (fully-qualified) should match `envelope with arrow` (📩)" do
  if m = "📩".match(Emoji::EMOJI_REGEX)
    "📩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📩"
  else
    fail("`1F4E9` doesn't match `envelope with arrow` (📩)")
  end
end

it "`1F4E4` (fully-qualified) should match `outbox tray` (📤)" do
  if m = "📤".match(Emoji::EMOJI_REGEX)
    "📤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📤"
  else
    fail("`1F4E4` doesn't match `outbox tray` (📤)")
  end
end

it "`1F4E5` (fully-qualified) should match `inbox tray` (📥)" do
  if m = "📥".match(Emoji::EMOJI_REGEX)
    "📥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📥"
  else
    fail("`1F4E5` doesn't match `inbox tray` (📥)")
  end
end

it "`1F4E6` (fully-qualified) should match `package` (📦)" do
  if m = "📦".match(Emoji::EMOJI_REGEX)
    "📦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📦"
  else
    fail("`1F4E6` doesn't match `package` (📦)")
  end
end

it "`1F4EB` (fully-qualified) should match `closed mailbox with raised flag` (📫)" do
  if m = "📫".match(Emoji::EMOJI_REGEX)
    "📫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📫"
  else
    fail("`1F4EB` doesn't match `closed mailbox with raised flag` (📫)")
  end
end

it "`1F4EA` (fully-qualified) should match `closed mailbox with lowered flag` (📪)" do
  if m = "📪".match(Emoji::EMOJI_REGEX)
    "📪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📪"
  else
    fail("`1F4EA` doesn't match `closed mailbox with lowered flag` (📪)")
  end
end

it "`1F4EC` (fully-qualified) should match `open mailbox with raised flag` (📬)" do
  if m = "📬".match(Emoji::EMOJI_REGEX)
    "📬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📬"
  else
    fail("`1F4EC` doesn't match `open mailbox with raised flag` (📬)")
  end
end

it "`1F4ED` (fully-qualified) should match `open mailbox with lowered flag` (📭)" do
  if m = "📭".match(Emoji::EMOJI_REGEX)
    "📭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📭"
  else
    fail("`1F4ED` doesn't match `open mailbox with lowered flag` (📭)")
  end
end

it "`1F4EE` (fully-qualified) should match `postbox` (📮)" do
  if m = "📮".match(Emoji::EMOJI_REGEX)
    "📮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📮"
  else
    fail("`1F4EE` doesn't match `postbox` (📮)")
  end
end

it "`1F5F3 FE0F` (fully-qualified) should match `ballot box with ballot` (🗳️)" do
  if m = "🗳️".match(Emoji::EMOJI_REGEX)
    "🗳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗳️"
  else
    fail("`1F5F3 FE0F` doesn't match `ballot box with ballot` (🗳️)")
  end
end

it "`1F5F3` (unqualified) should match `ballot box with ballot` (🗳)" do
  if m = "🗳".match(Emoji::EMOJI_REGEX)
    "🗳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗳"
  else
    fail("`1F5F3` doesn't match `ballot box with ballot` (🗳)")
  end
end

it "`270F FE0F` (fully-qualified) should match `pencil` (✏️)" do
  if m = "✏️".match(Emoji::EMOJI_REGEX)
    "✏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✏️"
  else
    fail("`270F FE0F` doesn't match `pencil` (✏️)")
  end
end

it "`270F` (unqualified) should match `pencil` (✏)" do
  if m = "✏".match(Emoji::EMOJI_REGEX)
    "✏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✏"
  else
    fail("`270F` doesn't match `pencil` (✏)")
  end
end

it "`2712 FE0F` (fully-qualified) should match `black nib` (✒️)" do
  if m = "✒️".match(Emoji::EMOJI_REGEX)
    "✒️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✒️"
  else
    fail("`2712 FE0F` doesn't match `black nib` (✒️)")
  end
end

it "`2712` (unqualified) should match `black nib` (✒)" do
  if m = "✒".match(Emoji::EMOJI_REGEX)
    "✒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✒"
  else
    fail("`2712` doesn't match `black nib` (✒)")
  end
end

it "`1F58B FE0F` (fully-qualified) should match `fountain pen` (🖋️)" do
  if m = "🖋️".match(Emoji::EMOJI_REGEX)
    "🖋️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖋️"
  else
    fail("`1F58B FE0F` doesn't match `fountain pen` (🖋️)")
  end
end

it "`1F58B` (unqualified) should match `fountain pen` (🖋)" do
  if m = "🖋".match(Emoji::EMOJI_REGEX)
    "🖋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖋"
  else
    fail("`1F58B` doesn't match `fountain pen` (🖋)")
  end
end

it "`1F58A FE0F` (fully-qualified) should match `pen` (🖊️)" do
  if m = "🖊️".match(Emoji::EMOJI_REGEX)
    "🖊️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖊️"
  else
    fail("`1F58A FE0F` doesn't match `pen` (🖊️)")
  end
end

it "`1F58A` (unqualified) should match `pen` (🖊)" do
  if m = "🖊".match(Emoji::EMOJI_REGEX)
    "🖊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖊"
  else
    fail("`1F58A` doesn't match `pen` (🖊)")
  end
end

it "`1F58C FE0F` (fully-qualified) should match `paintbrush` (🖌️)" do
  if m = "🖌️".match(Emoji::EMOJI_REGEX)
    "🖌️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖌️"
  else
    fail("`1F58C FE0F` doesn't match `paintbrush` (🖌️)")
  end
end

it "`1F58C` (unqualified) should match `paintbrush` (🖌)" do
  if m = "🖌".match(Emoji::EMOJI_REGEX)
    "🖌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖌"
  else
    fail("`1F58C` doesn't match `paintbrush` (🖌)")
  end
end

it "`1F58D FE0F` (fully-qualified) should match `crayon` (🖍️)" do
  if m = "🖍️".match(Emoji::EMOJI_REGEX)
    "🖍️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖍️"
  else
    fail("`1F58D FE0F` doesn't match `crayon` (🖍️)")
  end
end

it "`1F58D` (unqualified) should match `crayon` (🖍)" do
  if m = "🖍".match(Emoji::EMOJI_REGEX)
    "🖍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖍"
  else
    fail("`1F58D` doesn't match `crayon` (🖍)")
  end
end

it "`1F4DD` (fully-qualified) should match `memo` (📝)" do
  if m = "📝".match(Emoji::EMOJI_REGEX)
    "📝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📝"
  else
    fail("`1F4DD` doesn't match `memo` (📝)")
  end
end

it "`1F4BC` (fully-qualified) should match `briefcase` (💼)" do
  if m = "💼".match(Emoji::EMOJI_REGEX)
    "💼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💼"
  else
    fail("`1F4BC` doesn't match `briefcase` (💼)")
  end
end

it "`1F4C1` (fully-qualified) should match `file folder` (📁)" do
  if m = "📁".match(Emoji::EMOJI_REGEX)
    "📁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📁"
  else
    fail("`1F4C1` doesn't match `file folder` (📁)")
  end
end

it "`1F4C2` (fully-qualified) should match `open file folder` (📂)" do
  if m = "📂".match(Emoji::EMOJI_REGEX)
    "📂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📂"
  else
    fail("`1F4C2` doesn't match `open file folder` (📂)")
  end
end

it "`1F5C2 FE0F` (fully-qualified) should match `card index dividers` (🗂️)" do
  if m = "🗂️".match(Emoji::EMOJI_REGEX)
    "🗂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗂️"
  else
    fail("`1F5C2 FE0F` doesn't match `card index dividers` (🗂️)")
  end
end

it "`1F5C2` (unqualified) should match `card index dividers` (🗂)" do
  if m = "🗂".match(Emoji::EMOJI_REGEX)
    "🗂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗂"
  else
    fail("`1F5C2` doesn't match `card index dividers` (🗂)")
  end
end

it "`1F4C5` (fully-qualified) should match `calendar` (📅)" do
  if m = "📅".match(Emoji::EMOJI_REGEX)
    "📅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📅"
  else
    fail("`1F4C5` doesn't match `calendar` (📅)")
  end
end

it "`1F4C6` (fully-qualified) should match `tear-off calendar` (📆)" do
  if m = "📆".match(Emoji::EMOJI_REGEX)
    "📆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📆"
  else
    fail("`1F4C6` doesn't match `tear-off calendar` (📆)")
  end
end

it "`1F5D2 FE0F` (fully-qualified) should match `spiral notepad` (🗒️)" do
  if m = "🗒️".match(Emoji::EMOJI_REGEX)
    "🗒️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗒️"
  else
    fail("`1F5D2 FE0F` doesn't match `spiral notepad` (🗒️)")
  end
end

it "`1F5D2` (unqualified) should match `spiral notepad` (🗒)" do
  if m = "🗒".match(Emoji::EMOJI_REGEX)
    "🗒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗒"
  else
    fail("`1F5D2` doesn't match `spiral notepad` (🗒)")
  end
end

it "`1F5D3 FE0F` (fully-qualified) should match `spiral calendar` (🗓️)" do
  if m = "🗓️".match(Emoji::EMOJI_REGEX)
    "🗓️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗓️"
  else
    fail("`1F5D3 FE0F` doesn't match `spiral calendar` (🗓️)")
  end
end

it "`1F5D3` (unqualified) should match `spiral calendar` (🗓)" do
  if m = "🗓".match(Emoji::EMOJI_REGEX)
    "🗓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗓"
  else
    fail("`1F5D3` doesn't match `spiral calendar` (🗓)")
  end
end

it "`1F4C7` (fully-qualified) should match `card index` (📇)" do
  if m = "📇".match(Emoji::EMOJI_REGEX)
    "📇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📇"
  else
    fail("`1F4C7` doesn't match `card index` (📇)")
  end
end

it "`1F4C8` (fully-qualified) should match `chart increasing` (📈)" do
  if m = "📈".match(Emoji::EMOJI_REGEX)
    "📈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📈"
  else
    fail("`1F4C8` doesn't match `chart increasing` (📈)")
  end
end

it "`1F4C9` (fully-qualified) should match `chart decreasing` (📉)" do
  if m = "📉".match(Emoji::EMOJI_REGEX)
    "📉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📉"
  else
    fail("`1F4C9` doesn't match `chart decreasing` (📉)")
  end
end

it "`1F4CA` (fully-qualified) should match `bar chart` (📊)" do
  if m = "📊".match(Emoji::EMOJI_REGEX)
    "📊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📊"
  else
    fail("`1F4CA` doesn't match `bar chart` (📊)")
  end
end

it "`1F4CB` (fully-qualified) should match `clipboard` (📋)" do
  if m = "📋".match(Emoji::EMOJI_REGEX)
    "📋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📋"
  else
    fail("`1F4CB` doesn't match `clipboard` (📋)")
  end
end

it "`1F4CC` (fully-qualified) should match `pushpin` (📌)" do
  if m = "📌".match(Emoji::EMOJI_REGEX)
    "📌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📌"
  else
    fail("`1F4CC` doesn't match `pushpin` (📌)")
  end
end

it "`1F4CD` (fully-qualified) should match `round pushpin` (📍)" do
  if m = "📍".match(Emoji::EMOJI_REGEX)
    "📍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📍"
  else
    fail("`1F4CD` doesn't match `round pushpin` (📍)")
  end
end

it "`1F4CE` (fully-qualified) should match `paperclip` (📎)" do
  if m = "📎".match(Emoji::EMOJI_REGEX)
    "📎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📎"
  else
    fail("`1F4CE` doesn't match `paperclip` (📎)")
  end
end

it "`1F587 FE0F` (fully-qualified) should match `linked paperclips` (🖇️)" do
  if m = "🖇️".match(Emoji::EMOJI_REGEX)
    "🖇️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖇️"
  else
    fail("`1F587 FE0F` doesn't match `linked paperclips` (🖇️)")
  end
end

it "`1F587` (unqualified) should match `linked paperclips` (🖇)" do
  if m = "🖇".match(Emoji::EMOJI_REGEX)
    "🖇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🖇"
  else
    fail("`1F587` doesn't match `linked paperclips` (🖇)")
  end
end

it "`1F4CF` (fully-qualified) should match `straight ruler` (📏)" do
  if m = "📏".match(Emoji::EMOJI_REGEX)
    "📏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📏"
  else
    fail("`1F4CF` doesn't match `straight ruler` (📏)")
  end
end

it "`1F4D0` (fully-qualified) should match `triangular ruler` (📐)" do
  if m = "📐".match(Emoji::EMOJI_REGEX)
    "📐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📐"
  else
    fail("`1F4D0` doesn't match `triangular ruler` (📐)")
  end
end

it "`2702 FE0F` (fully-qualified) should match `scissors` (✂️)" do
  if m = "✂️".match(Emoji::EMOJI_REGEX)
    "✂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✂️"
  else
    fail("`2702 FE0F` doesn't match `scissors` (✂️)")
  end
end

it "`2702` (unqualified) should match `scissors` (✂)" do
  if m = "✂".match(Emoji::EMOJI_REGEX)
    "✂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✂"
  else
    fail("`2702` doesn't match `scissors` (✂)")
  end
end

it "`1F5C3 FE0F` (fully-qualified) should match `card file box` (🗃️)" do
  if m = "🗃️".match(Emoji::EMOJI_REGEX)
    "🗃️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗃️"
  else
    fail("`1F5C3 FE0F` doesn't match `card file box` (🗃️)")
  end
end

it "`1F5C3` (unqualified) should match `card file box` (🗃)" do
  if m = "🗃".match(Emoji::EMOJI_REGEX)
    "🗃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗃"
  else
    fail("`1F5C3` doesn't match `card file box` (🗃)")
  end
end

it "`1F5C4 FE0F` (fully-qualified) should match `file cabinet` (🗄️)" do
  if m = "🗄️".match(Emoji::EMOJI_REGEX)
    "🗄️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗄️"
  else
    fail("`1F5C4 FE0F` doesn't match `file cabinet` (🗄️)")
  end
end

it "`1F5C4` (unqualified) should match `file cabinet` (🗄)" do
  if m = "🗄".match(Emoji::EMOJI_REGEX)
    "🗄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗄"
  else
    fail("`1F5C4` doesn't match `file cabinet` (🗄)")
  end
end

it "`1F5D1 FE0F` (fully-qualified) should match `wastebasket` (🗑️)" do
  if m = "🗑️".match(Emoji::EMOJI_REGEX)
    "🗑️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗑️"
  else
    fail("`1F5D1 FE0F` doesn't match `wastebasket` (🗑️)")
  end
end

it "`1F5D1` (unqualified) should match `wastebasket` (🗑)" do
  if m = "🗑".match(Emoji::EMOJI_REGEX)
    "🗑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗑"
  else
    fail("`1F5D1` doesn't match `wastebasket` (🗑)")
  end
end

it "`1F512` (fully-qualified) should match `locked` (🔒)" do
  if m = "🔒".match(Emoji::EMOJI_REGEX)
    "🔒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔒"
  else
    fail("`1F512` doesn't match `locked` (🔒)")
  end
end

it "`1F513` (fully-qualified) should match `unlocked` (🔓)" do
  if m = "🔓".match(Emoji::EMOJI_REGEX)
    "🔓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔓"
  else
    fail("`1F513` doesn't match `unlocked` (🔓)")
  end
end

it "`1F50F` (fully-qualified) should match `locked with pen` (🔏)" do
  if m = "🔏".match(Emoji::EMOJI_REGEX)
    "🔏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔏"
  else
    fail("`1F50F` doesn't match `locked with pen` (🔏)")
  end
end

it "`1F510` (fully-qualified) should match `locked with key` (🔐)" do
  if m = "🔐".match(Emoji::EMOJI_REGEX)
    "🔐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔐"
  else
    fail("`1F510` doesn't match `locked with key` (🔐)")
  end
end

it "`1F511` (fully-qualified) should match `key` (🔑)" do
  if m = "🔑".match(Emoji::EMOJI_REGEX)
    "🔑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔑"
  else
    fail("`1F511` doesn't match `key` (🔑)")
  end
end

it "`1F5DD FE0F` (fully-qualified) should match `old key` (🗝️)" do
  if m = "🗝️".match(Emoji::EMOJI_REGEX)
    "🗝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗝️"
  else
    fail("`1F5DD FE0F` doesn't match `old key` (🗝️)")
  end
end

it "`1F5DD` (unqualified) should match `old key` (🗝)" do
  if m = "🗝".match(Emoji::EMOJI_REGEX)
    "🗝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗝"
  else
    fail("`1F5DD` doesn't match `old key` (🗝)")
  end
end

it "`1F528` (fully-qualified) should match `hammer` (🔨)" do
  if m = "🔨".match(Emoji::EMOJI_REGEX)
    "🔨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔨"
  else
    fail("`1F528` doesn't match `hammer` (🔨)")
  end
end

it "`1FA93` (fully-qualified) should match `axe` (🪓)" do
  if m = "🪓".match(Emoji::EMOJI_REGEX)
    "🪓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪓"
  else
    fail("`1FA93` doesn't match `axe` (🪓)")
  end
end

it "`26CF FE0F` (fully-qualified) should match `pick` (⛏️)" do
  if m = "⛏️".match(Emoji::EMOJI_REGEX)
    "⛏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛏️"
  else
    fail("`26CF FE0F` doesn't match `pick` (⛏️)")
  end
end

it "`26CF` (unqualified) should match `pick` (⛏)" do
  if m = "⛏".match(Emoji::EMOJI_REGEX)
    "⛏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛏"
  else
    fail("`26CF` doesn't match `pick` (⛏)")
  end
end

it "`2692 FE0F` (fully-qualified) should match `hammer and pick` (⚒️)" do
  if m = "⚒️".match(Emoji::EMOJI_REGEX)
    "⚒️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚒️"
  else
    fail("`2692 FE0F` doesn't match `hammer and pick` (⚒️)")
  end
end

it "`2692` (unqualified) should match `hammer and pick` (⚒)" do
  if m = "⚒".match(Emoji::EMOJI_REGEX)
    "⚒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚒"
  else
    fail("`2692` doesn't match `hammer and pick` (⚒)")
  end
end

it "`1F6E0 FE0F` (fully-qualified) should match `hammer and wrench` (🛠️)" do
  if m = "🛠️".match(Emoji::EMOJI_REGEX)
    "🛠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛠️"
  else
    fail("`1F6E0 FE0F` doesn't match `hammer and wrench` (🛠️)")
  end
end

it "`1F6E0` (unqualified) should match `hammer and wrench` (🛠)" do
  if m = "🛠".match(Emoji::EMOJI_REGEX)
    "🛠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛠"
  else
    fail("`1F6E0` doesn't match `hammer and wrench` (🛠)")
  end
end

it "`1F5E1 FE0F` (fully-qualified) should match `dagger` (🗡️)" do
  if m = "🗡️".match(Emoji::EMOJI_REGEX)
    "🗡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗡️"
  else
    fail("`1F5E1 FE0F` doesn't match `dagger` (🗡️)")
  end
end

it "`1F5E1` (unqualified) should match `dagger` (🗡)" do
  if m = "🗡".match(Emoji::EMOJI_REGEX)
    "🗡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗡"
  else
    fail("`1F5E1` doesn't match `dagger` (🗡)")
  end
end

it "`2694 FE0F` (fully-qualified) should match `crossed swords` (⚔️)" do
  if m = "⚔️".match(Emoji::EMOJI_REGEX)
    "⚔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚔️"
  else
    fail("`2694 FE0F` doesn't match `crossed swords` (⚔️)")
  end
end

it "`2694` (unqualified) should match `crossed swords` (⚔)" do
  if m = "⚔".match(Emoji::EMOJI_REGEX)
    "⚔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚔"
  else
    fail("`2694` doesn't match `crossed swords` (⚔)")
  end
end

it "`1F52B` (fully-qualified) should match `pistol` (🔫)" do
  if m = "🔫".match(Emoji::EMOJI_REGEX)
    "🔫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔫"
  else
    fail("`1F52B` doesn't match `pistol` (🔫)")
  end
end

it "`1F3F9` (fully-qualified) should match `bow and arrow` (🏹)" do
  if m = "🏹".match(Emoji::EMOJI_REGEX)
    "🏹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏹"
  else
    fail("`1F3F9` doesn't match `bow and arrow` (🏹)")
  end
end

it "`1F6E1 FE0F` (fully-qualified) should match `shield` (🛡️)" do
  if m = "🛡️".match(Emoji::EMOJI_REGEX)
    "🛡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛡️"
  else
    fail("`1F6E1 FE0F` doesn't match `shield` (🛡️)")
  end
end

it "`1F6E1` (unqualified) should match `shield` (🛡)" do
  if m = "🛡".match(Emoji::EMOJI_REGEX)
    "🛡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛡"
  else
    fail("`1F6E1` doesn't match `shield` (🛡)")
  end
end

it "`1F527` (fully-qualified) should match `wrench` (🔧)" do
  if m = "🔧".match(Emoji::EMOJI_REGEX)
    "🔧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔧"
  else
    fail("`1F527` doesn't match `wrench` (🔧)")
  end
end

it "`1F529` (fully-qualified) should match `nut and bolt` (🔩)" do
  if m = "🔩".match(Emoji::EMOJI_REGEX)
    "🔩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔩"
  else
    fail("`1F529` doesn't match `nut and bolt` (🔩)")
  end
end

it "`2699 FE0F` (fully-qualified) should match `gear` (⚙️)" do
  if m = "⚙️".match(Emoji::EMOJI_REGEX)
    "⚙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚙️"
  else
    fail("`2699 FE0F` doesn't match `gear` (⚙️)")
  end
end

it "`2699` (unqualified) should match `gear` (⚙)" do
  if m = "⚙".match(Emoji::EMOJI_REGEX)
    "⚙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚙"
  else
    fail("`2699` doesn't match `gear` (⚙)")
  end
end

it "`1F5DC FE0F` (fully-qualified) should match `clamp` (🗜️)" do
  if m = "🗜️".match(Emoji::EMOJI_REGEX)
    "🗜️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗜️"
  else
    fail("`1F5DC FE0F` doesn't match `clamp` (🗜️)")
  end
end

it "`1F5DC` (unqualified) should match `clamp` (🗜)" do
  if m = "🗜".match(Emoji::EMOJI_REGEX)
    "🗜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗜"
  else
    fail("`1F5DC` doesn't match `clamp` (🗜)")
  end
end

it "`2696 FE0F` (fully-qualified) should match `balance scale` (⚖️)" do
  if m = "⚖️".match(Emoji::EMOJI_REGEX)
    "⚖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚖️"
  else
    fail("`2696 FE0F` doesn't match `balance scale` (⚖️)")
  end
end

it "`2696` (unqualified) should match `balance scale` (⚖)" do
  if m = "⚖".match(Emoji::EMOJI_REGEX)
    "⚖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚖"
  else
    fail("`2696` doesn't match `balance scale` (⚖)")
  end
end

it "`1F9AF` (fully-qualified) should match `probing cane` (🦯)" do
  if m = "🦯".match(Emoji::EMOJI_REGEX)
    "🦯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🦯"
  else
    fail("`1F9AF` doesn't match `probing cane` (🦯)")
  end
end

it "`1F517` (fully-qualified) should match `link` (🔗)" do
  if m = "🔗".match(Emoji::EMOJI_REGEX)
    "🔗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔗"
  else
    fail("`1F517` doesn't match `link` (🔗)")
  end
end

it "`26D3 FE0F` (fully-qualified) should match `chains` (⛓️)" do
  if m = "⛓️".match(Emoji::EMOJI_REGEX)
    "⛓️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛓️"
  else
    fail("`26D3 FE0F` doesn't match `chains` (⛓️)")
  end
end

it "`26D3` (unqualified) should match `chains` (⛓)" do
  if m = "⛓".match(Emoji::EMOJI_REGEX)
    "⛓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛓"
  else
    fail("`26D3` doesn't match `chains` (⛓)")
  end
end

it "`1F9F0` (fully-qualified) should match `toolbox` (🧰)" do
  if m = "🧰".match(Emoji::EMOJI_REGEX)
    "🧰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧰"
  else
    fail("`1F9F0` doesn't match `toolbox` (🧰)")
  end
end

it "`1F9F2` (fully-qualified) should match `magnet` (🧲)" do
  if m = "🧲".match(Emoji::EMOJI_REGEX)
    "🧲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧲"
  else
    fail("`1F9F2` doesn't match `magnet` (🧲)")
  end
end

it "`2697 FE0F` (fully-qualified) should match `alembic` (⚗️)" do
  if m = "⚗️".match(Emoji::EMOJI_REGEX)
    "⚗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚗️"
  else
    fail("`2697 FE0F` doesn't match `alembic` (⚗️)")
  end
end

it "`2697` (unqualified) should match `alembic` (⚗)" do
  if m = "⚗".match(Emoji::EMOJI_REGEX)
    "⚗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚗"
  else
    fail("`2697` doesn't match `alembic` (⚗)")
  end
end

it "`1F9EA` (fully-qualified) should match `test tube` (🧪)" do
  if m = "🧪".match(Emoji::EMOJI_REGEX)
    "🧪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧪"
  else
    fail("`1F9EA` doesn't match `test tube` (🧪)")
  end
end

it "`1F9EB` (fully-qualified) should match `petri dish` (🧫)" do
  if m = "🧫".match(Emoji::EMOJI_REGEX)
    "🧫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧫"
  else
    fail("`1F9EB` doesn't match `petri dish` (🧫)")
  end
end

it "`1F9EC` (fully-qualified) should match `dna` (🧬)" do
  if m = "🧬".match(Emoji::EMOJI_REGEX)
    "🧬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧬"
  else
    fail("`1F9EC` doesn't match `dna` (🧬)")
  end
end

it "`1F52C` (fully-qualified) should match `microscope` (🔬)" do
  if m = "🔬".match(Emoji::EMOJI_REGEX)
    "🔬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔬"
  else
    fail("`1F52C` doesn't match `microscope` (🔬)")
  end
end

it "`1F52D` (fully-qualified) should match `telescope` (🔭)" do
  if m = "🔭".match(Emoji::EMOJI_REGEX)
    "🔭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔭"
  else
    fail("`1F52D` doesn't match `telescope` (🔭)")
  end
end

it "`1F4E1` (fully-qualified) should match `satellite antenna` (📡)" do
  if m = "📡".match(Emoji::EMOJI_REGEX)
    "📡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📡"
  else
    fail("`1F4E1` doesn't match `satellite antenna` (📡)")
  end
end

it "`1F489` (fully-qualified) should match `syringe` (💉)" do
  if m = "💉".match(Emoji::EMOJI_REGEX)
    "💉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💉"
  else
    fail("`1F489` doesn't match `syringe` (💉)")
  end
end

it "`1FA78` (fully-qualified) should match `drop of blood` (🩸)" do
  if m = "🩸".match(Emoji::EMOJI_REGEX)
    "🩸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩸"
  else
    fail("`1FA78` doesn't match `drop of blood` (🩸)")
  end
end

it "`1F48A` (fully-qualified) should match `pill` (💊)" do
  if m = "💊".match(Emoji::EMOJI_REGEX)
    "💊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💊"
  else
    fail("`1F48A` doesn't match `pill` (💊)")
  end
end

it "`1FA79` (fully-qualified) should match `adhesive bandage` (🩹)" do
  if m = "🩹".match(Emoji::EMOJI_REGEX)
    "🩹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩹"
  else
    fail("`1FA79` doesn't match `adhesive bandage` (🩹)")
  end
end

it "`1FA7A` (fully-qualified) should match `stethoscope` (🩺)" do
  if m = "🩺".match(Emoji::EMOJI_REGEX)
    "🩺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🩺"
  else
    fail("`1FA7A` doesn't match `stethoscope` (🩺)")
  end
end

it "`1F6AA` (fully-qualified) should match `door` (🚪)" do
  if m = "🚪".match(Emoji::EMOJI_REGEX)
    "🚪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚪"
  else
    fail("`1F6AA` doesn't match `door` (🚪)")
  end
end

it "`1F6CF FE0F` (fully-qualified) should match `bed` (🛏️)" do
  if m = "🛏️".match(Emoji::EMOJI_REGEX)
    "🛏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛏️"
  else
    fail("`1F6CF FE0F` doesn't match `bed` (🛏️)")
  end
end

it "`1F6CF` (unqualified) should match `bed` (🛏)" do
  if m = "🛏".match(Emoji::EMOJI_REGEX)
    "🛏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛏"
  else
    fail("`1F6CF` doesn't match `bed` (🛏)")
  end
end

it "`1F6CB FE0F` (fully-qualified) should match `couch and lamp` (🛋️)" do
  if m = "🛋️".match(Emoji::EMOJI_REGEX)
    "🛋️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛋️"
  else
    fail("`1F6CB FE0F` doesn't match `couch and lamp` (🛋️)")
  end
end

it "`1F6CB` (unqualified) should match `couch and lamp` (🛋)" do
  if m = "🛋".match(Emoji::EMOJI_REGEX)
    "🛋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛋"
  else
    fail("`1F6CB` doesn't match `couch and lamp` (🛋)")
  end
end

it "`1FA91` (fully-qualified) should match `chair` (🪑)" do
  if m = "🪑".match(Emoji::EMOJI_REGEX)
    "🪑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪑"
  else
    fail("`1FA91` doesn't match `chair` (🪑)")
  end
end

it "`1F6BD` (fully-qualified) should match `toilet` (🚽)" do
  if m = "🚽".match(Emoji::EMOJI_REGEX)
    "🚽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚽"
  else
    fail("`1F6BD` doesn't match `toilet` (🚽)")
  end
end

it "`1F6BF` (fully-qualified) should match `shower` (🚿)" do
  if m = "🚿".match(Emoji::EMOJI_REGEX)
    "🚿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚿"
  else
    fail("`1F6BF` doesn't match `shower` (🚿)")
  end
end

it "`1F6C1` (fully-qualified) should match `bathtub` (🛁)" do
  if m = "🛁".match(Emoji::EMOJI_REGEX)
    "🛁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛁"
  else
    fail("`1F6C1` doesn't match `bathtub` (🛁)")
  end
end

it "`1FA92` (fully-qualified) should match `razor` (🪒)" do
  if m = "🪒".match(Emoji::EMOJI_REGEX)
    "🪒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🪒"
  else
    fail("`1FA92` doesn't match `razor` (🪒)")
  end
end

it "`1F9F4` (fully-qualified) should match `lotion bottle` (🧴)" do
  if m = "🧴".match(Emoji::EMOJI_REGEX)
    "🧴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧴"
  else
    fail("`1F9F4` doesn't match `lotion bottle` (🧴)")
  end
end

it "`1F9F7` (fully-qualified) should match `safety pin` (🧷)" do
  if m = "🧷".match(Emoji::EMOJI_REGEX)
    "🧷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧷"
  else
    fail("`1F9F7` doesn't match `safety pin` (🧷)")
  end
end

it "`1F9F9` (fully-qualified) should match `broom` (🧹)" do
  if m = "🧹".match(Emoji::EMOJI_REGEX)
    "🧹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧹"
  else
    fail("`1F9F9` doesn't match `broom` (🧹)")
  end
end

it "`1F9FA` (fully-qualified) should match `basket` (🧺)" do
  if m = "🧺".match(Emoji::EMOJI_REGEX)
    "🧺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧺"
  else
    fail("`1F9FA` doesn't match `basket` (🧺)")
  end
end

it "`1F9FB` (fully-qualified) should match `roll of paper` (🧻)" do
  if m = "🧻".match(Emoji::EMOJI_REGEX)
    "🧻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧻"
  else
    fail("`1F9FB` doesn't match `roll of paper` (🧻)")
  end
end

it "`1F9FC` (fully-qualified) should match `soap` (🧼)" do
  if m = "🧼".match(Emoji::EMOJI_REGEX)
    "🧼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧼"
  else
    fail("`1F9FC` doesn't match `soap` (🧼)")
  end
end

it "`1F9FD` (fully-qualified) should match `sponge` (🧽)" do
  if m = "🧽".match(Emoji::EMOJI_REGEX)
    "🧽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧽"
  else
    fail("`1F9FD` doesn't match `sponge` (🧽)")
  end
end

it "`1F9EF` (fully-qualified) should match `fire extinguisher` (🧯)" do
  if m = "🧯".match(Emoji::EMOJI_REGEX)
    "🧯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🧯"
  else
    fail("`1F9EF` doesn't match `fire extinguisher` (🧯)")
  end
end

it "`1F6D2` (fully-qualified) should match `shopping cart` (🛒)" do
  if m = "🛒".match(Emoji::EMOJI_REGEX)
    "🛒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛒"
  else
    fail("`1F6D2` doesn't match `shopping cart` (🛒)")
  end
end

it "`1F6AC` (fully-qualified) should match `cigarette` (🚬)" do
  if m = "🚬".match(Emoji::EMOJI_REGEX)
    "🚬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚬"
  else
    fail("`1F6AC` doesn't match `cigarette` (🚬)")
  end
end

it "`26B0 FE0F` (fully-qualified) should match `coffin` (⚰️)" do
  if m = "⚰️".match(Emoji::EMOJI_REGEX)
    "⚰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚰️"
  else
    fail("`26B0 FE0F` doesn't match `coffin` (⚰️)")
  end
end

it "`26B0` (unqualified) should match `coffin` (⚰)" do
  if m = "⚰".match(Emoji::EMOJI_REGEX)
    "⚰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚰"
  else
    fail("`26B0` doesn't match `coffin` (⚰)")
  end
end

it "`26B1 FE0F` (fully-qualified) should match `funeral urn` (⚱️)" do
  if m = "⚱️".match(Emoji::EMOJI_REGEX)
    "⚱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚱️"
  else
    fail("`26B1 FE0F` doesn't match `funeral urn` (⚱️)")
  end
end

it "`26B1` (unqualified) should match `funeral urn` (⚱)" do
  if m = "⚱".match(Emoji::EMOJI_REGEX)
    "⚱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚱"
  else
    fail("`26B1` doesn't match `funeral urn` (⚱)")
  end
end

it "`1F5FF` (fully-qualified) should match `moai` (🗿)" do
  if m = "🗿".match(Emoji::EMOJI_REGEX)
    "🗿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🗿"
  else
    fail("`1F5FF` doesn't match `moai` (🗿)")
  end
end

it "`1F3E7` (fully-qualified) should match `ATM sign` (🏧)" do
  if m = "🏧".match(Emoji::EMOJI_REGEX)
    "🏧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏧"
  else
    fail("`1F3E7` doesn't match `ATM sign` (🏧)")
  end
end

it "`1F6AE` (fully-qualified) should match `litter in bin sign` (🚮)" do
  if m = "🚮".match(Emoji::EMOJI_REGEX)
    "🚮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚮"
  else
    fail("`1F6AE` doesn't match `litter in bin sign` (🚮)")
  end
end

it "`1F6B0` (fully-qualified) should match `potable water` (🚰)" do
  if m = "🚰".match(Emoji::EMOJI_REGEX)
    "🚰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚰"
  else
    fail("`1F6B0` doesn't match `potable water` (🚰)")
  end
end

it "`267F` (fully-qualified) should match `wheelchair symbol` (♿)" do
  if m = "♿".match(Emoji::EMOJI_REGEX)
    "♿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♿"
  else
    fail("`267F` doesn't match `wheelchair symbol` (♿)")
  end
end

it "`1F6B9` (fully-qualified) should match `men’s room` (🚹)" do
  if m = "🚹".match(Emoji::EMOJI_REGEX)
    "🚹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚹"
  else
    fail("`1F6B9` doesn't match `men’s room` (🚹)")
  end
end

it "`1F6BA` (fully-qualified) should match `women’s room` (🚺)" do
  if m = "🚺".match(Emoji::EMOJI_REGEX)
    "🚺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚺"
  else
    fail("`1F6BA` doesn't match `women’s room` (🚺)")
  end
end

it "`1F6BB` (fully-qualified) should match `restroom` (🚻)" do
  if m = "🚻".match(Emoji::EMOJI_REGEX)
    "🚻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚻"
  else
    fail("`1F6BB` doesn't match `restroom` (🚻)")
  end
end

it "`1F6BC` (fully-qualified) should match `baby symbol` (🚼)" do
  if m = "🚼".match(Emoji::EMOJI_REGEX)
    "🚼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚼"
  else
    fail("`1F6BC` doesn't match `baby symbol` (🚼)")
  end
end

it "`1F6BE` (fully-qualified) should match `water closet` (🚾)" do
  if m = "🚾".match(Emoji::EMOJI_REGEX)
    "🚾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚾"
  else
    fail("`1F6BE` doesn't match `water closet` (🚾)")
  end
end

it "`1F6C2` (fully-qualified) should match `passport control` (🛂)" do
  if m = "🛂".match(Emoji::EMOJI_REGEX)
    "🛂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛂"
  else
    fail("`1F6C2` doesn't match `passport control` (🛂)")
  end
end

it "`1F6C3` (fully-qualified) should match `customs` (🛃)" do
  if m = "🛃".match(Emoji::EMOJI_REGEX)
    "🛃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛃"
  else
    fail("`1F6C3` doesn't match `customs` (🛃)")
  end
end

it "`1F6C4` (fully-qualified) should match `baggage claim` (🛄)" do
  if m = "🛄".match(Emoji::EMOJI_REGEX)
    "🛄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛄"
  else
    fail("`1F6C4` doesn't match `baggage claim` (🛄)")
  end
end

it "`1F6C5` (fully-qualified) should match `left luggage` (🛅)" do
  if m = "🛅".match(Emoji::EMOJI_REGEX)
    "🛅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛅"
  else
    fail("`1F6C5` doesn't match `left luggage` (🛅)")
  end
end

it "`26A0 FE0F` (fully-qualified) should match `warning` (⚠️)" do
  if m = "⚠️".match(Emoji::EMOJI_REGEX)
    "⚠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚠️"
  else
    fail("`26A0 FE0F` doesn't match `warning` (⚠️)")
  end
end

it "`26A0` (unqualified) should match `warning` (⚠)" do
  if m = "⚠".match(Emoji::EMOJI_REGEX)
    "⚠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚠"
  else
    fail("`26A0` doesn't match `warning` (⚠)")
  end
end

it "`1F6B8` (fully-qualified) should match `children crossing` (🚸)" do
  if m = "🚸".match(Emoji::EMOJI_REGEX)
    "🚸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚸"
  else
    fail("`1F6B8` doesn't match `children crossing` (🚸)")
  end
end

it "`26D4` (fully-qualified) should match `no entry` (⛔)" do
  if m = "⛔".match(Emoji::EMOJI_REGEX)
    "⛔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛔"
  else
    fail("`26D4` doesn't match `no entry` (⛔)")
  end
end

it "`1F6AB` (fully-qualified) should match `prohibited` (🚫)" do
  if m = "🚫".match(Emoji::EMOJI_REGEX)
    "🚫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚫"
  else
    fail("`1F6AB` doesn't match `prohibited` (🚫)")
  end
end

it "`1F6B3` (fully-qualified) should match `no bicycles` (🚳)" do
  if m = "🚳".match(Emoji::EMOJI_REGEX)
    "🚳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚳"
  else
    fail("`1F6B3` doesn't match `no bicycles` (🚳)")
  end
end

it "`1F6AD` (fully-qualified) should match `no smoking` (🚭)" do
  if m = "🚭".match(Emoji::EMOJI_REGEX)
    "🚭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚭"
  else
    fail("`1F6AD` doesn't match `no smoking` (🚭)")
  end
end

it "`1F6AF` (fully-qualified) should match `no littering` (🚯)" do
  if m = "🚯".match(Emoji::EMOJI_REGEX)
    "🚯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚯"
  else
    fail("`1F6AF` doesn't match `no littering` (🚯)")
  end
end

it "`1F6B1` (fully-qualified) should match `non-potable water` (🚱)" do
  if m = "🚱".match(Emoji::EMOJI_REGEX)
    "🚱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚱"
  else
    fail("`1F6B1` doesn't match `non-potable water` (🚱)")
  end
end

it "`1F6B7` (fully-qualified) should match `no pedestrians` (🚷)" do
  if m = "🚷".match(Emoji::EMOJI_REGEX)
    "🚷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚷"
  else
    fail("`1F6B7` doesn't match `no pedestrians` (🚷)")
  end
end

it "`1F4F5` (fully-qualified) should match `no mobile phones` (📵)" do
  if m = "📵".match(Emoji::EMOJI_REGEX)
    "📵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📵"
  else
    fail("`1F4F5` doesn't match `no mobile phones` (📵)")
  end
end

it "`1F51E` (fully-qualified) should match `no one under eighteen` (🔞)" do
  if m = "🔞".match(Emoji::EMOJI_REGEX)
    "🔞".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔞"
  else
    fail("`1F51E` doesn't match `no one under eighteen` (🔞)")
  end
end

it "`2622 FE0F` (fully-qualified) should match `radioactive` (☢️)" do
  if m = "☢️".match(Emoji::EMOJI_REGEX)
    "☢️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☢️"
  else
    fail("`2622 FE0F` doesn't match `radioactive` (☢️)")
  end
end

it "`2622` (unqualified) should match `radioactive` (☢)" do
  if m = "☢".match(Emoji::EMOJI_REGEX)
    "☢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☢"
  else
    fail("`2622` doesn't match `radioactive` (☢)")
  end
end

it "`2623 FE0F` (fully-qualified) should match `biohazard` (☣️)" do
  if m = "☣️".match(Emoji::EMOJI_REGEX)
    "☣️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☣️"
  else
    fail("`2623 FE0F` doesn't match `biohazard` (☣️)")
  end
end

it "`2623` (unqualified) should match `biohazard` (☣)" do
  if m = "☣".match(Emoji::EMOJI_REGEX)
    "☣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☣"
  else
    fail("`2623` doesn't match `biohazard` (☣)")
  end
end

it "`2B06 FE0F` (fully-qualified) should match `up arrow` (⬆️)" do
  if m = "⬆️".match(Emoji::EMOJI_REGEX)
    "⬆️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬆️"
  else
    fail("`2B06 FE0F` doesn't match `up arrow` (⬆️)")
  end
end

it "`2B06` (unqualified) should match `up arrow` (⬆)" do
  if m = "⬆".match(Emoji::EMOJI_REGEX)
    "⬆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬆"
  else
    fail("`2B06` doesn't match `up arrow` (⬆)")
  end
end

it "`2197 FE0F` (fully-qualified) should match `up-right arrow` (↗️)" do
  if m = "↗️".match(Emoji::EMOJI_REGEX)
    "↗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↗️"
  else
    fail("`2197 FE0F` doesn't match `up-right arrow` (↗️)")
  end
end

it "`2197` (unqualified) should match `up-right arrow` (↗)" do
  if m = "↗".match(Emoji::EMOJI_REGEX)
    "↗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↗"
  else
    fail("`2197` doesn't match `up-right arrow` (↗)")
  end
end

it "`27A1 FE0F` (fully-qualified) should match `right arrow` (➡️)" do
  if m = "➡️".match(Emoji::EMOJI_REGEX)
    "➡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➡️"
  else
    fail("`27A1 FE0F` doesn't match `right arrow` (➡️)")
  end
end

it "`27A1` (unqualified) should match `right arrow` (➡)" do
  if m = "➡".match(Emoji::EMOJI_REGEX)
    "➡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➡"
  else
    fail("`27A1` doesn't match `right arrow` (➡)")
  end
end

it "`2198 FE0F` (fully-qualified) should match `down-right arrow` (↘️)" do
  if m = "↘️".match(Emoji::EMOJI_REGEX)
    "↘️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↘️"
  else
    fail("`2198 FE0F` doesn't match `down-right arrow` (↘️)")
  end
end

it "`2198` (unqualified) should match `down-right arrow` (↘)" do
  if m = "↘".match(Emoji::EMOJI_REGEX)
    "↘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↘"
  else
    fail("`2198` doesn't match `down-right arrow` (↘)")
  end
end

it "`2B07 FE0F` (fully-qualified) should match `down arrow` (⬇️)" do
  if m = "⬇️".match(Emoji::EMOJI_REGEX)
    "⬇️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬇️"
  else
    fail("`2B07 FE0F` doesn't match `down arrow` (⬇️)")
  end
end

it "`2B07` (unqualified) should match `down arrow` (⬇)" do
  if m = "⬇".match(Emoji::EMOJI_REGEX)
    "⬇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬇"
  else
    fail("`2B07` doesn't match `down arrow` (⬇)")
  end
end

it "`2199 FE0F` (fully-qualified) should match `down-left arrow` (↙️)" do
  if m = "↙️".match(Emoji::EMOJI_REGEX)
    "↙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↙️"
  else
    fail("`2199 FE0F` doesn't match `down-left arrow` (↙️)")
  end
end

it "`2199` (unqualified) should match `down-left arrow` (↙)" do
  if m = "↙".match(Emoji::EMOJI_REGEX)
    "↙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↙"
  else
    fail("`2199` doesn't match `down-left arrow` (↙)")
  end
end

it "`2B05 FE0F` (fully-qualified) should match `left arrow` (⬅️)" do
  if m = "⬅️".match(Emoji::EMOJI_REGEX)
    "⬅️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬅️"
  else
    fail("`2B05 FE0F` doesn't match `left arrow` (⬅️)")
  end
end

it "`2B05` (unqualified) should match `left arrow` (⬅)" do
  if m = "⬅".match(Emoji::EMOJI_REGEX)
    "⬅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬅"
  else
    fail("`2B05` doesn't match `left arrow` (⬅)")
  end
end

it "`2196 FE0F` (fully-qualified) should match `up-left arrow` (↖️)" do
  if m = "↖️".match(Emoji::EMOJI_REGEX)
    "↖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↖️"
  else
    fail("`2196 FE0F` doesn't match `up-left arrow` (↖️)")
  end
end

it "`2196` (unqualified) should match `up-left arrow` (↖)" do
  if m = "↖".match(Emoji::EMOJI_REGEX)
    "↖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↖"
  else
    fail("`2196` doesn't match `up-left arrow` (↖)")
  end
end

it "`2195 FE0F` (fully-qualified) should match `up-down arrow` (↕️)" do
  if m = "↕️".match(Emoji::EMOJI_REGEX)
    "↕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↕️"
  else
    fail("`2195 FE0F` doesn't match `up-down arrow` (↕️)")
  end
end

it "`2195` (unqualified) should match `up-down arrow` (↕)" do
  if m = "↕".match(Emoji::EMOJI_REGEX)
    "↕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↕"
  else
    fail("`2195` doesn't match `up-down arrow` (↕)")
  end
end

it "`2194 FE0F` (fully-qualified) should match `left-right arrow` (↔️)" do
  if m = "↔️".match(Emoji::EMOJI_REGEX)
    "↔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↔️"
  else
    fail("`2194 FE0F` doesn't match `left-right arrow` (↔️)")
  end
end

it "`2194` (unqualified) should match `left-right arrow` (↔)" do
  if m = "↔".match(Emoji::EMOJI_REGEX)
    "↔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↔"
  else
    fail("`2194` doesn't match `left-right arrow` (↔)")
  end
end

it "`21A9 FE0F` (fully-qualified) should match `right arrow curving left` (↩️)" do
  if m = "↩️".match(Emoji::EMOJI_REGEX)
    "↩️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↩️"
  else
    fail("`21A9 FE0F` doesn't match `right arrow curving left` (↩️)")
  end
end

it "`21A9` (unqualified) should match `right arrow curving left` (↩)" do
  if m = "↩".match(Emoji::EMOJI_REGEX)
    "↩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↩"
  else
    fail("`21A9` doesn't match `right arrow curving left` (↩)")
  end
end

it "`21AA FE0F` (fully-qualified) should match `left arrow curving right` (↪️)" do
  if m = "↪️".match(Emoji::EMOJI_REGEX)
    "↪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↪️"
  else
    fail("`21AA FE0F` doesn't match `left arrow curving right` (↪️)")
  end
end

it "`21AA` (unqualified) should match `left arrow curving right` (↪)" do
  if m = "↪".match(Emoji::EMOJI_REGEX)
    "↪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "↪"
  else
    fail("`21AA` doesn't match `left arrow curving right` (↪)")
  end
end

it "`2934 FE0F` (fully-qualified) should match `right arrow curving up` (⤴️)" do
  if m = "⤴️".match(Emoji::EMOJI_REGEX)
    "⤴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤴️"
  else
    fail("`2934 FE0F` doesn't match `right arrow curving up` (⤴️)")
  end
end

it "`2934` (unqualified) should match `right arrow curving up` (⤴)" do
  if m = "⤴".match(Emoji::EMOJI_REGEX)
    "⤴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤴"
  else
    fail("`2934` doesn't match `right arrow curving up` (⤴)")
  end
end

it "`2935 FE0F` (fully-qualified) should match `right arrow curving down` (⤵️)" do
  if m = "⤵️".match(Emoji::EMOJI_REGEX)
    "⤵️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤵️"
  else
    fail("`2935 FE0F` doesn't match `right arrow curving down` (⤵️)")
  end
end

it "`2935` (unqualified) should match `right arrow curving down` (⤵)" do
  if m = "⤵".match(Emoji::EMOJI_REGEX)
    "⤵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⤵"
  else
    fail("`2935` doesn't match `right arrow curving down` (⤵)")
  end
end

it "`1F503` (fully-qualified) should match `clockwise vertical arrows` (🔃)" do
  if m = "🔃".match(Emoji::EMOJI_REGEX)
    "🔃".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔃"
  else
    fail("`1F503` doesn't match `clockwise vertical arrows` (🔃)")
  end
end

it "`1F504` (fully-qualified) should match `counterclockwise arrows button` (🔄)" do
  if m = "🔄".match(Emoji::EMOJI_REGEX)
    "🔄".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔄"
  else
    fail("`1F504` doesn't match `counterclockwise arrows button` (🔄)")
  end
end

it "`1F519` (fully-qualified) should match `BACK arrow` (🔙)" do
  if m = "🔙".match(Emoji::EMOJI_REGEX)
    "🔙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔙"
  else
    fail("`1F519` doesn't match `BACK arrow` (🔙)")
  end
end

it "`1F51A` (fully-qualified) should match `END arrow` (🔚)" do
  if m = "🔚".match(Emoji::EMOJI_REGEX)
    "🔚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔚"
  else
    fail("`1F51A` doesn't match `END arrow` (🔚)")
  end
end

it "`1F51B` (fully-qualified) should match `ON! arrow` (🔛)" do
  if m = "🔛".match(Emoji::EMOJI_REGEX)
    "🔛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔛"
  else
    fail("`1F51B` doesn't match `ON! arrow` (🔛)")
  end
end

it "`1F51C` (fully-qualified) should match `SOON arrow` (🔜)" do
  if m = "🔜".match(Emoji::EMOJI_REGEX)
    "🔜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔜"
  else
    fail("`1F51C` doesn't match `SOON arrow` (🔜)")
  end
end

it "`1F51D` (fully-qualified) should match `TOP arrow` (🔝)" do
  if m = "🔝".match(Emoji::EMOJI_REGEX)
    "🔝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔝"
  else
    fail("`1F51D` doesn't match `TOP arrow` (🔝)")
  end
end

it "`1F6D0` (fully-qualified) should match `place of worship` (🛐)" do
  if m = "🛐".match(Emoji::EMOJI_REGEX)
    "🛐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🛐"
  else
    fail("`1F6D0` doesn't match `place of worship` (🛐)")
  end
end

it "`269B FE0F` (fully-qualified) should match `atom symbol` (⚛️)" do
  if m = "⚛️".match(Emoji::EMOJI_REGEX)
    "⚛️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚛️"
  else
    fail("`269B FE0F` doesn't match `atom symbol` (⚛️)")
  end
end

it "`269B` (unqualified) should match `atom symbol` (⚛)" do
  if m = "⚛".match(Emoji::EMOJI_REGEX)
    "⚛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚛"
  else
    fail("`269B` doesn't match `atom symbol` (⚛)")
  end
end

it "`1F549 FE0F` (fully-qualified) should match `om` (🕉️)" do
  if m = "🕉️".match(Emoji::EMOJI_REGEX)
    "🕉️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕉️"
  else
    fail("`1F549 FE0F` doesn't match `om` (🕉️)")
  end
end

it "`1F549` (unqualified) should match `om` (🕉)" do
  if m = "🕉".match(Emoji::EMOJI_REGEX)
    "🕉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕉"
  else
    fail("`1F549` doesn't match `om` (🕉)")
  end
end

it "`2721 FE0F` (fully-qualified) should match `star of David` (✡️)" do
  if m = "✡️".match(Emoji::EMOJI_REGEX)
    "✡️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✡️"
  else
    fail("`2721 FE0F` doesn't match `star of David` (✡️)")
  end
end

it "`2721` (unqualified) should match `star of David` (✡)" do
  if m = "✡".match(Emoji::EMOJI_REGEX)
    "✡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✡"
  else
    fail("`2721` doesn't match `star of David` (✡)")
  end
end

it "`2638 FE0F` (fully-qualified) should match `wheel of dharma` (☸️)" do
  if m = "☸️".match(Emoji::EMOJI_REGEX)
    "☸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☸️"
  else
    fail("`2638 FE0F` doesn't match `wheel of dharma` (☸️)")
  end
end

it "`2638` (unqualified) should match `wheel of dharma` (☸)" do
  if m = "☸".match(Emoji::EMOJI_REGEX)
    "☸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☸"
  else
    fail("`2638` doesn't match `wheel of dharma` (☸)")
  end
end

it "`262F FE0F` (fully-qualified) should match `yin yang` (☯️)" do
  if m = "☯️".match(Emoji::EMOJI_REGEX)
    "☯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☯️"
  else
    fail("`262F FE0F` doesn't match `yin yang` (☯️)")
  end
end

it "`262F` (unqualified) should match `yin yang` (☯)" do
  if m = "☯".match(Emoji::EMOJI_REGEX)
    "☯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☯"
  else
    fail("`262F` doesn't match `yin yang` (☯)")
  end
end

it "`271D FE0F` (fully-qualified) should match `latin cross` (✝️)" do
  if m = "✝️".match(Emoji::EMOJI_REGEX)
    "✝️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✝️"
  else
    fail("`271D FE0F` doesn't match `latin cross` (✝️)")
  end
end

it "`271D` (unqualified) should match `latin cross` (✝)" do
  if m = "✝".match(Emoji::EMOJI_REGEX)
    "✝".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✝"
  else
    fail("`271D` doesn't match `latin cross` (✝)")
  end
end

it "`2626 FE0F` (fully-qualified) should match `orthodox cross` (☦️)" do
  if m = "☦️".match(Emoji::EMOJI_REGEX)
    "☦️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☦️"
  else
    fail("`2626 FE0F` doesn't match `orthodox cross` (☦️)")
  end
end

it "`2626` (unqualified) should match `orthodox cross` (☦)" do
  if m = "☦".match(Emoji::EMOJI_REGEX)
    "☦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☦"
  else
    fail("`2626` doesn't match `orthodox cross` (☦)")
  end
end

it "`262A FE0F` (fully-qualified) should match `star and crescent` (☪️)" do
  if m = "☪️".match(Emoji::EMOJI_REGEX)
    "☪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☪️"
  else
    fail("`262A FE0F` doesn't match `star and crescent` (☪️)")
  end
end

it "`262A` (unqualified) should match `star and crescent` (☪)" do
  if m = "☪".match(Emoji::EMOJI_REGEX)
    "☪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☪"
  else
    fail("`262A` doesn't match `star and crescent` (☪)")
  end
end

it "`262E FE0F` (fully-qualified) should match `peace symbol` (☮️)" do
  if m = "☮️".match(Emoji::EMOJI_REGEX)
    "☮️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☮️"
  else
    fail("`262E FE0F` doesn't match `peace symbol` (☮️)")
  end
end

it "`262E` (unqualified) should match `peace symbol` (☮)" do
  if m = "☮".match(Emoji::EMOJI_REGEX)
    "☮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☮"
  else
    fail("`262E` doesn't match `peace symbol` (☮)")
  end
end

it "`1F54E` (fully-qualified) should match `menorah` (🕎)" do
  if m = "🕎".match(Emoji::EMOJI_REGEX)
    "🕎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🕎"
  else
    fail("`1F54E` doesn't match `menorah` (🕎)")
  end
end

it "`1F52F` (fully-qualified) should match `dotted six-pointed star` (🔯)" do
  if m = "🔯".match(Emoji::EMOJI_REGEX)
    "🔯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔯"
  else
    fail("`1F52F` doesn't match `dotted six-pointed star` (🔯)")
  end
end

it "`2648` (fully-qualified) should match `Aries` (♈)" do
  if m = "♈".match(Emoji::EMOJI_REGEX)
    "♈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♈"
  else
    fail("`2648` doesn't match `Aries` (♈)")
  end
end

it "`2649` (fully-qualified) should match `Taurus` (♉)" do
  if m = "♉".match(Emoji::EMOJI_REGEX)
    "♉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♉"
  else
    fail("`2649` doesn't match `Taurus` (♉)")
  end
end

it "`264A` (fully-qualified) should match `Gemini` (♊)" do
  if m = "♊".match(Emoji::EMOJI_REGEX)
    "♊".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♊"
  else
    fail("`264A` doesn't match `Gemini` (♊)")
  end
end

it "`264B` (fully-qualified) should match `Cancer` (♋)" do
  if m = "♋".match(Emoji::EMOJI_REGEX)
    "♋".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♋"
  else
    fail("`264B` doesn't match `Cancer` (♋)")
  end
end

it "`264C` (fully-qualified) should match `Leo` (♌)" do
  if m = "♌".match(Emoji::EMOJI_REGEX)
    "♌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♌"
  else
    fail("`264C` doesn't match `Leo` (♌)")
  end
end

it "`264D` (fully-qualified) should match `Virgo` (♍)" do
  if m = "♍".match(Emoji::EMOJI_REGEX)
    "♍".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♍"
  else
    fail("`264D` doesn't match `Virgo` (♍)")
  end
end

it "`264E` (fully-qualified) should match `Libra` (♎)" do
  if m = "♎".match(Emoji::EMOJI_REGEX)
    "♎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♎"
  else
    fail("`264E` doesn't match `Libra` (♎)")
  end
end

it "`264F` (fully-qualified) should match `Scorpio` (♏)" do
  if m = "♏".match(Emoji::EMOJI_REGEX)
    "♏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♏"
  else
    fail("`264F` doesn't match `Scorpio` (♏)")
  end
end

it "`2650` (fully-qualified) should match `Sagittarius` (♐)" do
  if m = "♐".match(Emoji::EMOJI_REGEX)
    "♐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♐"
  else
    fail("`2650` doesn't match `Sagittarius` (♐)")
  end
end

it "`2651` (fully-qualified) should match `Capricorn` (♑)" do
  if m = "♑".match(Emoji::EMOJI_REGEX)
    "♑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♑"
  else
    fail("`2651` doesn't match `Capricorn` (♑)")
  end
end

it "`2652` (fully-qualified) should match `Aquarius` (♒)" do
  if m = "♒".match(Emoji::EMOJI_REGEX)
    "♒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♒"
  else
    fail("`2652` doesn't match `Aquarius` (♒)")
  end
end

it "`2653` (fully-qualified) should match `Pisces` (♓)" do
  if m = "♓".match(Emoji::EMOJI_REGEX)
    "♓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♓"
  else
    fail("`2653` doesn't match `Pisces` (♓)")
  end
end

it "`26CE` (fully-qualified) should match `Ophiuchus` (⛎)" do
  if m = "⛎".match(Emoji::EMOJI_REGEX)
    "⛎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⛎"
  else
    fail("`26CE` doesn't match `Ophiuchus` (⛎)")
  end
end

it "`1F500` (fully-qualified) should match `shuffle tracks button` (🔀)" do
  if m = "🔀".match(Emoji::EMOJI_REGEX)
    "🔀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔀"
  else
    fail("`1F500` doesn't match `shuffle tracks button` (🔀)")
  end
end

it "`1F501` (fully-qualified) should match `repeat button` (🔁)" do
  if m = "🔁".match(Emoji::EMOJI_REGEX)
    "🔁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔁"
  else
    fail("`1F501` doesn't match `repeat button` (🔁)")
  end
end

it "`1F502` (fully-qualified) should match `repeat single button` (🔂)" do
  if m = "🔂".match(Emoji::EMOJI_REGEX)
    "🔂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔂"
  else
    fail("`1F502` doesn't match `repeat single button` (🔂)")
  end
end

it "`25B6 FE0F` (fully-qualified) should match `play button` (▶️)" do
  if m = "▶️".match(Emoji::EMOJI_REGEX)
    "▶️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▶️"
  else
    fail("`25B6 FE0F` doesn't match `play button` (▶️)")
  end
end

it "`25B6` (unqualified) should match `play button` (▶)" do
  if m = "▶".match(Emoji::EMOJI_REGEX)
    "▶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▶"
  else
    fail("`25B6` doesn't match `play button` (▶)")
  end
end

it "`23E9` (fully-qualified) should match `fast-forward button` (⏩)" do
  if m = "⏩".match(Emoji::EMOJI_REGEX)
    "⏩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏩"
  else
    fail("`23E9` doesn't match `fast-forward button` (⏩)")
  end
end

it "`23ED FE0F` (fully-qualified) should match `next track button` (⏭️)" do
  if m = "⏭️".match(Emoji::EMOJI_REGEX)
    "⏭️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏭️"
  else
    fail("`23ED FE0F` doesn't match `next track button` (⏭️)")
  end
end

it "`23ED` (unqualified) should match `next track button` (⏭)" do
  if m = "⏭".match(Emoji::EMOJI_REGEX)
    "⏭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏭"
  else
    fail("`23ED` doesn't match `next track button` (⏭)")
  end
end

it "`23EF FE0F` (fully-qualified) should match `play or pause button` (⏯️)" do
  if m = "⏯️".match(Emoji::EMOJI_REGEX)
    "⏯️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏯️"
  else
    fail("`23EF FE0F` doesn't match `play or pause button` (⏯️)")
  end
end

it "`23EF` (unqualified) should match `play or pause button` (⏯)" do
  if m = "⏯".match(Emoji::EMOJI_REGEX)
    "⏯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏯"
  else
    fail("`23EF` doesn't match `play or pause button` (⏯)")
  end
end

it "`25C0 FE0F` (fully-qualified) should match `reverse button` (◀️)" do
  if m = "◀️".match(Emoji::EMOJI_REGEX)
    "◀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◀️"
  else
    fail("`25C0 FE0F` doesn't match `reverse button` (◀️)")
  end
end

it "`25C0` (unqualified) should match `reverse button` (◀)" do
  if m = "◀".match(Emoji::EMOJI_REGEX)
    "◀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◀"
  else
    fail("`25C0` doesn't match `reverse button` (◀)")
  end
end

it "`23EA` (fully-qualified) should match `fast reverse button` (⏪)" do
  if m = "⏪".match(Emoji::EMOJI_REGEX)
    "⏪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏪"
  else
    fail("`23EA` doesn't match `fast reverse button` (⏪)")
  end
end

it "`23EE FE0F` (fully-qualified) should match `last track button` (⏮️)" do
  if m = "⏮️".match(Emoji::EMOJI_REGEX)
    "⏮️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏮️"
  else
    fail("`23EE FE0F` doesn't match `last track button` (⏮️)")
  end
end

it "`23EE` (unqualified) should match `last track button` (⏮)" do
  if m = "⏮".match(Emoji::EMOJI_REGEX)
    "⏮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏮"
  else
    fail("`23EE` doesn't match `last track button` (⏮)")
  end
end

it "`1F53C` (fully-qualified) should match `upwards button` (🔼)" do
  if m = "🔼".match(Emoji::EMOJI_REGEX)
    "🔼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔼"
  else
    fail("`1F53C` doesn't match `upwards button` (🔼)")
  end
end

it "`23EB` (fully-qualified) should match `fast up button` (⏫)" do
  if m = "⏫".match(Emoji::EMOJI_REGEX)
    "⏫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏫"
  else
    fail("`23EB` doesn't match `fast up button` (⏫)")
  end
end

it "`1F53D` (fully-qualified) should match `downwards button` (🔽)" do
  if m = "🔽".match(Emoji::EMOJI_REGEX)
    "🔽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔽"
  else
    fail("`1F53D` doesn't match `downwards button` (🔽)")
  end
end

it "`23EC` (fully-qualified) should match `fast down button` (⏬)" do
  if m = "⏬".match(Emoji::EMOJI_REGEX)
    "⏬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏬"
  else
    fail("`23EC` doesn't match `fast down button` (⏬)")
  end
end

it "`23F8 FE0F` (fully-qualified) should match `pause button` (⏸️)" do
  if m = "⏸️".match(Emoji::EMOJI_REGEX)
    "⏸️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏸️"
  else
    fail("`23F8 FE0F` doesn't match `pause button` (⏸️)")
  end
end

it "`23F8` (unqualified) should match `pause button` (⏸)" do
  if m = "⏸".match(Emoji::EMOJI_REGEX)
    "⏸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏸"
  else
    fail("`23F8` doesn't match `pause button` (⏸)")
  end
end

it "`23F9 FE0F` (fully-qualified) should match `stop button` (⏹️)" do
  if m = "⏹️".match(Emoji::EMOJI_REGEX)
    "⏹️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏹️"
  else
    fail("`23F9 FE0F` doesn't match `stop button` (⏹️)")
  end
end

it "`23F9` (unqualified) should match `stop button` (⏹)" do
  if m = "⏹".match(Emoji::EMOJI_REGEX)
    "⏹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏹"
  else
    fail("`23F9` doesn't match `stop button` (⏹)")
  end
end

it "`23FA FE0F` (fully-qualified) should match `record button` (⏺️)" do
  if m = "⏺️".match(Emoji::EMOJI_REGEX)
    "⏺️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏺️"
  else
    fail("`23FA FE0F` doesn't match `record button` (⏺️)")
  end
end

it "`23FA` (unqualified) should match `record button` (⏺)" do
  if m = "⏺".match(Emoji::EMOJI_REGEX)
    "⏺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏺"
  else
    fail("`23FA` doesn't match `record button` (⏺)")
  end
end

it "`23CF FE0F` (fully-qualified) should match `eject button` (⏏️)" do
  if m = "⏏️".match(Emoji::EMOJI_REGEX)
    "⏏️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏏️"
  else
    fail("`23CF FE0F` doesn't match `eject button` (⏏️)")
  end
end

it "`23CF` (unqualified) should match `eject button` (⏏)" do
  if m = "⏏".match(Emoji::EMOJI_REGEX)
    "⏏".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⏏"
  else
    fail("`23CF` doesn't match `eject button` (⏏)")
  end
end

it "`1F3A6` (fully-qualified) should match `cinema` (🎦)" do
  if m = "🎦".match(Emoji::EMOJI_REGEX)
    "🎦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎦"
  else
    fail("`1F3A6` doesn't match `cinema` (🎦)")
  end
end

it "`1F505` (fully-qualified) should match `dim button` (🔅)" do
  if m = "🔅".match(Emoji::EMOJI_REGEX)
    "🔅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔅"
  else
    fail("`1F505` doesn't match `dim button` (🔅)")
  end
end

it "`1F506` (fully-qualified) should match `bright button` (🔆)" do
  if m = "🔆".match(Emoji::EMOJI_REGEX)
    "🔆".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔆"
  else
    fail("`1F506` doesn't match `bright button` (🔆)")
  end
end

it "`1F4F6` (fully-qualified) should match `antenna bars` (📶)" do
  if m = "📶".match(Emoji::EMOJI_REGEX)
    "📶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📶"
  else
    fail("`1F4F6` doesn't match `antenna bars` (📶)")
  end
end

it "`1F4F3` (fully-qualified) should match `vibration mode` (📳)" do
  if m = "📳".match(Emoji::EMOJI_REGEX)
    "📳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📳"
  else
    fail("`1F4F3` doesn't match `vibration mode` (📳)")
  end
end

it "`1F4F4` (fully-qualified) should match `mobile phone off` (📴)" do
  if m = "📴".match(Emoji::EMOJI_REGEX)
    "📴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📴"
  else
    fail("`1F4F4` doesn't match `mobile phone off` (📴)")
  end
end

it "`2640 FE0F` (fully-qualified) should match `female sign` (♀️)" do
  if m = "♀️".match(Emoji::EMOJI_REGEX)
    "♀️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♀️"
  else
    fail("`2640 FE0F` doesn't match `female sign` (♀️)")
  end
end

it "`2640` (unqualified) should match `female sign` (♀)" do
  if m = "♀".match(Emoji::EMOJI_REGEX)
    "♀".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♀"
  else
    fail("`2640` doesn't match `female sign` (♀)")
  end
end

it "`2642 FE0F` (fully-qualified) should match `male sign` (♂️)" do
  if m = "♂️".match(Emoji::EMOJI_REGEX)
    "♂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♂️"
  else
    fail("`2642 FE0F` doesn't match `male sign` (♂️)")
  end
end

it "`2642` (unqualified) should match `male sign` (♂)" do
  if m = "♂".match(Emoji::EMOJI_REGEX)
    "♂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♂"
  else
    fail("`2642` doesn't match `male sign` (♂)")
  end
end

it "`2695 FE0F` (fully-qualified) should match `medical symbol` (⚕️)" do
  if m = "⚕️".match(Emoji::EMOJI_REGEX)
    "⚕️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚕️"
  else
    fail("`2695 FE0F` doesn't match `medical symbol` (⚕️)")
  end
end

it "`2695` (unqualified) should match `medical symbol` (⚕)" do
  if m = "⚕".match(Emoji::EMOJI_REGEX)
    "⚕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚕"
  else
    fail("`2695` doesn't match `medical symbol` (⚕)")
  end
end

it "`267E FE0F` (fully-qualified) should match `infinity` (♾️)" do
  if m = "♾️".match(Emoji::EMOJI_REGEX)
    "♾️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♾️"
  else
    fail("`267E FE0F` doesn't match `infinity` (♾️)")
  end
end

it "`267E` (unqualified) should match `infinity` (♾)" do
  if m = "♾".match(Emoji::EMOJI_REGEX)
    "♾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♾"
  else
    fail("`267E` doesn't match `infinity` (♾)")
  end
end

it "`267B FE0F` (fully-qualified) should match `recycling symbol` (♻️)" do
  if m = "♻️".match(Emoji::EMOJI_REGEX)
    "♻️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♻️"
  else
    fail("`267B FE0F` doesn't match `recycling symbol` (♻️)")
  end
end

it "`267B` (unqualified) should match `recycling symbol` (♻)" do
  if m = "♻".match(Emoji::EMOJI_REGEX)
    "♻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "♻"
  else
    fail("`267B` doesn't match `recycling symbol` (♻)")
  end
end

it "`269C FE0F` (fully-qualified) should match `fleur-de-lis` (⚜️)" do
  if m = "⚜️".match(Emoji::EMOJI_REGEX)
    "⚜️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚜️"
  else
    fail("`269C FE0F` doesn't match `fleur-de-lis` (⚜️)")
  end
end

it "`269C` (unqualified) should match `fleur-de-lis` (⚜)" do
  if m = "⚜".match(Emoji::EMOJI_REGEX)
    "⚜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚜"
  else
    fail("`269C` doesn't match `fleur-de-lis` (⚜)")
  end
end

it "`1F531` (fully-qualified) should match `trident emblem` (🔱)" do
  if m = "🔱".match(Emoji::EMOJI_REGEX)
    "🔱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔱"
  else
    fail("`1F531` doesn't match `trident emblem` (🔱)")
  end
end

it "`1F4DB` (fully-qualified) should match `name badge` (📛)" do
  if m = "📛".match(Emoji::EMOJI_REGEX)
    "📛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "📛"
  else
    fail("`1F4DB` doesn't match `name badge` (📛)")
  end
end

it "`1F530` (fully-qualified) should match `Japanese symbol for beginner` (🔰)" do
  if m = "🔰".match(Emoji::EMOJI_REGEX)
    "🔰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔰"
  else
    fail("`1F530` doesn't match `Japanese symbol for beginner` (🔰)")
  end
end

it "`2B55` (fully-qualified) should match `hollow red circle` (⭕)" do
  if m = "⭕".match(Emoji::EMOJI_REGEX)
    "⭕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⭕"
  else
    fail("`2B55` doesn't match `hollow red circle` (⭕)")
  end
end

it "`2705` (fully-qualified) should match `check mark button` (✅)" do
  if m = "✅".match(Emoji::EMOJI_REGEX)
    "✅".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✅"
  else
    fail("`2705` doesn't match `check mark button` (✅)")
  end
end

it "`2611 FE0F` (fully-qualified) should match `check box with check` (☑️)" do
  if m = "☑️".match(Emoji::EMOJI_REGEX)
    "☑️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☑️"
  else
    fail("`2611 FE0F` doesn't match `check box with check` (☑️)")
  end
end

it "`2611` (unqualified) should match `check box with check` (☑)" do
  if m = "☑".match(Emoji::EMOJI_REGEX)
    "☑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "☑"
  else
    fail("`2611` doesn't match `check box with check` (☑)")
  end
end

it "`2714 FE0F` (fully-qualified) should match `check mark` (✔️)" do
  if m = "✔️".match(Emoji::EMOJI_REGEX)
    "✔️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✔️"
  else
    fail("`2714 FE0F` doesn't match `check mark` (✔️)")
  end
end

it "`2714` (unqualified) should match `check mark` (✔)" do
  if m = "✔".match(Emoji::EMOJI_REGEX)
    "✔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✔"
  else
    fail("`2714` doesn't match `check mark` (✔)")
  end
end

it "`2716 FE0F` (fully-qualified) should match `multiplication sign` (✖️)" do
  if m = "✖️".match(Emoji::EMOJI_REGEX)
    "✖️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✖️"
  else
    fail("`2716 FE0F` doesn't match `multiplication sign` (✖️)")
  end
end

it "`2716` (unqualified) should match `multiplication sign` (✖)" do
  if m = "✖".match(Emoji::EMOJI_REGEX)
    "✖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✖"
  else
    fail("`2716` doesn't match `multiplication sign` (✖)")
  end
end

it "`274C` (fully-qualified) should match `cross mark` (❌)" do
  if m = "❌".match(Emoji::EMOJI_REGEX)
    "❌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❌"
  else
    fail("`274C` doesn't match `cross mark` (❌)")
  end
end

it "`274E` (fully-qualified) should match `cross mark button` (❎)" do
  if m = "❎".match(Emoji::EMOJI_REGEX)
    "❎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❎"
  else
    fail("`274E` doesn't match `cross mark button` (❎)")
  end
end

it "`2795` (fully-qualified) should match `plus sign` (➕)" do
  if m = "➕".match(Emoji::EMOJI_REGEX)
    "➕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➕"
  else
    fail("`2795` doesn't match `plus sign` (➕)")
  end
end

it "`2796` (fully-qualified) should match `minus sign` (➖)" do
  if m = "➖".match(Emoji::EMOJI_REGEX)
    "➖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➖"
  else
    fail("`2796` doesn't match `minus sign` (➖)")
  end
end

it "`2797` (fully-qualified) should match `division sign` (➗)" do
  if m = "➗".match(Emoji::EMOJI_REGEX)
    "➗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➗"
  else
    fail("`2797` doesn't match `division sign` (➗)")
  end
end

it "`27B0` (fully-qualified) should match `curly loop` (➰)" do
  if m = "➰".match(Emoji::EMOJI_REGEX)
    "➰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➰"
  else
    fail("`27B0` doesn't match `curly loop` (➰)")
  end
end

it "`27BF` (fully-qualified) should match `double curly loop` (➿)" do
  if m = "➿".match(Emoji::EMOJI_REGEX)
    "➿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "➿"
  else
    fail("`27BF` doesn't match `double curly loop` (➿)")
  end
end

it "`303D FE0F` (fully-qualified) should match `part alternation mark` (〽️)" do
  if m = "〽️".match(Emoji::EMOJI_REGEX)
    "〽️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〽️"
  else
    fail("`303D FE0F` doesn't match `part alternation mark` (〽️)")
  end
end

it "`303D` (unqualified) should match `part alternation mark` (〽)" do
  if m = "〽".match(Emoji::EMOJI_REGEX)
    "〽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〽"
  else
    fail("`303D` doesn't match `part alternation mark` (〽)")
  end
end

it "`2733 FE0F` (fully-qualified) should match `eight-spoked asterisk` (✳️)" do
  if m = "✳️".match(Emoji::EMOJI_REGEX)
    "✳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✳️"
  else
    fail("`2733 FE0F` doesn't match `eight-spoked asterisk` (✳️)")
  end
end

it "`2733` (unqualified) should match `eight-spoked asterisk` (✳)" do
  if m = "✳".match(Emoji::EMOJI_REGEX)
    "✳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✳"
  else
    fail("`2733` doesn't match `eight-spoked asterisk` (✳)")
  end
end

it "`2734 FE0F` (fully-qualified) should match `eight-pointed star` (✴️)" do
  if m = "✴️".match(Emoji::EMOJI_REGEX)
    "✴️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✴️"
  else
    fail("`2734 FE0F` doesn't match `eight-pointed star` (✴️)")
  end
end

it "`2734` (unqualified) should match `eight-pointed star` (✴)" do
  if m = "✴".match(Emoji::EMOJI_REGEX)
    "✴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "✴"
  else
    fail("`2734` doesn't match `eight-pointed star` (✴)")
  end
end

it "`2747 FE0F` (fully-qualified) should match `sparkle` (❇️)" do
  if m = "❇️".match(Emoji::EMOJI_REGEX)
    "❇️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❇️"
  else
    fail("`2747 FE0F` doesn't match `sparkle` (❇️)")
  end
end

it "`2747` (unqualified) should match `sparkle` (❇)" do
  if m = "❇".match(Emoji::EMOJI_REGEX)
    "❇".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❇"
  else
    fail("`2747` doesn't match `sparkle` (❇)")
  end
end

it "`203C FE0F` (fully-qualified) should match `double exclamation mark` (‼️)" do
  if m = "‼️".match(Emoji::EMOJI_REGEX)
    "‼️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "‼️"
  else
    fail("`203C FE0F` doesn't match `double exclamation mark` (‼️)")
  end
end

it "`203C` (unqualified) should match `double exclamation mark` (‼)" do
  if m = "‼".match(Emoji::EMOJI_REGEX)
    "‼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "‼"
  else
    fail("`203C` doesn't match `double exclamation mark` (‼)")
  end
end

it "`2049 FE0F` (fully-qualified) should match `exclamation question mark` (⁉️)" do
  if m = "⁉️".match(Emoji::EMOJI_REGEX)
    "⁉️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⁉️"
  else
    fail("`2049 FE0F` doesn't match `exclamation question mark` (⁉️)")
  end
end

it "`2049` (unqualified) should match `exclamation question mark` (⁉)" do
  if m = "⁉".match(Emoji::EMOJI_REGEX)
    "⁉".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⁉"
  else
    fail("`2049` doesn't match `exclamation question mark` (⁉)")
  end
end

it "`2753` (fully-qualified) should match `question mark` (❓)" do
  if m = "❓".match(Emoji::EMOJI_REGEX)
    "❓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❓"
  else
    fail("`2753` doesn't match `question mark` (❓)")
  end
end

it "`2754` (fully-qualified) should match `white question mark` (❔)" do
  if m = "❔".match(Emoji::EMOJI_REGEX)
    "❔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❔"
  else
    fail("`2754` doesn't match `white question mark` (❔)")
  end
end

it "`2755` (fully-qualified) should match `white exclamation mark` (❕)" do
  if m = "❕".match(Emoji::EMOJI_REGEX)
    "❕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❕"
  else
    fail("`2755` doesn't match `white exclamation mark` (❕)")
  end
end

it "`2757` (fully-qualified) should match `exclamation mark` (❗)" do
  if m = "❗".match(Emoji::EMOJI_REGEX)
    "❗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "❗"
  else
    fail("`2757` doesn't match `exclamation mark` (❗)")
  end
end

it "`3030 FE0F` (fully-qualified) should match `wavy dash` (〰️)" do
  if m = "〰️".match(Emoji::EMOJI_REGEX)
    "〰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〰️"
  else
    fail("`3030 FE0F` doesn't match `wavy dash` (〰️)")
  end
end

it "`3030` (unqualified) should match `wavy dash` (〰)" do
  if m = "〰".match(Emoji::EMOJI_REGEX)
    "〰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "〰"
  else
    fail("`3030` doesn't match `wavy dash` (〰)")
  end
end

it "`00A9 FE0F` (fully-qualified) should match `copyright` (©️)" do
  if m = "©️".match(Emoji::EMOJI_REGEX)
    "©️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "©️"
  else
    fail("`00A9 FE0F` doesn't match `copyright` (©️)")
  end
end

it "`00A9` (unqualified) should match `copyright` (©)" do
  if m = "©".match(Emoji::EMOJI_REGEX)
    "©".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "©"
  else
    fail("`00A9` doesn't match `copyright` (©)")
  end
end

it "`00AE FE0F` (fully-qualified) should match `registered` (®️)" do
  if m = "®️".match(Emoji::EMOJI_REGEX)
    "®️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "®️"
  else
    fail("`00AE FE0F` doesn't match `registered` (®️)")
  end
end

it "`00AE` (unqualified) should match `registered` (®)" do
  if m = "®".match(Emoji::EMOJI_REGEX)
    "®".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "®"
  else
    fail("`00AE` doesn't match `registered` (®)")
  end
end

it "`2122 FE0F` (fully-qualified) should match `trade mark` (™️)" do
  if m = "™️".match(Emoji::EMOJI_REGEX)
    "™️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "™️"
  else
    fail("`2122 FE0F` doesn't match `trade mark` (™️)")
  end
end

it "`2122` (unqualified) should match `trade mark` (™)" do
  if m = "™".match(Emoji::EMOJI_REGEX)
    "™".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "™"
  else
    fail("`2122` doesn't match `trade mark` (™)")
  end
end

it "`0023 FE0F 20E3` (fully-qualified) should match `keycap: #` (#️⃣)" do
  if m = "#️⃣".match(Emoji::EMOJI_REGEX)
    "#️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "#️⃣"
  else
    fail("`0023 FE0F 20E3` doesn't match `keycap: #` (#️⃣)")
  end
end

it "`0023 20E3` (unqualified) should match `keycap: #` (#⃣)" do
  if m = "#⃣".match(Emoji::EMOJI_REGEX)
    "#⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "#⃣"
  else
    fail("`0023 20E3` doesn't match `keycap: #` (#⃣)")
  end
end

it "`002A FE0F 20E3` (fully-qualified) should match `keycap: *` (*️⃣)" do
  if m = "*️⃣".match(Emoji::EMOJI_REGEX)
    "*️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "*️⃣"
  else
    fail("`002A FE0F 20E3` doesn't match `keycap: *` (*️⃣)")
  end
end

it "`002A 20E3` (unqualified) should match `keycap: *` (*⃣)" do
  if m = "*⃣".match(Emoji::EMOJI_REGEX)
    "*⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "*⃣"
  else
    fail("`002A 20E3` doesn't match `keycap: *` (*⃣)")
  end
end

it "`0030 FE0F 20E3` (fully-qualified) should match `keycap: 0` (0️⃣)" do
  if m = "0️⃣".match(Emoji::EMOJI_REGEX)
    "0️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "0️⃣"
  else
    fail("`0030 FE0F 20E3` doesn't match `keycap: 0` (0️⃣)")
  end
end

it "`0030 20E3` (unqualified) should match `keycap: 0` (0⃣)" do
  if m = "0⃣".match(Emoji::EMOJI_REGEX)
    "0⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "0⃣"
  else
    fail("`0030 20E3` doesn't match `keycap: 0` (0⃣)")
  end
end

it "`0031 FE0F 20E3` (fully-qualified) should match `keycap: 1` (1️⃣)" do
  if m = "1️⃣".match(Emoji::EMOJI_REGEX)
    "1️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "1️⃣"
  else
    fail("`0031 FE0F 20E3` doesn't match `keycap: 1` (1️⃣)")
  end
end

it "`0031 20E3` (unqualified) should match `keycap: 1` (1⃣)" do
  if m = "1⃣".match(Emoji::EMOJI_REGEX)
    "1⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "1⃣"
  else
    fail("`0031 20E3` doesn't match `keycap: 1` (1⃣)")
  end
end

it "`0032 FE0F 20E3` (fully-qualified) should match `keycap: 2` (2️⃣)" do
  if m = "2️⃣".match(Emoji::EMOJI_REGEX)
    "2️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "2️⃣"
  else
    fail("`0032 FE0F 20E3` doesn't match `keycap: 2` (2️⃣)")
  end
end

it "`0032 20E3` (unqualified) should match `keycap: 2` (2⃣)" do
  if m = "2⃣".match(Emoji::EMOJI_REGEX)
    "2⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "2⃣"
  else
    fail("`0032 20E3` doesn't match `keycap: 2` (2⃣)")
  end
end

it "`0033 FE0F 20E3` (fully-qualified) should match `keycap: 3` (3️⃣)" do
  if m = "3️⃣".match(Emoji::EMOJI_REGEX)
    "3️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "3️⃣"
  else
    fail("`0033 FE0F 20E3` doesn't match `keycap: 3` (3️⃣)")
  end
end

it "`0033 20E3` (unqualified) should match `keycap: 3` (3⃣)" do
  if m = "3⃣".match(Emoji::EMOJI_REGEX)
    "3⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "3⃣"
  else
    fail("`0033 20E3` doesn't match `keycap: 3` (3⃣)")
  end
end

it "`0034 FE0F 20E3` (fully-qualified) should match `keycap: 4` (4️⃣)" do
  if m = "4️⃣".match(Emoji::EMOJI_REGEX)
    "4️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "4️⃣"
  else
    fail("`0034 FE0F 20E3` doesn't match `keycap: 4` (4️⃣)")
  end
end

it "`0034 20E3` (unqualified) should match `keycap: 4` (4⃣)" do
  if m = "4⃣".match(Emoji::EMOJI_REGEX)
    "4⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "4⃣"
  else
    fail("`0034 20E3` doesn't match `keycap: 4` (4⃣)")
  end
end

it "`0035 FE0F 20E3` (fully-qualified) should match `keycap: 5` (5️⃣)" do
  if m = "5️⃣".match(Emoji::EMOJI_REGEX)
    "5️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "5️⃣"
  else
    fail("`0035 FE0F 20E3` doesn't match `keycap: 5` (5️⃣)")
  end
end

it "`0035 20E3` (unqualified) should match `keycap: 5` (5⃣)" do
  if m = "5⃣".match(Emoji::EMOJI_REGEX)
    "5⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "5⃣"
  else
    fail("`0035 20E3` doesn't match `keycap: 5` (5⃣)")
  end
end

it "`0036 FE0F 20E3` (fully-qualified) should match `keycap: 6` (6️⃣)" do
  if m = "6️⃣".match(Emoji::EMOJI_REGEX)
    "6️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "6️⃣"
  else
    fail("`0036 FE0F 20E3` doesn't match `keycap: 6` (6️⃣)")
  end
end

it "`0036 20E3` (unqualified) should match `keycap: 6` (6⃣)" do
  if m = "6⃣".match(Emoji::EMOJI_REGEX)
    "6⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "6⃣"
  else
    fail("`0036 20E3` doesn't match `keycap: 6` (6⃣)")
  end
end

it "`0037 FE0F 20E3` (fully-qualified) should match `keycap: 7` (7️⃣)" do
  if m = "7️⃣".match(Emoji::EMOJI_REGEX)
    "7️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "7️⃣"
  else
    fail("`0037 FE0F 20E3` doesn't match `keycap: 7` (7️⃣)")
  end
end

it "`0037 20E3` (unqualified) should match `keycap: 7` (7⃣)" do
  if m = "7⃣".match(Emoji::EMOJI_REGEX)
    "7⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "7⃣"
  else
    fail("`0037 20E3` doesn't match `keycap: 7` (7⃣)")
  end
end

it "`0038 FE0F 20E3` (fully-qualified) should match `keycap: 8` (8️⃣)" do
  if m = "8️⃣".match(Emoji::EMOJI_REGEX)
    "8️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "8️⃣"
  else
    fail("`0038 FE0F 20E3` doesn't match `keycap: 8` (8️⃣)")
  end
end

it "`0038 20E3` (unqualified) should match `keycap: 8` (8⃣)" do
  if m = "8⃣".match(Emoji::EMOJI_REGEX)
    "8⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "8⃣"
  else
    fail("`0038 20E3` doesn't match `keycap: 8` (8⃣)")
  end
end

it "`0039 FE0F 20E3` (fully-qualified) should match `keycap: 9` (9️⃣)" do
  if m = "9️⃣".match(Emoji::EMOJI_REGEX)
    "9️⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "9️⃣"
  else
    fail("`0039 FE0F 20E3` doesn't match `keycap: 9` (9️⃣)")
  end
end

it "`0039 20E3` (unqualified) should match `keycap: 9` (9⃣)" do
  if m = "9⃣".match(Emoji::EMOJI_REGEX)
    "9⃣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "9⃣"
  else
    fail("`0039 20E3` doesn't match `keycap: 9` (9⃣)")
  end
end

it "`1F51F` (fully-qualified) should match `keycap: 10` (🔟)" do
  if m = "🔟".match(Emoji::EMOJI_REGEX)
    "🔟".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔟"
  else
    fail("`1F51F` doesn't match `keycap: 10` (🔟)")
  end
end

it "`1F520` (fully-qualified) should match `input latin uppercase` (🔠)" do
  if m = "🔠".match(Emoji::EMOJI_REGEX)
    "🔠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔠"
  else
    fail("`1F520` doesn't match `input latin uppercase` (🔠)")
  end
end

it "`1F521` (fully-qualified) should match `input latin lowercase` (🔡)" do
  if m = "🔡".match(Emoji::EMOJI_REGEX)
    "🔡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔡"
  else
    fail("`1F521` doesn't match `input latin lowercase` (🔡)")
  end
end

it "`1F522` (fully-qualified) should match `input numbers` (🔢)" do
  if m = "🔢".match(Emoji::EMOJI_REGEX)
    "🔢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔢"
  else
    fail("`1F522` doesn't match `input numbers` (🔢)")
  end
end

it "`1F523` (fully-qualified) should match `input symbols` (🔣)" do
  if m = "🔣".match(Emoji::EMOJI_REGEX)
    "🔣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔣"
  else
    fail("`1F523` doesn't match `input symbols` (🔣)")
  end
end

it "`1F524` (fully-qualified) should match `input latin letters` (🔤)" do
  if m = "🔤".match(Emoji::EMOJI_REGEX)
    "🔤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔤"
  else
    fail("`1F524` doesn't match `input latin letters` (🔤)")
  end
end

it "`1F170 FE0F` (fully-qualified) should match `A button (blood type)` (🅰️)" do
  if m = "🅰️".match(Emoji::EMOJI_REGEX)
    "🅰️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅰️"
  else
    fail("`1F170 FE0F` doesn't match `A button (blood type)` (🅰️)")
  end
end

it "`1F170` (unqualified) should match `A button (blood type)` (🅰)" do
  if m = "🅰".match(Emoji::EMOJI_REGEX)
    "🅰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅰"
  else
    fail("`1F170` doesn't match `A button (blood type)` (🅰)")
  end
end

it "`1F18E` (fully-qualified) should match `AB button (blood type)` (🆎)" do
  if m = "🆎".match(Emoji::EMOJI_REGEX)
    "🆎".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆎"
  else
    fail("`1F18E` doesn't match `AB button (blood type)` (🆎)")
  end
end

it "`1F171 FE0F` (fully-qualified) should match `B button (blood type)` (🅱️)" do
  if m = "🅱️".match(Emoji::EMOJI_REGEX)
    "🅱️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅱️"
  else
    fail("`1F171 FE0F` doesn't match `B button (blood type)` (🅱️)")
  end
end

it "`1F171` (unqualified) should match `B button (blood type)` (🅱)" do
  if m = "🅱".match(Emoji::EMOJI_REGEX)
    "🅱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅱"
  else
    fail("`1F171` doesn't match `B button (blood type)` (🅱)")
  end
end

it "`1F191` (fully-qualified) should match `CL button` (🆑)" do
  if m = "🆑".match(Emoji::EMOJI_REGEX)
    "🆑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆑"
  else
    fail("`1F191` doesn't match `CL button` (🆑)")
  end
end

it "`1F192` (fully-qualified) should match `COOL button` (🆒)" do
  if m = "🆒".match(Emoji::EMOJI_REGEX)
    "🆒".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆒"
  else
    fail("`1F192` doesn't match `COOL button` (🆒)")
  end
end

it "`1F193` (fully-qualified) should match `FREE button` (🆓)" do
  if m = "🆓".match(Emoji::EMOJI_REGEX)
    "🆓".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆓"
  else
    fail("`1F193` doesn't match `FREE button` (🆓)")
  end
end

it "`2139 FE0F` (fully-qualified) should match `information` (ℹ️)" do
  if m = "ℹ️".match(Emoji::EMOJI_REGEX)
    "ℹ️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "ℹ️"
  else
    fail("`2139 FE0F` doesn't match `information` (ℹ️)")
  end
end

it "`2139` (unqualified) should match `information` (ℹ)" do
  if m = "ℹ".match(Emoji::EMOJI_REGEX)
    "ℹ".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "ℹ"
  else
    fail("`2139` doesn't match `information` (ℹ)")
  end
end

it "`1F194` (fully-qualified) should match `ID button` (🆔)" do
  if m = "🆔".match(Emoji::EMOJI_REGEX)
    "🆔".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆔"
  else
    fail("`1F194` doesn't match `ID button` (🆔)")
  end
end

it "`24C2 FE0F` (fully-qualified) should match `circled M` (Ⓜ️)" do
  if m = "Ⓜ️".match(Emoji::EMOJI_REGEX)
    "Ⓜ️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "Ⓜ️"
  else
    fail("`24C2 FE0F` doesn't match `circled M` (Ⓜ️)")
  end
end

it "`24C2` (unqualified) should match `circled M` (Ⓜ)" do
  if m = "Ⓜ".match(Emoji::EMOJI_REGEX)
    "Ⓜ".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "Ⓜ"
  else
    fail("`24C2` doesn't match `circled M` (Ⓜ)")
  end
end

it "`1F195` (fully-qualified) should match `NEW button` (🆕)" do
  if m = "🆕".match(Emoji::EMOJI_REGEX)
    "🆕".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆕"
  else
    fail("`1F195` doesn't match `NEW button` (🆕)")
  end
end

it "`1F196` (fully-qualified) should match `NG button` (🆖)" do
  if m = "🆖".match(Emoji::EMOJI_REGEX)
    "🆖".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆖"
  else
    fail("`1F196` doesn't match `NG button` (🆖)")
  end
end

it "`1F17E FE0F` (fully-qualified) should match `O button (blood type)` (🅾️)" do
  if m = "🅾️".match(Emoji::EMOJI_REGEX)
    "🅾️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅾️"
  else
    fail("`1F17E FE0F` doesn't match `O button (blood type)` (🅾️)")
  end
end

it "`1F17E` (unqualified) should match `O button (blood type)` (🅾)" do
  if m = "🅾".match(Emoji::EMOJI_REGEX)
    "🅾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅾"
  else
    fail("`1F17E` doesn't match `O button (blood type)` (🅾)")
  end
end

it "`1F197` (fully-qualified) should match `OK button` (🆗)" do
  if m = "🆗".match(Emoji::EMOJI_REGEX)
    "🆗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆗"
  else
    fail("`1F197` doesn't match `OK button` (🆗)")
  end
end

it "`1F17F FE0F` (fully-qualified) should match `P button` (🅿️)" do
  if m = "🅿️".match(Emoji::EMOJI_REGEX)
    "🅿️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅿️"
  else
    fail("`1F17F FE0F` doesn't match `P button` (🅿️)")
  end
end

it "`1F17F` (unqualified) should match `P button` (🅿)" do
  if m = "🅿".match(Emoji::EMOJI_REGEX)
    "🅿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🅿"
  else
    fail("`1F17F` doesn't match `P button` (🅿)")
  end
end

it "`1F198` (fully-qualified) should match `SOS button` (🆘)" do
  if m = "🆘".match(Emoji::EMOJI_REGEX)
    "🆘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆘"
  else
    fail("`1F198` doesn't match `SOS button` (🆘)")
  end
end

it "`1F199` (fully-qualified) should match `UP! button` (🆙)" do
  if m = "🆙".match(Emoji::EMOJI_REGEX)
    "🆙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆙"
  else
    fail("`1F199` doesn't match `UP! button` (🆙)")
  end
end

it "`1F19A` (fully-qualified) should match `VS button` (🆚)" do
  if m = "🆚".match(Emoji::EMOJI_REGEX)
    "🆚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🆚"
  else
    fail("`1F19A` doesn't match `VS button` (🆚)")
  end
end

it "`1F201` (fully-qualified) should match `Japanese “here” button` (🈁)" do
  if m = "🈁".match(Emoji::EMOJI_REGEX)
    "🈁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈁"
  else
    fail("`1F201` doesn't match `Japanese “here” button` (🈁)")
  end
end

it "`1F202 FE0F` (fully-qualified) should match `Japanese “service charge” button` (🈂️)" do
  if m = "🈂️".match(Emoji::EMOJI_REGEX)
    "🈂️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈂️"
  else
    fail("`1F202 FE0F` doesn't match `Japanese “service charge” button` (🈂️)")
  end
end

it "`1F202` (unqualified) should match `Japanese “service charge” button` (🈂)" do
  if m = "🈂".match(Emoji::EMOJI_REGEX)
    "🈂".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈂"
  else
    fail("`1F202` doesn't match `Japanese “service charge” button` (🈂)")
  end
end

it "`1F237 FE0F` (fully-qualified) should match `Japanese “monthly amount” button` (🈷️)" do
  if m = "🈷️".match(Emoji::EMOJI_REGEX)
    "🈷️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈷️"
  else
    fail("`1F237 FE0F` doesn't match `Japanese “monthly amount” button` (🈷️)")
  end
end

it "`1F237` (unqualified) should match `Japanese “monthly amount” button` (🈷)" do
  if m = "🈷".match(Emoji::EMOJI_REGEX)
    "🈷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈷"
  else
    fail("`1F237` doesn't match `Japanese “monthly amount” button` (🈷)")
  end
end

it "`1F236` (fully-qualified) should match `Japanese “not free of charge” button` (🈶)" do
  if m = "🈶".match(Emoji::EMOJI_REGEX)
    "🈶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈶"
  else
    fail("`1F236` doesn't match `Japanese “not free of charge” button` (🈶)")
  end
end

it "`1F22F` (fully-qualified) should match `Japanese “reserved” button` (🈯)" do
  if m = "🈯".match(Emoji::EMOJI_REGEX)
    "🈯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈯"
  else
    fail("`1F22F` doesn't match `Japanese “reserved” button` (🈯)")
  end
end

it "`1F250` (fully-qualified) should match `Japanese “bargain” button` (🉐)" do
  if m = "🉐".match(Emoji::EMOJI_REGEX)
    "🉐".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🉐"
  else
    fail("`1F250` doesn't match `Japanese “bargain” button` (🉐)")
  end
end

it "`1F239` (fully-qualified) should match `Japanese “discount” button` (🈹)" do
  if m = "🈹".match(Emoji::EMOJI_REGEX)
    "🈹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈹"
  else
    fail("`1F239` doesn't match `Japanese “discount” button` (🈹)")
  end
end

it "`1F21A` (fully-qualified) should match `Japanese “free of charge” button` (🈚)" do
  if m = "🈚".match(Emoji::EMOJI_REGEX)
    "🈚".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈚"
  else
    fail("`1F21A` doesn't match `Japanese “free of charge” button` (🈚)")
  end
end

it "`1F232` (fully-qualified) should match `Japanese “prohibited” button` (🈲)" do
  if m = "🈲".match(Emoji::EMOJI_REGEX)
    "🈲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈲"
  else
    fail("`1F232` doesn't match `Japanese “prohibited” button` (🈲)")
  end
end

it "`1F251` (fully-qualified) should match `Japanese “acceptable” button` (🉑)" do
  if m = "🉑".match(Emoji::EMOJI_REGEX)
    "🉑".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🉑"
  else
    fail("`1F251` doesn't match `Japanese “acceptable” button` (🉑)")
  end
end

it "`1F238` (fully-qualified) should match `Japanese “application” button` (🈸)" do
  if m = "🈸".match(Emoji::EMOJI_REGEX)
    "🈸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈸"
  else
    fail("`1F238` doesn't match `Japanese “application” button` (🈸)")
  end
end

it "`1F234` (fully-qualified) should match `Japanese “passing grade” button` (🈴)" do
  if m = "🈴".match(Emoji::EMOJI_REGEX)
    "🈴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈴"
  else
    fail("`1F234` doesn't match `Japanese “passing grade” button` (🈴)")
  end
end

it "`1F233` (fully-qualified) should match `Japanese “vacancy” button` (🈳)" do
  if m = "🈳".match(Emoji::EMOJI_REGEX)
    "🈳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈳"
  else
    fail("`1F233` doesn't match `Japanese “vacancy” button` (🈳)")
  end
end

it "`3297 FE0F` (fully-qualified) should match `Japanese “congratulations” button` (㊗️)" do
  if m = "㊗️".match(Emoji::EMOJI_REGEX)
    "㊗️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊗️"
  else
    fail("`3297 FE0F` doesn't match `Japanese “congratulations” button` (㊗️)")
  end
end

it "`3297` (unqualified) should match `Japanese “congratulations” button` (㊗)" do
  if m = "㊗".match(Emoji::EMOJI_REGEX)
    "㊗".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊗"
  else
    fail("`3297` doesn't match `Japanese “congratulations” button` (㊗)")
  end
end

it "`3299 FE0F` (fully-qualified) should match `Japanese “secret” button` (㊙️)" do
  if m = "㊙️".match(Emoji::EMOJI_REGEX)
    "㊙️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊙️"
  else
    fail("`3299 FE0F` doesn't match `Japanese “secret” button` (㊙️)")
  end
end

it "`3299` (unqualified) should match `Japanese “secret” button` (㊙)" do
  if m = "㊙".match(Emoji::EMOJI_REGEX)
    "㊙".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "㊙"
  else
    fail("`3299` doesn't match `Japanese “secret” button` (㊙)")
  end
end

it "`1F23A` (fully-qualified) should match `Japanese “open for business” button` (🈺)" do
  if m = "🈺".match(Emoji::EMOJI_REGEX)
    "🈺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈺"
  else
    fail("`1F23A` doesn't match `Japanese “open for business” button` (🈺)")
  end
end

it "`1F235` (fully-qualified) should match `Japanese “no vacancy” button` (🈵)" do
  if m = "🈵".match(Emoji::EMOJI_REGEX)
    "🈵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🈵"
  else
    fail("`1F235` doesn't match `Japanese “no vacancy” button` (🈵)")
  end
end

it "`1F534` (fully-qualified) should match `red circle` (🔴)" do
  if m = "🔴".match(Emoji::EMOJI_REGEX)
    "🔴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔴"
  else
    fail("`1F534` doesn't match `red circle` (🔴)")
  end
end

it "`1F7E0` (fully-qualified) should match `orange circle` (🟠)" do
  if m = "🟠".match(Emoji::EMOJI_REGEX)
    "🟠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟠"
  else
    fail("`1F7E0` doesn't match `orange circle` (🟠)")
  end
end

it "`1F7E1` (fully-qualified) should match `yellow circle` (🟡)" do
  if m = "🟡".match(Emoji::EMOJI_REGEX)
    "🟡".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟡"
  else
    fail("`1F7E1` doesn't match `yellow circle` (🟡)")
  end
end

it "`1F7E2` (fully-qualified) should match `green circle` (🟢)" do
  if m = "🟢".match(Emoji::EMOJI_REGEX)
    "🟢".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟢"
  else
    fail("`1F7E2` doesn't match `green circle` (🟢)")
  end
end

it "`1F535` (fully-qualified) should match `blue circle` (🔵)" do
  if m = "🔵".match(Emoji::EMOJI_REGEX)
    "🔵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔵"
  else
    fail("`1F535` doesn't match `blue circle` (🔵)")
  end
end

it "`1F7E3` (fully-qualified) should match `purple circle` (🟣)" do
  if m = "🟣".match(Emoji::EMOJI_REGEX)
    "🟣".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟣"
  else
    fail("`1F7E3` doesn't match `purple circle` (🟣)")
  end
end

it "`1F7E4` (fully-qualified) should match `brown circle` (🟤)" do
  if m = "🟤".match(Emoji::EMOJI_REGEX)
    "🟤".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟤"
  else
    fail("`1F7E4` doesn't match `brown circle` (🟤)")
  end
end

it "`26AB` (fully-qualified) should match `black circle` (⚫)" do
  if m = "⚫".match(Emoji::EMOJI_REGEX)
    "⚫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚫"
  else
    fail("`26AB` doesn't match `black circle` (⚫)")
  end
end

it "`26AA` (fully-qualified) should match `white circle` (⚪)" do
  if m = "⚪".match(Emoji::EMOJI_REGEX)
    "⚪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⚪"
  else
    fail("`26AA` doesn't match `white circle` (⚪)")
  end
end

it "`1F7E5` (fully-qualified) should match `red square` (🟥)" do
  if m = "🟥".match(Emoji::EMOJI_REGEX)
    "🟥".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟥"
  else
    fail("`1F7E5` doesn't match `red square` (🟥)")
  end
end

it "`1F7E7` (fully-qualified) should match `orange square` (🟧)" do
  if m = "🟧".match(Emoji::EMOJI_REGEX)
    "🟧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟧"
  else
    fail("`1F7E7` doesn't match `orange square` (🟧)")
  end
end

it "`1F7E8` (fully-qualified) should match `yellow square` (🟨)" do
  if m = "🟨".match(Emoji::EMOJI_REGEX)
    "🟨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟨"
  else
    fail("`1F7E8` doesn't match `yellow square` (🟨)")
  end
end

it "`1F7E9` (fully-qualified) should match `green square` (🟩)" do
  if m = "🟩".match(Emoji::EMOJI_REGEX)
    "🟩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟩"
  else
    fail("`1F7E9` doesn't match `green square` (🟩)")
  end
end

it "`1F7E6` (fully-qualified) should match `blue square` (🟦)" do
  if m = "🟦".match(Emoji::EMOJI_REGEX)
    "🟦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟦"
  else
    fail("`1F7E6` doesn't match `blue square` (🟦)")
  end
end

it "`1F7EA` (fully-qualified) should match `purple square` (🟪)" do
  if m = "🟪".match(Emoji::EMOJI_REGEX)
    "🟪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟪"
  else
    fail("`1F7EA` doesn't match `purple square` (🟪)")
  end
end

it "`1F7EB` (fully-qualified) should match `brown square` (🟫)" do
  if m = "🟫".match(Emoji::EMOJI_REGEX)
    "🟫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🟫"
  else
    fail("`1F7EB` doesn't match `brown square` (🟫)")
  end
end

it "`2B1B` (fully-qualified) should match `black large square` (⬛)" do
  if m = "⬛".match(Emoji::EMOJI_REGEX)
    "⬛".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬛"
  else
    fail("`2B1B` doesn't match `black large square` (⬛)")
  end
end

it "`2B1C` (fully-qualified) should match `white large square` (⬜)" do
  if m = "⬜".match(Emoji::EMOJI_REGEX)
    "⬜".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "⬜"
  else
    fail("`2B1C` doesn't match `white large square` (⬜)")
  end
end

it "`25FC FE0F` (fully-qualified) should match `black medium square` (◼️)" do
  if m = "◼️".match(Emoji::EMOJI_REGEX)
    "◼️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◼️"
  else
    fail("`25FC FE0F` doesn't match `black medium square` (◼️)")
  end
end

it "`25FC` (unqualified) should match `black medium square` (◼)" do
  if m = "◼".match(Emoji::EMOJI_REGEX)
    "◼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◼"
  else
    fail("`25FC` doesn't match `black medium square` (◼)")
  end
end

it "`25FB FE0F` (fully-qualified) should match `white medium square` (◻️)" do
  if m = "◻️".match(Emoji::EMOJI_REGEX)
    "◻️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◻️"
  else
    fail("`25FB FE0F` doesn't match `white medium square` (◻️)")
  end
end

it "`25FB` (unqualified) should match `white medium square` (◻)" do
  if m = "◻".match(Emoji::EMOJI_REGEX)
    "◻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◻"
  else
    fail("`25FB` doesn't match `white medium square` (◻)")
  end
end

it "`25FE` (fully-qualified) should match `black medium-small square` (◾)" do
  if m = "◾".match(Emoji::EMOJI_REGEX)
    "◾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◾"
  else
    fail("`25FE` doesn't match `black medium-small square` (◾)")
  end
end

it "`25FD` (fully-qualified) should match `white medium-small square` (◽)" do
  if m = "◽".match(Emoji::EMOJI_REGEX)
    "◽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "◽"
  else
    fail("`25FD` doesn't match `white medium-small square` (◽)")
  end
end

it "`25AA FE0F` (fully-qualified) should match `black small square` (▪️)" do
  if m = "▪️".match(Emoji::EMOJI_REGEX)
    "▪️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▪️"
  else
    fail("`25AA FE0F` doesn't match `black small square` (▪️)")
  end
end

it "`25AA` (unqualified) should match `black small square` (▪)" do
  if m = "▪".match(Emoji::EMOJI_REGEX)
    "▪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▪"
  else
    fail("`25AA` doesn't match `black small square` (▪)")
  end
end

it "`25AB FE0F` (fully-qualified) should match `white small square` (▫️)" do
  if m = "▫️".match(Emoji::EMOJI_REGEX)
    "▫️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▫️"
  else
    fail("`25AB FE0F` doesn't match `white small square` (▫️)")
  end
end

it "`25AB` (unqualified) should match `white small square` (▫)" do
  if m = "▫".match(Emoji::EMOJI_REGEX)
    "▫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "▫"
  else
    fail("`25AB` doesn't match `white small square` (▫)")
  end
end

it "`1F536` (fully-qualified) should match `large orange diamond` (🔶)" do
  if m = "🔶".match(Emoji::EMOJI_REGEX)
    "🔶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔶"
  else
    fail("`1F536` doesn't match `large orange diamond` (🔶)")
  end
end

it "`1F537` (fully-qualified) should match `large blue diamond` (🔷)" do
  if m = "🔷".match(Emoji::EMOJI_REGEX)
    "🔷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔷"
  else
    fail("`1F537` doesn't match `large blue diamond` (🔷)")
  end
end

it "`1F538` (fully-qualified) should match `small orange diamond` (🔸)" do
  if m = "🔸".match(Emoji::EMOJI_REGEX)
    "🔸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔸"
  else
    fail("`1F538` doesn't match `small orange diamond` (🔸)")
  end
end

it "`1F539` (fully-qualified) should match `small blue diamond` (🔹)" do
  if m = "🔹".match(Emoji::EMOJI_REGEX)
    "🔹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔹"
  else
    fail("`1F539` doesn't match `small blue diamond` (🔹)")
  end
end

it "`1F53A` (fully-qualified) should match `red triangle pointed up` (🔺)" do
  if m = "🔺".match(Emoji::EMOJI_REGEX)
    "🔺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔺"
  else
    fail("`1F53A` doesn't match `red triangle pointed up` (🔺)")
  end
end

it "`1F53B` (fully-qualified) should match `red triangle pointed down` (🔻)" do
  if m = "🔻".match(Emoji::EMOJI_REGEX)
    "🔻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔻"
  else
    fail("`1F53B` doesn't match `red triangle pointed down` (🔻)")
  end
end

it "`1F4A0` (fully-qualified) should match `diamond with a dot` (💠)" do
  if m = "💠".match(Emoji::EMOJI_REGEX)
    "💠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "💠"
  else
    fail("`1F4A0` doesn't match `diamond with a dot` (💠)")
  end
end

it "`1F518` (fully-qualified) should match `radio button` (🔘)" do
  if m = "🔘".match(Emoji::EMOJI_REGEX)
    "🔘".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔘"
  else
    fail("`1F518` doesn't match `radio button` (🔘)")
  end
end

it "`1F533` (fully-qualified) should match `white square button` (🔳)" do
  if m = "🔳".match(Emoji::EMOJI_REGEX)
    "🔳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔳"
  else
    fail("`1F533` doesn't match `white square button` (🔳)")
  end
end

it "`1F532` (fully-qualified) should match `black square button` (🔲)" do
  if m = "🔲".match(Emoji::EMOJI_REGEX)
    "🔲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🔲"
  else
    fail("`1F532` doesn't match `black square button` (🔲)")
  end
end

it "`1F3C1` (fully-qualified) should match `chequered flag` (🏁)" do
  if m = "🏁".match(Emoji::EMOJI_REGEX)
    "🏁".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏁"
  else
    fail("`1F3C1` doesn't match `chequered flag` (🏁)")
  end
end

it "`1F6A9` (fully-qualified) should match `triangular flag` (🚩)" do
  if m = "🚩".match(Emoji::EMOJI_REGEX)
    "🚩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🚩"
  else
    fail("`1F6A9` doesn't match `triangular flag` (🚩)")
  end
end

it "`1F38C` (fully-qualified) should match `crossed flags` (🎌)" do
  if m = "🎌".match(Emoji::EMOJI_REGEX)
    "🎌".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🎌"
  else
    fail("`1F38C` doesn't match `crossed flags` (🎌)")
  end
end

it "`1F3F4` (fully-qualified) should match `black flag` (🏴)" do
  if m = "🏴".match(Emoji::EMOJI_REGEX)
    "🏴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴"
  else
    fail("`1F3F4` doesn't match `black flag` (🏴)")
  end
end

it "`1F3F3 FE0F` (fully-qualified) should match `white flag` (🏳️)" do
  if m = "🏳️".match(Emoji::EMOJI_REGEX)
    "🏳️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳️"
  else
    fail("`1F3F3 FE0F` doesn't match `white flag` (🏳️)")
  end
end

it "`1F3F3` (unqualified) should match `white flag` (🏳)" do
  if m = "🏳".match(Emoji::EMOJI_REGEX)
    "🏳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳"
  else
    fail("`1F3F3` doesn't match `white flag` (🏳)")
  end
end

it "`1F3F3 FE0F 200D 1F308` (fully-qualified) should match `rainbow flag` (🏳️‍🌈)" do
  if m = "🏳️‍🌈".match(Emoji::EMOJI_REGEX)
    "🏳️‍🌈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳️‍🌈"
  else
    fail("`1F3F3 FE0F 200D 1F308` doesn't match `rainbow flag` (🏳️‍🌈)")
  end
end

it "`1F3F3 200D 1F308` (unqualified) should match `rainbow flag` (🏳‍🌈)" do
  if m = "🏳‍🌈".match(Emoji::EMOJI_REGEX)
    "🏳‍🌈".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏳‍🌈"
  else
    fail("`1F3F3 200D 1F308` doesn't match `rainbow flag` (🏳‍🌈)")
  end
end

it "`1F3F4 200D 2620 FE0F` (fully-qualified) should match `pirate flag` (🏴‍☠️)" do
  if m = "🏴‍☠️".match(Emoji::EMOJI_REGEX)
    "🏴‍☠️".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴‍☠️"
  else
    fail("`1F3F4 200D 2620 FE0F` doesn't match `pirate flag` (🏴‍☠️)")
  end
end

it "`1F3F4 200D 2620` (minimally-qualified) should match `pirate flag` (🏴‍☠)" do
  if m = "🏴‍☠".match(Emoji::EMOJI_REGEX)
    "🏴‍☠".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴‍☠"
  else
    fail("`1F3F4 200D 2620` doesn't match `pirate flag` (🏴‍☠)")
  end
end

it "`1F1E6 1F1E8` (fully-qualified) should match `flag: Ascension Island` (🇦🇨)" do
  if m = "🇦🇨".match(Emoji::EMOJI_REGEX)
    "🇦🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇨"
  else
    fail("`1F1E6 1F1E8` doesn't match `flag: Ascension Island` (🇦🇨)")
  end
end

it "`1F1E6 1F1E9` (fully-qualified) should match `flag: Andorra` (🇦🇩)" do
  if m = "🇦🇩".match(Emoji::EMOJI_REGEX)
    "🇦🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇩"
  else
    fail("`1F1E6 1F1E9` doesn't match `flag: Andorra` (🇦🇩)")
  end
end

it "`1F1E6 1F1EA` (fully-qualified) should match `flag: United Arab Emirates` (🇦🇪)" do
  if m = "🇦🇪".match(Emoji::EMOJI_REGEX)
    "🇦🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇪"
  else
    fail("`1F1E6 1F1EA` doesn't match `flag: United Arab Emirates` (🇦🇪)")
  end
end

it "`1F1E6 1F1EB` (fully-qualified) should match `flag: Afghanistan` (🇦🇫)" do
  if m = "🇦🇫".match(Emoji::EMOJI_REGEX)
    "🇦🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇫"
  else
    fail("`1F1E6 1F1EB` doesn't match `flag: Afghanistan` (🇦🇫)")
  end
end

it "`1F1E6 1F1EC` (fully-qualified) should match `flag: Antigua & Barbuda` (🇦🇬)" do
  if m = "🇦🇬".match(Emoji::EMOJI_REGEX)
    "🇦🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇬"
  else
    fail("`1F1E6 1F1EC` doesn't match `flag: Antigua & Barbuda` (🇦🇬)")
  end
end

it "`1F1E6 1F1EE` (fully-qualified) should match `flag: Anguilla` (🇦🇮)" do
  if m = "🇦🇮".match(Emoji::EMOJI_REGEX)
    "🇦🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇮"
  else
    fail("`1F1E6 1F1EE` doesn't match `flag: Anguilla` (🇦🇮)")
  end
end

it "`1F1E6 1F1F1` (fully-qualified) should match `flag: Albania` (🇦🇱)" do
  if m = "🇦🇱".match(Emoji::EMOJI_REGEX)
    "🇦🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇱"
  else
    fail("`1F1E6 1F1F1` doesn't match `flag: Albania` (🇦🇱)")
  end
end

it "`1F1E6 1F1F2` (fully-qualified) should match `flag: Armenia` (🇦🇲)" do
  if m = "🇦🇲".match(Emoji::EMOJI_REGEX)
    "🇦🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇲"
  else
    fail("`1F1E6 1F1F2` doesn't match `flag: Armenia` (🇦🇲)")
  end
end

it "`1F1E6 1F1F4` (fully-qualified) should match `flag: Angola` (🇦🇴)" do
  if m = "🇦🇴".match(Emoji::EMOJI_REGEX)
    "🇦🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇴"
  else
    fail("`1F1E6 1F1F4` doesn't match `flag: Angola` (🇦🇴)")
  end
end

it "`1F1E6 1F1F6` (fully-qualified) should match `flag: Antarctica` (🇦🇶)" do
  if m = "🇦🇶".match(Emoji::EMOJI_REGEX)
    "🇦🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇶"
  else
    fail("`1F1E6 1F1F6` doesn't match `flag: Antarctica` (🇦🇶)")
  end
end

it "`1F1E6 1F1F7` (fully-qualified) should match `flag: Argentina` (🇦🇷)" do
  if m = "🇦🇷".match(Emoji::EMOJI_REGEX)
    "🇦🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇷"
  else
    fail("`1F1E6 1F1F7` doesn't match `flag: Argentina` (🇦🇷)")
  end
end

it "`1F1E6 1F1F8` (fully-qualified) should match `flag: American Samoa` (🇦🇸)" do
  if m = "🇦🇸".match(Emoji::EMOJI_REGEX)
    "🇦🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇸"
  else
    fail("`1F1E6 1F1F8` doesn't match `flag: American Samoa` (🇦🇸)")
  end
end

it "`1F1E6 1F1F9` (fully-qualified) should match `flag: Austria` (🇦🇹)" do
  if m = "🇦🇹".match(Emoji::EMOJI_REGEX)
    "🇦🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇹"
  else
    fail("`1F1E6 1F1F9` doesn't match `flag: Austria` (🇦🇹)")
  end
end

it "`1F1E6 1F1FA` (fully-qualified) should match `flag: Australia` (🇦🇺)" do
  if m = "🇦🇺".match(Emoji::EMOJI_REGEX)
    "🇦🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇺"
  else
    fail("`1F1E6 1F1FA` doesn't match `flag: Australia` (🇦🇺)")
  end
end

it "`1F1E6 1F1FC` (fully-qualified) should match `flag: Aruba` (🇦🇼)" do
  if m = "🇦🇼".match(Emoji::EMOJI_REGEX)
    "🇦🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇼"
  else
    fail("`1F1E6 1F1FC` doesn't match `flag: Aruba` (🇦🇼)")
  end
end

it "`1F1E6 1F1FD` (fully-qualified) should match `flag: Åland Islands` (🇦🇽)" do
  if m = "🇦🇽".match(Emoji::EMOJI_REGEX)
    "🇦🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇽"
  else
    fail("`1F1E6 1F1FD` doesn't match `flag: Åland Islands` (🇦🇽)")
  end
end

it "`1F1E6 1F1FF` (fully-qualified) should match `flag: Azerbaijan` (🇦🇿)" do
  if m = "🇦🇿".match(Emoji::EMOJI_REGEX)
    "🇦🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇦🇿"
  else
    fail("`1F1E6 1F1FF` doesn't match `flag: Azerbaijan` (🇦🇿)")
  end
end

it "`1F1E7 1F1E6` (fully-qualified) should match `flag: Bosnia & Herzegovina` (🇧🇦)" do
  if m = "🇧🇦".match(Emoji::EMOJI_REGEX)
    "🇧🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇦"
  else
    fail("`1F1E7 1F1E6` doesn't match `flag: Bosnia & Herzegovina` (🇧🇦)")
  end
end

it "`1F1E7 1F1E7` (fully-qualified) should match `flag: Barbados` (🇧🇧)" do
  if m = "🇧🇧".match(Emoji::EMOJI_REGEX)
    "🇧🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇧"
  else
    fail("`1F1E7 1F1E7` doesn't match `flag: Barbados` (🇧🇧)")
  end
end

it "`1F1E7 1F1E9` (fully-qualified) should match `flag: Bangladesh` (🇧🇩)" do
  if m = "🇧🇩".match(Emoji::EMOJI_REGEX)
    "🇧🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇩"
  else
    fail("`1F1E7 1F1E9` doesn't match `flag: Bangladesh` (🇧🇩)")
  end
end

it "`1F1E7 1F1EA` (fully-qualified) should match `flag: Belgium` (🇧🇪)" do
  if m = "🇧🇪".match(Emoji::EMOJI_REGEX)
    "🇧🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇪"
  else
    fail("`1F1E7 1F1EA` doesn't match `flag: Belgium` (🇧🇪)")
  end
end

it "`1F1E7 1F1EB` (fully-qualified) should match `flag: Burkina Faso` (🇧🇫)" do
  if m = "🇧🇫".match(Emoji::EMOJI_REGEX)
    "🇧🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇫"
  else
    fail("`1F1E7 1F1EB` doesn't match `flag: Burkina Faso` (🇧🇫)")
  end
end

it "`1F1E7 1F1EC` (fully-qualified) should match `flag: Bulgaria` (🇧🇬)" do
  if m = "🇧🇬".match(Emoji::EMOJI_REGEX)
    "🇧🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇬"
  else
    fail("`1F1E7 1F1EC` doesn't match `flag: Bulgaria` (🇧🇬)")
  end
end

it "`1F1E7 1F1ED` (fully-qualified) should match `flag: Bahrain` (🇧🇭)" do
  if m = "🇧🇭".match(Emoji::EMOJI_REGEX)
    "🇧🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇭"
  else
    fail("`1F1E7 1F1ED` doesn't match `flag: Bahrain` (🇧🇭)")
  end
end

it "`1F1E7 1F1EE` (fully-qualified) should match `flag: Burundi` (🇧🇮)" do
  if m = "🇧🇮".match(Emoji::EMOJI_REGEX)
    "🇧🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇮"
  else
    fail("`1F1E7 1F1EE` doesn't match `flag: Burundi` (🇧🇮)")
  end
end

it "`1F1E7 1F1EF` (fully-qualified) should match `flag: Benin` (🇧🇯)" do
  if m = "🇧🇯".match(Emoji::EMOJI_REGEX)
    "🇧🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇯"
  else
    fail("`1F1E7 1F1EF` doesn't match `flag: Benin` (🇧🇯)")
  end
end

it "`1F1E7 1F1F1` (fully-qualified) should match `flag: St. Barthélemy` (🇧🇱)" do
  if m = "🇧🇱".match(Emoji::EMOJI_REGEX)
    "🇧🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇱"
  else
    fail("`1F1E7 1F1F1` doesn't match `flag: St. Barthélemy` (🇧🇱)")
  end
end

it "`1F1E7 1F1F2` (fully-qualified) should match `flag: Bermuda` (🇧🇲)" do
  if m = "🇧🇲".match(Emoji::EMOJI_REGEX)
    "🇧🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇲"
  else
    fail("`1F1E7 1F1F2` doesn't match `flag: Bermuda` (🇧🇲)")
  end
end

it "`1F1E7 1F1F3` (fully-qualified) should match `flag: Brunei` (🇧🇳)" do
  if m = "🇧🇳".match(Emoji::EMOJI_REGEX)
    "🇧🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇳"
  else
    fail("`1F1E7 1F1F3` doesn't match `flag: Brunei` (🇧🇳)")
  end
end

it "`1F1E7 1F1F4` (fully-qualified) should match `flag: Bolivia` (🇧🇴)" do
  if m = "🇧🇴".match(Emoji::EMOJI_REGEX)
    "🇧🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇴"
  else
    fail("`1F1E7 1F1F4` doesn't match `flag: Bolivia` (🇧🇴)")
  end
end

it "`1F1E7 1F1F6` (fully-qualified) should match `flag: Caribbean Netherlands` (🇧🇶)" do
  if m = "🇧🇶".match(Emoji::EMOJI_REGEX)
    "🇧🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇶"
  else
    fail("`1F1E7 1F1F6` doesn't match `flag: Caribbean Netherlands` (🇧🇶)")
  end
end

it "`1F1E7 1F1F7` (fully-qualified) should match `flag: Brazil` (🇧🇷)" do
  if m = "🇧🇷".match(Emoji::EMOJI_REGEX)
    "🇧🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇷"
  else
    fail("`1F1E7 1F1F7` doesn't match `flag: Brazil` (🇧🇷)")
  end
end

it "`1F1E7 1F1F8` (fully-qualified) should match `flag: Bahamas` (🇧🇸)" do
  if m = "🇧🇸".match(Emoji::EMOJI_REGEX)
    "🇧🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇸"
  else
    fail("`1F1E7 1F1F8` doesn't match `flag: Bahamas` (🇧🇸)")
  end
end

it "`1F1E7 1F1F9` (fully-qualified) should match `flag: Bhutan` (🇧🇹)" do
  if m = "🇧🇹".match(Emoji::EMOJI_REGEX)
    "🇧🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇹"
  else
    fail("`1F1E7 1F1F9` doesn't match `flag: Bhutan` (🇧🇹)")
  end
end

it "`1F1E7 1F1FB` (fully-qualified) should match `flag: Bouvet Island` (🇧🇻)" do
  if m = "🇧🇻".match(Emoji::EMOJI_REGEX)
    "🇧🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇻"
  else
    fail("`1F1E7 1F1FB` doesn't match `flag: Bouvet Island` (🇧🇻)")
  end
end

it "`1F1E7 1F1FC` (fully-qualified) should match `flag: Botswana` (🇧🇼)" do
  if m = "🇧🇼".match(Emoji::EMOJI_REGEX)
    "🇧🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇼"
  else
    fail("`1F1E7 1F1FC` doesn't match `flag: Botswana` (🇧🇼)")
  end
end

it "`1F1E7 1F1FE` (fully-qualified) should match `flag: Belarus` (🇧🇾)" do
  if m = "🇧🇾".match(Emoji::EMOJI_REGEX)
    "🇧🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇾"
  else
    fail("`1F1E7 1F1FE` doesn't match `flag: Belarus` (🇧🇾)")
  end
end

it "`1F1E7 1F1FF` (fully-qualified) should match `flag: Belize` (🇧🇿)" do
  if m = "🇧🇿".match(Emoji::EMOJI_REGEX)
    "🇧🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇧🇿"
  else
    fail("`1F1E7 1F1FF` doesn't match `flag: Belize` (🇧🇿)")
  end
end

it "`1F1E8 1F1E6` (fully-qualified) should match `flag: Canada` (🇨🇦)" do
  if m = "🇨🇦".match(Emoji::EMOJI_REGEX)
    "🇨🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇦"
  else
    fail("`1F1E8 1F1E6` doesn't match `flag: Canada` (🇨🇦)")
  end
end

it "`1F1E8 1F1E8` (fully-qualified) should match `flag: Cocos (Keeling) Islands` (🇨🇨)" do
  if m = "🇨🇨".match(Emoji::EMOJI_REGEX)
    "🇨🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇨"
  else
    fail("`1F1E8 1F1E8` doesn't match `flag: Cocos (Keeling) Islands` (🇨🇨)")
  end
end

it "`1F1E8 1F1E9` (fully-qualified) should match `flag: Congo - Kinshasa` (🇨🇩)" do
  if m = "🇨🇩".match(Emoji::EMOJI_REGEX)
    "🇨🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇩"
  else
    fail("`1F1E8 1F1E9` doesn't match `flag: Congo - Kinshasa` (🇨🇩)")
  end
end

it "`1F1E8 1F1EB` (fully-qualified) should match `flag: Central African Republic` (🇨🇫)" do
  if m = "🇨🇫".match(Emoji::EMOJI_REGEX)
    "🇨🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇫"
  else
    fail("`1F1E8 1F1EB` doesn't match `flag: Central African Republic` (🇨🇫)")
  end
end

it "`1F1E8 1F1EC` (fully-qualified) should match `flag: Congo - Brazzaville` (🇨🇬)" do
  if m = "🇨🇬".match(Emoji::EMOJI_REGEX)
    "🇨🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇬"
  else
    fail("`1F1E8 1F1EC` doesn't match `flag: Congo - Brazzaville` (🇨🇬)")
  end
end

it "`1F1E8 1F1ED` (fully-qualified) should match `flag: Switzerland` (🇨🇭)" do
  if m = "🇨🇭".match(Emoji::EMOJI_REGEX)
    "🇨🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇭"
  else
    fail("`1F1E8 1F1ED` doesn't match `flag: Switzerland` (🇨🇭)")
  end
end

it "`1F1E8 1F1EE` (fully-qualified) should match `flag: Côte d’Ivoire` (🇨🇮)" do
  if m = "🇨🇮".match(Emoji::EMOJI_REGEX)
    "🇨🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇮"
  else
    fail("`1F1E8 1F1EE` doesn't match `flag: Côte d’Ivoire` (🇨🇮)")
  end
end

it "`1F1E8 1F1F0` (fully-qualified) should match `flag: Cook Islands` (🇨🇰)" do
  if m = "🇨🇰".match(Emoji::EMOJI_REGEX)
    "🇨🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇰"
  else
    fail("`1F1E8 1F1F0` doesn't match `flag: Cook Islands` (🇨🇰)")
  end
end

it "`1F1E8 1F1F1` (fully-qualified) should match `flag: Chile` (🇨🇱)" do
  if m = "🇨🇱".match(Emoji::EMOJI_REGEX)
    "🇨🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇱"
  else
    fail("`1F1E8 1F1F1` doesn't match `flag: Chile` (🇨🇱)")
  end
end

it "`1F1E8 1F1F2` (fully-qualified) should match `flag: Cameroon` (🇨🇲)" do
  if m = "🇨🇲".match(Emoji::EMOJI_REGEX)
    "🇨🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇲"
  else
    fail("`1F1E8 1F1F2` doesn't match `flag: Cameroon` (🇨🇲)")
  end
end

it "`1F1E8 1F1F3` (fully-qualified) should match `flag: China` (🇨🇳)" do
  if m = "🇨🇳".match(Emoji::EMOJI_REGEX)
    "🇨🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇳"
  else
    fail("`1F1E8 1F1F3` doesn't match `flag: China` (🇨🇳)")
  end
end

it "`1F1E8 1F1F4` (fully-qualified) should match `flag: Colombia` (🇨🇴)" do
  if m = "🇨🇴".match(Emoji::EMOJI_REGEX)
    "🇨🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇴"
  else
    fail("`1F1E8 1F1F4` doesn't match `flag: Colombia` (🇨🇴)")
  end
end

it "`1F1E8 1F1F5` (fully-qualified) should match `flag: Clipperton Island` (🇨🇵)" do
  if m = "🇨🇵".match(Emoji::EMOJI_REGEX)
    "🇨🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇵"
  else
    fail("`1F1E8 1F1F5` doesn't match `flag: Clipperton Island` (🇨🇵)")
  end
end

it "`1F1E8 1F1F7` (fully-qualified) should match `flag: Costa Rica` (🇨🇷)" do
  if m = "🇨🇷".match(Emoji::EMOJI_REGEX)
    "🇨🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇷"
  else
    fail("`1F1E8 1F1F7` doesn't match `flag: Costa Rica` (🇨🇷)")
  end
end

it "`1F1E8 1F1FA` (fully-qualified) should match `flag: Cuba` (🇨🇺)" do
  if m = "🇨🇺".match(Emoji::EMOJI_REGEX)
    "🇨🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇺"
  else
    fail("`1F1E8 1F1FA` doesn't match `flag: Cuba` (🇨🇺)")
  end
end

it "`1F1E8 1F1FB` (fully-qualified) should match `flag: Cape Verde` (🇨🇻)" do
  if m = "🇨🇻".match(Emoji::EMOJI_REGEX)
    "🇨🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇻"
  else
    fail("`1F1E8 1F1FB` doesn't match `flag: Cape Verde` (🇨🇻)")
  end
end

it "`1F1E8 1F1FC` (fully-qualified) should match `flag: Curaçao` (🇨🇼)" do
  if m = "🇨🇼".match(Emoji::EMOJI_REGEX)
    "🇨🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇼"
  else
    fail("`1F1E8 1F1FC` doesn't match `flag: Curaçao` (🇨🇼)")
  end
end

it "`1F1E8 1F1FD` (fully-qualified) should match `flag: Christmas Island` (🇨🇽)" do
  if m = "🇨🇽".match(Emoji::EMOJI_REGEX)
    "🇨🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇽"
  else
    fail("`1F1E8 1F1FD` doesn't match `flag: Christmas Island` (🇨🇽)")
  end
end

it "`1F1E8 1F1FE` (fully-qualified) should match `flag: Cyprus` (🇨🇾)" do
  if m = "🇨🇾".match(Emoji::EMOJI_REGEX)
    "🇨🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇾"
  else
    fail("`1F1E8 1F1FE` doesn't match `flag: Cyprus` (🇨🇾)")
  end
end

it "`1F1E8 1F1FF` (fully-qualified) should match `flag: Czechia` (🇨🇿)" do
  if m = "🇨🇿".match(Emoji::EMOJI_REGEX)
    "🇨🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇨🇿"
  else
    fail("`1F1E8 1F1FF` doesn't match `flag: Czechia` (🇨🇿)")
  end
end

it "`1F1E9 1F1EA` (fully-qualified) should match `flag: Germany` (🇩🇪)" do
  if m = "🇩🇪".match(Emoji::EMOJI_REGEX)
    "🇩🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇪"
  else
    fail("`1F1E9 1F1EA` doesn't match `flag: Germany` (🇩🇪)")
  end
end

it "`1F1E9 1F1EC` (fully-qualified) should match `flag: Diego Garcia` (🇩🇬)" do
  if m = "🇩🇬".match(Emoji::EMOJI_REGEX)
    "🇩🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇬"
  else
    fail("`1F1E9 1F1EC` doesn't match `flag: Diego Garcia` (🇩🇬)")
  end
end

it "`1F1E9 1F1EF` (fully-qualified) should match `flag: Djibouti` (🇩🇯)" do
  if m = "🇩🇯".match(Emoji::EMOJI_REGEX)
    "🇩🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇯"
  else
    fail("`1F1E9 1F1EF` doesn't match `flag: Djibouti` (🇩🇯)")
  end
end

it "`1F1E9 1F1F0` (fully-qualified) should match `flag: Denmark` (🇩🇰)" do
  if m = "🇩🇰".match(Emoji::EMOJI_REGEX)
    "🇩🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇰"
  else
    fail("`1F1E9 1F1F0` doesn't match `flag: Denmark` (🇩🇰)")
  end
end

it "`1F1E9 1F1F2` (fully-qualified) should match `flag: Dominica` (🇩🇲)" do
  if m = "🇩🇲".match(Emoji::EMOJI_REGEX)
    "🇩🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇲"
  else
    fail("`1F1E9 1F1F2` doesn't match `flag: Dominica` (🇩🇲)")
  end
end

it "`1F1E9 1F1F4` (fully-qualified) should match `flag: Dominican Republic` (🇩🇴)" do
  if m = "🇩🇴".match(Emoji::EMOJI_REGEX)
    "🇩🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇴"
  else
    fail("`1F1E9 1F1F4` doesn't match `flag: Dominican Republic` (🇩🇴)")
  end
end

it "`1F1E9 1F1FF` (fully-qualified) should match `flag: Algeria` (🇩🇿)" do
  if m = "🇩🇿".match(Emoji::EMOJI_REGEX)
    "🇩🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇩🇿"
  else
    fail("`1F1E9 1F1FF` doesn't match `flag: Algeria` (🇩🇿)")
  end
end

it "`1F1EA 1F1E6` (fully-qualified) should match `flag: Ceuta & Melilla` (🇪🇦)" do
  if m = "🇪🇦".match(Emoji::EMOJI_REGEX)
    "🇪🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇦"
  else
    fail("`1F1EA 1F1E6` doesn't match `flag: Ceuta & Melilla` (🇪🇦)")
  end
end

it "`1F1EA 1F1E8` (fully-qualified) should match `flag: Ecuador` (🇪🇨)" do
  if m = "🇪🇨".match(Emoji::EMOJI_REGEX)
    "🇪🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇨"
  else
    fail("`1F1EA 1F1E8` doesn't match `flag: Ecuador` (🇪🇨)")
  end
end

it "`1F1EA 1F1EA` (fully-qualified) should match `flag: Estonia` (🇪🇪)" do
  if m = "🇪🇪".match(Emoji::EMOJI_REGEX)
    "🇪🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇪"
  else
    fail("`1F1EA 1F1EA` doesn't match `flag: Estonia` (🇪🇪)")
  end
end

it "`1F1EA 1F1EC` (fully-qualified) should match `flag: Egypt` (🇪🇬)" do
  if m = "🇪🇬".match(Emoji::EMOJI_REGEX)
    "🇪🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇬"
  else
    fail("`1F1EA 1F1EC` doesn't match `flag: Egypt` (🇪🇬)")
  end
end

it "`1F1EA 1F1ED` (fully-qualified) should match `flag: Western Sahara` (🇪🇭)" do
  if m = "🇪🇭".match(Emoji::EMOJI_REGEX)
    "🇪🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇭"
  else
    fail("`1F1EA 1F1ED` doesn't match `flag: Western Sahara` (🇪🇭)")
  end
end

it "`1F1EA 1F1F7` (fully-qualified) should match `flag: Eritrea` (🇪🇷)" do
  if m = "🇪🇷".match(Emoji::EMOJI_REGEX)
    "🇪🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇷"
  else
    fail("`1F1EA 1F1F7` doesn't match `flag: Eritrea` (🇪🇷)")
  end
end

it "`1F1EA 1F1F8` (fully-qualified) should match `flag: Spain` (🇪🇸)" do
  if m = "🇪🇸".match(Emoji::EMOJI_REGEX)
    "🇪🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇸"
  else
    fail("`1F1EA 1F1F8` doesn't match `flag: Spain` (🇪🇸)")
  end
end

it "`1F1EA 1F1F9` (fully-qualified) should match `flag: Ethiopia` (🇪🇹)" do
  if m = "🇪🇹".match(Emoji::EMOJI_REGEX)
    "🇪🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇹"
  else
    fail("`1F1EA 1F1F9` doesn't match `flag: Ethiopia` (🇪🇹)")
  end
end

it "`1F1EA 1F1FA` (fully-qualified) should match `flag: European Union` (🇪🇺)" do
  if m = "🇪🇺".match(Emoji::EMOJI_REGEX)
    "🇪🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇪🇺"
  else
    fail("`1F1EA 1F1FA` doesn't match `flag: European Union` (🇪🇺)")
  end
end

it "`1F1EB 1F1EE` (fully-qualified) should match `flag: Finland` (🇫🇮)" do
  if m = "🇫🇮".match(Emoji::EMOJI_REGEX)
    "🇫🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇮"
  else
    fail("`1F1EB 1F1EE` doesn't match `flag: Finland` (🇫🇮)")
  end
end

it "`1F1EB 1F1EF` (fully-qualified) should match `flag: Fiji` (🇫🇯)" do
  if m = "🇫🇯".match(Emoji::EMOJI_REGEX)
    "🇫🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇯"
  else
    fail("`1F1EB 1F1EF` doesn't match `flag: Fiji` (🇫🇯)")
  end
end

it "`1F1EB 1F1F0` (fully-qualified) should match `flag: Falkland Islands` (🇫🇰)" do
  if m = "🇫🇰".match(Emoji::EMOJI_REGEX)
    "🇫🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇰"
  else
    fail("`1F1EB 1F1F0` doesn't match `flag: Falkland Islands` (🇫🇰)")
  end
end

it "`1F1EB 1F1F2` (fully-qualified) should match `flag: Micronesia` (🇫🇲)" do
  if m = "🇫🇲".match(Emoji::EMOJI_REGEX)
    "🇫🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇲"
  else
    fail("`1F1EB 1F1F2` doesn't match `flag: Micronesia` (🇫🇲)")
  end
end

it "`1F1EB 1F1F4` (fully-qualified) should match `flag: Faroe Islands` (🇫🇴)" do
  if m = "🇫🇴".match(Emoji::EMOJI_REGEX)
    "🇫🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇴"
  else
    fail("`1F1EB 1F1F4` doesn't match `flag: Faroe Islands` (🇫🇴)")
  end
end

it "`1F1EB 1F1F7` (fully-qualified) should match `flag: France` (🇫🇷)" do
  if m = "🇫🇷".match(Emoji::EMOJI_REGEX)
    "🇫🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇫🇷"
  else
    fail("`1F1EB 1F1F7` doesn't match `flag: France` (🇫🇷)")
  end
end

it "`1F1EC 1F1E6` (fully-qualified) should match `flag: Gabon` (🇬🇦)" do
  if m = "🇬🇦".match(Emoji::EMOJI_REGEX)
    "🇬🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇦"
  else
    fail("`1F1EC 1F1E6` doesn't match `flag: Gabon` (🇬🇦)")
  end
end

it "`1F1EC 1F1E7` (fully-qualified) should match `flag: United Kingdom` (🇬🇧)" do
  if m = "🇬🇧".match(Emoji::EMOJI_REGEX)
    "🇬🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇧"
  else
    fail("`1F1EC 1F1E7` doesn't match `flag: United Kingdom` (🇬🇧)")
  end
end

it "`1F1EC 1F1E9` (fully-qualified) should match `flag: Grenada` (🇬🇩)" do
  if m = "🇬🇩".match(Emoji::EMOJI_REGEX)
    "🇬🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇩"
  else
    fail("`1F1EC 1F1E9` doesn't match `flag: Grenada` (🇬🇩)")
  end
end

it "`1F1EC 1F1EA` (fully-qualified) should match `flag: Georgia` (🇬🇪)" do
  if m = "🇬🇪".match(Emoji::EMOJI_REGEX)
    "🇬🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇪"
  else
    fail("`1F1EC 1F1EA` doesn't match `flag: Georgia` (🇬🇪)")
  end
end

it "`1F1EC 1F1EB` (fully-qualified) should match `flag: French Guiana` (🇬🇫)" do
  if m = "🇬🇫".match(Emoji::EMOJI_REGEX)
    "🇬🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇫"
  else
    fail("`1F1EC 1F1EB` doesn't match `flag: French Guiana` (🇬🇫)")
  end
end

it "`1F1EC 1F1EC` (fully-qualified) should match `flag: Guernsey` (🇬🇬)" do
  if m = "🇬🇬".match(Emoji::EMOJI_REGEX)
    "🇬🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇬"
  else
    fail("`1F1EC 1F1EC` doesn't match `flag: Guernsey` (🇬🇬)")
  end
end

it "`1F1EC 1F1ED` (fully-qualified) should match `flag: Ghana` (🇬🇭)" do
  if m = "🇬🇭".match(Emoji::EMOJI_REGEX)
    "🇬🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇭"
  else
    fail("`1F1EC 1F1ED` doesn't match `flag: Ghana` (🇬🇭)")
  end
end

it "`1F1EC 1F1EE` (fully-qualified) should match `flag: Gibraltar` (🇬🇮)" do
  if m = "🇬🇮".match(Emoji::EMOJI_REGEX)
    "🇬🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇮"
  else
    fail("`1F1EC 1F1EE` doesn't match `flag: Gibraltar` (🇬🇮)")
  end
end

it "`1F1EC 1F1F1` (fully-qualified) should match `flag: Greenland` (🇬🇱)" do
  if m = "🇬🇱".match(Emoji::EMOJI_REGEX)
    "🇬🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇱"
  else
    fail("`1F1EC 1F1F1` doesn't match `flag: Greenland` (🇬🇱)")
  end
end

it "`1F1EC 1F1F2` (fully-qualified) should match `flag: Gambia` (🇬🇲)" do
  if m = "🇬🇲".match(Emoji::EMOJI_REGEX)
    "🇬🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇲"
  else
    fail("`1F1EC 1F1F2` doesn't match `flag: Gambia` (🇬🇲)")
  end
end

it "`1F1EC 1F1F3` (fully-qualified) should match `flag: Guinea` (🇬🇳)" do
  if m = "🇬🇳".match(Emoji::EMOJI_REGEX)
    "🇬🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇳"
  else
    fail("`1F1EC 1F1F3` doesn't match `flag: Guinea` (🇬🇳)")
  end
end

it "`1F1EC 1F1F5` (fully-qualified) should match `flag: Guadeloupe` (🇬🇵)" do
  if m = "🇬🇵".match(Emoji::EMOJI_REGEX)
    "🇬🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇵"
  else
    fail("`1F1EC 1F1F5` doesn't match `flag: Guadeloupe` (🇬🇵)")
  end
end

it "`1F1EC 1F1F6` (fully-qualified) should match `flag: Equatorial Guinea` (🇬🇶)" do
  if m = "🇬🇶".match(Emoji::EMOJI_REGEX)
    "🇬🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇶"
  else
    fail("`1F1EC 1F1F6` doesn't match `flag: Equatorial Guinea` (🇬🇶)")
  end
end

it "`1F1EC 1F1F7` (fully-qualified) should match `flag: Greece` (🇬🇷)" do
  if m = "🇬🇷".match(Emoji::EMOJI_REGEX)
    "🇬🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇷"
  else
    fail("`1F1EC 1F1F7` doesn't match `flag: Greece` (🇬🇷)")
  end
end

it "`1F1EC 1F1F8` (fully-qualified) should match `flag: South Georgia & South Sandwich Islands` (🇬🇸)" do
  if m = "🇬🇸".match(Emoji::EMOJI_REGEX)
    "🇬🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇸"
  else
    fail("`1F1EC 1F1F8` doesn't match `flag: South Georgia & South Sandwich Islands` (🇬🇸)")
  end
end

it "`1F1EC 1F1F9` (fully-qualified) should match `flag: Guatemala` (🇬🇹)" do
  if m = "🇬🇹".match(Emoji::EMOJI_REGEX)
    "🇬🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇹"
  else
    fail("`1F1EC 1F1F9` doesn't match `flag: Guatemala` (🇬🇹)")
  end
end

it "`1F1EC 1F1FA` (fully-qualified) should match `flag: Guam` (🇬🇺)" do
  if m = "🇬🇺".match(Emoji::EMOJI_REGEX)
    "🇬🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇺"
  else
    fail("`1F1EC 1F1FA` doesn't match `flag: Guam` (🇬🇺)")
  end
end

it "`1F1EC 1F1FC` (fully-qualified) should match `flag: Guinea-Bissau` (🇬🇼)" do
  if m = "🇬🇼".match(Emoji::EMOJI_REGEX)
    "🇬🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇼"
  else
    fail("`1F1EC 1F1FC` doesn't match `flag: Guinea-Bissau` (🇬🇼)")
  end
end

it "`1F1EC 1F1FE` (fully-qualified) should match `flag: Guyana` (🇬🇾)" do
  if m = "🇬🇾".match(Emoji::EMOJI_REGEX)
    "🇬🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇬🇾"
  else
    fail("`1F1EC 1F1FE` doesn't match `flag: Guyana` (🇬🇾)")
  end
end

it "`1F1ED 1F1F0` (fully-qualified) should match `flag: Hong Kong SAR China` (🇭🇰)" do
  if m = "🇭🇰".match(Emoji::EMOJI_REGEX)
    "🇭🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇰"
  else
    fail("`1F1ED 1F1F0` doesn't match `flag: Hong Kong SAR China` (🇭🇰)")
  end
end

it "`1F1ED 1F1F2` (fully-qualified) should match `flag: Heard & McDonald Islands` (🇭🇲)" do
  if m = "🇭🇲".match(Emoji::EMOJI_REGEX)
    "🇭🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇲"
  else
    fail("`1F1ED 1F1F2` doesn't match `flag: Heard & McDonald Islands` (🇭🇲)")
  end
end

it "`1F1ED 1F1F3` (fully-qualified) should match `flag: Honduras` (🇭🇳)" do
  if m = "🇭🇳".match(Emoji::EMOJI_REGEX)
    "🇭🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇳"
  else
    fail("`1F1ED 1F1F3` doesn't match `flag: Honduras` (🇭🇳)")
  end
end

it "`1F1ED 1F1F7` (fully-qualified) should match `flag: Croatia` (🇭🇷)" do
  if m = "🇭🇷".match(Emoji::EMOJI_REGEX)
    "🇭🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇷"
  else
    fail("`1F1ED 1F1F7` doesn't match `flag: Croatia` (🇭🇷)")
  end
end

it "`1F1ED 1F1F9` (fully-qualified) should match `flag: Haiti` (🇭🇹)" do
  if m = "🇭🇹".match(Emoji::EMOJI_REGEX)
    "🇭🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇹"
  else
    fail("`1F1ED 1F1F9` doesn't match `flag: Haiti` (🇭🇹)")
  end
end

it "`1F1ED 1F1FA` (fully-qualified) should match `flag: Hungary` (🇭🇺)" do
  if m = "🇭🇺".match(Emoji::EMOJI_REGEX)
    "🇭🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇭🇺"
  else
    fail("`1F1ED 1F1FA` doesn't match `flag: Hungary` (🇭🇺)")
  end
end

it "`1F1EE 1F1E8` (fully-qualified) should match `flag: Canary Islands` (🇮🇨)" do
  if m = "🇮🇨".match(Emoji::EMOJI_REGEX)
    "🇮🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇨"
  else
    fail("`1F1EE 1F1E8` doesn't match `flag: Canary Islands` (🇮🇨)")
  end
end

it "`1F1EE 1F1E9` (fully-qualified) should match `flag: Indonesia` (🇮🇩)" do
  if m = "🇮🇩".match(Emoji::EMOJI_REGEX)
    "🇮🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇩"
  else
    fail("`1F1EE 1F1E9` doesn't match `flag: Indonesia` (🇮🇩)")
  end
end

it "`1F1EE 1F1EA` (fully-qualified) should match `flag: Ireland` (🇮🇪)" do
  if m = "🇮🇪".match(Emoji::EMOJI_REGEX)
    "🇮🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇪"
  else
    fail("`1F1EE 1F1EA` doesn't match `flag: Ireland` (🇮🇪)")
  end
end

it "`1F1EE 1F1F1` (fully-qualified) should match `flag: Israel` (🇮🇱)" do
  if m = "🇮🇱".match(Emoji::EMOJI_REGEX)
    "🇮🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇱"
  else
    fail("`1F1EE 1F1F1` doesn't match `flag: Israel` (🇮🇱)")
  end
end

it "`1F1EE 1F1F2` (fully-qualified) should match `flag: Isle of Man` (🇮🇲)" do
  if m = "🇮🇲".match(Emoji::EMOJI_REGEX)
    "🇮🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇲"
  else
    fail("`1F1EE 1F1F2` doesn't match `flag: Isle of Man` (🇮🇲)")
  end
end

it "`1F1EE 1F1F3` (fully-qualified) should match `flag: India` (🇮🇳)" do
  if m = "🇮🇳".match(Emoji::EMOJI_REGEX)
    "🇮🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇳"
  else
    fail("`1F1EE 1F1F3` doesn't match `flag: India` (🇮🇳)")
  end
end

it "`1F1EE 1F1F4` (fully-qualified) should match `flag: British Indian Ocean Territory` (🇮🇴)" do
  if m = "🇮🇴".match(Emoji::EMOJI_REGEX)
    "🇮🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇴"
  else
    fail("`1F1EE 1F1F4` doesn't match `flag: British Indian Ocean Territory` (🇮🇴)")
  end
end

it "`1F1EE 1F1F6` (fully-qualified) should match `flag: Iraq` (🇮🇶)" do
  if m = "🇮🇶".match(Emoji::EMOJI_REGEX)
    "🇮🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇶"
  else
    fail("`1F1EE 1F1F6` doesn't match `flag: Iraq` (🇮🇶)")
  end
end

it "`1F1EE 1F1F7` (fully-qualified) should match `flag: Iran` (🇮🇷)" do
  if m = "🇮🇷".match(Emoji::EMOJI_REGEX)
    "🇮🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇷"
  else
    fail("`1F1EE 1F1F7` doesn't match `flag: Iran` (🇮🇷)")
  end
end

it "`1F1EE 1F1F8` (fully-qualified) should match `flag: Iceland` (🇮🇸)" do
  if m = "🇮🇸".match(Emoji::EMOJI_REGEX)
    "🇮🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇸"
  else
    fail("`1F1EE 1F1F8` doesn't match `flag: Iceland` (🇮🇸)")
  end
end

it "`1F1EE 1F1F9` (fully-qualified) should match `flag: Italy` (🇮🇹)" do
  if m = "🇮🇹".match(Emoji::EMOJI_REGEX)
    "🇮🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇮🇹"
  else
    fail("`1F1EE 1F1F9` doesn't match `flag: Italy` (🇮🇹)")
  end
end

it "`1F1EF 1F1EA` (fully-qualified) should match `flag: Jersey` (🇯🇪)" do
  if m = "🇯🇪".match(Emoji::EMOJI_REGEX)
    "🇯🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇪"
  else
    fail("`1F1EF 1F1EA` doesn't match `flag: Jersey` (🇯🇪)")
  end
end

it "`1F1EF 1F1F2` (fully-qualified) should match `flag: Jamaica` (🇯🇲)" do
  if m = "🇯🇲".match(Emoji::EMOJI_REGEX)
    "🇯🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇲"
  else
    fail("`1F1EF 1F1F2` doesn't match `flag: Jamaica` (🇯🇲)")
  end
end

it "`1F1EF 1F1F4` (fully-qualified) should match `flag: Jordan` (🇯🇴)" do
  if m = "🇯🇴".match(Emoji::EMOJI_REGEX)
    "🇯🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇴"
  else
    fail("`1F1EF 1F1F4` doesn't match `flag: Jordan` (🇯🇴)")
  end
end

it "`1F1EF 1F1F5` (fully-qualified) should match `flag: Japan` (🇯🇵)" do
  if m = "🇯🇵".match(Emoji::EMOJI_REGEX)
    "🇯🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇯🇵"
  else
    fail("`1F1EF 1F1F5` doesn't match `flag: Japan` (🇯🇵)")
  end
end

it "`1F1F0 1F1EA` (fully-qualified) should match `flag: Kenya` (🇰🇪)" do
  if m = "🇰🇪".match(Emoji::EMOJI_REGEX)
    "🇰🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇪"
  else
    fail("`1F1F0 1F1EA` doesn't match `flag: Kenya` (🇰🇪)")
  end
end

it "`1F1F0 1F1EC` (fully-qualified) should match `flag: Kyrgyzstan` (🇰🇬)" do
  if m = "🇰🇬".match(Emoji::EMOJI_REGEX)
    "🇰🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇬"
  else
    fail("`1F1F0 1F1EC` doesn't match `flag: Kyrgyzstan` (🇰🇬)")
  end
end

it "`1F1F0 1F1ED` (fully-qualified) should match `flag: Cambodia` (🇰🇭)" do
  if m = "🇰🇭".match(Emoji::EMOJI_REGEX)
    "🇰🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇭"
  else
    fail("`1F1F0 1F1ED` doesn't match `flag: Cambodia` (🇰🇭)")
  end
end

it "`1F1F0 1F1EE` (fully-qualified) should match `flag: Kiribati` (🇰🇮)" do
  if m = "🇰🇮".match(Emoji::EMOJI_REGEX)
    "🇰🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇮"
  else
    fail("`1F1F0 1F1EE` doesn't match `flag: Kiribati` (🇰🇮)")
  end
end

it "`1F1F0 1F1F2` (fully-qualified) should match `flag: Comoros` (🇰🇲)" do
  if m = "🇰🇲".match(Emoji::EMOJI_REGEX)
    "🇰🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇲"
  else
    fail("`1F1F0 1F1F2` doesn't match `flag: Comoros` (🇰🇲)")
  end
end

it "`1F1F0 1F1F3` (fully-qualified) should match `flag: St. Kitts & Nevis` (🇰🇳)" do
  if m = "🇰🇳".match(Emoji::EMOJI_REGEX)
    "🇰🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇳"
  else
    fail("`1F1F0 1F1F3` doesn't match `flag: St. Kitts & Nevis` (🇰🇳)")
  end
end

it "`1F1F0 1F1F5` (fully-qualified) should match `flag: North Korea` (🇰🇵)" do
  if m = "🇰🇵".match(Emoji::EMOJI_REGEX)
    "🇰🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇵"
  else
    fail("`1F1F0 1F1F5` doesn't match `flag: North Korea` (🇰🇵)")
  end
end

it "`1F1F0 1F1F7` (fully-qualified) should match `flag: South Korea` (🇰🇷)" do
  if m = "🇰🇷".match(Emoji::EMOJI_REGEX)
    "🇰🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇷"
  else
    fail("`1F1F0 1F1F7` doesn't match `flag: South Korea` (🇰🇷)")
  end
end

it "`1F1F0 1F1FC` (fully-qualified) should match `flag: Kuwait` (🇰🇼)" do
  if m = "🇰🇼".match(Emoji::EMOJI_REGEX)
    "🇰🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇼"
  else
    fail("`1F1F0 1F1FC` doesn't match `flag: Kuwait` (🇰🇼)")
  end
end

it "`1F1F0 1F1FE` (fully-qualified) should match `flag: Cayman Islands` (🇰🇾)" do
  if m = "🇰🇾".match(Emoji::EMOJI_REGEX)
    "🇰🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇾"
  else
    fail("`1F1F0 1F1FE` doesn't match `flag: Cayman Islands` (🇰🇾)")
  end
end

it "`1F1F0 1F1FF` (fully-qualified) should match `flag: Kazakhstan` (🇰🇿)" do
  if m = "🇰🇿".match(Emoji::EMOJI_REGEX)
    "🇰🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇰🇿"
  else
    fail("`1F1F0 1F1FF` doesn't match `flag: Kazakhstan` (🇰🇿)")
  end
end

it "`1F1F1 1F1E6` (fully-qualified) should match `flag: Laos` (🇱🇦)" do
  if m = "🇱🇦".match(Emoji::EMOJI_REGEX)
    "🇱🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇦"
  else
    fail("`1F1F1 1F1E6` doesn't match `flag: Laos` (🇱🇦)")
  end
end

it "`1F1F1 1F1E7` (fully-qualified) should match `flag: Lebanon` (🇱🇧)" do
  if m = "🇱🇧".match(Emoji::EMOJI_REGEX)
    "🇱🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇧"
  else
    fail("`1F1F1 1F1E7` doesn't match `flag: Lebanon` (🇱🇧)")
  end
end

it "`1F1F1 1F1E8` (fully-qualified) should match `flag: St. Lucia` (🇱🇨)" do
  if m = "🇱🇨".match(Emoji::EMOJI_REGEX)
    "🇱🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇨"
  else
    fail("`1F1F1 1F1E8` doesn't match `flag: St. Lucia` (🇱🇨)")
  end
end

it "`1F1F1 1F1EE` (fully-qualified) should match `flag: Liechtenstein` (🇱🇮)" do
  if m = "🇱🇮".match(Emoji::EMOJI_REGEX)
    "🇱🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇮"
  else
    fail("`1F1F1 1F1EE` doesn't match `flag: Liechtenstein` (🇱🇮)")
  end
end

it "`1F1F1 1F1F0` (fully-qualified) should match `flag: Sri Lanka` (🇱🇰)" do
  if m = "🇱🇰".match(Emoji::EMOJI_REGEX)
    "🇱🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇰"
  else
    fail("`1F1F1 1F1F0` doesn't match `flag: Sri Lanka` (🇱🇰)")
  end
end

it "`1F1F1 1F1F7` (fully-qualified) should match `flag: Liberia` (🇱🇷)" do
  if m = "🇱🇷".match(Emoji::EMOJI_REGEX)
    "🇱🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇷"
  else
    fail("`1F1F1 1F1F7` doesn't match `flag: Liberia` (🇱🇷)")
  end
end

it "`1F1F1 1F1F8` (fully-qualified) should match `flag: Lesotho` (🇱🇸)" do
  if m = "🇱🇸".match(Emoji::EMOJI_REGEX)
    "🇱🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇸"
  else
    fail("`1F1F1 1F1F8` doesn't match `flag: Lesotho` (🇱🇸)")
  end
end

it "`1F1F1 1F1F9` (fully-qualified) should match `flag: Lithuania` (🇱🇹)" do
  if m = "🇱🇹".match(Emoji::EMOJI_REGEX)
    "🇱🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇹"
  else
    fail("`1F1F1 1F1F9` doesn't match `flag: Lithuania` (🇱🇹)")
  end
end

it "`1F1F1 1F1FA` (fully-qualified) should match `flag: Luxembourg` (🇱🇺)" do
  if m = "🇱🇺".match(Emoji::EMOJI_REGEX)
    "🇱🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇺"
  else
    fail("`1F1F1 1F1FA` doesn't match `flag: Luxembourg` (🇱🇺)")
  end
end

it "`1F1F1 1F1FB` (fully-qualified) should match `flag: Latvia` (🇱🇻)" do
  if m = "🇱🇻".match(Emoji::EMOJI_REGEX)
    "🇱🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇻"
  else
    fail("`1F1F1 1F1FB` doesn't match `flag: Latvia` (🇱🇻)")
  end
end

it "`1F1F1 1F1FE` (fully-qualified) should match `flag: Libya` (🇱🇾)" do
  if m = "🇱🇾".match(Emoji::EMOJI_REGEX)
    "🇱🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇱🇾"
  else
    fail("`1F1F1 1F1FE` doesn't match `flag: Libya` (🇱🇾)")
  end
end

it "`1F1F2 1F1E6` (fully-qualified) should match `flag: Morocco` (🇲🇦)" do
  if m = "🇲🇦".match(Emoji::EMOJI_REGEX)
    "🇲🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇦"
  else
    fail("`1F1F2 1F1E6` doesn't match `flag: Morocco` (🇲🇦)")
  end
end

it "`1F1F2 1F1E8` (fully-qualified) should match `flag: Monaco` (🇲🇨)" do
  if m = "🇲🇨".match(Emoji::EMOJI_REGEX)
    "🇲🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇨"
  else
    fail("`1F1F2 1F1E8` doesn't match `flag: Monaco` (🇲🇨)")
  end
end

it "`1F1F2 1F1E9` (fully-qualified) should match `flag: Moldova` (🇲🇩)" do
  if m = "🇲🇩".match(Emoji::EMOJI_REGEX)
    "🇲🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇩"
  else
    fail("`1F1F2 1F1E9` doesn't match `flag: Moldova` (🇲🇩)")
  end
end

it "`1F1F2 1F1EA` (fully-qualified) should match `flag: Montenegro` (🇲🇪)" do
  if m = "🇲🇪".match(Emoji::EMOJI_REGEX)
    "🇲🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇪"
  else
    fail("`1F1F2 1F1EA` doesn't match `flag: Montenegro` (🇲🇪)")
  end
end

it "`1F1F2 1F1EB` (fully-qualified) should match `flag: St. Martin` (🇲🇫)" do
  if m = "🇲🇫".match(Emoji::EMOJI_REGEX)
    "🇲🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇫"
  else
    fail("`1F1F2 1F1EB` doesn't match `flag: St. Martin` (🇲🇫)")
  end
end

it "`1F1F2 1F1EC` (fully-qualified) should match `flag: Madagascar` (🇲🇬)" do
  if m = "🇲🇬".match(Emoji::EMOJI_REGEX)
    "🇲🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇬"
  else
    fail("`1F1F2 1F1EC` doesn't match `flag: Madagascar` (🇲🇬)")
  end
end

it "`1F1F2 1F1ED` (fully-qualified) should match `flag: Marshall Islands` (🇲🇭)" do
  if m = "🇲🇭".match(Emoji::EMOJI_REGEX)
    "🇲🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇭"
  else
    fail("`1F1F2 1F1ED` doesn't match `flag: Marshall Islands` (🇲🇭)")
  end
end

it "`1F1F2 1F1F0` (fully-qualified) should match `flag: Macedonia` (🇲🇰)" do
  if m = "🇲🇰".match(Emoji::EMOJI_REGEX)
    "🇲🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇰"
  else
    fail("`1F1F2 1F1F0` doesn't match `flag: Macedonia` (🇲🇰)")
  end
end

it "`1F1F2 1F1F1` (fully-qualified) should match `flag: Mali` (🇲🇱)" do
  if m = "🇲🇱".match(Emoji::EMOJI_REGEX)
    "🇲🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇱"
  else
    fail("`1F1F2 1F1F1` doesn't match `flag: Mali` (🇲🇱)")
  end
end

it "`1F1F2 1F1F2` (fully-qualified) should match `flag: Myanmar (Burma)` (🇲🇲)" do
  if m = "🇲🇲".match(Emoji::EMOJI_REGEX)
    "🇲🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇲"
  else
    fail("`1F1F2 1F1F2` doesn't match `flag: Myanmar (Burma)` (🇲🇲)")
  end
end

it "`1F1F2 1F1F3` (fully-qualified) should match `flag: Mongolia` (🇲🇳)" do
  if m = "🇲🇳".match(Emoji::EMOJI_REGEX)
    "🇲🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇳"
  else
    fail("`1F1F2 1F1F3` doesn't match `flag: Mongolia` (🇲🇳)")
  end
end

it "`1F1F2 1F1F4` (fully-qualified) should match `flag: Macao SAR China` (🇲🇴)" do
  if m = "🇲🇴".match(Emoji::EMOJI_REGEX)
    "🇲🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇴"
  else
    fail("`1F1F2 1F1F4` doesn't match `flag: Macao SAR China` (🇲🇴)")
  end
end

it "`1F1F2 1F1F5` (fully-qualified) should match `flag: Northern Mariana Islands` (🇲🇵)" do
  if m = "🇲🇵".match(Emoji::EMOJI_REGEX)
    "🇲🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇵"
  else
    fail("`1F1F2 1F1F5` doesn't match `flag: Northern Mariana Islands` (🇲🇵)")
  end
end

it "`1F1F2 1F1F6` (fully-qualified) should match `flag: Martinique` (🇲🇶)" do
  if m = "🇲🇶".match(Emoji::EMOJI_REGEX)
    "🇲🇶".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇶"
  else
    fail("`1F1F2 1F1F6` doesn't match `flag: Martinique` (🇲🇶)")
  end
end

it "`1F1F2 1F1F7` (fully-qualified) should match `flag: Mauritania` (🇲🇷)" do
  if m = "🇲🇷".match(Emoji::EMOJI_REGEX)
    "🇲🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇷"
  else
    fail("`1F1F2 1F1F7` doesn't match `flag: Mauritania` (🇲🇷)")
  end
end

it "`1F1F2 1F1F8` (fully-qualified) should match `flag: Montserrat` (🇲🇸)" do
  if m = "🇲🇸".match(Emoji::EMOJI_REGEX)
    "🇲🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇸"
  else
    fail("`1F1F2 1F1F8` doesn't match `flag: Montserrat` (🇲🇸)")
  end
end

it "`1F1F2 1F1F9` (fully-qualified) should match `flag: Malta` (🇲🇹)" do
  if m = "🇲🇹".match(Emoji::EMOJI_REGEX)
    "🇲🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇹"
  else
    fail("`1F1F2 1F1F9` doesn't match `flag: Malta` (🇲🇹)")
  end
end

it "`1F1F2 1F1FA` (fully-qualified) should match `flag: Mauritius` (🇲🇺)" do
  if m = "🇲🇺".match(Emoji::EMOJI_REGEX)
    "🇲🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇺"
  else
    fail("`1F1F2 1F1FA` doesn't match `flag: Mauritius` (🇲🇺)")
  end
end

it "`1F1F2 1F1FB` (fully-qualified) should match `flag: Maldives` (🇲🇻)" do
  if m = "🇲🇻".match(Emoji::EMOJI_REGEX)
    "🇲🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇻"
  else
    fail("`1F1F2 1F1FB` doesn't match `flag: Maldives` (🇲🇻)")
  end
end

it "`1F1F2 1F1FC` (fully-qualified) should match `flag: Malawi` (🇲🇼)" do
  if m = "🇲🇼".match(Emoji::EMOJI_REGEX)
    "🇲🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇼"
  else
    fail("`1F1F2 1F1FC` doesn't match `flag: Malawi` (🇲🇼)")
  end
end

it "`1F1F2 1F1FD` (fully-qualified) should match `flag: Mexico` (🇲🇽)" do
  if m = "🇲🇽".match(Emoji::EMOJI_REGEX)
    "🇲🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇽"
  else
    fail("`1F1F2 1F1FD` doesn't match `flag: Mexico` (🇲🇽)")
  end
end

it "`1F1F2 1F1FE` (fully-qualified) should match `flag: Malaysia` (🇲🇾)" do
  if m = "🇲🇾".match(Emoji::EMOJI_REGEX)
    "🇲🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇾"
  else
    fail("`1F1F2 1F1FE` doesn't match `flag: Malaysia` (🇲🇾)")
  end
end

it "`1F1F2 1F1FF` (fully-qualified) should match `flag: Mozambique` (🇲🇿)" do
  if m = "🇲🇿".match(Emoji::EMOJI_REGEX)
    "🇲🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇲🇿"
  else
    fail("`1F1F2 1F1FF` doesn't match `flag: Mozambique` (🇲🇿)")
  end
end

it "`1F1F3 1F1E6` (fully-qualified) should match `flag: Namibia` (🇳🇦)" do
  if m = "🇳🇦".match(Emoji::EMOJI_REGEX)
    "🇳🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇦"
  else
    fail("`1F1F3 1F1E6` doesn't match `flag: Namibia` (🇳🇦)")
  end
end

it "`1F1F3 1F1E8` (fully-qualified) should match `flag: New Caledonia` (🇳🇨)" do
  if m = "🇳🇨".match(Emoji::EMOJI_REGEX)
    "🇳🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇨"
  else
    fail("`1F1F3 1F1E8` doesn't match `flag: New Caledonia` (🇳🇨)")
  end
end

it "`1F1F3 1F1EA` (fully-qualified) should match `flag: Niger` (🇳🇪)" do
  if m = "🇳🇪".match(Emoji::EMOJI_REGEX)
    "🇳🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇪"
  else
    fail("`1F1F3 1F1EA` doesn't match `flag: Niger` (🇳🇪)")
  end
end

it "`1F1F3 1F1EB` (fully-qualified) should match `flag: Norfolk Island` (🇳🇫)" do
  if m = "🇳🇫".match(Emoji::EMOJI_REGEX)
    "🇳🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇫"
  else
    fail("`1F1F3 1F1EB` doesn't match `flag: Norfolk Island` (🇳🇫)")
  end
end

it "`1F1F3 1F1EC` (fully-qualified) should match `flag: Nigeria` (🇳🇬)" do
  if m = "🇳🇬".match(Emoji::EMOJI_REGEX)
    "🇳🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇬"
  else
    fail("`1F1F3 1F1EC` doesn't match `flag: Nigeria` (🇳🇬)")
  end
end

it "`1F1F3 1F1EE` (fully-qualified) should match `flag: Nicaragua` (🇳🇮)" do
  if m = "🇳🇮".match(Emoji::EMOJI_REGEX)
    "🇳🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇮"
  else
    fail("`1F1F3 1F1EE` doesn't match `flag: Nicaragua` (🇳🇮)")
  end
end

it "`1F1F3 1F1F1` (fully-qualified) should match `flag: Netherlands` (🇳🇱)" do
  if m = "🇳🇱".match(Emoji::EMOJI_REGEX)
    "🇳🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇱"
  else
    fail("`1F1F3 1F1F1` doesn't match `flag: Netherlands` (🇳🇱)")
  end
end

it "`1F1F3 1F1F4` (fully-qualified) should match `flag: Norway` (🇳🇴)" do
  if m = "🇳🇴".match(Emoji::EMOJI_REGEX)
    "🇳🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇴"
  else
    fail("`1F1F3 1F1F4` doesn't match `flag: Norway` (🇳🇴)")
  end
end

it "`1F1F3 1F1F5` (fully-qualified) should match `flag: Nepal` (🇳🇵)" do
  if m = "🇳🇵".match(Emoji::EMOJI_REGEX)
    "🇳🇵".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇵"
  else
    fail("`1F1F3 1F1F5` doesn't match `flag: Nepal` (🇳🇵)")
  end
end

it "`1F1F3 1F1F7` (fully-qualified) should match `flag: Nauru` (🇳🇷)" do
  if m = "🇳🇷".match(Emoji::EMOJI_REGEX)
    "🇳🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇷"
  else
    fail("`1F1F3 1F1F7` doesn't match `flag: Nauru` (🇳🇷)")
  end
end

it "`1F1F3 1F1FA` (fully-qualified) should match `flag: Niue` (🇳🇺)" do
  if m = "🇳🇺".match(Emoji::EMOJI_REGEX)
    "🇳🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇺"
  else
    fail("`1F1F3 1F1FA` doesn't match `flag: Niue` (🇳🇺)")
  end
end

it "`1F1F3 1F1FF` (fully-qualified) should match `flag: New Zealand` (🇳🇿)" do
  if m = "🇳🇿".match(Emoji::EMOJI_REGEX)
    "🇳🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇳🇿"
  else
    fail("`1F1F3 1F1FF` doesn't match `flag: New Zealand` (🇳🇿)")
  end
end

it "`1F1F4 1F1F2` (fully-qualified) should match `flag: Oman` (🇴🇲)" do
  if m = "🇴🇲".match(Emoji::EMOJI_REGEX)
    "🇴🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇴🇲"
  else
    fail("`1F1F4 1F1F2` doesn't match `flag: Oman` (🇴🇲)")
  end
end

it "`1F1F5 1F1E6` (fully-qualified) should match `flag: Panama` (🇵🇦)" do
  if m = "🇵🇦".match(Emoji::EMOJI_REGEX)
    "🇵🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇦"
  else
    fail("`1F1F5 1F1E6` doesn't match `flag: Panama` (🇵🇦)")
  end
end

it "`1F1F5 1F1EA` (fully-qualified) should match `flag: Peru` (🇵🇪)" do
  if m = "🇵🇪".match(Emoji::EMOJI_REGEX)
    "🇵🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇪"
  else
    fail("`1F1F5 1F1EA` doesn't match `flag: Peru` (🇵🇪)")
  end
end

it "`1F1F5 1F1EB` (fully-qualified) should match `flag: French Polynesia` (🇵🇫)" do
  if m = "🇵🇫".match(Emoji::EMOJI_REGEX)
    "🇵🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇫"
  else
    fail("`1F1F5 1F1EB` doesn't match `flag: French Polynesia` (🇵🇫)")
  end
end

it "`1F1F5 1F1EC` (fully-qualified) should match `flag: Papua New Guinea` (🇵🇬)" do
  if m = "🇵🇬".match(Emoji::EMOJI_REGEX)
    "🇵🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇬"
  else
    fail("`1F1F5 1F1EC` doesn't match `flag: Papua New Guinea` (🇵🇬)")
  end
end

it "`1F1F5 1F1ED` (fully-qualified) should match `flag: Philippines` (🇵🇭)" do
  if m = "🇵🇭".match(Emoji::EMOJI_REGEX)
    "🇵🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇭"
  else
    fail("`1F1F5 1F1ED` doesn't match `flag: Philippines` (🇵🇭)")
  end
end

it "`1F1F5 1F1F0` (fully-qualified) should match `flag: Pakistan` (🇵🇰)" do
  if m = "🇵🇰".match(Emoji::EMOJI_REGEX)
    "🇵🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇰"
  else
    fail("`1F1F5 1F1F0` doesn't match `flag: Pakistan` (🇵🇰)")
  end
end

it "`1F1F5 1F1F1` (fully-qualified) should match `flag: Poland` (🇵🇱)" do
  if m = "🇵🇱".match(Emoji::EMOJI_REGEX)
    "🇵🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇱"
  else
    fail("`1F1F5 1F1F1` doesn't match `flag: Poland` (🇵🇱)")
  end
end

it "`1F1F5 1F1F2` (fully-qualified) should match `flag: St. Pierre & Miquelon` (🇵🇲)" do
  if m = "🇵🇲".match(Emoji::EMOJI_REGEX)
    "🇵🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇲"
  else
    fail("`1F1F5 1F1F2` doesn't match `flag: St. Pierre & Miquelon` (🇵🇲)")
  end
end

it "`1F1F5 1F1F3` (fully-qualified) should match `flag: Pitcairn Islands` (🇵🇳)" do
  if m = "🇵🇳".match(Emoji::EMOJI_REGEX)
    "🇵🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇳"
  else
    fail("`1F1F5 1F1F3` doesn't match `flag: Pitcairn Islands` (🇵🇳)")
  end
end

it "`1F1F5 1F1F7` (fully-qualified) should match `flag: Puerto Rico` (🇵🇷)" do
  if m = "🇵🇷".match(Emoji::EMOJI_REGEX)
    "🇵🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇷"
  else
    fail("`1F1F5 1F1F7` doesn't match `flag: Puerto Rico` (🇵🇷)")
  end
end

it "`1F1F5 1F1F8` (fully-qualified) should match `flag: Palestinian Territories` (🇵🇸)" do
  if m = "🇵🇸".match(Emoji::EMOJI_REGEX)
    "🇵🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇸"
  else
    fail("`1F1F5 1F1F8` doesn't match `flag: Palestinian Territories` (🇵🇸)")
  end
end

it "`1F1F5 1F1F9` (fully-qualified) should match `flag: Portugal` (🇵🇹)" do
  if m = "🇵🇹".match(Emoji::EMOJI_REGEX)
    "🇵🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇹"
  else
    fail("`1F1F5 1F1F9` doesn't match `flag: Portugal` (🇵🇹)")
  end
end

it "`1F1F5 1F1FC` (fully-qualified) should match `flag: Palau` (🇵🇼)" do
  if m = "🇵🇼".match(Emoji::EMOJI_REGEX)
    "🇵🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇼"
  else
    fail("`1F1F5 1F1FC` doesn't match `flag: Palau` (🇵🇼)")
  end
end

it "`1F1F5 1F1FE` (fully-qualified) should match `flag: Paraguay` (🇵🇾)" do
  if m = "🇵🇾".match(Emoji::EMOJI_REGEX)
    "🇵🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇵🇾"
  else
    fail("`1F1F5 1F1FE` doesn't match `flag: Paraguay` (🇵🇾)")
  end
end

it "`1F1F6 1F1E6` (fully-qualified) should match `flag: Qatar` (🇶🇦)" do
  if m = "🇶🇦".match(Emoji::EMOJI_REGEX)
    "🇶🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇶🇦"
  else
    fail("`1F1F6 1F1E6` doesn't match `flag: Qatar` (🇶🇦)")
  end
end

it "`1F1F7 1F1EA` (fully-qualified) should match `flag: Réunion` (🇷🇪)" do
  if m = "🇷🇪".match(Emoji::EMOJI_REGEX)
    "🇷🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇪"
  else
    fail("`1F1F7 1F1EA` doesn't match `flag: Réunion` (🇷🇪)")
  end
end

it "`1F1F7 1F1F4` (fully-qualified) should match `flag: Romania` (🇷🇴)" do
  if m = "🇷🇴".match(Emoji::EMOJI_REGEX)
    "🇷🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇴"
  else
    fail("`1F1F7 1F1F4` doesn't match `flag: Romania` (🇷🇴)")
  end
end

it "`1F1F7 1F1F8` (fully-qualified) should match `flag: Serbia` (🇷🇸)" do
  if m = "🇷🇸".match(Emoji::EMOJI_REGEX)
    "🇷🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇸"
  else
    fail("`1F1F7 1F1F8` doesn't match `flag: Serbia` (🇷🇸)")
  end
end

it "`1F1F7 1F1FA` (fully-qualified) should match `flag: Russia` (🇷🇺)" do
  if m = "🇷🇺".match(Emoji::EMOJI_REGEX)
    "🇷🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇺"
  else
    fail("`1F1F7 1F1FA` doesn't match `flag: Russia` (🇷🇺)")
  end
end

it "`1F1F7 1F1FC` (fully-qualified) should match `flag: Rwanda` (🇷🇼)" do
  if m = "🇷🇼".match(Emoji::EMOJI_REGEX)
    "🇷🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇷🇼"
  else
    fail("`1F1F7 1F1FC` doesn't match `flag: Rwanda` (🇷🇼)")
  end
end

it "`1F1F8 1F1E6` (fully-qualified) should match `flag: Saudi Arabia` (🇸🇦)" do
  if m = "🇸🇦".match(Emoji::EMOJI_REGEX)
    "🇸🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇦"
  else
    fail("`1F1F8 1F1E6` doesn't match `flag: Saudi Arabia` (🇸🇦)")
  end
end

it "`1F1F8 1F1E7` (fully-qualified) should match `flag: Solomon Islands` (🇸🇧)" do
  if m = "🇸🇧".match(Emoji::EMOJI_REGEX)
    "🇸🇧".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇧"
  else
    fail("`1F1F8 1F1E7` doesn't match `flag: Solomon Islands` (🇸🇧)")
  end
end

it "`1F1F8 1F1E8` (fully-qualified) should match `flag: Seychelles` (🇸🇨)" do
  if m = "🇸🇨".match(Emoji::EMOJI_REGEX)
    "🇸🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇨"
  else
    fail("`1F1F8 1F1E8` doesn't match `flag: Seychelles` (🇸🇨)")
  end
end

it "`1F1F8 1F1E9` (fully-qualified) should match `flag: Sudan` (🇸🇩)" do
  if m = "🇸🇩".match(Emoji::EMOJI_REGEX)
    "🇸🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇩"
  else
    fail("`1F1F8 1F1E9` doesn't match `flag: Sudan` (🇸🇩)")
  end
end

it "`1F1F8 1F1EA` (fully-qualified) should match `flag: Sweden` (🇸🇪)" do
  if m = "🇸🇪".match(Emoji::EMOJI_REGEX)
    "🇸🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇪"
  else
    fail("`1F1F8 1F1EA` doesn't match `flag: Sweden` (🇸🇪)")
  end
end

it "`1F1F8 1F1EC` (fully-qualified) should match `flag: Singapore` (🇸🇬)" do
  if m = "🇸🇬".match(Emoji::EMOJI_REGEX)
    "🇸🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇬"
  else
    fail("`1F1F8 1F1EC` doesn't match `flag: Singapore` (🇸🇬)")
  end
end

it "`1F1F8 1F1ED` (fully-qualified) should match `flag: St. Helena` (🇸🇭)" do
  if m = "🇸🇭".match(Emoji::EMOJI_REGEX)
    "🇸🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇭"
  else
    fail("`1F1F8 1F1ED` doesn't match `flag: St. Helena` (🇸🇭)")
  end
end

it "`1F1F8 1F1EE` (fully-qualified) should match `flag: Slovenia` (🇸🇮)" do
  if m = "🇸🇮".match(Emoji::EMOJI_REGEX)
    "🇸🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇮"
  else
    fail("`1F1F8 1F1EE` doesn't match `flag: Slovenia` (🇸🇮)")
  end
end

it "`1F1F8 1F1EF` (fully-qualified) should match `flag: Svalbard & Jan Mayen` (🇸🇯)" do
  if m = "🇸🇯".match(Emoji::EMOJI_REGEX)
    "🇸🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇯"
  else
    fail("`1F1F8 1F1EF` doesn't match `flag: Svalbard & Jan Mayen` (🇸🇯)")
  end
end

it "`1F1F8 1F1F0` (fully-qualified) should match `flag: Slovakia` (🇸🇰)" do
  if m = "🇸🇰".match(Emoji::EMOJI_REGEX)
    "🇸🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇰"
  else
    fail("`1F1F8 1F1F0` doesn't match `flag: Slovakia` (🇸🇰)")
  end
end

it "`1F1F8 1F1F1` (fully-qualified) should match `flag: Sierra Leone` (🇸🇱)" do
  if m = "🇸🇱".match(Emoji::EMOJI_REGEX)
    "🇸🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇱"
  else
    fail("`1F1F8 1F1F1` doesn't match `flag: Sierra Leone` (🇸🇱)")
  end
end

it "`1F1F8 1F1F2` (fully-qualified) should match `flag: San Marino` (🇸🇲)" do
  if m = "🇸🇲".match(Emoji::EMOJI_REGEX)
    "🇸🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇲"
  else
    fail("`1F1F8 1F1F2` doesn't match `flag: San Marino` (🇸🇲)")
  end
end

it "`1F1F8 1F1F3` (fully-qualified) should match `flag: Senegal` (🇸🇳)" do
  if m = "🇸🇳".match(Emoji::EMOJI_REGEX)
    "🇸🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇳"
  else
    fail("`1F1F8 1F1F3` doesn't match `flag: Senegal` (🇸🇳)")
  end
end

it "`1F1F8 1F1F4` (fully-qualified) should match `flag: Somalia` (🇸🇴)" do
  if m = "🇸🇴".match(Emoji::EMOJI_REGEX)
    "🇸🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇴"
  else
    fail("`1F1F8 1F1F4` doesn't match `flag: Somalia` (🇸🇴)")
  end
end

it "`1F1F8 1F1F7` (fully-qualified) should match `flag: Suriname` (🇸🇷)" do
  if m = "🇸🇷".match(Emoji::EMOJI_REGEX)
    "🇸🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇷"
  else
    fail("`1F1F8 1F1F7` doesn't match `flag: Suriname` (🇸🇷)")
  end
end

it "`1F1F8 1F1F8` (fully-qualified) should match `flag: South Sudan` (🇸🇸)" do
  if m = "🇸🇸".match(Emoji::EMOJI_REGEX)
    "🇸🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇸"
  else
    fail("`1F1F8 1F1F8` doesn't match `flag: South Sudan` (🇸🇸)")
  end
end

it "`1F1F8 1F1F9` (fully-qualified) should match `flag: São Tomé & Príncipe` (🇸🇹)" do
  if m = "🇸🇹".match(Emoji::EMOJI_REGEX)
    "🇸🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇹"
  else
    fail("`1F1F8 1F1F9` doesn't match `flag: São Tomé & Príncipe` (🇸🇹)")
  end
end

it "`1F1F8 1F1FB` (fully-qualified) should match `flag: El Salvador` (🇸🇻)" do
  if m = "🇸🇻".match(Emoji::EMOJI_REGEX)
    "🇸🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇻"
  else
    fail("`1F1F8 1F1FB` doesn't match `flag: El Salvador` (🇸🇻)")
  end
end

it "`1F1F8 1F1FD` (fully-qualified) should match `flag: Sint Maarten` (🇸🇽)" do
  if m = "🇸🇽".match(Emoji::EMOJI_REGEX)
    "🇸🇽".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇽"
  else
    fail("`1F1F8 1F1FD` doesn't match `flag: Sint Maarten` (🇸🇽)")
  end
end

it "`1F1F8 1F1FE` (fully-qualified) should match `flag: Syria` (🇸🇾)" do
  if m = "🇸🇾".match(Emoji::EMOJI_REGEX)
    "🇸🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇾"
  else
    fail("`1F1F8 1F1FE` doesn't match `flag: Syria` (🇸🇾)")
  end
end

it "`1F1F8 1F1FF` (fully-qualified) should match `flag: Eswatini` (🇸🇿)" do
  if m = "🇸🇿".match(Emoji::EMOJI_REGEX)
    "🇸🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇸🇿"
  else
    fail("`1F1F8 1F1FF` doesn't match `flag: Eswatini` (🇸🇿)")
  end
end

it "`1F1F9 1F1E6` (fully-qualified) should match `flag: Tristan da Cunha` (🇹🇦)" do
  if m = "🇹🇦".match(Emoji::EMOJI_REGEX)
    "🇹🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇦"
  else
    fail("`1F1F9 1F1E6` doesn't match `flag: Tristan da Cunha` (🇹🇦)")
  end
end

it "`1F1F9 1F1E8` (fully-qualified) should match `flag: Turks & Caicos Islands` (🇹🇨)" do
  if m = "🇹🇨".match(Emoji::EMOJI_REGEX)
    "🇹🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇨"
  else
    fail("`1F1F9 1F1E8` doesn't match `flag: Turks & Caicos Islands` (🇹🇨)")
  end
end

it "`1F1F9 1F1E9` (fully-qualified) should match `flag: Chad` (🇹🇩)" do
  if m = "🇹🇩".match(Emoji::EMOJI_REGEX)
    "🇹🇩".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇩"
  else
    fail("`1F1F9 1F1E9` doesn't match `flag: Chad` (🇹🇩)")
  end
end

it "`1F1F9 1F1EB` (fully-qualified) should match `flag: French Southern Territories` (🇹🇫)" do
  if m = "🇹🇫".match(Emoji::EMOJI_REGEX)
    "🇹🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇫"
  else
    fail("`1F1F9 1F1EB` doesn't match `flag: French Southern Territories` (🇹🇫)")
  end
end

it "`1F1F9 1F1EC` (fully-qualified) should match `flag: Togo` (🇹🇬)" do
  if m = "🇹🇬".match(Emoji::EMOJI_REGEX)
    "🇹🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇬"
  else
    fail("`1F1F9 1F1EC` doesn't match `flag: Togo` (🇹🇬)")
  end
end

it "`1F1F9 1F1ED` (fully-qualified) should match `flag: Thailand` (🇹🇭)" do
  if m = "🇹🇭".match(Emoji::EMOJI_REGEX)
    "🇹🇭".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇭"
  else
    fail("`1F1F9 1F1ED` doesn't match `flag: Thailand` (🇹🇭)")
  end
end

it "`1F1F9 1F1EF` (fully-qualified) should match `flag: Tajikistan` (🇹🇯)" do
  if m = "🇹🇯".match(Emoji::EMOJI_REGEX)
    "🇹🇯".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇯"
  else
    fail("`1F1F9 1F1EF` doesn't match `flag: Tajikistan` (🇹🇯)")
  end
end

it "`1F1F9 1F1F0` (fully-qualified) should match `flag: Tokelau` (🇹🇰)" do
  if m = "🇹🇰".match(Emoji::EMOJI_REGEX)
    "🇹🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇰"
  else
    fail("`1F1F9 1F1F0` doesn't match `flag: Tokelau` (🇹🇰)")
  end
end

it "`1F1F9 1F1F1` (fully-qualified) should match `flag: Timor-Leste` (🇹🇱)" do
  if m = "🇹🇱".match(Emoji::EMOJI_REGEX)
    "🇹🇱".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇱"
  else
    fail("`1F1F9 1F1F1` doesn't match `flag: Timor-Leste` (🇹🇱)")
  end
end

it "`1F1F9 1F1F2` (fully-qualified) should match `flag: Turkmenistan` (🇹🇲)" do
  if m = "🇹🇲".match(Emoji::EMOJI_REGEX)
    "🇹🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇲"
  else
    fail("`1F1F9 1F1F2` doesn't match `flag: Turkmenistan` (🇹🇲)")
  end
end

it "`1F1F9 1F1F3` (fully-qualified) should match `flag: Tunisia` (🇹🇳)" do
  if m = "🇹🇳".match(Emoji::EMOJI_REGEX)
    "🇹🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇳"
  else
    fail("`1F1F9 1F1F3` doesn't match `flag: Tunisia` (🇹🇳)")
  end
end

it "`1F1F9 1F1F4` (fully-qualified) should match `flag: Tonga` (🇹🇴)" do
  if m = "🇹🇴".match(Emoji::EMOJI_REGEX)
    "🇹🇴".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇴"
  else
    fail("`1F1F9 1F1F4` doesn't match `flag: Tonga` (🇹🇴)")
  end
end

it "`1F1F9 1F1F7` (fully-qualified) should match `flag: Turkey` (🇹🇷)" do
  if m = "🇹🇷".match(Emoji::EMOJI_REGEX)
    "🇹🇷".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇷"
  else
    fail("`1F1F9 1F1F7` doesn't match `flag: Turkey` (🇹🇷)")
  end
end

it "`1F1F9 1F1F9` (fully-qualified) should match `flag: Trinidad & Tobago` (🇹🇹)" do
  if m = "🇹🇹".match(Emoji::EMOJI_REGEX)
    "🇹🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇹"
  else
    fail("`1F1F9 1F1F9` doesn't match `flag: Trinidad & Tobago` (🇹🇹)")
  end
end

it "`1F1F9 1F1FB` (fully-qualified) should match `flag: Tuvalu` (🇹🇻)" do
  if m = "🇹🇻".match(Emoji::EMOJI_REGEX)
    "🇹🇻".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇻"
  else
    fail("`1F1F9 1F1FB` doesn't match `flag: Tuvalu` (🇹🇻)")
  end
end

it "`1F1F9 1F1FC` (fully-qualified) should match `flag: Taiwan` (🇹🇼)" do
  if m = "🇹🇼".match(Emoji::EMOJI_REGEX)
    "🇹🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇼"
  else
    fail("`1F1F9 1F1FC` doesn't match `flag: Taiwan` (🇹🇼)")
  end
end

it "`1F1F9 1F1FF` (fully-qualified) should match `flag: Tanzania` (🇹🇿)" do
  if m = "🇹🇿".match(Emoji::EMOJI_REGEX)
    "🇹🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇹🇿"
  else
    fail("`1F1F9 1F1FF` doesn't match `flag: Tanzania` (🇹🇿)")
  end
end

it "`1F1FA 1F1E6` (fully-qualified) should match `flag: Ukraine` (🇺🇦)" do
  if m = "🇺🇦".match(Emoji::EMOJI_REGEX)
    "🇺🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇦"
  else
    fail("`1F1FA 1F1E6` doesn't match `flag: Ukraine` (🇺🇦)")
  end
end

it "`1F1FA 1F1EC` (fully-qualified) should match `flag: Uganda` (🇺🇬)" do
  if m = "🇺🇬".match(Emoji::EMOJI_REGEX)
    "🇺🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇬"
  else
    fail("`1F1FA 1F1EC` doesn't match `flag: Uganda` (🇺🇬)")
  end
end

it "`1F1FA 1F1F2` (fully-qualified) should match `flag: U.S. Outlying Islands` (🇺🇲)" do
  if m = "🇺🇲".match(Emoji::EMOJI_REGEX)
    "🇺🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇲"
  else
    fail("`1F1FA 1F1F2` doesn't match `flag: U.S. Outlying Islands` (🇺🇲)")
  end
end

it "`1F1FA 1F1F3` (fully-qualified) should match `flag: United Nations` (🇺🇳)" do
  if m = "🇺🇳".match(Emoji::EMOJI_REGEX)
    "🇺🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇳"
  else
    fail("`1F1FA 1F1F3` doesn't match `flag: United Nations` (🇺🇳)")
  end
end

it "`1F1FA 1F1F8` (fully-qualified) should match `flag: United States` (🇺🇸)" do
  if m = "🇺🇸".match(Emoji::EMOJI_REGEX)
    "🇺🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇸"
  else
    fail("`1F1FA 1F1F8` doesn't match `flag: United States` (🇺🇸)")
  end
end

it "`1F1FA 1F1FE` (fully-qualified) should match `flag: Uruguay` (🇺🇾)" do
  if m = "🇺🇾".match(Emoji::EMOJI_REGEX)
    "🇺🇾".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇾"
  else
    fail("`1F1FA 1F1FE` doesn't match `flag: Uruguay` (🇺🇾)")
  end
end

it "`1F1FA 1F1FF` (fully-qualified) should match `flag: Uzbekistan` (🇺🇿)" do
  if m = "🇺🇿".match(Emoji::EMOJI_REGEX)
    "🇺🇿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇺🇿"
  else
    fail("`1F1FA 1F1FF` doesn't match `flag: Uzbekistan` (🇺🇿)")
  end
end

it "`1F1FB 1F1E6` (fully-qualified) should match `flag: Vatican City` (🇻🇦)" do
  if m = "🇻🇦".match(Emoji::EMOJI_REGEX)
    "🇻🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇦"
  else
    fail("`1F1FB 1F1E6` doesn't match `flag: Vatican City` (🇻🇦)")
  end
end

it "`1F1FB 1F1E8` (fully-qualified) should match `flag: St. Vincent & Grenadines` (🇻🇨)" do
  if m = "🇻🇨".match(Emoji::EMOJI_REGEX)
    "🇻🇨".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇨"
  else
    fail("`1F1FB 1F1E8` doesn't match `flag: St. Vincent & Grenadines` (🇻🇨)")
  end
end

it "`1F1FB 1F1EA` (fully-qualified) should match `flag: Venezuela` (🇻🇪)" do
  if m = "🇻🇪".match(Emoji::EMOJI_REGEX)
    "🇻🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇪"
  else
    fail("`1F1FB 1F1EA` doesn't match `flag: Venezuela` (🇻🇪)")
  end
end

it "`1F1FB 1F1EC` (fully-qualified) should match `flag: British Virgin Islands` (🇻🇬)" do
  if m = "🇻🇬".match(Emoji::EMOJI_REGEX)
    "🇻🇬".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇬"
  else
    fail("`1F1FB 1F1EC` doesn't match `flag: British Virgin Islands` (🇻🇬)")
  end
end

it "`1F1FB 1F1EE` (fully-qualified) should match `flag: U.S. Virgin Islands` (🇻🇮)" do
  if m = "🇻🇮".match(Emoji::EMOJI_REGEX)
    "🇻🇮".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇮"
  else
    fail("`1F1FB 1F1EE` doesn't match `flag: U.S. Virgin Islands` (🇻🇮)")
  end
end

it "`1F1FB 1F1F3` (fully-qualified) should match `flag: Vietnam` (🇻🇳)" do
  if m = "🇻🇳".match(Emoji::EMOJI_REGEX)
    "🇻🇳".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇳"
  else
    fail("`1F1FB 1F1F3` doesn't match `flag: Vietnam` (🇻🇳)")
  end
end

it "`1F1FB 1F1FA` (fully-qualified) should match `flag: Vanuatu` (🇻🇺)" do
  if m = "🇻🇺".match(Emoji::EMOJI_REGEX)
    "🇻🇺".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇻🇺"
  else
    fail("`1F1FB 1F1FA` doesn't match `flag: Vanuatu` (🇻🇺)")
  end
end

it "`1F1FC 1F1EB` (fully-qualified) should match `flag: Wallis & Futuna` (🇼🇫)" do
  if m = "🇼🇫".match(Emoji::EMOJI_REGEX)
    "🇼🇫".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇼🇫"
  else
    fail("`1F1FC 1F1EB` doesn't match `flag: Wallis & Futuna` (🇼🇫)")
  end
end

it "`1F1FC 1F1F8` (fully-qualified) should match `flag: Samoa` (🇼🇸)" do
  if m = "🇼🇸".match(Emoji::EMOJI_REGEX)
    "🇼🇸".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇼🇸"
  else
    fail("`1F1FC 1F1F8` doesn't match `flag: Samoa` (🇼🇸)")
  end
end

it "`1F1FD 1F1F0` (fully-qualified) should match `flag: Kosovo` (🇽🇰)" do
  if m = "🇽🇰".match(Emoji::EMOJI_REGEX)
    "🇽🇰".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇽🇰"
  else
    fail("`1F1FD 1F1F0` doesn't match `flag: Kosovo` (🇽🇰)")
  end
end

it "`1F1FE 1F1EA` (fully-qualified) should match `flag: Yemen` (🇾🇪)" do
  if m = "🇾🇪".match(Emoji::EMOJI_REGEX)
    "🇾🇪".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇾🇪"
  else
    fail("`1F1FE 1F1EA` doesn't match `flag: Yemen` (🇾🇪)")
  end
end

it "`1F1FE 1F1F9` (fully-qualified) should match `flag: Mayotte` (🇾🇹)" do
  if m = "🇾🇹".match(Emoji::EMOJI_REGEX)
    "🇾🇹".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇾🇹"
  else
    fail("`1F1FE 1F1F9` doesn't match `flag: Mayotte` (🇾🇹)")
  end
end

it "`1F1FF 1F1E6` (fully-qualified) should match `flag: South Africa` (🇿🇦)" do
  if m = "🇿🇦".match(Emoji::EMOJI_REGEX)
    "🇿🇦".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇿🇦"
  else
    fail("`1F1FF 1F1E6` doesn't match `flag: South Africa` (🇿🇦)")
  end
end

it "`1F1FF 1F1F2` (fully-qualified) should match `flag: Zambia` (🇿🇲)" do
  if m = "🇿🇲".match(Emoji::EMOJI_REGEX)
    "🇿🇲".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇿🇲"
  else
    fail("`1F1FF 1F1F2` doesn't match `flag: Zambia` (🇿🇲)")
  end
end

it "`1F1FF 1F1FC` (fully-qualified) should match `flag: Zimbabwe` (🇿🇼)" do
  if m = "🇿🇼".match(Emoji::EMOJI_REGEX)
    "🇿🇼".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🇿🇼"
  else
    fail("`1F1FF 1F1FC` doesn't match `flag: Zimbabwe` (🇿🇼)")
  end
end

it "`1F3F4 E0067 E0062 E0065 E006E E0067 E007F` (fully-qualified) should match `flag: England` (🏴󠁧󠁢󠁥󠁮󠁧󠁿)" do
  if m = "🏴󠁧󠁢󠁥󠁮󠁧󠁿".match(Emoji::EMOJI_REGEX)
    "🏴󠁧󠁢󠁥󠁮󠁧󠁿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴󠁧󠁢󠁥󠁮󠁧󠁿"
  else
    fail("`1F3F4 E0067 E0062 E0065 E006E E0067 E007F` doesn't match `flag: England` (🏴󠁧󠁢󠁥󠁮󠁧󠁿)")
  end
end

it "`1F3F4 E0067 E0062 E0073 E0063 E0074 E007F` (fully-qualified) should match `flag: Scotland` (🏴󠁧󠁢󠁳󠁣󠁴󠁿)" do
  if m = "🏴󠁧󠁢󠁳󠁣󠁴󠁿".match(Emoji::EMOJI_REGEX)
    "🏴󠁧󠁢󠁳󠁣󠁴󠁿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴󠁧󠁢󠁳󠁣󠁴󠁿"
  else
    fail("`1F3F4 E0067 E0062 E0073 E0063 E0074 E007F` doesn't match `flag: Scotland` (🏴󠁧󠁢󠁳󠁣󠁴󠁿)")
  end
end

it "`1F3F4 E0067 E0062 E0077 E006C E0073 E007F` (fully-qualified) should match `flag: Wales` (🏴󠁧󠁢󠁷󠁬󠁳󠁿)" do
  if m = "🏴󠁧󠁢󠁷󠁬󠁳󠁿".match(Emoji::EMOJI_REGEX)
    "🏴󠁧󠁢󠁷󠁬󠁳󠁿".match(Emoji::EMOJI_REGEX).try(&.[0]).should eq "🏴󠁧󠁢󠁷󠁬󠁳󠁿"
  else
    fail("`1F3F4 E0067 E0062 E0077 E006C E0073 E007F` doesn't match `flag: Wales` (🏴󠁧󠁢󠁷󠁬󠁳󠁿)")
  end
end
